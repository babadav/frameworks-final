"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"==("undefined"==typeof module?"undefined":_typeof(module))&&"object"==_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(e,t){function n(e,t){var n=(t=t||ne).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=ge.type(e);return"function"!==n&&!ge.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return ge.isFunction(t)?ge.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?ge.grep(e,function(e){return e===t!==n}):"string"!=typeof t?ge.grep(e,function(e){return se.call(t,e)>-1!==n}):ke.test(t)?ge.filter(t,e,n):(t=ge.filter(t,e),ge.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return ge.each(e.match(je)||[],function(e,n){t[n]=!0}),t}function u(e){return e}function l(e){throw e}function c(e,t,n,i){var r;try{e&&ge.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&ge.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function f(){ne.removeEventListener("DOMContentLoaded",f),e.removeEventListener("load",f),ge.ready()}function d(){this.expando=ge.expando+d.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ze.test(e)?JSON.parse(e):e)}function h(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(He,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=p(n)}catch(e){}Le.set(e,t,n)}else n=void 0;return n}function g(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return ge.css(e,t,"")},u=s(),l=n&&n[3]||(ge.cssNumber[t]?"":"px"),c=(ge.cssNumber[t]||"px"!==l&&+u)&&Re.exec(ge.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do{c/=o=o||".5",ge.style(e,t,c+l)}while(o!==(o=s()/u)&&1!==o&&--a)}return n&&(c=+c||+u||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=l,i.start=c,i.end=r)),r}function m(e){var t,n=e.ownerDocument,i=e.nodeName,r=Be[i];return r||(t=n.body.appendChild(n.createElement(i)),r=ge.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),Be[i]=r,r)}function v(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=_e.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&Ie(i)&&(r[o]=m(i))):"none"!==n&&(r[o]="none",_e.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?ge.merge([e],n):n}function b(e,t){for(var n=0,i=e.length;n<i;n++)_e.set(e[n],"globalEval",!t||_e.get(t[n],"globalEval"))}function w(e,t,n,i,r){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===ge.type(o))ge.merge(d,o.nodeType?[o]:o);else if(Qe.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(Ue.exec(o)||["",""])[1].toLowerCase(),u=Ke[s]||Ke._default,a.innerHTML=u[1]+ge.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;ge.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(i&&ge.inArray(o,i)>-1)r&&r.push(o);else if(l=ge.contains(o.ownerDocument,o),a=y(f.appendChild(o),"script"),l&&b(a),n)for(c=0;o=a[c++];)Ye.test(o.type||"")&&n.push(o);return f}function x(){return!0}function T(){return!1}function C(){try{return ne.activeElement}catch(e){}}function S(e,t,n,i,r,o){var a,s;if("object"==(void 0===t?"undefined":_typeof(t))){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)S(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=T;else if(!r)return e;return 1===o&&(a=r,r=function(e){return ge().off(e),a.apply(this,arguments)},r.guid=a.guid||(a.guid=ge.guid++)),e.each(function(){ge.event.add(this,t,r,i,n)})}function k(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?ge(">tbody",e)[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function A(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function D(e,t){var n,i,r,o,a,s,u,l;if(1===t.nodeType){if(_e.hasData(e)&&(o=_e.access(e),a=_e.set(t,o),l=o.events)){delete a.handle,a.events={};for(r in l)for(n=0,i=l[r].length;n<i;n++)ge.event.add(t,r,l[r][n])}Le.hasData(e)&&(s=Le.access(e),u=ge.extend({},s),Le.set(t,u))}}function F(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Xe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function j(e,t,i,r){t=oe.apply([],t);var o,a,s,u,l,c,f=0,d=e.length,p=d-1,h=t[0],g=ge.isFunction(h);if(g||d>1&&"string"==typeof h&&!pe.checkClone&&nt.test(h))return e.each(function(n){var o=e.eq(n);g&&(t[0]=h.call(this,n,o.html())),j(o,t,i,r)});if(d&&(o=w(t,e[0].ownerDocument,!1,e,r),a=o.firstChild,1===o.childNodes.length&&(o=a),a||r)){for(u=(s=ge.map(y(o,"script"),E)).length;f<d;f++)l=o,f!==p&&(l=ge.clone(l,!0,!0),u&&ge.merge(s,y(l,"script"))),i.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,ge.map(s,A),f=0;f<u;f++)l=s[f],Ye.test(l.type||"")&&!_e.access(l,"globalEval")&&ge.contains(c,l)&&(l.src?ge._evalUrl&&ge._evalUrl(l.src):n(l.textContent.replace(rt,""),c))}return e}function $(e,t,n){for(var i,r=t?ge.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||ge.cleanData(y(i)),i.parentNode&&(n&&ge.contains(i.ownerDocument,i)&&b(y(i,"script")),i.parentNode.removeChild(i));return e}function N(e,t,n){var i,r,o,a,s=e.style;return(n=n||st(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ge.contains(e.ownerDocument,e)||(a=ge.style(e,t)),!pe.pixelMarginRight()&&at.test(a)&&ot.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function q(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function O(e){if(e in pt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in pt)return e}function _(e){var t=ge.cssProps[e];return t||(t=ge.cssProps[e]=O(e)||e),t}function L(e,t,n){var i=Re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function z(e,t,n,i,r){var o,a=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=ge.css(e,n+Me[o],!0,r)),i?("content"===n&&(a-=ge.css(e,"padding"+Me[o],!0,r)),"margin"!==n&&(a-=ge.css(e,"border"+Me[o]+"Width",!0,r))):(a+=ge.css(e,"padding"+Me[o],!0,r),"padding"!==n&&(a+=ge.css(e,"border"+Me[o]+"Width",!0,r)));return a}function H(e,t,n){var i,r=st(e),o=N(e,t,r),a="border-box"===ge.css(e,"boxSizing",!1,r);return at.test(o)?o:(i=a&&(pe.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+z(e,t,n||(a?"border":"content"),i,r)+"px")}function P(e,t,n,i,r){return new P.prototype.init(e,t,n,i,r)}function R(){gt&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(R):e.setTimeout(R,ge.fx.interval),ge.fx.tick())}function M(){return e.setTimeout(function(){ht=void 0}),ht=ge.now()}function I(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=Me[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function W(e,t,n){for(var i,r=(U.tweeners[t]||[]).concat(U.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function B(e,t,n){var i,r,o,a,s,u,l,c,f="width"in t||"height"in t,d=this,p={},h=e.style,g=e.nodeType&&Ie(e),m=_e.get(e,"fxshow");n.queue||(null==(a=ge._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,ge.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(r=t[i],mt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||ge.style(e,i)}if((u=!ge.isEmptyObject(t))||!ge.isEmptyObject(p)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=m&&m.display)&&(l=_e.get(e,"display")),"none"===(c=ge.css(e,"display"))&&(l?c=l:(v([e],!0),l=e.style.display||l,c=ge.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===ge.css(e,"float")&&(u||(d.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(i in p)u||(m?"hidden"in m&&(g=m.hidden):m=_e.access(e,"fxshow",{display:l}),o&&(m.hidden=!g),g&&v([e],!0),d.done(function(){g||v([e]),_e.remove(e,"fxshow");for(i in p)ge.style(e,i,p[i])})),u=W(g?m[i]:0,i,d),i in m||(m[i]=u.start,g&&(u.end=u.start,u.start=0))}}function X(e,t){var n,i,r,o,a;for(n in e)if(i=ge.camelCase(n),r=t[i],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=ge.cssHooks[i])&&"expand"in a){o=a.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function U(e,t,n){var i,r,o=0,a=U.prefilters.length,s=ge.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var t=ht||M(),n=Math.max(0,l.startTime+l.duration-t),i=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(i);return s.notifyWith(e,[l,i,n]),i<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:ge.extend({},t),opts:ge.extend(!0,{specialEasing:{},easing:ge.easing._default},n),originalProperties:t,originalOptions:n,startTime:ht||M(),duration:n.duration,tweens:[],createTween:function(t,n){var i=ge.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(i),i},stop:function(t){var n=0,i=t?l.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(X(c,l.opts.specialEasing);o<a;o++)if(i=U.prefilters[o].call(l,e,c,l.opts))return ge.isFunction(i.stop)&&(ge._queueHooks(l.elem,l.opts.queue).stop=ge.proxy(i.stop,i)),i;return ge.map(c,W,l),ge.isFunction(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),ge.fx.timer(ge.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}function Y(e){return(e.match(je)||[]).join(" ")}function K(e){return e.getAttribute&&e.getAttribute("class")||""}function Q(e,t,n,i){var r;if(Array.isArray(t))ge.each(t,function(t,r){n||At.test(e)?i(e,r):Q(e+"["+("object"==(void 0===r?"undefined":_typeof(r))&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==ge.type(t))i(e,t);else for(r in t)Q(e+"["+r+"]",t[r],n,i)}function G(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(je)||[];if(ge.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function V(e,t,n,i){function r(s){var u;return o[s]=!0,ge.each(e[s]||[],function(e,s){var l=s(t,n,i);return"string"!=typeof l||a||o[l]?a?!(u=l):void 0:(t.dataTypes.unshift(l),r(l),!1)}),u}var o={},a=e===Pt;return r(t.dataTypes[0])||!o["*"]&&r("*")}function J(e,t){var n,i,r=ge.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&ge.extend(!0,e,i),e}function Z(e,t,n){for(var i,r,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||e.converters[r+" "+u[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function ee(e,t,n,i){var r,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(r in l)if((s=r.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[r]:!0!==l[r]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,re=te.slice,oe=te.concat,ae=te.push,se=te.indexOf,ue={},le=ue.toString,ce=ue.hasOwnProperty,fe=ce.toString,de=fe.call(Object),pe={},he="3.2.1",ge=function e(t,n){return new e.fn.init(t,n)},me=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ve=/^-ms-/,ye=/-([a-z])/g,be=function(e,t){return t.toUpperCase()};ge.fn=ge.prototype={jquery:he,constructor:ge,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ge.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ge.each(this,e)},map:function(e){return this.pushStack(ge.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:te.sort,splice:te.splice},ge.extend=ge.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==(void 0===a?"undefined":_typeof(a))||ge.isFunction(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(i=e[t])&&(l&&i&&(ge.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&ge.isPlainObject(n)?n:{},a[t]=ge.extend(l,o,i)):void 0!==i&&(a[t]=i));return a},ge.extend({expando:"jQuery"+(he+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ge.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=ge.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e)||(t=ie(e))&&("function"!=typeof(n=ce.call(t,"constructor")&&t.constructor)||fe.call(n)!==de))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==(void 0===e?"undefined":_typeof(e))||"function"==typeof e?ue[le.call(e)]||"object":void 0===e?"undefined":_typeof(e)},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(ve,"ms-").replace(ye,be)},each:function(e,t){var n,r=0;if(i(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(me,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?ge.merge(n,"string"==typeof e?[e]:e):ae.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var r,o,a=0,s=[];if(i(e))for(r=e.length;a<r;a++)null!=(o=t(e[a],a,n))&&s.push(o);else for(a in e)null!=(o=t(e[a],a,n))&&s.push(o);return oe.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),ge.isFunction(e))return i=re.call(arguments,2),r=function(){return e.apply(t||this,i.concat(re.call(arguments)))},r.guid=e.guid=e.guid||ge.guid++,r},now:Date.now,support:pe}),"function"==typeof Symbol&&(ge.fn[Symbol.iterator]=te[Symbol.iterator]),ge.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ue["[object "+t+"]"]=t.toLowerCase()});var we=function(e){function t(e,t,n,i){var r,o,a,s,u,c,d,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!i&&((t?t.ownerDocument||t:P)!==$&&j(t),t=t||$,q)){if(11!==h&&(u=ge.exec(e)))if(r=u[1]){if(9===h){if(!(a=t.getElementById(r)))return n;if(a.id===r)return n.push(a),n}else if(p&&(a=p.getElementById(r))&&z(t,a)&&a.id===r)return n.push(a),n}else{if(u[2])return G.apply(n,t.getElementsByTagName(e)),n;if((r=u[3])&&w.getElementsByClassName&&t.getElementsByClassName)return G.apply(n,t.getElementsByClassName(r)),n}if(w.qsa&&!B[e+" "]&&(!O||!O.test(e))){if(1!==h)p=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,we):t.setAttribute("id",s=H),o=(c=S(e)).length;o--;)c[o]="#"+s+" "+f(c[o]);d=c.join(","),p=me.test(e)&&l(t.parentNode)||t}if(d)try{return G.apply(n,p.querySelectorAll(d)),n}catch(e){}finally{s===H&&t.removeAttribute("id")}}}return E(e.replace(oe,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[H]=!0,e}function r(e){var t=$.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Te(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function f(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function d(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=M++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,u){var l,c,f,d=[R,s];if(u){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(f=t[H]||(t[H]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((l=c[o])&&l[0]===R&&l[1]===s)return d[2]=l[2];if(c[o]=d,d[2]=e(t,n,u))return!0}return!1}}function p(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function h(e,n,i){for(var r=0,o=n.length;r<o;r++)t(e,n[r],i);return i}function g(e,t,n,i,r){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),l&&t.push(s)));return a}function m(e,t,n,r,o,a){return r&&!r[H]&&(r=m(r)),o&&!o[H]&&(o=m(o,a)),i(function(i,a,s,u){var l,c,f,d=[],p=[],m=a.length,v=i||h(t||"*",s.nodeType?[s]:s,[]),y=!e||!i&&t?v:g(v,d,e,s,u),b=n?o||(i?e:m||r)?[]:a:y;if(n&&n(y,b,s,u),r)for(l=g(b,p),r(l,[],s,u),c=l.length;c--;)(f=l[c])&&(b[p[c]]=!(y[p[c]]=f));if(i){if(o||e){if(o){for(l=[],c=b.length;c--;)(f=b[c])&&l.push(y[c]=f);o(null,b=[],l,u)}for(c=b.length;c--;)(f=b[c])&&(l=o?J(i,f):d[c])>-1&&(i[l]=!(a[l]=f))}}else b=g(b===a?b.splice(m,b.length):b),o?o(null,a,b,u):G.apply(a,b)})}function v(e){for(var t,n,i,r=e.length,o=x.relative[e[0].type],a=o||x.relative[" "],s=o?1:0,u=d(function(e){return e===t},a,!0),l=d(function(e){return J(t,e)>-1},a,!0),c=[function(e,n,i){var r=!o&&(i||n!==A)||((t=n).nodeType?u(e,n,i):l(e,n,i));return t=null,r}];s<r;s++)if(n=x.relative[e[s].type])c=[d(p(c),n)];else{if((n=x.filter[e[s].type].apply(null,e[s].matches))[H]){for(i=++s;i<r&&!x.relative[e[i].type];i++);return m(s>1&&p(c),s>1&&f(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(oe,"$1"),n,s<i&&v(e.slice(s,i)),i<r&&v(e=e.slice(i)),i<r&&f(e))}c.push(n)}return p(c)}function y(e,n){var r=n.length>0,o=e.length>0,a=function(i,a,s,u,l){var c,f,d,p=0,h="0",m=i&&[],v=[],y=A,b=i||o&&x.find.TAG("*",l),w=R+=null==y?1:Math.random()||.1,T=b.length;for(l&&(A=a===$||a||l);h!==T&&null!=(c=b[h]);h++){if(o&&c){for(f=0,a||c.ownerDocument===$||(j(c),s=!q);d=e[f++];)if(d(c,a||$,s)){u.push(c);break}l&&(R=w)}r&&((c=!d&&c)&&p--,i&&m.push(c))}if(p+=h,r&&h!==p){for(f=0;d=n[f++];)d(m,v,a,s);if(i){if(p>0)for(;h--;)m[h]||v[h]||(v[h]=K.call(u));v=g(v)}G.apply(u,v),l&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(u)}return l&&(R=w,A=y),m};return r?i(a):a}var b,w,x,T,C,S,k,E,A,D,F,j,$,N,q,O,_,L,z,H="sizzle"+1*new Date,P=e.document,R=0,M=0,I=n(),W=n(),B=n(),X=function(e,t){return e===t&&(F=!0),0},U={}.hasOwnProperty,Y=[],K=Y.pop,Q=Y.push,G=Y.push,V=Y.slice,J=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",re=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ue=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),le=new RegExp(ie),ce=new RegExp("^"+te+"$"),fe={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},de=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,we=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){j()},Te=d(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{G.apply(Y=V.call(P.childNodes),P.childNodes),Y[P.childNodes.length].nodeType}catch(e){G={apply:Y.length?function(e,t){Q.apply(e,V.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}w=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},j=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:P;return i!==$&&9===i.nodeType&&i.documentElement?($=i,N=$.documentElement,q=!C($),P!==$&&(n=$.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),w.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=r(function(e){return e.appendChild($.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=he.test($.getElementsByClassName),w.getById=r(function(e){return N.appendChild(e).id=H,!$.getElementsByName||!$.getElementsByName(H).length}),w.getById?(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&q){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&q){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),x.find.TAG=w.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},x.find.CLASS=w.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&q)return t.getElementsByClassName(e)},_=[],O=[],(w.qsa=he.test($.querySelectorAll))&&(r(function(e){N.appendChild(e).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&O.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||O.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+H+"-]").length||O.push("~="),e.querySelectorAll(":checked").length||O.push(":checked"),e.querySelectorAll("a#"+H+"+*").length||O.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=$.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&O.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&O.push(":enabled",":disabled"),N.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&O.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),O.push(",.*:")})),(w.matchesSelector=he.test(L=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&r(function(e){w.disconnectedMatch=L.call(e,"*"),L.call(e,"[s!='']:x"),_.push("!=",ie)}),O=O.length&&new RegExp(O.join("|")),_=_.length&&new RegExp(_.join("|")),t=he.test(N.compareDocumentPosition),z=t||he.test(N.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},X=t?function(e,t){if(e===t)return F=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===$||e.ownerDocument===P&&z(P,e)?-1:t===$||t.ownerDocument===P&&z(P,t)?1:D?J(D,e)-J(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return F=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],u=[t];if(!r||!o)return e===$?-1:t===$?1:r?-1:o?1:D?J(D,e)-J(D,t):0;if(r===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;s[i]===u[i];)i++;return i?a(s[i],u[i]):s[i]===P?-1:u[i]===P?1:0},$):$},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==$&&j(e),n=n.replace(ue,"='$1']"),w.matchesSelector&&q&&!B[n+" "]&&(!_||!_.test(n))&&(!O||!O.test(n)))try{var i=L.call(e,n);if(i||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,$,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==$&&j(e),z(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==$&&j(e);var n=x.attrHandle[t.toLowerCase()],i=n&&U.call(x.attrHandle,t.toLowerCase())?n(e,t,!q):void 0;return void 0!==i?i:w.attributes||!q?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,we)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(F=!w.detectDuplicates,D=!w.sortStable&&e.slice(0),e.sort(X),F){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return D=null,e},T=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=T(t);return n},(x=t.selectors={cacheLength:50,createPseudo:i,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&le.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=I[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&I(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(re," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,d,p,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s,b=!1;if(m){if(o){for(;g;){for(d=t;d=d[g];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(b=(p=(l=(c=(f=(d=m)[H]||(d[H]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===R&&l[1])&&l[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[R,p,b];break}}else if(y&&(d=t,f=d[H]||(d[H]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),l=c[e]||[],p=l[0]===R&&l[1],b=p),!1===b)for(;(d=++p&&d&&d[g]||(b=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&(f=d[H]||(d[H]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),c[e]=[R,b]),d!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var r,o=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[H]?o(n):o.length>1?(r=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),a=r.length;a--;)e[i=J(e,r[a])]=!(t[i]=r[a])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=k(e.replace(oe,"$1"));return r[H]?i(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:i(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=q?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===N},focus:function(e){return e===$.activeElement&&(!$.hasFocus||$.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return de.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[n<0?n+t:n]}),even:u(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:u(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,S=t.tokenize=function(e,n){var i,r,o,a,s,u,l,c=W[e+" "];if(c)return n?0:c.slice(0);for(s=e,u=[],l=x.preFilter;s;){i&&!(r=ae.exec(s))||(r&&(s=s.slice(r[0].length)||s),u.push(o=[])),i=!1,(r=se.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(oe," ")}),s=s.slice(i.length));for(a in x.filter)!(r=fe[a].exec(s))||l[a]&&!(r=l[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):W(e,u).slice(0)},k=t.compile=function(e,t){var n,i=[],r=[],o=B[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)(o=v(t[n]))[H]?i.push(o):r.push(o);(o=B(e,y(r,i))).selector=e}return o},E=t.select=function(e,t,n,i){var r,o,a,s,u,c="function"==typeof e&&e,d=!i&&S(e=c.selector||e);if(n=n||[],1===d.length){if((o=d[0]=d[0].slice(0)).length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&q&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(ve,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=fe.needsContext.test(e)?0:o.length;r--&&(a=o[r],!x.relative[s=a.type]);)if((u=x.find[s])&&(i=u(a.matches[0].replace(ve,ye),me.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&f(o)))return G.apply(n,i),n;break}}return(c||k(e,d))(i,t,!q,n,!t||me.test(e)&&l(t.parentNode)||t),n},w.sortStable=H.split("").sort(X).join("")===H,w.detectDuplicates=!!F,j(),w.sortDetached=r(function(e){return 1&e.compareDocumentPosition($.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(Z,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);ge.find=we,ge.expr=we.selectors,ge.expr[":"]=ge.expr.pseudos,ge.uniqueSort=ge.unique=we.uniqueSort,ge.text=we.getText,ge.isXMLDoc=we.isXML,ge.contains=we.contains,ge.escapeSelector=we.escape;var xe=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&ge(e).is(n))break;i.push(e)}return i},Te=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ce=ge.expr.match.needsContext,Se=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ke=/^.[^:#\[\.,]*$/;ge.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?ge.find.matchesSelector(i,e)?[i]:[]:ge.find.matches(e,ge.grep(t,function(e){return 1===e.nodeType}))},ge.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(ge(e).filter(function(){for(t=0;t<i;t++)if(ge.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)ge.find(e,r[t],n);return i>1?ge.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&Ce.test(e)?ge(e):e||[],!1).length}});var Ee,Ae=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(ge.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||Ee,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ae.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof ge?t[0]:t,ge.merge(this,ge.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),Se.test(i[1])&&ge.isPlainObject(t))for(i in t)ge.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=ne.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ge.isFunction(e)?void 0!==n.ready?n.ready(e):e(ge):ge.makeArray(e,this)}).prototype=ge.fn,Ee=ge(ne);var De=/^(?:parents|prev(?:Until|All))/,Fe={children:!0,contents:!0,next:!0,prev:!0};ge.fn.extend({has:function(e){var t=ge(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ge.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&ge(e);if(!Ce.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ge.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?ge.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(ge(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ge.uniqueSort(ge.merge(this.get(),ge(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ge.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return Te((e.parentNode||{}).firstChild,e)},children:function(e){return Te(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),ge.merge([],e.childNodes))}},function(e,t){ge.fn[e]=function(n,i){var r=ge.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=ge.filter(i,r)),this.length>1&&(Fe[e]||ge.uniqueSort(r),De.test(e)&&r.reverse()),this.pushStack(r)}});var je=/[^\x20\t\r\n\f]+/g;ge.Callbacks=function(e){e="string"==typeof e?s(e):ge.extend({},e);var t,n,i,r,o=[],a=[],u=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)!1===o[u].apply(n[0],n[1])&&e.stopOnFalse&&(u=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(u=o.length-1,a.push(n)),function t(n){ge.each(n,function(n,i){ge.isFunction(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==ge.type(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return ge.each(arguments,function(e,t){for(var n;(n=ge.inArray(t,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(e){return e?ge.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},ge.extend({Deferred:function(t){var n=[["notify","progress",ge.Callbacks("memory"),ge.Callbacks("memory"),2],["resolve","done",ge.Callbacks("once memory"),ge.Callbacks("once memory"),0,"resolved"],["reject","fail",ge.Callbacks("once memory"),ge.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return ge.Deferred(function(t){ge.each(n,function(n,i){var r=ge.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&ge.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){function o(t,n,i,r){return function(){var s=this,c=arguments,f=function(){var e,f;if(!(t<a)){if((e=i.apply(s,c))===n.promise())throw new TypeError("Thenable self-resolution");f=e&&("object"==(void 0===e?"undefined":_typeof(e))||"function"==typeof e)&&e.then,ge.isFunction(f)?r?f.call(e,o(a,n,u,r),o(a,n,l,r)):(a++,f.call(e,o(a,n,u,r),o(a,n,l,r),o(a,n,u,n.notifyWith))):(i!==u&&(s=void 0,c=[e]),(r||n.resolveWith)(s,c))}},d=r?f:function(){try{f()}catch(e){ge.Deferred.exceptionHook&&ge.Deferred.exceptionHook(e,d.stackTrace),t+1>=a&&(i!==l&&(s=void 0,c=[e]),n.rejectWith(s,c))}};t?d():(ge.Deferred.getStackHook&&(d.stackTrace=ge.Deferred.getStackHook()),e.setTimeout(d))}}var a=0;return ge.Deferred(function(e){n[0][3].add(o(0,e,ge.isFunction(r)?r:u,e.notifyWith)),n[1][3].add(o(0,e,ge.isFunction(t)?t:u)),n[2][3].add(o(0,e,ge.isFunction(i)?i:l))}).promise()},promise:function(e){return null!=e?ge.extend(e,r):r}},o={};return ge.each(n,function(e,t){var a=t[2],s=t[5];r[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=re.call(arguments),o=ge.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(c(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||ge.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)c(r[n],a(n),o.reject);return o.promise()}});var $e=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ge.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&$e.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},ge.readyException=function(t){e.setTimeout(function(){throw t})};var Ne=ge.Deferred();ge.fn.ready=function(e){return Ne.then(e).catch(function(e){ge.readyException(e)}),this},ge.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--ge.readyWait:ge.isReady)||(ge.isReady=!0,!0!==e&&--ge.readyWait>0||Ne.resolveWith(ne,[ge]))}}),ge.ready.then=Ne.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(ge.ready):(ne.addEventListener("DOMContentLoaded",f),e.addEventListener("load",f));var qe=function e(t,n,i,r,o,a,s){var u=0,l=t.length,c=null==i;if("object"===ge.type(i)){o=!0;for(u in i)e(t,n,u,i[u],!0,a,s)}else if(void 0!==r&&(o=!0,ge.isFunction(r)||(s=!0),c&&(s?(n.call(t,r),n=null):(c=n,n=function(e,t,n){return c.call(ge(e),n)})),n))for(;u<l;u++)n(t[u],i,s?r:r.call(t[u],u,n(t[u],i)));return o?t:c?n.call(t):l?n(t[0],i):a},Oe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};d.uid=1,d.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Oe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[ge.camelCase(t)]=n;else for(i in t)r[ge.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][ge.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(ge.camelCase):(t=ge.camelCase(t),t=t in i?[t]:t.match(je)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||ge.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ge.isEmptyObject(t)}};var _e=new d,Le=new d,ze=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/[A-Z]/g;ge.extend({hasData:function(e){return Le.hasData(e)||_e.hasData(e)},data:function(e,t,n){return Le.access(e,t,n)},removeData:function(e,t){Le.remove(e,t)},_data:function(e,t,n){return _e.access(e,t,n)},_removeData:function(e,t){_e.remove(e,t)}}),ge.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=Le.get(o),1===o.nodeType&&!_e.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=ge.camelCase(i.slice(5)),h(o,i,r[i]));_e.set(o,"hasDataAttrs",!0)}return r}return"object"==(void 0===e?"undefined":_typeof(e))?this.each(function(){Le.set(this,e)}):qe(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=Le.get(o,e)))return n;if(void 0!==(n=h(o,e)))return n}else this.each(function(){Le.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Le.remove(this,e)})}}),ge.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=_e.get(e,t),n&&(!i||Array.isArray(n)?i=_e.access(e,t,ge.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=ge.queue(e,t),i=n.length,r=n.shift(),o=ge._queueHooks(e,t),a=function(){ge.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return _e.get(e,n)||_e.access(e,n,{empty:ge.Callbacks("once memory").add(function(){_e.remove(e,[t+"queue",n])})})}}),ge.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ge.queue(this[0],e):void 0===t?this:this.each(function(){var n=ge.queue(this,e,t);ge._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ge.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ge.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=ge.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=_e.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var Pe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Re=new RegExp("^(?:([+-])=|)("+Pe+")([a-z%]*)$","i"),Me=["Top","Right","Bottom","Left"],Ie=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ge.contains(e.ownerDocument,e)&&"none"===ge.css(e,"display")},We=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=a[o];return r},Be={};ge.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ie(this)?ge(this).show():ge(this).hide()})}});var Xe=/^(?:checkbox|radio)$/i,Ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ye=/^$|\/(?:java|ecma)script/i,Ke={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ke.optgroup=Ke.option,Ke.tbody=Ke.tfoot=Ke.colgroup=Ke.caption=Ke.thead,Ke.th=Ke.td;var Qe=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment().appendChild(ne.createElement("div")),t=ne.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),pe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ge=ne.documentElement,Ve=/^key/,Je=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ze=/^([^.]*)(?:\.(.+)|)/;ge.event={global:{},add:function(e,t,n,i,r){var o,a,s,u,l,c,f,d,p,h,g,m=_e.get(e);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),r&&ge.find.matchesSelector(Ge,r),n.guid||(n.guid=ge.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==ge&&ge.event.triggered!==t.type?ge.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(je)||[""]).length;l--;)p=g=(s=Ze.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=ge.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,f=ge.event.special[p]||{},c=ge.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&ge.expr.match.needsContext.test(r),namespace:h.join(".")},o),(d=u[p])||(d=u[p]=[],d.delegateCount=0,f.setup&&!1!==f.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,c):d.push(c),ge.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,u,l,c,f,d,p,h,g,m=_e.hasData(e)&&_e.get(e);if(m&&(u=m.events)){for(l=(t=(t||"").match(je)||[""]).length;l--;)if(s=Ze.exec(t[l])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p){for(f=ge.event.special[p]||{},d=u[p=(i?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)c=d[o],!r&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,m.handle)||ge.removeEvent(e,p,m.handle),delete u[p])}else for(p in u)ge.event.remove(e,p+t[l],n,i,!0);ge.isEmptyObject(u)&&_e.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=ge.event.fix(e),u=new Array(arguments.length),l=(_e.get(this,"events")||{})[s.type]||[],c=ge.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=ge.event.handlers.call(this,s,l),t=0;(r=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(i=((ge.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,u))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,r,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?ge(r,this).index(l)>-1:ge.find(r,this,null,[l]).length),a[r]&&o.push(i);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(ge.Event.prototype,e,{enumerable:!0,configurable:!0,get:ge.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[ge.expando]?e:new ge.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==C()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===C()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ge.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ge.Event=function(e,t){return this instanceof ge.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:T,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ge.extend(this,t),this.timeStamp=e&&e.timeStamp||ge.now(),void(this[ge.expando]=!0)):new ge.Event(e,t)},ge.Event.prototype={constructor:ge.Event,isDefaultPrevented:T,isPropagationStopped:T,isImmediatePropagationStopped:T,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ge.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ve.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Je.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},ge.event.addProp),ge.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ge.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||ge.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ge.fn.extend({on:function(e,t,n,i){return S(this,e,t,n,i)},one:function(e,t,n,i){return S(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,ge(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==(void 0===e?"undefined":_typeof(e))){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=T),this.each(function(){ge.event.remove(this,e,n,t)})}});var et=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,tt=/<script|<style|<link/i,nt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^true\/(.*)/,rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ge.extend({htmlPrefilter:function(e){return e.replace(et,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),u=ge.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ge.isXMLDoc(e)))for(a=y(s),o=y(e),i=0,r=o.length;i<r;i++)F(o[i],a[i]);if(t)if(n)for(o=o||y(e),a=a||y(s),i=0,r=o.length;i<r;i++)D(o[i],a[i]);else D(e,s);return(a=y(s,"script")).length>0&&b(a,!u&&y(e,"script")),s},cleanData:function(e){for(var t,n,i,r=ge.event.special,o=0;void 0!==(n=e[o]);o++)if(Oe(n)){if(t=n[_e.expando]){if(t.events)for(i in t.events)r[i]?ge.event.remove(n,i):ge.removeEvent(n,i,t.handle);n[_e.expando]=void 0}n[Le.expando]&&(n[Le.expando]=void 0)}}}),ge.fn.extend({detach:function(e){return $(this,e,!0)},remove:function(e){return $(this,e)},text:function(e){return qe(this,function(e){return void 0===e?ge.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return j(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||k(this,e).appendChild(e)})},prepend:function(){return j(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ge.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ge.clone(this,e,t)})},html:function(e){return qe(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!tt.test(e)&&!Ke[(Ue.exec(e)||["",""])[1].toLowerCase()]){e=ge.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(ge.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return j(this,arguments,function(t){var n=this.parentNode;ge.inArray(this,e)<0&&(ge.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),ge.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ge.fn[e]=function(e){for(var n,i=[],r=ge(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),ge(r[a])[t](n),ae.apply(i,n.get());return this.pushStack(i)}});var ot=/^margin/,at=new RegExp("^("+Pe+")(?!px)[a-z%]+$","i"),st=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ge.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,s.style.marginRight="50%",r="4px"===t.marginRight,Ge.removeChild(a),s=null}}var n,i,r,o,a=ne.createElement("div"),s=ne.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),ge.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var ut=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},ft={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],pt=ne.createElement("div").style;ge.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=N(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=ge.camelCase(t),u=lt.test(t),l=e.style;return u||(t=_(s)),a=ge.cssHooks[t]||ge.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:l[t]:("string"===(o=void 0===n?"undefined":_typeof(n))&&(r=Re.exec(n))&&r[1]&&(n=g(e,t,r),o="number"),void(null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(ge.cssNumber[s]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(u?l.setProperty(t,n):l[t]=n))))}},css:function(e,t,n,i){var r,o,a,s=ge.camelCase(t);return lt.test(t)||(t=_(s)),(a=ge.cssHooks[t]||ge.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=N(e,t,i)),"normal"===r&&t in ft&&(r=ft[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),ge.each(["height","width"],function(e,t){ge.cssHooks[t]={get:function(e,n,i){if(n)return!ut.test(ge.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?H(e,t,i):We(e,ct,function(){return H(e,t,i)})},set:function(e,n,i){var r,o=i&&st(e),a=i&&z(e,t,i,"border-box"===ge.css(e,"boxSizing",!1,o),o);return a&&(r=Re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=ge.css(e,t)),L(e,n,a)}}}),ge.cssHooks.marginLeft=q(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(N(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ge.each({margin:"",padding:"",border:"Width"},function(e,t){ge.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+Me[i]+t]=o[i]||o[i-2]||o[0];return r}},ot.test(e)||(ge.cssHooks[e+t].set=L)}),ge.fn.extend({css:function(e,t){return qe(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=st(e),r=t.length;a<r;a++)o[t[a]]=ge.css(e,t[a],!1,i);return o}return void 0!==n?ge.style(e,t,n):ge.css(e,t)},e,t,arguments.length>1)}}),ge.Tween=P,P.prototype={constructor:P,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||ge.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(ge.cssNumber[n]?"":"px")},cur:function(){var e=P.propHooks[this.prop];return e&&e.get?e.get(this):P.propHooks._default.get(this)},run:function(e){var t,n=P.propHooks[this.prop];return this.options.duration?this.pos=t=ge.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):P.propHooks._default.set(this),this}},P.prototype.init.prototype=P.prototype,P.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ge.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){ge.fx.step[e.prop]?ge.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ge.cssProps[e.prop]]&&!ge.cssHooks[e.prop]?e.elem[e.prop]=e.now:ge.style(e.elem,e.prop,e.now+e.unit)}}},P.propHooks.scrollTop=P.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ge.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ge.fx=P.prototype.init,ge.fx.step={};var ht,gt,mt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;ge.Animation=ge.extend(U,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,Re.exec(t),n),n}]},tweener:function(e,t){ge.isFunction(e)?(t=e,e=["*"]):e=e.match(je);for(var n,i=0,r=e.length;i<r;i++)n=e[i],U.tweeners[n]=U.tweeners[n]||[],U.tweeners[n].unshift(t)},prefilters:[B],prefilter:function(e,t){t?U.prefilters.unshift(e):U.prefilters.push(e)}}),ge.speed=function(e,t,n){var i=e&&"object"==(void 0===e?"undefined":_typeof(e))?ge.extend({},e):{complete:n||!n&&t||ge.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ge.isFunction(t)&&t};return ge.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in ge.fx.speeds?i.duration=ge.fx.speeds[i.duration]:i.duration=ge.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){ge.isFunction(i.old)&&i.old.call(this),i.queue&&ge.dequeue(this,i.queue)},i},ge.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Ie).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=ge.isEmptyObject(e),o=ge.speed(t,n,i),a=function(){var t=U(this,ge.extend({},e),o);(r||_e.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=ge.timers,a=_e.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&vt.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||ge.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=_e.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=ge.timers,a=i?i.length:0;for(n.finish=!0,ge.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),ge.each(["toggle","show","hide"],function(e,t){var n=ge.fn[t];ge.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(I(t,!0),e,i,r)}}),ge.each({slideDown:I("show"),slideUp:I("hide"),slideToggle:I("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ge.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),ge.timers=[],ge.fx.tick=function(){var e,t=0,n=ge.timers;for(ht=ge.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ge.fx.stop(),ht=void 0},ge.fx.timer=function(e){ge.timers.push(e),ge.fx.start()},ge.fx.interval=13,ge.fx.start=function(){gt||(gt=!0,R())},ge.fx.stop=function(){gt=null},ge.fx.speeds={slow:600,fast:200,_default:400},ge.fn.delay=function(t,n){return t=ge.fx?ge.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select").appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=t.selected,(e=ne.createElement("input")).value="t",e.type="radio",pe.radioValue="t"===e.value}();var yt,bt=ge.expr.attrHandle;ge.fn.extend({attr:function(e,t){return qe(this,ge.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ge.removeAttr(this,e)})}}),ge.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?ge.prop(e,t,n):(1===o&&ge.isXMLDoc(e)||(r=ge.attrHooks[t.toLowerCase()]||(ge.expr.match.bool.test(t)?yt:void 0)),void 0!==n?null===n?void ge.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=ge.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&r(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(je);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),yt={set:function(e,t,n){return!1===t?ge.removeAttr(e,n):e.setAttribute(n,n),n}},ge.each(ge.expr.match.bool.source.match(/\w+/g),function(e,t){var n=bt[t]||ge.find.attr;bt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=bt[a],bt[a]=r,r=null!=n(e,t,i)?a:null,bt[a]=o),r}});var wt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;ge.fn.extend({prop:function(e,t){return qe(this,ge.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ge.propFix[e]||e]})}}),ge.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ge.isXMLDoc(e)||(t=ge.propFix[t]||t,r=ge.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=ge.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(ge.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ge.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ge.propFix[this.toLowerCase()]=this}),ge.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,u=0;if(ge.isFunction(e))return this.each(function(t){ge(this).addClass(e.call(this,t,K(this)))});if("string"==typeof e&&e)for(t=e.match(je)||[];n=this[u++];)if(r=K(n),i=1===n.nodeType&&" "+Y(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=Y(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,u=0;if(ge.isFunction(e))return this.each(function(t){ge(this).removeClass(e.call(this,t,K(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(je)||[];n=this[u++];)if(r=K(n),i=1===n.nodeType&&" "+Y(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=Y(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=void 0===e?"undefined":_typeof(e);return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):ge.isFunction(e)?this.each(function(n){ge(this).toggleClass(e.call(this,n,K(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=ge(this),o=e.match(je)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=K(this))&&_e.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":_e.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Y(K(n))+" ").indexOf(t)>-1)return!0;return!1}});var Tt=/\r/g;ge.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=ge.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,ge(this).val()):e,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=ge.map(r,function(e){return null==e?"":e+""})),(t=ge.valHooks[this.type]||ge.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=ge.valHooks[r.type]||ge.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(Tt,""):null==n?"":n)):void 0}}),ge.extend({valHooks:{option:{get:function(e){var t=ge.find.attr(e,"value");return null!=t?t:Y(ge.text(e))}},select:{get:function(e){var t,n,i,o=e.options,a=e.selectedIndex,s="select-one"===e.type,u=s?null:[],l=s?a+1:o.length;for(i=a<0?l:s?a:0;i<l;i++)if(((n=o[i]).selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(t=ge(n).val(),s)return t;u.push(t)}return u},set:function(e,t){for(var n,i,r=e.options,o=ge.makeArray(t),a=r.length;a--;)((i=r[a]).selected=ge.inArray(ge.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),ge.each(["radio","checkbox"],function(){ge.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=ge.inArray(ge(e).val(),t)>-1}},pe.checkOn||(ge.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;ge.extend(ge.event,{trigger:function(t,n,i,r){var o,a,s,u,l,c,f,d=[i||ne],p=ce.call(t,"type")?t.type:t,h=ce.call(t,"namespace")?t.namespace.split("."):[];if(a=s=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(p+ge.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),l=p.indexOf(":")<0&&"on"+p,t=t[ge.expando]?t:new ge.Event(p,"object"==(void 0===t?"undefined":_typeof(t))&&t),t.isTrigger=r?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:ge.makeArray(n,[t]),f=ge.event.special[p]||{},r||!f.trigger||!1!==f.trigger.apply(i,n))){if(!r&&!f.noBubble&&!ge.isWindow(i)){for(u=f.delegateType||p,Ct.test(u+p)||(a=a.parentNode);a;a=a.parentNode)d.push(a),s=a;s===(i.ownerDocument||ne)&&d.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=d[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||p,(c=(_e.get(a,"events")||{})[t.type]&&_e.get(a,"handle"))&&c.apply(a,n),(c=l&&a[l])&&c.apply&&Oe(a)&&(t.result=c.apply(a,n),!1===t.result&&t.preventDefault());return t.type=p,r||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(d.pop(),n)||!Oe(i)||l&&ge.isFunction(i[p])&&!ge.isWindow(i)&&((s=i[l])&&(i[l]=null),ge.event.triggered=p,i[p](),ge.event.triggered=void 0,s&&(i[l]=s)),t.result}},simulate:function(e,t,n){var i=ge.extend(new ge.Event,n,{type:e,isSimulated:!0});ge.event.trigger(i,null,t)}}),ge.fn.extend({trigger:function(e,t){return this.each(function(){ge.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ge.event.trigger(e,t,n,!0)}}),ge.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){ge.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ge.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||ge.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ge.event.simulate(t,e.target,ge.event.fix(e))};ge.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=_e.access(i,t);r||i.addEventListener(e,n,!0),_e.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=_e.access(i,t)-1;r?_e.access(i,t,r):(i.removeEventListener(e,n,!0),_e.remove(i,t))}}});var St=e.location,kt=ge.now(),Et=/\?/;ge.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||ge.error("Invalid XML: "+t),n};var At=/\[\]$/,Dt=/\r?\n/g,Ft=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;ge.param=function(e,t){var n,i=[],r=function(e,t){var n=ge.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!ge.isPlainObject(e))ge.each(e,function(){r(this.name,this.value)});else for(n in e)Q(n,e[n],t,r);return i.join("&")},ge.fn.extend({serialize:function(){return ge.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ge.prop(this,"elements");return e?ge.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ge(this).is(":disabled")&&jt.test(this.nodeName)&&!Ft.test(e)&&(this.checked||!Xe.test(e))}).map(function(e,t){var n=ge(this).val();return null==n?null:Array.isArray(n)?ge.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var $t=/%20/g,Nt=/#.*$/,qt=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,_t=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lt=/^(?:GET|HEAD)$/,zt=/^\/\//,Ht={},Pt={},Rt="*/".concat("*"),Mt=ne.createElement("a");Mt.href=St.href,ge.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:_t.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ge.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?J(J(e,ge.ajaxSettings),t):J(ge.ajaxSettings,e)},ajaxPrefilter:G(Ht),ajaxTransport:G(Pt),ajax:function(t,n){function i(t,n,i,s){var l,d,p,w,x,T=n;c||(c=!0,u&&e.clearTimeout(u),r=void 0,a=s||"",C.readyState=t>0?4:0,l=t>=200&&t<300||304===t,i&&(w=Z(h,C,i)),w=ee(h,w,C,l),l?(h.ifModified&&((x=C.getResponseHeader("Last-Modified"))&&(ge.lastModified[o]=x),(x=C.getResponseHeader("etag"))&&(ge.etag[o]=x)),204===t||"HEAD"===h.type?T="nocontent":304===t?T="notmodified":(T=w.state,d=w.data,p=w.error,l=!p)):(p=T,!t&&T||(T="error",t<0&&(t=0))),C.status=t,C.statusText=(n||T)+"",l?v.resolveWith(g,[d,T,C]):v.rejectWith(g,[C,T,p]),C.statusCode(b),b=void 0,f&&m.trigger(l?"ajaxSuccess":"ajaxError",[C,h,l?d:p]),y.fireWith(g,[C,T]),f&&(m.trigger("ajaxComplete",[C,h]),--ge.active||ge.event.trigger("ajaxStop")))}"object"==(void 0===t?"undefined":_typeof(t))&&(n=t,t=void 0),n=n||{};var r,o,a,s,u,l,c,f,d,p,h=ge.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?ge(g):ge.event,v=ge.Deferred(),y=ge.Callbacks("once memory"),b=h.statusCode||{},w={},x={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Ot.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)C.always(e[C.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),i(0,t),this}};if(v.promise(C),h.url=((t||h.url||St.href)+"").replace(zt,St.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(je)||[""],null==h.crossDomain){l=ne.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Mt.protocol+"//"+Mt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=ge.param(h.data,h.traditional)),V(Ht,h,n,C),c)return C;(f=ge.event&&h.global)&&0==ge.active++&&ge.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Lt.test(h.type),o=h.url.replace(Nt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace($t,"+")):(p=h.url.slice(o.length),h.data&&(o+=(Et.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(qt,"$1"),p=(Et.test(o)?"&":"?")+"_="+kt+++p),h.url=o+p),h.ifModified&&(ge.lastModified[o]&&C.setRequestHeader("If-Modified-Since",ge.lastModified[o]),ge.etag[o]&&C.setRequestHeader("If-None-Match",ge.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]);for(d in h.headers)C.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(g,C,h)||c))return C.abort();if(T="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),r=V(Pt,h,n,C)){if(C.readyState=1,f&&m.trigger("ajaxSend",[C,h]),c)return C;h.async&&h.timeout>0&&(u=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{c=!1,r.send(w,i)}catch(e){if(c)throw e;i(-1,e)}}else i(-1,"No Transport");return C},getJSON:function(e,t,n){return ge.get(e,t,n,"json")},getScript:function(e,t){return ge.get(e,void 0,t,"script")}}),ge.each(["get","post"],function(e,t){ge[t]=function(e,n,i,r){return ge.isFunction(n)&&(r=r||i,i=n,n=void 0),ge.ajax(ge.extend({url:e,type:t,dataType:r,data:n,success:i},ge.isPlainObject(e)&&e))}}),ge._evalUrl=function(e){return ge.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},ge.fn.extend({wrapAll:function(e){var t;return this[0]&&(ge.isFunction(e)&&(e=e.call(this[0])),t=ge(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ge.isFunction(e)?this.each(function(t){ge(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ge(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ge.isFunction(e);return this.each(function(n){ge(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ge(this).replaceWith(this.childNodes)}),this}}),ge.expr.pseudos.hidden=function(e){return!ge.expr.pseudos.visible(e)},ge.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ge.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var It={0:200,1223:204},Wt=ge.ajaxSettings.xhr();pe.cors=!!Wt&&"withCredentials"in Wt,pe.ajax=Wt=!!Wt,ge.ajaxTransport(function(t){var n,i;if(pe.cors||Wt&&!t.crossDomain)return{send:function(r,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(a in r)s.setRequestHeader(a,r[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(It[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),ge.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ge.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ge.globalEval(e),e}}}),ge.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ge.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=ge("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Bt=[],Xt=/(=)\?(?=&|$)|\?\?/;ge.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||ge.expando+"_"+kt++;return this[e]=!0,e}}),ge.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=!1!==t.jsonp&&(Xt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=ge.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Xt,"$1"+r):!1!==t.jsonp&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||ge.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){void 0===o?ge(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Bt.push(r)),a&&ge.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),pe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),ge.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,r,o;return t||(pe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=ne.location.href,t.head.appendChild(i)):t=ne),r=Se.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=w([e],t,o),o&&o.length&&ge(o).remove(),ge.merge([],r.childNodes))},ge.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=Y(e.slice(s)),e=e.slice(0,s)),ge.isFunction(t)?(n=t,t=void 0):t&&"object"==(void 0===t?"undefined":_typeof(t))&&(r="POST"),a.length>0&&ge.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?ge("<div>").append(ge.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},ge.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ge.fn[t]=function(e){return this.on(t,e)}}),ge.expr.pseudos.animated=function(e){return ge.grep(ge.timers,function(t){return e===t.elem}).length},ge.offset={setOffset:function(e,t,n){var i,r,o,a,s,u,l=ge.css(e,"position"),c=ge(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=ge.css(e,"top"),u=ge.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(i=c.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(u)||0),ge.isFunction(t)&&(t=t.call(e,n,ge.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+r),"using"in t?t.using.call(e,f):c.css(f)}},ge.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ge.offset.setOffset(this,e,t)});var t,n,i,r,o=this[0];return o?o.getClientRects().length?(i=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,r=t.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===ge.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(i=e.offset()),i={top:i.top+ge.css(e[0],"borderTopWidth",!0),left:i.left+ge.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-ge.css(n,"marginTop",!0),left:t.left-i.left-ge.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ge.css(e,"position");)e=e.offsetParent;return e||Ge})}}),ge.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;ge.fn[e]=function(i){return qe(this,function(e,i,r){var o;return ge.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r?o?o[t]:e[i]:void(o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r)},e,i,arguments.length)}}),ge.each(["top","left"],function(e,t){ge.cssHooks[t]=q(pe.pixelPosition,function(e,n){if(n)return n=N(e,t),at.test(n)?ge(e).position()[t]+"px":n})}),ge.each({Height:"height",Width:"width"},function(e,t){ge.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){ge.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return qe(this,function(t,n,r){var o;return ge.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?ge.css(t,n,s):ge.style(t,n,r,s)},t,a?r:void 0,a)}})}),ge.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),ge.holdReady=function(e){e?ge.readyWait++:ge.ready(!0)},ge.isArray=Array.isArray,ge.parseJSON=JSON.parse,ge.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ge});var Ut=e.jQuery,Yt=e.$;return ge.noConflict=function(t){return e.$===ge&&(e.$=Yt),t&&e.jQuery===ge&&(e.jQuery=Ut),ge},t||(e.jQuery=e.$=ge),ge});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){function t(e){if(void 0===Function.prototype.name){var t=/function\s([^(]{1,})\(/.exec(e.toString());return t&&t.length>1?t[1].trim():""}return void 0===e.prototype?e.constructor.name:e.prototype.constructor.name}function n(e){return"true"===e||"false"!==e&&(isNaN(1*e)?e:parseFloat(e))}function i(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}var r={version:"6.3.1",_plugins:{},_uuids:[],rtl:function(){return"rtl"===e("html").attr("dir")},plugin:function(e,n){var r=n||t(e),o=i(r);this._plugins[o]=this[r]=e},registerPlugin:function(e,n){var r=n?i(n):t(e.constructor).toLowerCase();e.uuid=this.GetYoDigits(6,r),e.$element.attr("data-"+r)||e.$element.attr("data-"+r,e.uuid),e.$element.data("zfPlugin")||e.$element.data("zfPlugin",e),e.$element.trigger("init.zf."+r),this._uuids.push(e.uuid)},unregisterPlugin:function(e){var n=i(t(e.$element.data("zfPlugin").constructor));this._uuids.splice(this._uuids.indexOf(e.uuid),1),e.$element.removeAttr("data-"+n).removeData("zfPlugin").trigger("destroyed.zf."+n);for(var r in e)e[r]=null},reInit:function(t){var n=t instanceof e;try{if(n)t.each(function(){e(this).data("zfPlugin")._init()});else{var r=this;({object:function(t){t.forEach(function(t){t=i(t),e("[data-"+t+"]").foundation("_init")})},string:function(){t=i(t),e("[data-"+t+"]").foundation("_init")},undefined:function(){this.object(Object.keys(r._plugins))}})[void 0===t?"undefined":_typeof(t)](t)}}catch(e){console.error(e)}finally{return t}},GetYoDigits:function(e,t){return e=e||6,Math.round(Math.pow(36,e+1)-Math.random()*Math.pow(36,e)).toString(36).slice(1)+(t?"-"+t:"")},reflow:function(t,i){void 0===i?i=Object.keys(this._plugins):"string"==typeof i&&(i=[i]);var r=this;e.each(i,function(i,o){var a=r._plugins[o];e(t).find("[data-"+o+"]").addBack("[data-"+o+"]").each(function(){var t=e(this),i={};if(t.data("zfPlugin"))console.warn("Tried to initialize "+o+" on an element that already has a Foundation plugin.");else{if(t.attr("data-options"))t.attr("data-options").split(";").forEach(function(e,t){var r=e.split(":").map(function(e){return e.trim()});r[0]&&(i[r[0]]=n(r[1]))});try{t.data("zfPlugin",new a(e(this),i))}catch(e){console.error(e)}finally{return}}})})},getFnName:t,transitionend:function(e){var t,n={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend"},i=document.createElement("div");for(var r in n)void 0!==i.style[r]&&(t=n[r]);return t||(t=setTimeout(function(){e.triggerHandler("transitionend",[e])},1),"transitionend")}};r.util={throttle:function(e,t){var n=null;return function(){var i=this,r=arguments;null===n&&(n=setTimeout(function(){e.apply(i,r),n=null},t))}}};var o=function(n){var i=void 0===n?"undefined":_typeof(n),o=e("meta.foundation-mq"),a=e(".no-js");if(o.length||e('<meta class="foundation-mq">').appendTo(document.head),a.length&&a.removeClass("no-js"),"undefined"===i)r.MediaQuery._init(),r.reflow(this);else{if("string"!==i)throw new TypeError("We're sorry, "+i+" is not a valid parameter. You must use a string representing the method you wish to invoke.");var s=Array.prototype.slice.call(arguments,1),u=this.data("zfPlugin");if(void 0===u||void 0===u[n])throw new ReferenceError("We're sorry, '"+n+"' is not an available method for "+(u?t(u):"this element")+".");1===this.length?u[n].apply(u,s):this.each(function(t,i){u[n].apply(e(i).data("zfPlugin"),s)})}return this};window.Foundation=r,e.fn.foundation=o,function(){Date.now&&window.Date.now||(window.Date.now=Date.now=function(){return(new Date).getTime()});for(var e=["webkit","moz"],t=0;t<e.length&&!window.requestAnimationFrame;++t){var n=e[t];window.requestAnimationFrame=window[n+"RequestAnimationFrame"],window.cancelAnimationFrame=window[n+"CancelAnimationFrame"]||window[n+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var i=0;window.requestAnimationFrame=function(e){var t=Date.now(),n=Math.max(i+16,t);return setTimeout(function(){e(i=n)},n-t)},window.cancelAnimationFrame=clearTimeout}window.performance&&window.performance.now||(window.performance={start:Date.now(),now:function(){return Date.now()-this.start}})}(),Function.prototype.bind||(Function.prototype.bind=function(e){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var t=Array.prototype.slice.call(arguments,1),n=this,i=function(){},r=function(){return n.apply(this instanceof i?this:e,t.concat(Array.prototype.slice.call(arguments)))};return this.prototype&&(i.prototype=this.prototype),r.prototype=new i,r})}(jQuery);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();!function(e){var t=function(){function t(n,i){_classCallCheck(this,t),this.$element=n,this.options=e.extend({},t.defaults,this.$element.data(),i),this.$lastTrigger=e(),this.$triggers=e(),this._init(),this._events(),Foundation.registerPlugin(this,"OffCanvas"),Foundation.Keyboard.register("OffCanvas",{ESCAPE:"close"})}return _createClass(t,[{key:"_init",value:function(){var t=this.$element.attr("id");if(this.$element.attr("aria-hidden","true"),this.$element.addClass("is-transition-"+this.options.transition),this.$triggers=e(document).find('[data-open="'+t+'"], [data-close="'+t+'"], [data-toggle="'+t+'"]').attr("aria-expanded","false").attr("aria-controls",t),!0===this.options.contentOverlay){var n=document.createElement("div"),i="fixed"===e(this.$element).css("position")?"is-overlay-fixed":"is-overlay-absolute";n.setAttribute("class","js-off-canvas-overlay "+i),this.$overlay=e(n),"is-overlay-fixed"===i?e("body").append(this.$overlay):this.$element.siblings("[data-off-canvas-content]").append(this.$overlay)}this.options.isRevealed=this.options.isRevealed||new RegExp(this.options.revealClass,"g").test(this.$element[0].className),!0===this.options.isRevealed&&(this.options.revealOn=this.options.revealOn||this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split("-")[2],this._setMQChecker()),!0==!this.options.transitionTime&&(this.options.transitionTime=1e3*parseFloat(window.getComputedStyle(e("[data-off-canvas]")[0]).transitionDuration))}},{key:"_events",value:function(){this.$element.off(".zf.trigger .zf.offcanvas").on({"open.zf.trigger":this.open.bind(this),"close.zf.trigger":this.close.bind(this),"toggle.zf.trigger":this.toggle.bind(this),"keydown.zf.offcanvas":this._handleKeyboard.bind(this)}),!0===this.options.closeOnClick&&(this.options.contentOverlay?this.$overlay:e("[data-off-canvas-content]")).on({"click.zf.offcanvas":this.close.bind(this)})}},{key:"_setMQChecker",value:function(){var t=this;e(window).on("changed.zf.mediaquery",function(){Foundation.MediaQuery.atLeast(t.options.revealOn)?t.reveal(!0):t.reveal(!1)}).one("load.zf.offcanvas",function(){Foundation.MediaQuery.atLeast(t.options.revealOn)&&t.reveal(!0)})}},{key:"reveal",value:function(e){var t=this.$element.find("[data-close]");e?(this.close(),this.isRevealed=!0,this.$element.attr("aria-hidden","false"),this.$element.off("open.zf.trigger toggle.zf.trigger"),t.length&&t.hide()):(this.isRevealed=!1,this.$element.attr("aria-hidden","true"),this.$element.on({"open.zf.trigger":this.open.bind(this),"toggle.zf.trigger":this.toggle.bind(this)}),t.length&&t.show())}},{key:"_stopScrolling",value:function(e){return!1}},{key:"_recordScrollable",value:function(e){var t=this;t.scrollHeight!==t.clientHeight&&(0===t.scrollTop&&(t.scrollTop=1),t.scrollTop===t.scrollHeight-t.clientHeight&&(t.scrollTop=t.scrollHeight-t.clientHeight-1)),t.allowUp=t.scrollTop>0,t.allowDown=t.scrollTop<t.scrollHeight-t.clientHeight,t.lastY=e.originalEvent.pageY}},{key:"_stopScrollPropagation",value:function(e){var t=this,n=e.pageY<t.lastY,i=!n;t.lastY=e.pageY,n&&t.allowUp||i&&t.allowDown?e.stopPropagation():e.preventDefault()}},{key:"open",value:function(t,n){if(!this.$element.hasClass("is-open")&&!this.isRevealed){var i=this;n&&(this.$lastTrigger=n),"top"===this.options.forceTo?window.scrollTo(0,0):"bottom"===this.options.forceTo&&window.scrollTo(0,document.body.scrollHeight),i.$element.addClass("is-open"),this.$triggers.attr("aria-expanded","true"),this.$element.attr("aria-hidden","false").trigger("opened.zf.offcanvas"),!1===this.options.contentScroll&&(e("body").addClass("is-off-canvas-open").on("touchmove",this._stopScrolling),this.$element.on("touchstart",this._recordScrollable),this.$element.on("touchmove",this._stopScrollPropagation)),!0===this.options.contentOverlay&&this.$overlay.addClass("is-visible"),!0===this.options.closeOnClick&&!0===this.options.contentOverlay&&this.$overlay.addClass("is-closable"),!0===this.options.autoFocus&&this.$element.one(Foundation.transitionend(this.$element),function(){i.$element.find("a, button").eq(0).focus()}),!0===this.options.trapFocus&&(this.$element.siblings("[data-off-canvas-content]").attr("tabindex","-1"),Foundation.Keyboard.trapFocus(this.$element))}}},{key:"close",value:function(t){this.$element.hasClass("is-open")&&!this.isRevealed&&(this.$element.removeClass("is-open"),this.$element.attr("aria-hidden","true").trigger("closed.zf.offcanvas"),!1===this.options.contentScroll&&(e("body").removeClass("is-off-canvas-open").off("touchmove",this._stopScrolling),this.$element.off("touchstart",this._recordScrollable),this.$element.off("touchmove",this._stopScrollPropagation)),!0===this.options.contentOverlay&&this.$overlay.removeClass("is-visible"),!0===this.options.closeOnClick&&!0===this.options.contentOverlay&&this.$overlay.removeClass("is-closable"),this.$triggers.attr("aria-expanded","false"),!0===this.options.trapFocus&&(this.$element.siblings("[data-off-canvas-content]").removeAttr("tabindex"),Foundation.Keyboard.releaseFocus(this.$element)))}},{key:"toggle",value:function(e,t){this.$element.hasClass("is-open")?this.close(e,t):this.open(e,t)}},{key:"_handleKeyboard",value:function(e){var t=this;Foundation.Keyboard.handleKey(e,"OffCanvas",{close:function(){return t.close(),t.$lastTrigger.focus(),!0},handled:function(){e.stopPropagation(),e.preventDefault()}})}},{key:"destroy",value:function(){this.close(),this.$element.off(".zf.trigger .zf.offcanvas"),this.$overlay.off(".zf.offcanvas"),Foundation.unregisterPlugin(this)}}]),t}();t.defaults={closeOnClick:!0,contentOverlay:!0,contentScroll:!0,transitionTime:0,transition:"push",forceTo:null,isRevealed:!1,revealOn:null,autoFocus:!0,revealClass:"reveal-for-",trapFocus:!1},Foundation.plugin(t,"OffCanvas")}(jQuery);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();!function(e){var t=function(){function t(n,i){_classCallCheck(this,t),this.$element=n,this.options=e.extend({},t.defaults,this.$element.data(),i),this._init(),Foundation.registerPlugin(this,"Orbit"),Foundation.Keyboard.register("Orbit",{ltr:{ARROW_RIGHT:"next",ARROW_LEFT:"previous"},rtl:{ARROW_LEFT:"next",ARROW_RIGHT:"previous"}})}return _createClass(t,[{key:"_init",value:function(){this._reset(),this.$wrapper=this.$element.find("."+this.options.containerClass),this.$slides=this.$element.find("."+this.options.slideClass);var e=this.$element.find("img"),t=this.$slides.filter(".is-active"),n=this.$element[0].id||Foundation.GetYoDigits(6,"orbit");this.$element.attr({"data-resize":n,id:n}),t.length||this.$slides.eq(0).addClass("is-active"),this.options.useMUI||this.$slides.addClass("no-motionui"),e.length?Foundation.onImagesLoaded(e,this._prepareForOrbit.bind(this)):this._prepareForOrbit(),this.options.bullets&&this._loadBullets(),this._events(),this.options.autoPlay&&this.$slides.length>1&&this.geoSync(),this.options.accessible&&this.$wrapper.attr("tabindex",0)}},{key:"_loadBullets",value:function(){this.$bullets=this.$element.find("."+this.options.boxOfBullets).find("button")}},{key:"geoSync",value:function(){var e=this;this.timer=new Foundation.Timer(this.$element,{duration:this.options.timerDelay,infinite:!1},function(){e.changeSlide(!0)}),this.timer.start()}},{key:"_prepareForOrbit",value:function(){this._setWrapperHeight()}},{key:"_setWrapperHeight",value:function(t){var n,i=0,r=0,o=this;this.$slides.each(function(){n=this.getBoundingClientRect().height,e(this).attr("data-slide",r),o.$slides.filter(".is-active")[0]!==o.$slides.eq(r)[0]&&e(this).css({position:"relative",display:"none"}),i=n>i?n:i,r++}),r===this.$slides.length&&(this.$wrapper.css({height:i}),t&&t(i))}},{key:"_setSlideHeight",value:function(t){this.$slides.each(function(){e(this).css("max-height",t)})}},{key:"_events",value:function(){var t=this;this.$element.off(".resizeme.zf.trigger").on({"resizeme.zf.trigger":this._prepareForOrbit.bind(this)}),this.$slides.length>1&&(this.options.swipe&&this.$slides.off("swipeleft.zf.orbit swiperight.zf.orbit").on("swipeleft.zf.orbit",function(e){e.preventDefault(),t.changeSlide(!0)}).on("swiperight.zf.orbit",function(e){e.preventDefault(),t.changeSlide(!1)}),this.options.autoPlay&&(this.$slides.on("click.zf.orbit",function(){t.$element.data("clickedOn",!t.$element.data("clickedOn")),t.timer[t.$element.data("clickedOn")?"pause":"start"]()}),this.options.pauseOnHover&&this.$element.on("mouseenter.zf.orbit",function(){t.timer.pause()}).on("mouseleave.zf.orbit",function(){t.$element.data("clickedOn")||t.timer.start()})),this.options.navButtons&&this.$element.find("."+this.options.nextClass+", ."+this.options.prevClass).attr("tabindex",0).on("click.zf.orbit touchend.zf.orbit",function(n){n.preventDefault(),t.changeSlide(e(this).hasClass(t.options.nextClass))}),this.options.bullets&&this.$bullets.on("click.zf.orbit touchend.zf.orbit",function(){if(/is-active/g.test(this.className))return!1;var n=e(this).data("slide"),i=n>t.$slides.filter(".is-active").data("slide"),r=t.$slides.eq(n);t.changeSlide(i,r,n)}),this.options.accessible&&this.$wrapper.add(this.$bullets).on("keydown.zf.orbit",function(n){Foundation.Keyboard.handleKey(n,"Orbit",{next:function(){t.changeSlide(!0)},previous:function(){t.changeSlide(!1)},handled:function(){e(n.target).is(t.$bullets)&&t.$bullets.filter(".is-active").focus()}})}))}},{key:"_reset",value:function(){void 0!==this.$slides&&this.$slides.length>1&&(this.$element.off(".zf.orbit").find("*").off(".zf.orbit"),this.options.autoPlay&&this.timer.restart(),this.$slides.each(function(t){e(t).removeClass("is-active is-active is-in").removeAttr("aria-live").hide()}),this.$slides.first().addClass("is-active").show(),this.$element.trigger("slidechange.zf.orbit",[this.$slides.first()]),this.options.bullets&&this._updateBullets(0))}},{key:"changeSlide",value:function(e,t,n){if(this.$slides){var i=this.$slides.filter(".is-active").eq(0);if(/mui/g.test(i[0].className))return!1;var r,o=this.$slides.first(),a=this.$slides.last(),s=e?"Right":"Left",u=e?"Left":"Right",l=this;(r=t||(e?this.options.infiniteWrap?i.next("."+this.options.slideClass).length?i.next("."+this.options.slideClass):o:i.next("."+this.options.slideClass):this.options.infiniteWrap?i.prev("."+this.options.slideClass).length?i.prev("."+this.options.slideClass):a:i.prev("."+this.options.slideClass))).length&&(this.$element.trigger("beforeslidechange.zf.orbit",[i,r]),this.options.bullets&&(n=n||this.$slides.index(r),this._updateBullets(n)),this.options.useMUI&&!this.$element.is(":hidden")?(Foundation.Motion.animateIn(r.addClass("is-active").css({position:"absolute",top:0}),this.options["animInFrom"+s],function(){r.css({position:"relative",display:"block"}).attr("aria-live","polite")}),Foundation.Motion.animateOut(i.removeClass("is-active"),this.options["animOutTo"+u],function(){i.removeAttr("aria-live"),l.options.autoPlay&&!l.timer.isPaused&&l.timer.restart()})):(i.removeClass("is-active is-in").removeAttr("aria-live").hide(),r.addClass("is-active is-in").attr("aria-live","polite").show(),this.options.autoPlay&&!this.timer.isPaused&&this.timer.restart()),this.$element.trigger("slidechange.zf.orbit",[r]))}}},{key:"_updateBullets",value:function(e){var t=this.$element.find("."+this.options.boxOfBullets).find(".is-active").removeClass("is-active").blur().find("span:last").detach();this.$bullets.eq(e).addClass("is-active").append(t)}},{key:"destroy",value:function(){this.$element.off(".zf.orbit").find("*").off(".zf.orbit").end().hide(),Foundation.unregisterPlugin(this)}}]),t}();t.defaults={bullets:!0,navButtons:!0,animInFromRight:"slide-in-right",animOutToRight:"slide-out-right",animInFromLeft:"slide-in-left",animOutToLeft:"slide-out-left",autoPlay:!0,timerDelay:5e3,infiniteWrap:!0,swipe:!0,pauseOnHover:!0,accessible:!0,containerClass:"orbit-container",slideClass:"orbit-slide",boxOfBullets:"orbit-bullets",nextClass:"orbit-next",prevClass:"orbit-previous",useMUI:!0},Foundation.plugin(t,"Orbit")}(jQuery),function(e){var t={9:"TAB",13:"ENTER",27:"ESCAPE",32:"SPACE",37:"ARROW_LEFT",38:"ARROW_UP",39:"ARROW_RIGHT",40:"ARROW_DOWN"},n={},i={keys:function(e){var t={};for(var n in e)t[e[n]]=e[n];return t}(t),parseKey:function(e){var n=t[e.which||e.keyCode]||String.fromCharCode(e.which).toUpperCase();return n=n.replace(/\W+/,""),e.shiftKey&&(n="SHIFT_"+n),e.ctrlKey&&(n="CTRL_"+n),e.altKey&&(n="ALT_"+n),n=n.replace(/_$/,"")},handleKey:function(t,i,r){var o,a,s,u=n[i],l=this.parseKey(t);if(!u)return console.warn("Component not defined!");if(o=void 0===u.ltr?u:Foundation.rtl()?e.extend({},u.ltr,u.rtl):e.extend({},u.rtl,u.ltr),a=o[l],(s=r[a])&&"function"==typeof s){var c=s.apply();(r.handled||"function"==typeof r.handled)&&r.handled(c)}else(r.unhandled||"function"==typeof r.unhandled)&&r.unhandled()},findFocusable:function(t){return!!t&&t.find("a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]").filter(function(){return!(!e(this).is(":visible")||e(this).attr("tabindex")<0)})},register:function(e,t){n[e]=t},trapFocus:function(e){var t=Foundation.Keyboard.findFocusable(e),n=t.eq(0),i=t.eq(-1);e.on("keydown.zf.trapfocus",function(e){e.target===i[0]&&"TAB"===Foundation.Keyboard.parseKey(e)?(e.preventDefault(),n.focus()):e.target===n[0]&&"SHIFT_TAB"===Foundation.Keyboard.parseKey(e)&&(e.preventDefault(),i.focus())})},releaseFocus:function(e){e.off("keydown.zf.trapfocus")}};Foundation.Keyboard=i}(jQuery);var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){function t(e){var t={};return"string"!=typeof e?t:(e=e.trim().slice(1,-1))?t=e.split("&").reduce(function(e,t){var n=t.replace(/\+/g," ").split("="),i=n[0],r=n[1];return i=decodeURIComponent(i),r=void 0===r?null:decodeURIComponent(r),e.hasOwnProperty(i)?Array.isArray(e[i])?e[i].push(r):e[i]=[e[i],r]:e[i]=r,e},{}):t}var n={queries:[],current:"",_init:function(){var n,i=this;n=t(e(".foundation-mq").css("font-family"));for(var r in n)n.hasOwnProperty(r)&&i.queries.push({name:r,value:"only screen and (min-width: "+n[r]+")"});this.current=this._getCurrentSize(),this._watcher()},atLeast:function(e){var t=this.get(e);return!!t&&window.matchMedia(t).matches},is:function(e){return e=e.trim().split(" "),e.length>1&&"only"===e[1]?e[0]===this._getCurrentSize():this.atLeast(e[0])},get:function(e){for(var t in this.queries)if(this.queries.hasOwnProperty(t)){var n=this.queries[t];if(e===n.name)return n.value}return null},_getCurrentSize:function(){for(var e,t=0;t<this.queries.length;t++){var n=this.queries[t];window.matchMedia(n.value).matches&&(e=n)}return"object"===(void 0===e?"undefined":_typeof(e))?e.name:e},_watcher:function(){var t=this;e(window).on("resize.zf.mediaquery",function(){var n=t._getCurrentSize(),i=t.current;n!==i&&(t.current=n,e(window).trigger("changed.zf.mediaquery",[n,i]))})}};Foundation.MediaQuery=n,window.matchMedia||(window.matchMedia=function(){var e=window.styleMedia||window.media;if(!e){var t=document.createElement("style"),n=document.getElementsByTagName("script")[0],i=null;t.type="text/css",t.id="matchmediajs-test",n&&n.parentNode&&n.parentNode.insertBefore(t,n),i="getComputedStyle"in window&&window.getComputedStyle(t,null)||t.currentStyle,e={matchMedium:function(e){var n="@media "+e+"{ #matchmediajs-test { width: 1px; } }";return t.styleSheet?t.styleSheet.cssText=n:t.textContent=n,"1px"===i.width}}}return function(t){return{matches:e.matchMedium(t||"all"),media:t||"all"}}}()),Foundation.MediaQuery=n}(jQuery),function(e){function t(e,t,n){function i(s){a||(a=s),o=s-a,n.apply(t),o<e?r=window.requestAnimationFrame(i,t):(window.cancelAnimationFrame(r),t.trigger("finished.zf.animate",[t]).triggerHandler("finished.zf.animate",[t]))}var r,o,a=null;if(0===e)return n.apply(t),void t.trigger("finished.zf.animate",[t]).triggerHandler("finished.zf.animate",[t]);r=window.requestAnimationFrame(i)}function n(t,n,o,a){function s(){t||n.hide(),u(),a&&a.apply(n)}function u(){n[0].style.transitionDuration=0,n.removeClass(l+" "+c+" "+o)}if((n=e(n).eq(0)).length){var l=t?i[0]:i[1],c=t?r[0]:r[1];u(),n.addClass(o).css("transition","none"),requestAnimationFrame(function(){n.addClass(l),t&&n.show()}),requestAnimationFrame(function(){n[0].offsetWidth,n.css("transition","").addClass(c)}),n.one(Foundation.transitionend(n),s)}}var i=["mui-enter","mui-leave"],r=["mui-enter-active","mui-leave-active"],o={animateIn:function(e,t,i){n(!0,e,t,i)},animateOut:function(e,t,i){n(!1,e,t,i)}};Foundation.Move=t,Foundation.Motion=o}(jQuery),function(e){function t(e,t,n){var i,r,o=this,a=t.duration,s=Object.keys(e.data())[0]||"timer",u=-1;this.isPaused=!1,this.restart=function(){u=-1,clearTimeout(r),this.start()},this.start=function(){this.isPaused=!1,clearTimeout(r),u=u<=0?a:u,e.data("paused",!1),i=Date.now(),r=setTimeout(function(){t.infinite&&o.restart(),n&&"function"==typeof n&&n()},u),e.trigger("timerstart.zf."+s)},this.pause=function(){this.isPaused=!0,clearTimeout(r),e.data("paused",!0);var t=Date.now();u-=t-i,e.trigger("timerpaused.zf."+s)}}function n(t,n){function i(){0===--r&&n()}var r=t.length;0===r&&n(),t.each(function(){if(this.complete||4===this.readyState||"complete"===this.readyState)i();else{var t=e(this).attr("src");e(this).attr("src",t+(t.indexOf("?")>=0?"&":"?")+(new Date).getTime()),e(this).one("load",function(){i()})}})}Foundation.Timer=t,Foundation.onImagesLoaded=n}(jQuery),function(e){function t(){this.removeEventListener("touchmove",n),this.removeEventListener("touchend",t),l=!1}function n(n){if(e.spotSwipe.preventDefault&&n.preventDefault(),l){var i,r=n.touches[0].pageX,a=(n.touches[0].pageY,o-r);u=(new Date).getTime()-s,Math.abs(a)>=e.spotSwipe.moveThreshold&&u<=e.spotSwipe.timeThreshold&&(i=a>0?"left":"right"),i&&(n.preventDefault(),t.call(this),e(this).trigger("swipe",i).trigger("swipe"+i))}}function i(e){1==e.touches.length&&(o=e.touches[0].pageX,a=e.touches[0].pageY,l=!0,s=(new Date).getTime(),this.addEventListener("touchmove",n,!1),this.addEventListener("touchend",t,!1))}function r(){this.addEventListener&&this.addEventListener("touchstart",i,!1)}e.spotSwipe={version:"1.0.0",enabled:"ontouchstart"in document.documentElement,preventDefault:!1,moveThreshold:75,timeThreshold:200};var o,a,s,u,l=!1;e.event.special.swipe={setup:r},e.each(["left","up","down","right"],function(){e.event.special["swipe"+this]={setup:function(){e(this).on("swipe",e.noop)}}})}(jQuery),function(e){e.fn.addTouch=function(){this.each(function(n,i){e(i).bind("touchstart touchmove touchend touchcancel",function(){t(event)})});var t=function(e){var t,n=e.changedTouches[0],i={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup"}[e.type];"MouseEvent"in window&&"function"==typeof window.MouseEvent?t=new window.MouseEvent(i,{bubbles:!0,cancelable:!0,screenX:n.screenX,screenY:n.screenY,clientX:n.clientX,clientY:n.clientY}):(t=document.createEvent("MouseEvent")).initMouseEvent(i,!0,!0,window,1,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),n.target.dispatchEvent(t)}}}(jQuery);var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){function t(){a(),i(),r(),o(),n()}function n(t){var n=e("[data-yeti-box]"),i=["dropdown","tooltip","reveal"];if(t&&("string"==typeof t?i.push(t):"object"===(void 0===t?"undefined":_typeof(t))&&"string"==typeof t[0]?i.concat(t):console.error("Plugin names must be strings")),n.length){var r=i.map(function(e){return"closeme.zf."+e}).join(" ");e(window).off(r).on(r,function(t,n){var i=t.namespace.split(".")[0];e("[data-"+i+"]").not('[data-yeti-box="'+n+'"]').each(function(){var t=e(this);t.triggerHandler("close.zf.trigger",[t])})})}}function i(t){var n=void 0,i=e("[data-resize]");i.length&&e(window).off("resize.zf.trigger").on("resize.zf.trigger",function(r){n&&clearTimeout(n),n=setTimeout(function(){s||i.each(function(){e(this).triggerHandler("resizeme.zf.trigger")}),i.attr("data-events","resize")},t||10)})}function r(t){var n=void 0,i=e("[data-scroll]");i.length&&e(window).off("scroll.zf.trigger").on("scroll.zf.trigger",function(r){n&&clearTimeout(n),n=setTimeout(function(){s||i.each(function(){e(this).triggerHandler("scrollme.zf.trigger")}),i.attr("data-events","scroll")},t||10)})}function o(t){var n=e("[data-mutate]");n.length&&s&&n.each(function(){e(this).triggerHandler("mutateme.zf.trigger")})}function a(){if(!s)return!1;var t=document.querySelectorAll("[data-resize], [data-scroll], [data-mutate]"),n=function(t){var n=e(t[0].target);switch(t[0].type){case"attributes":"scroll"===n.attr("data-events")&&"data-events"===t[0].attributeName&&n.triggerHandler("scrollme.zf.trigger",[n,window.pageYOffset]),"resize"===n.attr("data-events")&&"data-events"===t[0].attributeName&&n.triggerHandler("resizeme.zf.trigger",[n]),"style"===t[0].attributeName&&(n.closest("[data-mutate]").attr("data-events","mutate"),n.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger",[n.closest("[data-mutate]")]));break;case"childList":n.closest("[data-mutate]").attr("data-events","mutate"),n.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger",[n.closest("[data-mutate]")]);break;default:return!1}};if(t.length)for(var i=0;i<=t.length-1;i++)new s(n).observe(t[i],{attributes:!0,childList:!0,characterData:!1,subtree:!0,attributeFilter:["data-events","style"]})}var s=function(){for(var e=["WebKit","Moz","O","Ms",""],t=0;t<e.length;t++)if(e[t]+"MutationObserver"in window)return window[e[t]+"MutationObserver"];return!1}(),u=function(t,n){t.data(n).split(" ").forEach(function(i){e("#"+i)["close"===n?"trigger":"triggerHandler"](n+".zf.trigger",[t])})};e(document).on("click.zf.trigger","[data-open]",function(){u(e(this),"open")}),e(document).on("click.zf.trigger","[data-close]",function(){e(this).data("close")?u(e(this),"close"):e(this).trigger("close.zf.trigger")}),e(document).on("click.zf.trigger","[data-toggle]",function(){e(this).data("toggle")?u(e(this),"toggle"):e(this).trigger("toggle.zf.trigger")}),e(document).on("close.zf.trigger","[data-closable]",function(t){t.stopPropagation();var n=e(this).data("closable");""!==n?Foundation.Motion.animateOut(e(this),n,function(){e(this).trigger("closed.zf")}):e(this).fadeOut().trigger("closed.zf")}),e(document).on("focus.zf.trigger blur.zf.trigger","[data-toggle-focus]",function(){var t=e(this).data("toggle-focus");e("#"+t).triggerHandler("toggle.zf.trigger",[e(this)])}),e(window).on("load",function(){t()}),Foundation.IHearYou=t}(jQuery),function(){$(document).foundation()}();var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=t(require("jquery")):e.MotionUI=t(e.jQuery)}(void 0,function(e){function t(t,o,a,s){function u(){t||o.hide(),l(),s&&s.apply(o)}function l(){o[0].style.transitionDuration=0,o.removeClass(c+" "+f+" "+a)}if((o=e(o).eq(0)).length){if(null===r)return t?o.show():o.hide(),void s();var c=t?n[0]:n[1],f=t?i[0]:i[1];l(),o.addClass(a),o.css("transition","none"),requestAnimationFrame(function(){o.addClass(c),t&&o.show()}),requestAnimationFrame(function(){o[0].offsetWidth,o.css("transition",""),o.addClass(f)}),o.one("transitionend",u)}}!function(){Date.now||(Date.now=function(){return(new Date).getTime()});for(var e=["webkit","moz"],t=0;t<e.length&&!window.requestAnimationFrame;++t){var n=e[t];window.requestAnimationFrame=window[n+"RequestAnimationFrame"],window.cancelAnimationFrame=window[n+"CancelAnimationFrame"]||window[n+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var i=0;window.requestAnimationFrame=function(e){var t=Date.now(),n=Math.max(i+16,t);return setTimeout(function(){e(i=n)},n-t)},window.cancelAnimationFrame=clearTimeout}}();var n=["mui-enter","mui-leave"],i=["mui-enter-active","mui-leave-active"],r=function(){var e={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend"},t=window.document.createElement("div");for(var n in e)if(void 0!==t.style[n])return e[n];return null}();return{animateIn:function(e,n,i){t(!0,e,n,i)},animateOut:function(e,n,i){t(!1,e,n,i)}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsbC5taW4uanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm9iaiIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiYSIsImIiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJFcnJvciIsIndpbmRvdyIsInVuZGVmaW5lZCIsInAiLCJjIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidyIsImxlbmd0aCIsInIiLCJ0eXBlIiwiaXNXaW5kb3ciLCJCIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsIkUiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsImNhbGwiLCJub2RlVHlwZSIsImkiLCJEIiwidGVzdCIsImZpbHRlciIsIksiLCJNIiwiZWFjaCIsIm1hdGNoIiwiTCIsIk4iLCJPIiwiUCIsImUiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiYXBwbHkiLCJzbGljZSIsIlMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHkiLCJWIiwidGhpcyIsImV4cGFuZG8iLCJ1aWQiLCIkIiwiWSIsIkpTT04iLCJwYXJzZSIsIl8iLCJyZXBsYWNlIiwiWiIsImdldEF0dHJpYnV0ZSIsIlgiLCJzZXQiLCJmYSIsImYiLCJnIiwiaCIsImN1ciIsImNzcyIsImoiLCJjc3NOdW1iZXIiLCJrIiwiYmEiLCJleGVjIiwic3R5bGUiLCJ1bml0Iiwic3RhcnQiLCJlbmQiLCJoYSIsIm93bmVyRG9jdW1lbnQiLCJnYSIsImJvZHkiLCJpYSIsImRpc3BsYXkiLCJXIiwiZ2V0IiwiZGEiLCJuYSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsIm1lcmdlIiwib2EiLCJxYSIsImwiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwibSIsIm4iLCJvIiwicGEiLCJrYSIsIm1hIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsInB1c2giLCJjcmVhdGVUZXh0Tm9kZSIsImluQXJyYXkiLCJjb250YWlucyIsImxhIiwidmEiLCJ3YSIsInhhIiwiYWN0aXZlRWxlbWVudCIsInlhIiwib2ZmIiwiYXJndW1lbnRzIiwiZ3VpZCIsImV2ZW50IiwiYWRkIiwiRWEiLCJGYSIsIkdhIiwiQ2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJIYSIsImhhc0RhdGEiLCJhY2Nlc3MiLCJldmVudHMiLCJoYW5kbGUiLCJleHRlbmQiLCJJYSIsImphIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIkphIiwicSIsInMiLCJjaGVja0Nsb25lIiwiQmEiLCJlcSIsImh0bWwiLCJtYXAiLCJjbG9uZSIsInNyYyIsIl9ldmFsVXJsIiwiRGEiLCJLYSIsImNsZWFuRGF0YSIsIk9hIiwiTmEiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsIk1hIiwiTGEiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJQYSIsIldhIiwiVmEiLCJ0b1VwcGVyQ2FzZSIsIlVhIiwiWGEiLCJjc3NQcm9wcyIsIllhIiwiTWF0aCIsIm1heCIsIlphIiwiY2EiLCIkYSIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsIl9hIiwiaW5pdCIsImViIiwiYmIiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiZngiLCJpbnRlcnZhbCIsInRpY2siLCJmYiIsImFiIiwibm93IiwiZ2IiLCJoZWlnaHQiLCJvcGFjaXR5IiwiaGIiLCJrYiIsInR3ZWVuZXJzIiwiY29uY2F0IiwiaWIiLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJjYiIsImlzRW1wdHlPYmplY3QiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJlbW92ZSIsImpiIiwiY2FtZWxDYXNlIiwiQXJyYXkiLCJpc0FycmF5IiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcmVmaWx0ZXJzIiwiRGVmZXJyZWQiLCJlbGVtIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9wcyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwiZWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiY3JlYXRlVHdlZW4iLCJUd2VlbiIsInN0b3AiLCJyZWplY3RXaXRoIiwicHJveHkiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwicGIiLCJqb2luIiwicWIiLCJBYiIsIndiIiwiTWIiLCJ1bnNoaWZ0IiwiTmIiLCJkYXRhVHlwZXMiLCJKYiIsIk9iIiwiYWpheFNldHRpbmdzIiwiZmxhdE9wdGlvbnMiLCJQYiIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsIlFiIiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwiZGF0YVR5cGUiLCJzcGxpdCIsInN0YXRlIiwiZXJyb3IiLCJkYXRhIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJpbmRleE9mIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImZuIiwidCIsInUiLCJ2IiwianF1ZXJ5IiwidG9BcnJheSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJmaXJzdCIsImxhc3QiLCJzb3J0Iiwic3BsaWNlIiwiaXNQbGFpbk9iamVjdCIsInJhbmRvbSIsImlzUmVhZHkiLCJub29wIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsIkRhdGUiLCJzdXBwb3J0IiwieCIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJHIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsIkEiLCJzZXRBdHRyaWJ1dGUiLCJzYSIsImNhY2hlTGVuZ3RoIiwiYXR0ckhhbmRsZSIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJlYSIsInJhIiwidmFsdWUiLCJ0YSIsImRpciIsIm5leHQiLCJ1bmlxdWVJRCIsInVhIiwiSSIsInJlbGF0aXZlIiwibWF0Y2hlcyIsInphIiwiX2YiLCJmaW5kIiwiVEFHIiwieSIsInoiLCJ1bmlxdWVTb3J0IiwiQyIsInBvcCIsIkYiLCJIIiwiSiIsIlJlZ0V4cCIsIlEiLCJSIiwiVCIsIlUiLCJJRCIsIkNMQVNTIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsImFhIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhckNvZGVBdCIsImlzWE1MIiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0RG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImF0dHJpYnV0ZXMiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzb3J0RGV0YWNoZWQiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJnZXRUZXh0Iiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsInRhcmdldCIsImxvY2F0aW9uIiwiaGFzaCIsInJvb3QiLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsInBhcmVudCIsImhlYWRlciIsImlucHV0IiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3RvciIsInNlbGVjdCIsImV4cHIiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwiaXMiLCJwYXJzZUhUTUwiLCJjaGlsZHJlbiIsInByZXYiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsIm9uY2UiLCJzdG9wT25GYWxzZSIsIm1lbW9yeSIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJmaXJlZCIsImNhdGNoIiwicGlwZSIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsImdldFN0YWNrSG9vayIsIndoZW4iLCJjb25zb2xlIiwid2FybiIsIm5hbWUiLCJtZXNzYWdlIiwic3RhY2siLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5V2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsIl9iIiwiY2FjaGUiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsImNsZWFyUXVldWUiLCJzb3VyY2UiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJnbG9iYWwiLCJoYW5kbGVyIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaGFuZGxlcnMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJoYW5kbGVPYmoiLCJyZXN1bHQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsImFkZFByb3AiLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXkiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib24iLCJvbmUiLCJBYSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3NzVGV4dCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsIlFhIiwiUmEiLCJTYSIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsIlRhIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcm9wIiwib3B0aW9ucyIsInByb3BIb29rcyIsInBvcyIsInN0ZXAiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImRiIiwiQW5pbWF0aW9uIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsIm9sZCIsImZhZGVUbyIsImFuaW1hdGUiLCJmaW5pc2giLCJ0aW1lcnMiLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwibGIiLCJtYiIsInJlbW92ZUF0dHIiLCJhdHRySG9va3MiLCJuYiIsIm9iIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiaGFzQ2xhc3MiLCJyYiIsInZhbCIsInZhbEhvb2tzIiwic2IiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmb2N1c2luIiwidGIiLCJ1YiIsInZiIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJ4YiIsInliIiwiemIiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIktiIiwiTGIiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsInhtbCIsImpzb24iLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImNvbnRleHQiLCJhamF4U2V0dXAiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJpZk1vZGlmaWVkIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInN0YXR1c0NvZGUiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImFib3J0IiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJob3N0IiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwidGltZW91dCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwid3JhcCIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiUmIiLCIwIiwiMTIyMyIsIlNiIiwiY29ycyIsIl9jIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJyZXNwb25zZSIsInNjcmlwdCIsInRleHQgc2NyaXB0IiwiX2MyIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJUYiIsIlViIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsInVzaW5nIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvbGRSZWFkeSIsInBhcnNlSlNPTiIsImRlZmluZSIsImFtZCIsIlZiIiwialF1ZXJ5IiwiV2IiLCJub0NvbmZsaWN0IiwiZnVuY3Rpb25OYW1lIiwiRnVuY3Rpb24iLCJyZXN1bHRzIiwicGFyc2VWYWx1ZSIsInN0ciIsImh5cGhlbmF0ZSIsIkZvdW5kYXRpb24iLCJ2ZXJzaW9uIiwiX3BsdWdpbnMiLCJfdXVpZHMiLCJydGwiLCJwbHVnaW4iLCJfcGx1Z2luIiwiYXR0ck5hbWUiLCJyZWdpc3RlclBsdWdpbiIsInBsdWdpbk5hbWUiLCJ1dWlkIiwiR2V0WW9EaWdpdHMiLCIkZWxlbWVudCIsInVucmVnaXN0ZXJQbHVnaW4iLCJyZUluaXQiLCJwbHVnaW5zIiwiaXNKUSIsIl9pbml0IiwiX3RoaXMiLCJvYmplY3QiLCJwbGdzIiwiZm9yRWFjaCIsImZvdW5kYXRpb24iLCJzdHJpbmciLCJrZXlzIiwiZXJyIiwicm91bmQiLCJwb3ciLCJyZWZsb3ciLCIkZWwiLCJvcHQiLCJlbCIsImVyIiwiZ2V0Rm5OYW1lIiwidHJhbnNpdGlvbmVuZCIsIiRlbGVtIiwidHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsInV0aWwiLCJ0aHJvdHRsZSIsImZ1bmMiLCJhcmdzIiwiJG1ldGEiLCIkbm9KUyIsIk1lZGlhUXVlcnkiLCJwbHVnQ2xhc3MiLCJSZWZlcmVuY2VFcnJvciIsImdldFRpbWUiLCJ2ZW5kb3JzIiwidnAiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImxhc3RUaW1lIiwiY2FsbGJhY2siLCJuZXh0VGltZSIsInBlcmZvcm1hbmNlIiwib1RoaXMiLCJhQXJncyIsImZUb0JpbmQiLCJmTk9QIiwiZkJvdW5kIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJPZmZDYW52YXMiLCJlbGVtZW50IiwiZGVmYXVsdHMiLCIkbGFzdFRyaWdnZXIiLCIkdHJpZ2dlcnMiLCJfZXZlbnRzIiwiS2V5Ym9hcmQiLCJyZWdpc3RlciIsIkVTQ0FQRSIsImNvbnRlbnRPdmVybGF5Iiwib3ZlcmxheSIsIm92ZXJsYXlQb3NpdGlvbiIsIiRvdmVybGF5IiwiaXNSZXZlYWxlZCIsInJldmVhbENsYXNzIiwicmV2ZWFsT24iLCJfc2V0TVFDaGVja2VyIiwidHJhbnNpdGlvblRpbWUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJvcGVuLnpmLnRyaWdnZXIiLCJjbG9zZS56Zi50cmlnZ2VyIiwiY2xvc2UiLCJ0b2dnbGUuemYudHJpZ2dlciIsImtleWRvd24uemYub2ZmY2FudmFzIiwiX2hhbmRsZUtleWJvYXJkIiwiY2xvc2VPbkNsaWNrIiwiY2xpY2suemYub2ZmY2FudmFzIiwiYXRMZWFzdCIsInJldmVhbCIsIiRjbG9zZXIiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJhbGxvd1VwIiwiYWxsb3dEb3duIiwibGFzdFkiLCJ1cCIsImRvd24iLCJmb3JjZVRvIiwiY29udGVudFNjcm9sbCIsIl9zdG9wU2Nyb2xsaW5nIiwiX3JlY29yZFNjcm9sbGFibGUiLCJfc3RvcFNjcm9sbFByb3BhZ2F0aW9uIiwiYXV0b0ZvY3VzIiwidHJhcEZvY3VzIiwicmVsZWFzZUZvY3VzIiwiX3RoaXMyIiwiaGFuZGxlS2V5IiwiaGFuZGxlZCIsIk9yYml0IiwibHRyIiwiQVJST1dfUklHSFQiLCJBUlJPV19MRUZUIiwiX3Jlc2V0IiwiJHdyYXBwZXIiLCJjb250YWluZXJDbGFzcyIsIiRzbGlkZXMiLCJzbGlkZUNsYXNzIiwiJGltYWdlcyIsImluaXRBY3RpdmUiLCJkYXRhLXJlc2l6ZSIsInVzZU1VSSIsIm9uSW1hZ2VzTG9hZGVkIiwiX3ByZXBhcmVGb3JPcmJpdCIsImJ1bGxldHMiLCJfbG9hZEJ1bGxldHMiLCJhdXRvUGxheSIsImdlb1N5bmMiLCJhY2Nlc3NpYmxlIiwiJGJ1bGxldHMiLCJib3hPZkJ1bGxldHMiLCJUaW1lciIsInRpbWVyRGVsYXkiLCJpbmZpbml0ZSIsImNoYW5nZVNsaWRlIiwiX3NldFdyYXBwZXJIZWlnaHQiLCJ0ZW1wIiwiY291bnRlciIsInJlc2l6ZW1lLnpmLnRyaWdnZXIiLCJzd2lwZSIsInBhdXNlT25Ib3ZlciIsInBhdXNlIiwibmF2QnV0dG9ucyIsIm5leHRDbGFzcyIsInByZXZDbGFzcyIsImlkeCIsIiRzbGlkZSIsInByZXZpb3VzIiwicmVzdGFydCIsIl91cGRhdGVCdWxsZXRzIiwiaXNMVFIiLCJjaG9zZW5TbGlkZSIsIiRjdXJTbGlkZSIsIiRuZXdTbGlkZSIsIiRmaXJzdFNsaWRlIiwiJGxhc3RTbGlkZSIsImRpckluIiwiZGlyT3V0IiwiaW5maW5pdGVXcmFwIiwiTW90aW9uIiwiYW5pbWF0ZUluIiwiYW5pbWF0ZU91dCIsImlzUGF1c2VkIiwic3BhbiIsImFuaW1JbkZyb21SaWdodCIsImFuaW1PdXRUb1JpZ2h0IiwiYW5pbUluRnJvbUxlZnQiLCJhbmltT3V0VG9MZWZ0Iiwia2V5Q29kZXMiLCI5IiwiMTMiLCIyNyIsIjMyIiwiMzciLCIzOCIsIjM5IiwiNDAiLCJjb21tYW5kcyIsImtjcyIsImtjIiwicGFyc2VLZXkiLCJjb21wb25lbnQiLCJmdW5jdGlvbnMiLCJjbWRzIiwiY29tbWFuZCIsImNvbW1hbmRMaXN0IiwidW5oYW5kbGVkIiwiZmluZEZvY3VzYWJsZSIsImNvbXBvbmVudE5hbWUiLCIkZm9jdXNhYmxlIiwiJGZpcnN0Rm9jdXNhYmxlIiwiJGxhc3RGb2N1c2FibGUiLCJwYXJzZVN0eWxlVG9PYmplY3QiLCJzdHlsZU9iamVjdCIsInJlZHVjZSIsInJldCIsInBhcnRzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicXVlcmllcyIsImN1cnJlbnQiLCJuYW1lZFF1ZXJpZXMiLCJzZWxmIiwiX2dldEN1cnJlbnRTaXplIiwiX3dhdGNoZXIiLCJzaXplIiwicXVlcnkiLCJtYXRjaE1lZGlhIiwibWF0Y2hlZCIsIm5ld1NpemUiLCJjdXJyZW50U2l6ZSIsInN0eWxlTWVkaWEiLCJtZWRpYSIsImluZm8iLCJjdXJyZW50U3R5bGUiLCJtYXRjaE1lZGl1bSIsInN0eWxlU2hlZXQiLCJNb3ZlIiwibW92ZSIsInRzIiwicHJvZyIsImlzSW4iLCJhbmltYXRpb24iLCJpbml0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsImluaXRDbGFzc2VzIiwiYWN0aXZlQ2xhc3NlcyIsIm5hbWVTcGFjZSIsInJlbWFpbiIsImltYWdlcyIsInNpbmdsZUltYWdlTG9hZGVkIiwidW5sb2FkZWQiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJpc01vdmluZyIsInNwb3RTd2lwZSIsImR4Iiwic3RhcnRQb3NYIiwiZWxhcHNlZFRpbWUiLCJhYnMiLCJtb3ZlVGhyZXNob2xkIiwidGltZVRocmVzaG9sZCIsIm9uVG91Y2hTdGFydCIsInN0YXJ0UG9zWSIsImFkZFRvdWNoIiwiaGFuZGxlVG91Y2giLCJzaW11bGF0ZWRFdmVudCIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsIk1vdXNlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNoZWNrTGlzdGVuZXJzIiwiZXZlbnRzTGlzdGVuZXIiLCJyZXNpemVMaXN0ZW5lciIsInNjcm9sbExpc3RlbmVyIiwibXV0YXRlTGlzdGVuZXIiLCJjbG9zZW1lTGlzdGVuZXIiLCJ5ZXRpQm94ZXMiLCJwbHVnTmFtZXMiLCJsaXN0ZW5lcnMiLCJwbHVnaW5JZCIsImRlYm91bmNlIiwiJG5vZGVzIiwiTXV0YXRpb25PYnNlcnZlciIsIm5vZGVzIiwibGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiIsIm11dGF0aW9uUmVjb3Jkc0xpc3QiLCIkdGFyZ2V0IiwiYXR0cmlidXRlTmFtZSIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsInByZWZpeGVzIiwidHJpZ2dlcnMiLCJJSGVhcllvdSIsImZhY3RvcnkiLCJyZXF1aXJlIiwiTW90aW9uVUkiLCJlbmRF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MkIsRUFBSyx5QkFBMkJwMkIsT0FBT28yQixFQUFLLCtCQUVuRixHQUFJLHVCQUF1QjEwQixLQUFLMUIsT0FBT3MyQixVQUFVQyxhQUFldjJCLE9BQU9rTCx3QkFBMEJsTCxPQUFPcTJCLHFCQUFzQixDQUM1SCxJQUFJRyxFQUFXLEVBQ2Z4MkIsT0FBT2tMLHNCQUF3QixTQUFVdXJCLEdBQ3ZDLElBQUlockIsRUFBTXdHLEtBQUt4RyxNQUNYaXJCLEVBQVdwc0IsS0FBS0MsSUFBSWlzQixFQUFXLEdBQUkvcUIsR0FDdkMsT0FBT04sV0FBVyxXQUNoQnNyQixFQUFTRCxFQUFXRSxJQUNuQkEsRUFBV2pyQixJQUVoQnpMLE9BQU9xMkIscUJBQXVCeE4saUJBSWxDLElBQUk0WSxHQUFlLFlBQWEsYUFDNUJDLEdBQWlCLG1CQUFvQixvQkFHckN5RCxFQUFXLFdBQ2IsSUFBSS9QLEdBQ0ZDLFdBQWMsZ0JBQ2RDLGlCQUFvQixzQkFDcEJDLGNBQWlCLGdCQUNqQkMsWUFBZSxrQkFFYmxvQixFQUFPdE4sT0FBT0YsU0FBU08sY0FBYyxPQUV6QyxJQUFLLElBQUl3USxLQUFLdWtCLEVBQ1osUUFBNkIsSUFBbEI5bkIsRUFBSy9JLE1BQU1zTSxHQUNwQixPQUFPdWtCLEVBQVl2a0IsR0FJdkIsT0FBTyxRQTREVCxPQVRFNHNCLFVBQVcsU0FBbUJsRyxFQUFTK0osRUFBVzkwQixHQUNoRHliLEdBQVEsRUFBTXNQLEVBQVMrSixFQUFXOTBCLElBR3BDa3hCLFdBQVksU0FBb0JuRyxFQUFTK0osRUFBVzkwQixHQUNsRHliLEdBQVEsRUFBT3NQLEVBQVMrSixFQUFXOTBCIiwiZmlsZSI6ImFsbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKiEgalF1ZXJ5IHYzLjIuMSB8IChjKSBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbiAoYSwgYikge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgXCJvYmplY3RcIiA9PSAodHlwZW9mIG1vZHVsZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG1vZHVsZSkpICYmIFwib2JqZWN0XCIgPT0gX3R5cGVvZihtb2R1bGUuZXhwb3J0cykgPyBtb2R1bGUuZXhwb3J0cyA9IGEuZG9jdW1lbnQgPyBiKGEsICEwKSA6IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKCFhLmRvY3VtZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO3JldHVybiBiKGEpO1xuICB9IDogYihhKTtcbn0oXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogdW5kZWZpbmVkLCBmdW5jdGlvbiAoYSwgYikge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIGMgPSBbXSxcbiAgICAgIGQgPSBhLmRvY3VtZW50LFxuICAgICAgZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgIGYgPSBjLnNsaWNlLFxuICAgICAgZyA9IGMuY29uY2F0LFxuICAgICAgaCA9IGMucHVzaCxcbiAgICAgIGkgPSBjLmluZGV4T2YsXG4gICAgICBqID0ge30sXG4gICAgICBrID0gai50b1N0cmluZyxcbiAgICAgIGwgPSBqLmhhc093blByb3BlcnR5LFxuICAgICAgbSA9IGwudG9TdHJpbmcsXG4gICAgICBuID0gbS5jYWxsKE9iamVjdCksXG4gICAgICBvID0ge307ZnVuY3Rpb24gcChhLCBiKSB7XG4gICAgYiA9IGIgfHwgZDt2YXIgYyA9IGIuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtjLnRleHQgPSBhLCBiLmhlYWQuYXBwZW5kQ2hpbGQoYykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTtcbiAgfXZhciBxID0gXCIzLjIuMVwiLFxuICAgICAgciA9IGZ1bmN0aW9uIHIoYSwgYikge1xuICAgIHJldHVybiBuZXcgci5mbi5pbml0KGEsIGIpO1xuICB9LFxuICAgICAgcyA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcbiAgICAgIHQgPSAvXi1tcy0vLFxuICAgICAgdSA9IC8tKFthLXpdKS9nLFxuICAgICAgdiA9IGZ1bmN0aW9uIHYoYSwgYikge1xuICAgIHJldHVybiBiLnRvVXBwZXJDYXNlKCk7XG4gIH07ci5mbiA9IHIucHJvdG90eXBlID0geyBqcXVlcnk6IHEsIGNvbnN0cnVjdG9yOiByLCBsZW5ndGg6IDAsIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgICByZXR1cm4gZi5jYWxsKHRoaXMpO1xuICAgIH0sIGdldDogZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgIHJldHVybiBudWxsID09IGEgPyBmLmNhbGwodGhpcykgOiBhIDwgMCA/IHRoaXNbYSArIHRoaXMubGVuZ3RoXSA6IHRoaXNbYV07XG4gICAgfSwgcHVzaFN0YWNrOiBmdW5jdGlvbiBwdXNoU3RhY2soYSkge1xuICAgICAgdmFyIGIgPSByLm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSwgYSk7cmV0dXJuIGIucHJldk9iamVjdCA9IHRoaXMsIGI7XG4gICAgfSwgZWFjaDogZnVuY3Rpb24gZWFjaChhKSB7XG4gICAgICByZXR1cm4gci5lYWNoKHRoaXMsIGEpO1xuICAgIH0sIG1hcDogZnVuY3Rpb24gbWFwKGEpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhyLm1hcCh0aGlzLCBmdW5jdGlvbiAoYiwgYykge1xuICAgICAgICByZXR1cm4gYS5jYWxsKGIsIGMsIGIpO1xuICAgICAgfSkpO1xuICAgIH0sIHNsaWNlOiBmdW5jdGlvbiBzbGljZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH0sIGZpcnN0OiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVxKDApO1xuICAgIH0sIGxhc3Q6IGZ1bmN0aW9uIGxhc3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcSgtMSk7XG4gICAgfSwgZXE6IGZ1bmN0aW9uIGVxKGEpIHtcbiAgICAgIHZhciBiID0gdGhpcy5sZW5ndGgsXG4gICAgICAgICAgYyA9ICthICsgKGEgPCAwID8gYiA6IDApO3JldHVybiB0aGlzLnB1c2hTdGFjayhjID49IDAgJiYgYyA8IGIgPyBbdGhpc1tjXV0gOiBbXSk7XG4gICAgfSwgZW5kOiBmdW5jdGlvbiBlbmQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcbiAgICB9LCBwdXNoOiBoLCBzb3J0OiBjLnNvcnQsIHNwbGljZTogYy5zcGxpY2UgfSwgci5leHRlbmQgPSByLmZuLmV4dGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYSxcbiAgICAgICAgYixcbiAgICAgICAgYyxcbiAgICAgICAgZCxcbiAgICAgICAgZSxcbiAgICAgICAgZixcbiAgICAgICAgZyA9IGFyZ3VtZW50c1swXSB8fCB7fSxcbiAgICAgICAgaCA9IDEsXG4gICAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBqID0gITE7Zm9yIChcImJvb2xlYW5cIiA9PSB0eXBlb2YgZyAmJiAoaiA9IGcsIGcgPSBhcmd1bWVudHNbaF0gfHwge30sIGgrKyksIFwib2JqZWN0XCIgPT0gKHR5cGVvZiBnID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZykpIHx8IHIuaXNGdW5jdGlvbihnKSB8fCAoZyA9IHt9KSwgaCA9PT0gaSAmJiAoZyA9IHRoaXMsIGgtLSk7IGggPCBpOyBoKyspIHtcbiAgICAgIGlmIChudWxsICE9IChhID0gYXJndW1lbnRzW2hdKSkgZm9yIChiIGluIGEpIHtcbiAgICAgICAgYyA9IGdbYl0sIGQgPSBhW2JdLCBnICE9PSBkICYmIChqICYmIGQgJiYgKHIuaXNQbGFpbk9iamVjdChkKSB8fCAoZSA9IEFycmF5LmlzQXJyYXkoZCkpKSA/IChlID8gKGUgPSAhMSwgZiA9IGMgJiYgQXJyYXkuaXNBcnJheShjKSA/IGMgOiBbXSkgOiBmID0gYyAmJiByLmlzUGxhaW5PYmplY3QoYykgPyBjIDoge30sIGdbYl0gPSByLmV4dGVuZChqLCBmLCBkKSkgOiB2b2lkIDAgIT09IGQgJiYgKGdbYl0gPSBkKSk7XG4gICAgICB9XG4gICAgfXJldHVybiBnO1xuICB9LCByLmV4dGVuZCh7IGV4cGFuZG86IFwialF1ZXJ5XCIgKyAocSArIE1hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLCBcIlwiKSwgaXNSZWFkeTogITAsIGVycm9yOiBmdW5jdGlvbiBlcnJvcihhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYSk7XG4gICAgfSwgbm9vcDogZnVuY3Rpb24gbm9vcCgpIHt9LCBpc0Z1bmN0aW9uOiBmdW5jdGlvbiBpc0Z1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHIudHlwZShhKTtcbiAgICB9LCBpc1dpbmRvdzogZnVuY3Rpb24gaXNXaW5kb3coYSkge1xuICAgICAgcmV0dXJuIG51bGwgIT0gYSAmJiBhID09PSBhLndpbmRvdztcbiAgICB9LCBpc051bWVyaWM6IGZ1bmN0aW9uIGlzTnVtZXJpYyhhKSB7XG4gICAgICB2YXIgYiA9IHIudHlwZShhKTtyZXR1cm4gKFwibnVtYmVyXCIgPT09IGIgfHwgXCJzdHJpbmdcIiA9PT0gYikgJiYgIWlzTmFOKGEgLSBwYXJzZUZsb2F0KGEpKTtcbiAgICB9LCBpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGEpIHtcbiAgICAgIHZhciBiLCBjO3JldHVybiAhKCFhIHx8IFwiW29iamVjdCBPYmplY3RdXCIgIT09IGsuY2FsbChhKSkgJiYgKCEoYiA9IGUoYSkpIHx8IChjID0gbC5jYWxsKGIsIFwiY29uc3RydWN0b3JcIikgJiYgYi5jb25zdHJ1Y3RvciwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBjICYmIG0uY2FsbChjKSA9PT0gbikpO1xuICAgIH0sIGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uIGlzRW1wdHlPYmplY3QoYSkge1xuICAgICAgdmFyIGI7Zm9yIChiIGluIGEpIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgfXJldHVybiAhMDtcbiAgICB9LCB0eXBlOiBmdW5jdGlvbiB0eXBlKGEpIHtcbiAgICAgIHJldHVybiBudWxsID09IGEgPyBhICsgXCJcIiA6IFwib2JqZWN0XCIgPT0gKHR5cGVvZiBhID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYSkpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYSA/IGpbay5jYWxsKGEpXSB8fCBcIm9iamVjdFwiIDogdHlwZW9mIGEgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihhKTtcbiAgICB9LCBnbG9iYWxFdmFsOiBmdW5jdGlvbiBnbG9iYWxFdmFsKGEpIHtcbiAgICAgIHAoYSk7XG4gICAgfSwgY2FtZWxDYXNlOiBmdW5jdGlvbiBjYW1lbENhc2UoYSkge1xuICAgICAgcmV0dXJuIGEucmVwbGFjZSh0LCBcIm1zLVwiKS5yZXBsYWNlKHUsIHYpO1xuICAgIH0sIGVhY2g6IGZ1bmN0aW9uIGVhY2goYSwgYikge1xuICAgICAgdmFyIGMsXG4gICAgICAgICAgZCA9IDA7aWYgKHcoYSkpIHtcbiAgICAgICAgZm9yIChjID0gYS5sZW5ndGg7IGQgPCBjOyBkKyspIHtcbiAgICAgICAgICBpZiAoYi5jYWxsKGFbZF0sIGQsIGFbZF0pID09PSAhMSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKGQgaW4gYSkge1xuICAgICAgICBpZiAoYi5jYWxsKGFbZF0sIGQsIGFbZF0pID09PSAhMSkgYnJlYWs7XG4gICAgICB9cmV0dXJuIGE7XG4gICAgfSwgdHJpbTogZnVuY3Rpb24gdHJpbShhKSB7XG4gICAgICByZXR1cm4gbnVsbCA9PSBhID8gXCJcIiA6IChhICsgXCJcIikucmVwbGFjZShzLCBcIlwiKTtcbiAgICB9LCBtYWtlQXJyYXk6IGZ1bmN0aW9uIG1ha2VBcnJheShhLCBiKSB7XG4gICAgICB2YXIgYyA9IGIgfHwgW107cmV0dXJuIG51bGwgIT0gYSAmJiAodyhPYmplY3QoYSkpID8gci5tZXJnZShjLCBcInN0cmluZ1wiID09IHR5cGVvZiBhID8gW2FdIDogYSkgOiBoLmNhbGwoYywgYSkpLCBjO1xuICAgIH0sIGluQXJyYXk6IGZ1bmN0aW9uIGluQXJyYXkoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIG51bGwgPT0gYiA/IC0xIDogaS5jYWxsKGIsIGEsIGMpO1xuICAgIH0sIG1lcmdlOiBmdW5jdGlvbiBtZXJnZShhLCBiKSB7XG4gICAgICBmb3IgKHZhciBjID0gK2IubGVuZ3RoLCBkID0gMCwgZSA9IGEubGVuZ3RoOyBkIDwgYzsgZCsrKSB7XG4gICAgICAgIGFbZSsrXSA9IGJbZF07XG4gICAgICB9cmV0dXJuIGEubGVuZ3RoID0gZSwgYTtcbiAgICB9LCBncmVwOiBmdW5jdGlvbiBncmVwKGEsIGIsIGMpIHtcbiAgICAgIGZvciAodmFyIGQsIGUgPSBbXSwgZiA9IDAsIGcgPSBhLmxlbmd0aCwgaCA9ICFjOyBmIDwgZzsgZisrKSB7XG4gICAgICAgIGQgPSAhYihhW2ZdLCBmKSwgZCAhPT0gaCAmJiBlLnB1c2goYVtmXSk7XG4gICAgICB9cmV0dXJuIGU7XG4gICAgfSwgbWFwOiBmdW5jdGlvbiBtYXAoYSwgYiwgYykge1xuICAgICAgdmFyIGQsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBmID0gMCxcbiAgICAgICAgICBoID0gW107aWYgKHcoYSkpIGZvciAoZCA9IGEubGVuZ3RoOyBmIDwgZDsgZisrKSB7XG4gICAgICAgIGUgPSBiKGFbZl0sIGYsIGMpLCBudWxsICE9IGUgJiYgaC5wdXNoKGUpO1xuICAgICAgfSBlbHNlIGZvciAoZiBpbiBhKSB7XG4gICAgICAgIGUgPSBiKGFbZl0sIGYsIGMpLCBudWxsICE9IGUgJiYgaC5wdXNoKGUpO1xuICAgICAgfXJldHVybiBnLmFwcGx5KFtdLCBoKTtcbiAgICB9LCBndWlkOiAxLCBwcm94eTogZnVuY3Rpb24gcHJveHkoYSwgYikge1xuICAgICAgdmFyIGMsIGQsIGU7aWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGIgJiYgKGMgPSBhW2JdLCBiID0gYSwgYSA9IGMpLCByLmlzRnVuY3Rpb24oYSkpIHJldHVybiBkID0gZi5jYWxsKGFyZ3VtZW50cywgMiksIGUgPSBmdW5jdGlvbiBlKCkge1xuICAgICAgICByZXR1cm4gYS5hcHBseShiIHx8IHRoaXMsIGQuY29uY2F0KGYuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICB9LCBlLmd1aWQgPSBhLmd1aWQgPSBhLmd1aWQgfHwgci5ndWlkKyssIGU7XG4gICAgfSwgbm93OiBEYXRlLm5vdywgc3VwcG9ydDogbyB9KSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgKHIuZm5bU3ltYm9sLml0ZXJhdG9yXSA9IGNbU3ltYm9sLml0ZXJhdG9yXSksIHIuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIGpbXCJbb2JqZWN0IFwiICsgYiArIFwiXVwiXSA9IGIudG9Mb3dlckNhc2UoKTtcbiAgfSk7ZnVuY3Rpb24gdyhhKSB7XG4gICAgdmFyIGIgPSAhIWEgJiYgXCJsZW5ndGhcIiBpbiBhICYmIGEubGVuZ3RoLFxuICAgICAgICBjID0gci50eXBlKGEpO3JldHVybiBcImZ1bmN0aW9uXCIgIT09IGMgJiYgIXIuaXNXaW5kb3coYSkgJiYgKFwiYXJyYXlcIiA9PT0gYyB8fCAwID09PSBiIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIGIgJiYgYiA+IDAgJiYgYiAtIDEgaW4gYSk7XG4gIH12YXIgeCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIGIsXG4gICAgICAgIGMsXG4gICAgICAgIGQsXG4gICAgICAgIGUsXG4gICAgICAgIGYsXG4gICAgICAgIGcsXG4gICAgICAgIGgsXG4gICAgICAgIGksXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIGwsXG4gICAgICAgIG0sXG4gICAgICAgIG4sXG4gICAgICAgIG8sXG4gICAgICAgIHAsXG4gICAgICAgIHEsXG4gICAgICAgIHIsXG4gICAgICAgIHMsXG4gICAgICAgIHQsXG4gICAgICAgIHUgPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG4gICAgICAgIHYgPSBhLmRvY3VtZW50LFxuICAgICAgICB3ID0gMCxcbiAgICAgICAgeCA9IDAsXG4gICAgICAgIHkgPSBoYSgpLFxuICAgICAgICB6ID0gaGEoKSxcbiAgICAgICAgQSA9IGhhKCksXG4gICAgICAgIEIgPSBmdW5jdGlvbiBCKGEsIGIpIHtcbiAgICAgIHJldHVybiBhID09PSBiICYmIChsID0gITApLCAwO1xuICAgIH0sXG4gICAgICAgIEMgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgICAgRCA9IFtdLFxuICAgICAgICBFID0gRC5wb3AsXG4gICAgICAgIEYgPSBELnB1c2gsXG4gICAgICAgIEcgPSBELnB1c2gsXG4gICAgICAgIEggPSBELnNsaWNlLFxuICAgICAgICBJID0gZnVuY3Rpb24gSShhLCBiKSB7XG4gICAgICBmb3IgKHZhciBjID0gMCwgZCA9IGEubGVuZ3RoOyBjIDwgZDsgYysrKSB7XG4gICAgICAgIGlmIChhW2NdID09PSBiKSByZXR1cm4gYztcbiAgICAgIH1yZXR1cm4gLTE7XG4gICAgfSxcbiAgICAgICAgSiA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcbiAgICAgICAgSyA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcbiAgICAgICAgTCA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcbiAgICAgICAgTSA9IFwiXFxcXFtcIiArIEsgKyBcIiooXCIgKyBMICsgXCIpKD86XCIgKyBLICsgXCIqKFsqXiR8IX5dPz0pXCIgKyBLICsgXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIEwgKyBcIikpfClcIiArIEsgKyBcIipcXFxcXVwiLFxuICAgICAgICBOID0gXCI6KFwiICsgTCArIFwiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIE0gKyBcIikqKXwuKilcXFxcKXwpXCIsXG4gICAgICAgIE8gPSBuZXcgUmVnRXhwKEsgKyBcIitcIiwgXCJnXCIpLFxuICAgICAgICBQID0gbmV3IFJlZ0V4cChcIl5cIiArIEsgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyBLICsgXCIrJFwiLCBcImdcIiksXG4gICAgICAgIFEgPSBuZXcgUmVnRXhwKFwiXlwiICsgSyArIFwiKixcIiArIEsgKyBcIipcIiksXG4gICAgICAgIFIgPSBuZXcgUmVnRXhwKFwiXlwiICsgSyArIFwiKihbPit+XXxcIiArIEsgKyBcIilcIiArIEsgKyBcIipcIiksXG4gICAgICAgIFMgPSBuZXcgUmVnRXhwKFwiPVwiICsgSyArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyBLICsgXCIqXFxcXF1cIiwgXCJnXCIpLFxuICAgICAgICBUID0gbmV3IFJlZ0V4cChOKSxcbiAgICAgICAgVSA9IG5ldyBSZWdFeHAoXCJeXCIgKyBMICsgXCIkXCIpLFxuICAgICAgICBWID0geyBJRDogbmV3IFJlZ0V4cChcIl4jKFwiICsgTCArIFwiKVwiKSwgQ0xBU1M6IG5ldyBSZWdFeHAoXCJeXFxcXC4oXCIgKyBMICsgXCIpXCIpLCBUQUc6IG5ldyBSZWdFeHAoXCJeKFwiICsgTCArIFwifFsqXSlcIiksIEFUVFI6IG5ldyBSZWdFeHAoXCJeXCIgKyBNKSwgUFNFVURPOiBuZXcgUmVnRXhwKFwiXlwiICsgTiksIENISUxEOiBuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIEsgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgSyArIFwiKig/OihbKy1dfClcIiArIEsgKyBcIiooXFxcXGQrKXwpKVwiICsgSyArIFwiKlxcXFwpfClcIiwgXCJpXCIpLCBib29sOiBuZXcgUmVnRXhwKFwiXig/OlwiICsgSiArIFwiKSRcIiwgXCJpXCIpLCBuZWVkc0NvbnRleHQ6IG5ldyBSZWdFeHAoXCJeXCIgKyBLICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgSyArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIEsgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIikgfSxcbiAgICAgICAgVyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG4gICAgICAgIFggPSAvXmhcXGQkL2ksXG4gICAgICAgIFkgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuICAgICAgICBaID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG4gICAgICAgICQgPSAvWyt+XS8sXG4gICAgICAgIF8gPSBuZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyBLICsgXCI/fChcIiArIEsgKyBcIil8LilcIiwgXCJpZ1wiKSxcbiAgICAgICAgYWEgPSBmdW5jdGlvbiBhYShhLCBiLCBjKSB7XG4gICAgICB2YXIgZCA9IFwiMHhcIiArIGIgLSA2NTUzNjtyZXR1cm4gZCAhPT0gZCB8fCBjID8gYiA6IGQgPCAwID8gU3RyaW5nLmZyb21DaGFyQ29kZShkICsgNjU1MzYpIDogU3RyaW5nLmZyb21DaGFyQ29kZShkID4+IDEwIHwgNTUyOTYsIDEwMjMgJiBkIHwgNTYzMjApO1xuICAgIH0sXG4gICAgICAgIGJhID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG4gICAgICAgIGNhID0gZnVuY3Rpb24gY2EoYSwgYikge1xuICAgICAgcmV0dXJuIGIgPyBcIlxcMFwiID09PSBhID8gXCJcXHVGRkZEXCIgOiBhLnNsaWNlKDAsIC0xKSArIFwiXFxcXFwiICsgYS5jaGFyQ29kZUF0KGEubGVuZ3RoIC0gMSkudG9TdHJpbmcoMTYpICsgXCIgXCIgOiBcIlxcXFxcIiArIGE7XG4gICAgfSxcbiAgICAgICAgZGEgPSBmdW5jdGlvbiBkYSgpIHtcbiAgICAgIG0oKTtcbiAgICB9LFxuICAgICAgICBlYSA9IHRhKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gYS5kaXNhYmxlZCA9PT0gITAgJiYgKFwiZm9ybVwiIGluIGEgfHwgXCJsYWJlbFwiIGluIGEpO1xuICAgIH0sIHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9KTt0cnkge1xuICAgICAgRy5hcHBseShEID0gSC5jYWxsKHYuY2hpbGROb2RlcyksIHYuY2hpbGROb2RlcyksIERbdi5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGU7XG4gICAgfSBjYXRjaCAoZmEpIHtcbiAgICAgIEcgPSB7IGFwcGx5OiBELmxlbmd0aCA/IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgRi5hcHBseShhLCBILmNhbGwoYikpO1xuICAgICAgICB9IDogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICB2YXIgYyA9IGEubGVuZ3RoLFxuICAgICAgICAgICAgICBkID0gMDt3aGlsZSAoYVtjKytdID0gYltkKytdKSB7fWEubGVuZ3RoID0gYyAtIDE7XG4gICAgICAgIH0gfTtcbiAgICB9ZnVuY3Rpb24gZ2EoYSwgYiwgZCwgZSkge1xuICAgICAgdmFyIGYsXG4gICAgICAgICAgaCxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgbCxcbiAgICAgICAgICBvLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgcyA9IGIgJiYgYi5vd25lckRvY3VtZW50LFxuICAgICAgICAgIHcgPSBiID8gYi5ub2RlVHlwZSA6IDk7aWYgKGQgPSBkIHx8IFtdLCBcInN0cmluZ1wiICE9IHR5cGVvZiBhIHx8ICFhIHx8IDEgIT09IHcgJiYgOSAhPT0gdyAmJiAxMSAhPT0gdykgcmV0dXJuIGQ7aWYgKCFlICYmICgoYiA/IGIub3duZXJEb2N1bWVudCB8fCBiIDogdikgIT09IG4gJiYgbShiKSwgYiA9IGIgfHwgbiwgcCkpIHtcbiAgICAgICAgaWYgKDExICE9PSB3ICYmIChsID0gWi5leGVjKGEpKSkgaWYgKGYgPSBsWzFdKSB7XG4gICAgICAgICAgaWYgKDkgPT09IHcpIHtcbiAgICAgICAgICAgIGlmICghKGogPSBiLmdldEVsZW1lbnRCeUlkKGYpKSkgcmV0dXJuIGQ7aWYgKGouaWQgPT09IGYpIHJldHVybiBkLnB1c2goaiksIGQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChzICYmIChqID0gcy5nZXRFbGVtZW50QnlJZChmKSkgJiYgdChiLCBqKSAmJiBqLmlkID09PSBmKSByZXR1cm4gZC5wdXNoKGopLCBkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChsWzJdKSByZXR1cm4gRy5hcHBseShkLCBiLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpKSwgZDtpZiAoKGYgPSBsWzNdKSAmJiBjLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSByZXR1cm4gRy5hcHBseShkLCBiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZikpLCBkO1xuICAgICAgICB9aWYgKGMucXNhICYmICFBW2EgKyBcIiBcIl0gJiYgKCFxIHx8ICFxLnRlc3QoYSkpKSB7XG4gICAgICAgICAgaWYgKDEgIT09IHcpIHMgPSBiLCByID0gYTtlbHNlIGlmIChcIm9iamVjdFwiICE9PSBiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIChrID0gYi5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkgPyBrID0gay5yZXBsYWNlKGJhLCBjYSkgOiBiLnNldEF0dHJpYnV0ZShcImlkXCIsIGsgPSB1KSwgbyA9IGcoYSksIGggPSBvLmxlbmd0aDt3aGlsZSAoaC0tKSB7XG4gICAgICAgICAgICAgIG9baF0gPSBcIiNcIiArIGsgKyBcIiBcIiArIHNhKG9baF0pO1xuICAgICAgICAgICAgfXIgPSBvLmpvaW4oXCIsXCIpLCBzID0gJC50ZXN0KGEpICYmIHFhKGIucGFyZW50Tm9kZSkgfHwgYjtcbiAgICAgICAgICB9aWYgKHIpIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gRy5hcHBseShkLCBzLnF1ZXJ5U2VsZWN0b3JBbGwocikpLCBkO1xuICAgICAgICAgIH0gY2F0Y2ggKHgpIHt9IGZpbmFsbHkge1xuICAgICAgICAgICAgayA9PT0gdSAmJiBiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfXJldHVybiBpKGEucmVwbGFjZShQLCBcIiQxXCIpLCBiLCBkLCBlKTtcbiAgICB9ZnVuY3Rpb24gaGEoKSB7XG4gICAgICB2YXIgYSA9IFtdO2Z1bmN0aW9uIGIoYywgZSkge1xuICAgICAgICByZXR1cm4gYS5wdXNoKGMgKyBcIiBcIikgPiBkLmNhY2hlTGVuZ3RoICYmIGRlbGV0ZSBiW2Euc2hpZnQoKV0sIGJbYyArIFwiIFwiXSA9IGU7XG4gICAgICB9cmV0dXJuIGI7XG4gICAgfWZ1bmN0aW9uIGlhKGEpIHtcbiAgICAgIHJldHVybiBhW3VdID0gITAsIGE7XG4gICAgfWZ1bmN0aW9uIGphKGEpIHtcbiAgICAgIHZhciBiID0gbi5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7dHJ5IHtcbiAgICAgICAgcmV0dXJuICEhYShiKTtcbiAgICAgIH0gY2F0Y2ggKGMpIHtcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgYi5wYXJlbnROb2RlICYmIGIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSwgYiA9IG51bGw7XG4gICAgICB9XG4gICAgfWZ1bmN0aW9uIGthKGEsIGIpIHtcbiAgICAgIHZhciBjID0gYS5zcGxpdChcInxcIiksXG4gICAgICAgICAgZSA9IGMubGVuZ3RoO3doaWxlIChlLS0pIHtcbiAgICAgICAgZC5hdHRySGFuZGxlW2NbZV1dID0gYjtcbiAgICAgIH1cbiAgICB9ZnVuY3Rpb24gbGEoYSwgYikge1xuICAgICAgdmFyIGMgPSBiICYmIGEsXG4gICAgICAgICAgZCA9IGMgJiYgMSA9PT0gYS5ub2RlVHlwZSAmJiAxID09PSBiLm5vZGVUeXBlICYmIGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O2lmIChkKSByZXR1cm4gZDtpZiAoYykgd2hpbGUgKGMgPSBjLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGlmIChjID09PSBiKSByZXR1cm4gLTE7XG4gICAgICB9cmV0dXJuIGEgPyAxIDogLTE7XG4gICAgfWZ1bmN0aW9uIG1hKGEpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgICB2YXIgYyA9IGIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gXCJpbnB1dFwiID09PSBjICYmIGIudHlwZSA9PT0gYTtcbiAgICAgIH07XG4gICAgfWZ1bmN0aW9uIG5hKGEpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgICB2YXIgYyA9IGIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gKFwiaW5wdXRcIiA9PT0gYyB8fCBcImJ1dHRvblwiID09PSBjKSAmJiBiLnR5cGUgPT09IGE7XG4gICAgICB9O1xuICAgIH1mdW5jdGlvbiBvYShhKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgcmV0dXJuIFwiZm9ybVwiIGluIGIgPyBiLnBhcmVudE5vZGUgJiYgYi5kaXNhYmxlZCA9PT0gITEgPyBcImxhYmVsXCIgaW4gYiA/IFwibGFiZWxcIiBpbiBiLnBhcmVudE5vZGUgPyBiLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGEgOiBiLmRpc2FibGVkID09PSBhIDogYi5pc0Rpc2FibGVkID09PSBhIHx8IGIuaXNEaXNhYmxlZCAhPT0gIWEgJiYgZWEoYikgPT09IGEgOiBiLmRpc2FibGVkID09PSBhIDogXCJsYWJlbFwiIGluIGIgJiYgYi5kaXNhYmxlZCA9PT0gYTtcbiAgICAgIH07XG4gICAgfWZ1bmN0aW9uIHBhKGEpIHtcbiAgICAgIHJldHVybiBpYShmdW5jdGlvbiAoYikge1xuICAgICAgICByZXR1cm4gYiA9ICtiLCBpYShmdW5jdGlvbiAoYywgZCkge1xuICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICBmID0gYShbXSwgYy5sZW5ndGgsIGIpLFxuICAgICAgICAgICAgICBnID0gZi5sZW5ndGg7d2hpbGUgKGctLSkge1xuICAgICAgICAgICAgY1tlID0gZltnXV0gJiYgKGNbZV0gPSAhKGRbZV0gPSBjW2VdKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1mdW5jdGlvbiBxYShhKSB7XG4gICAgICByZXR1cm4gYSAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lICYmIGE7XG4gICAgfWMgPSBnYS5zdXBwb3J0ID0ge30sIGYgPSBnYS5pc1hNTCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICB2YXIgYiA9IGEgJiYgKGEub3duZXJEb2N1bWVudCB8fCBhKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuICEhYiAmJiBcIkhUTUxcIiAhPT0gYi5ub2RlTmFtZTtcbiAgICB9LCBtID0gZ2Euc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgdmFyIGIsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBnID0gYSA/IGEub3duZXJEb2N1bWVudCB8fCBhIDogdjtyZXR1cm4gZyAhPT0gbiAmJiA5ID09PSBnLm5vZGVUeXBlICYmIGcuZG9jdW1lbnRFbGVtZW50ID8gKG4gPSBnLCBvID0gbi5kb2N1bWVudEVsZW1lbnQsIHAgPSAhZihuKSwgdiAhPT0gbiAmJiAoZSA9IG4uZGVmYXVsdFZpZXcpICYmIGUudG9wICE9PSBlICYmIChlLmFkZEV2ZW50TGlzdGVuZXIgPyBlLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgZGEsICExKSA6IGUuYXR0YWNoRXZlbnQgJiYgZS5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsIGRhKSksIGMuYXR0cmlidXRlcyA9IGphKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBhLmNsYXNzTmFtZSA9IFwiaVwiLCAhYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG4gICAgICB9KSwgYy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGphKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBhLmFwcGVuZENoaWxkKG4uY3JlYXRlQ29tbWVudChcIlwiKSksICFhLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG4gICAgICB9KSwgYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gWS50ZXN0KG4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksIGMuZ2V0QnlJZCA9IGphKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBvLmFwcGVuZENoaWxkKGEpLmlkID0gdSwgIW4uZ2V0RWxlbWVudHNCeU5hbWUgfHwgIW4uZ2V0RWxlbWVudHNCeU5hbWUodSkubGVuZ3RoO1xuICAgICAgfSksIGMuZ2V0QnlJZCA/IChkLmZpbHRlci5JRCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciBiID0gYS5yZXBsYWNlKF8sIGFhKTtyZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gYS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYjtcbiAgICAgICAgfTtcbiAgICAgIH0sIGQuZmluZC5JRCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBiLmdldEVsZW1lbnRCeUlkICYmIHApIHtcbiAgICAgICAgICB2YXIgYyA9IGIuZ2V0RWxlbWVudEJ5SWQoYSk7cmV0dXJuIGMgPyBbY10gOiBbXTtcbiAgICAgICAgfVxuICAgICAgfSkgOiAoZC5maWx0ZXIuSUQgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgYiA9IGEucmVwbGFjZShfLCBhYSk7cmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgdmFyIGMgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUgJiYgYS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIGMgJiYgYy52YWx1ZSA9PT0gYjtcbiAgICAgICAgfTtcbiAgICAgIH0sIGQuZmluZC5JRCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBiLmdldEVsZW1lbnRCeUlkICYmIHApIHtcbiAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgZiA9IGIuZ2V0RWxlbWVudEJ5SWQoYSk7aWYgKGYpIHtcbiAgICAgICAgICAgIGlmIChjID0gZi5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIiksIGMgJiYgYy52YWx1ZSA9PT0gYSkgcmV0dXJuIFtmXTtlID0gYi5nZXRFbGVtZW50c0J5TmFtZShhKSwgZCA9IDA7d2hpbGUgKGYgPSBlW2QrK10pIHtcbiAgICAgICAgICAgICAgaWYgKGMgPSBmLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSwgYyAmJiBjLnZhbHVlID09PSBhKSByZXR1cm4gW2ZdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1yZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH0pLCBkLmZpbmQuVEFHID0gYy5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBiLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gYi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKSA6IGMucXNhID8gYi5xdWVyeVNlbGVjdG9yQWxsKGEpIDogdm9pZCAwO1xuICAgICAgfSA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHZhciBjLFxuICAgICAgICAgICAgZCA9IFtdLFxuICAgICAgICAgICAgZSA9IDAsXG4gICAgICAgICAgICBmID0gYi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTtpZiAoXCIqXCIgPT09IGEpIHtcbiAgICAgICAgICB3aGlsZSAoYyA9IGZbZSsrXSkge1xuICAgICAgICAgICAgMSA9PT0gYy5ub2RlVHlwZSAmJiBkLnB1c2goYyk7XG4gICAgICAgICAgfXJldHVybiBkO1xuICAgICAgICB9cmV0dXJuIGY7XG4gICAgICB9LCBkLmZpbmQuQ0xBU1MgPSBjLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBwKSByZXR1cm4gYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGEpO1xuICAgICAgfSwgciA9IFtdLCBxID0gW10sIChjLnFzYSA9IFkudGVzdChuLnF1ZXJ5U2VsZWN0b3JBbGwpKSAmJiAoamEoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgby5hcHBlbmRDaGlsZChhKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIHUgKyBcIic+PC9hPjxzZWxlY3QgaWQ9J1wiICsgdSArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsIGEucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCAmJiBxLnB1c2goXCJbKl4kXT1cIiArIEsgKyBcIiooPzonJ3xcXFwiXFxcIilcIiksIGEucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoIHx8IHEucHVzaChcIlxcXFxbXCIgKyBLICsgXCIqKD86dmFsdWV8XCIgKyBKICsgXCIpXCIpLCBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaWR+PVwiICsgdSArIFwiLV1cIikubGVuZ3RoIHx8IHEucHVzaChcIn49XCIpLCBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggfHwgcS5wdXNoKFwiOmNoZWNrZWRcIiksIGEucXVlcnlTZWxlY3RvckFsbChcImEjXCIgKyB1ICsgXCIrKlwiKS5sZW5ndGggfHwgcS5wdXNoKFwiLiMuK1srfl1cIik7XG4gICAgICB9KSwgamEoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgYS5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciBiID0gbi5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpLCBhLmFwcGVuZENoaWxkKGIpLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJEXCIpLCBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggJiYgcS5wdXNoKFwibmFtZVwiICsgSyArIFwiKlsqXiR8IX5dPz1cIiksIDIgIT09IGEucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAmJiBxLnB1c2goXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiKSwgby5hcHBlbmRDaGlsZChhKS5kaXNhYmxlZCA9ICEwLCAyICE9PSBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICYmIHEucHVzaChcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIpLCBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLCBxLnB1c2goXCIsLio6XCIpO1xuICAgICAgfSkpLCAoYy5tYXRjaGVzU2VsZWN0b3IgPSBZLnRlc3QocyA9IG8ubWF0Y2hlcyB8fCBvLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBvLm1vek1hdGNoZXNTZWxlY3RvciB8fCBvLm9NYXRjaGVzU2VsZWN0b3IgfHwgby5tc01hdGNoZXNTZWxlY3RvcikpICYmIGphKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGMuZGlzY29ubmVjdGVkTWF0Y2ggPSBzLmNhbGwoYSwgXCIqXCIpLCBzLmNhbGwoYSwgXCJbcyE9JyddOnhcIiksIHIucHVzaChcIiE9XCIsIE4pO1xuICAgICAgfSksIHEgPSBxLmxlbmd0aCAmJiBuZXcgUmVnRXhwKHEuam9pbihcInxcIikpLCByID0gci5sZW5ndGggJiYgbmV3IFJlZ0V4cChyLmpvaW4oXCJ8XCIpKSwgYiA9IFkudGVzdChvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSwgdCA9IGIgfHwgWS50ZXN0KG8uY29udGFpbnMpID8gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIGMgPSA5ID09PSBhLm5vZGVUeXBlID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuICAgICAgICAgICAgZCA9IGIgJiYgYi5wYXJlbnROb2RlO3JldHVybiBhID09PSBkIHx8ICEoIWQgfHwgMSAhPT0gZC5ub2RlVHlwZSB8fCAhKGMuY29udGFpbnMgPyBjLmNvbnRhaW5zKGQpIDogYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiAxNiAmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZCkpKTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBpZiAoYikgd2hpbGUgKGIgPSBiLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBpZiAoYiA9PT0gYSkgcmV0dXJuICEwO1xuICAgICAgICB9cmV0dXJuICExO1xuICAgICAgfSwgQiA9IGIgPyBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGwgPSAhMCwgMDt2YXIgZCA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIGQgPyBkIDogKGQgPSAoYS5vd25lckRvY3VtZW50IHx8IGEpID09PSAoYi5vd25lckRvY3VtZW50IHx8IGIpID8gYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSA6IDEsIDEgJiBkIHx8ICFjLnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpID09PSBkID8gYSA9PT0gbiB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHYgJiYgdCh2LCBhKSA/IC0xIDogYiA9PT0gbiB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHYgJiYgdCh2LCBiKSA/IDEgOiBrID8gSShrLCBhKSAtIEkoaywgYikgOiAwIDogNCAmIGQgPyAtMSA6IDEpO1xuICAgICAgfSA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmIChhID09PSBiKSByZXR1cm4gbCA9ICEwLCAwO3ZhciBjLFxuICAgICAgICAgICAgZCA9IDAsXG4gICAgICAgICAgICBlID0gYS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgZiA9IGIucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIGcgPSBbYV0sXG4gICAgICAgICAgICBoID0gW2JdO2lmICghZSB8fCAhZikgcmV0dXJuIGEgPT09IG4gPyAtMSA6IGIgPT09IG4gPyAxIDogZSA/IC0xIDogZiA/IDEgOiBrID8gSShrLCBhKSAtIEkoaywgYikgOiAwO2lmIChlID09PSBmKSByZXR1cm4gbGEoYSwgYik7YyA9IGE7d2hpbGUgKGMgPSBjLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBnLnVuc2hpZnQoYyk7XG4gICAgICAgIH1jID0gYjt3aGlsZSAoYyA9IGMucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGgudW5zaGlmdChjKTtcbiAgICAgICAgfXdoaWxlIChnW2RdID09PSBoW2RdKSB7XG4gICAgICAgICAgZCsrO1xuICAgICAgICB9cmV0dXJuIGQgPyBsYShnW2RdLCBoW2RdKSA6IGdbZF0gPT09IHYgPyAtMSA6IGhbZF0gPT09IHYgPyAxIDogMDtcbiAgICAgIH0sIG4pIDogbjtcbiAgICB9LCBnYS5tYXRjaGVzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBnYShhLCBudWxsLCBudWxsLCBiKTtcbiAgICB9LCBnYS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKChhLm93bmVyRG9jdW1lbnQgfHwgYSkgIT09IG4gJiYgbShhKSwgYiA9IGIucmVwbGFjZShTLCBcIj0nJDEnXVwiKSwgYy5tYXRjaGVzU2VsZWN0b3IgJiYgcCAmJiAhQVtiICsgXCIgXCJdICYmICghciB8fCAhci50ZXN0KGIpKSAmJiAoIXEgfHwgIXEudGVzdChiKSkpIHRyeSB7XG4gICAgICAgIHZhciBkID0gcy5jYWxsKGEsIGIpO2lmIChkIHx8IGMuZGlzY29ubmVjdGVkTWF0Y2ggfHwgYS5kb2N1bWVudCAmJiAxMSAhPT0gYS5kb2N1bWVudC5ub2RlVHlwZSkgcmV0dXJuIGQ7XG4gICAgICB9IGNhdGNoIChlKSB7fXJldHVybiBnYShiLCBuLCBudWxsLCBbYV0pLmxlbmd0aCA+IDA7XG4gICAgfSwgZ2EuY29udGFpbnMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIChhLm93bmVyRG9jdW1lbnQgfHwgYSkgIT09IG4gJiYgbShhKSwgdChhLCBiKTtcbiAgICB9LCBnYS5hdHRyID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIChhLm93bmVyRG9jdW1lbnQgfHwgYSkgIT09IG4gJiYgbShhKTt2YXIgZSA9IGQuYXR0ckhhbmRsZVtiLnRvTG93ZXJDYXNlKCldLFxuICAgICAgICAgIGYgPSBlICYmIEMuY2FsbChkLmF0dHJIYW5kbGUsIGIudG9Mb3dlckNhc2UoKSkgPyBlKGEsIGIsICFwKSA6IHZvaWQgMDtyZXR1cm4gdm9pZCAwICE9PSBmID8gZiA6IGMuYXR0cmlidXRlcyB8fCAhcCA/IGEuZ2V0QXR0cmlidXRlKGIpIDogKGYgPSBhLmdldEF0dHJpYnV0ZU5vZGUoYikpICYmIGYuc3BlY2lmaWVkID8gZi52YWx1ZSA6IG51bGw7XG4gICAgfSwgZ2EuZXNjYXBlID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiAoYSArIFwiXCIpLnJlcGxhY2UoYmEsIGNhKTtcbiAgICB9LCBnYS5lcnJvciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIGEpO1xuICAgIH0sIGdhLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgdmFyIGIsXG4gICAgICAgICAgZCA9IFtdLFxuICAgICAgICAgIGUgPSAwLFxuICAgICAgICAgIGYgPSAwO2lmIChsID0gIWMuZGV0ZWN0RHVwbGljYXRlcywgayA9ICFjLnNvcnRTdGFibGUgJiYgYS5zbGljZSgwKSwgYS5zb3J0KEIpLCBsKSB7XG4gICAgICAgIHdoaWxlIChiID0gYVtmKytdKSB7XG4gICAgICAgICAgYiA9PT0gYVtmXSAmJiAoZSA9IGQucHVzaChmKSk7XG4gICAgICAgIH13aGlsZSAoZS0tKSB7XG4gICAgICAgICAgYS5zcGxpY2UoZFtlXSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1yZXR1cm4gayA9IG51bGwsIGE7XG4gICAgfSwgZSA9IGdhLmdldFRleHQgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgdmFyIGIsXG4gICAgICAgICAgYyA9IFwiXCIsXG4gICAgICAgICAgZCA9IDAsXG4gICAgICAgICAgZiA9IGEubm9kZVR5cGU7aWYgKGYpIHtcbiAgICAgICAgaWYgKDEgPT09IGYgfHwgOSA9PT0gZiB8fCAxMSA9PT0gZikge1xuICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBhLnRleHRDb250ZW50KSByZXR1cm4gYS50ZXh0Q29udGVudDtmb3IgKGEgPSBhLmZpcnN0Q2hpbGQ7IGE7IGEgPSBhLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBjICs9IGUoYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKDMgPT09IGYgfHwgNCA9PT0gZikgcmV0dXJuIGEubm9kZVZhbHVlO1xuICAgICAgfSBlbHNlIHdoaWxlIChiID0gYVtkKytdKSB7XG4gICAgICAgIGMgKz0gZShiKTtcbiAgICAgIH1yZXR1cm4gYztcbiAgICB9LCBkID0gZ2Euc2VsZWN0b3JzID0geyBjYWNoZUxlbmd0aDogNTAsIGNyZWF0ZVBzZXVkbzogaWEsIG1hdGNoOiBWLCBhdHRySGFuZGxlOiB7fSwgZmluZDoge30sIHJlbGF0aXZlOiB7IFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiAhMCB9LCBcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sIFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6ICEwIH0sIFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9IH0sIHByZUZpbHRlcjogeyBBVFRSOiBmdW5jdGlvbiBBVFRSKGEpIHtcbiAgICAgICAgICByZXR1cm4gYVsxXSA9IGFbMV0ucmVwbGFjZShfLCBhYSksIGFbM10gPSAoYVszXSB8fCBhWzRdIHx8IGFbNV0gfHwgXCJcIikucmVwbGFjZShfLCBhYSksIFwifj1cIiA9PT0gYVsyXSAmJiAoYVszXSA9IFwiIFwiICsgYVszXSArIFwiIFwiKSwgYS5zbGljZSgwLCA0KTtcbiAgICAgICAgfSwgQ0hJTEQ6IGZ1bmN0aW9uIENISUxEKGEpIHtcbiAgICAgICAgICByZXR1cm4gYVsxXSA9IGFbMV0udG9Mb3dlckNhc2UoKSwgXCJudGhcIiA9PT0gYVsxXS5zbGljZSgwLCAzKSA/IChhWzNdIHx8IGdhLmVycm9yKGFbMF0pLCBhWzRdID0gKyhhWzRdID8gYVs1XSArIChhWzZdIHx8IDEpIDogMiAqIChcImV2ZW5cIiA9PT0gYVszXSB8fCBcIm9kZFwiID09PSBhWzNdKSksIGFbNV0gPSArKGFbN10gKyBhWzhdIHx8IFwib2RkXCIgPT09IGFbM10pKSA6IGFbM10gJiYgZ2EuZXJyb3IoYVswXSksIGE7XG4gICAgICAgIH0sIFBTRVVETzogZnVuY3Rpb24gUFNFVURPKGEpIHtcbiAgICAgICAgICB2YXIgYixcbiAgICAgICAgICAgICAgYyA9ICFhWzZdICYmIGFbMl07cmV0dXJuIFYuQ0hJTEQudGVzdChhWzBdKSA/IG51bGwgOiAoYVszXSA/IGFbMl0gPSBhWzRdIHx8IGFbNV0gfHwgXCJcIiA6IGMgJiYgVC50ZXN0KGMpICYmIChiID0gZyhjLCAhMCkpICYmIChiID0gYy5pbmRleE9mKFwiKVwiLCBjLmxlbmd0aCAtIGIpIC0gYy5sZW5ndGgpICYmIChhWzBdID0gYVswXS5zbGljZSgwLCBiKSwgYVsyXSA9IGMuc2xpY2UoMCwgYikpLCBhLnNsaWNlKDAsIDMpKTtcbiAgICAgICAgfSB9LCBmaWx0ZXI6IHsgVEFHOiBmdW5jdGlvbiBUQUcoYSkge1xuICAgICAgICAgIHZhciBiID0gYS5yZXBsYWNlKF8sIGFhKS50b0xvd2VyQ2FzZSgpO3JldHVybiBcIipcIiA9PT0gYSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICB9IDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBhLm5vZGVOYW1lICYmIGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gYjtcbiAgICAgICAgICB9O1xuICAgICAgICB9LCBDTEFTUzogZnVuY3Rpb24gQ0xBU1MoYSkge1xuICAgICAgICAgIHZhciBiID0geVthICsgXCIgXCJdO3JldHVybiBiIHx8IChiID0gbmV3IFJlZ0V4cChcIihefFwiICsgSyArIFwiKVwiICsgYSArIFwiKFwiICsgSyArIFwifCQpXCIpKSAmJiB5KGEsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gYi50ZXN0KFwic3RyaW5nXCIgPT0gdHlwZW9mIGEuY2xhc3NOYW1lICYmIGEuY2xhc3NOYW1lIHx8IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGEuZ2V0QXR0cmlidXRlICYmIGEuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIEFUVFI6IGZ1bmN0aW9uIEFUVFIoYSwgYiwgYykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgdmFyIGUgPSBnYS5hdHRyKGQsIGEpO3JldHVybiBudWxsID09IGUgPyBcIiE9XCIgPT09IGIgOiAhYiB8fCAoZSArPSBcIlwiLCBcIj1cIiA9PT0gYiA/IGUgPT09IGMgOiBcIiE9XCIgPT09IGIgPyBlICE9PSBjIDogXCJePVwiID09PSBiID8gYyAmJiAwID09PSBlLmluZGV4T2YoYykgOiBcIio9XCIgPT09IGIgPyBjICYmIGUuaW5kZXhPZihjKSA+IC0xIDogXCIkPVwiID09PSBiID8gYyAmJiBlLnNsaWNlKC1jLmxlbmd0aCkgPT09IGMgOiBcIn49XCIgPT09IGIgPyAoXCIgXCIgKyBlLnJlcGxhY2UoTywgXCIgXCIpICsgXCIgXCIpLmluZGV4T2YoYykgPiAtMSA6IFwifD1cIiA9PT0gYiAmJiAoZSA9PT0gYyB8fCBlLnNsaWNlKDAsIGMubGVuZ3RoICsgMSkgPT09IGMgKyBcIi1cIikpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sIENISUxEOiBmdW5jdGlvbiBDSElMRChhLCBiLCBjLCBkLCBlKSB7XG4gICAgICAgICAgdmFyIGYgPSBcIm50aFwiICE9PSBhLnNsaWNlKDAsIDMpLFxuICAgICAgICAgICAgICBnID0gXCJsYXN0XCIgIT09IGEuc2xpY2UoLTQpLFxuICAgICAgICAgICAgICBoID0gXCJvZi10eXBlXCIgPT09IGI7cmV0dXJuIDEgPT09IGQgJiYgMCA9PT0gZSA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gISFhLnBhcmVudE5vZGU7XG4gICAgICAgICAgfSA6IGZ1bmN0aW9uIChiLCBjLCBpKSB7XG4gICAgICAgICAgICB2YXIgaixcbiAgICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgcCA9IGYgIT09IGcgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuICAgICAgICAgICAgICAgIHEgPSBiLnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgciA9IGggJiYgYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIHMgPSAhaSAmJiAhaCxcbiAgICAgICAgICAgICAgICB0ID0gITE7aWYgKHEpIHtcbiAgICAgICAgICAgICAgaWYgKGYpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAocCkge1xuICAgICAgICAgICAgICAgICAgbSA9IGI7d2hpbGUgKG0gPSBtW3BdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoID8gbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSByIDogMSA9PT0gbS5ub2RlVHlwZSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgfW8gPSBwID0gXCJvbmx5XCIgPT09IGEgJiYgIW8gJiYgXCJuZXh0U2libGluZ1wiO1xuICAgICAgICAgICAgICAgIH1yZXR1cm4gITA7XG4gICAgICAgICAgICAgIH1pZiAobyA9IFtnID8gcS5maXJzdENoaWxkIDogcS5sYXN0Q2hpbGRdLCBnICYmIHMpIHtcbiAgICAgICAgICAgICAgICBtID0gcSwgbCA9IG1bdV0gfHwgKG1bdV0gPSB7fSksIGsgPSBsW20udW5pcXVlSURdIHx8IChsW20udW5pcXVlSURdID0ge30pLCBqID0ga1thXSB8fCBbXSwgbiA9IGpbMF0gPT09IHcgJiYgalsxXSwgdCA9IG4gJiYgalsyXSwgbSA9IG4gJiYgcS5jaGlsZE5vZGVzW25dO3doaWxlIChtID0gKytuICYmIG0gJiYgbVtwXSB8fCAodCA9IG4gPSAwKSB8fCBvLnBvcCgpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gbS5ub2RlVHlwZSAmJiArK3QgJiYgbSA9PT0gYikge1xuICAgICAgICAgICAgICAgICAgICBrW2FdID0gW3csIG4sIHRdO2JyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzICYmIChtID0gYiwgbCA9IG1bdV0gfHwgKG1bdV0gPSB7fSksIGsgPSBsW20udW5pcXVlSURdIHx8IChsW20udW5pcXVlSURdID0ge30pLCBqID0ga1thXSB8fCBbXSwgbiA9IGpbMF0gPT09IHcgJiYgalsxXSwgdCA9IG4pLCB0ID09PSAhMSkgd2hpbGUgKG0gPSArK24gJiYgbSAmJiBtW3BdIHx8ICh0ID0gbiA9IDApIHx8IG8ucG9wKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGggPyBtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHIgOiAxID09PSBtLm5vZGVUeXBlKSAmJiArK3QgJiYgKHMgJiYgKGwgPSBtW3VdIHx8IChtW3VdID0ge30pLCBrID0gbFttLnVuaXF1ZUlEXSB8fCAobFttLnVuaXF1ZUlEXSA9IHt9KSwga1thXSA9IFt3LCB0XSksIG0gPT09IGIpKSBicmVhaztcbiAgICAgICAgICAgICAgfXJldHVybiB0IC09IGUsIHQgPT09IGQgfHwgdCAlIGQgPT09IDAgJiYgdCAvIGQgPj0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9LCBQU0VVRE86IGZ1bmN0aW9uIFBTRVVETyhhLCBiKSB7XG4gICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgIGUgPSBkLnBzZXVkb3NbYV0gfHwgZC5zZXRGaWx0ZXJzW2EudG9Mb3dlckNhc2UoKV0gfHwgZ2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgYSk7cmV0dXJuIGVbdV0gPyBlKGIpIDogZS5sZW5ndGggPiAxID8gKGMgPSBbYSwgYSwgXCJcIiwgYl0sIGQuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShhLnRvTG93ZXJDYXNlKCkpID8gaWEoZnVuY3Rpb24gKGEsIGMpIHtcbiAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgIGYgPSBlKGEsIGIpLFxuICAgICAgICAgICAgICAgIGcgPSBmLmxlbmd0aDt3aGlsZSAoZy0tKSB7XG4gICAgICAgICAgICAgIGQgPSBJKGEsIGZbZ10pLCBhW2RdID0gIShjW2RdID0gZltnXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkgOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGUoYSwgMCwgYyk7XG4gICAgICAgICAgfSkgOiBlO1xuICAgICAgICB9IH0sIHBzZXVkb3M6IHsgbm90OiBpYShmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHZhciBiID0gW10sXG4gICAgICAgICAgICAgIGMgPSBbXSxcbiAgICAgICAgICAgICAgZCA9IGgoYS5yZXBsYWNlKFAsIFwiJDFcIikpO3JldHVybiBkW3VdID8gaWEoZnVuY3Rpb24gKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgIGcgPSBkKGEsIG51bGwsIGUsIFtdKSxcbiAgICAgICAgICAgICAgICBoID0gYS5sZW5ndGg7d2hpbGUgKGgtLSkge1xuICAgICAgICAgICAgICAoZiA9IGdbaF0pICYmIChhW2hdID0gIShiW2hdID0gZikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pIDogZnVuY3Rpb24gKGEsIGUsIGYpIHtcbiAgICAgICAgICAgIHJldHVybiBiWzBdID0gYSwgZChiLCBudWxsLCBmLCBjKSwgYlswXSA9IG51bGwsICFjLnBvcCgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLCBoYXM6IGlhKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2EoYSwgYikubGVuZ3RoID4gMDtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSwgY29udGFpbnM6IGlhKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIGEgPSBhLnJlcGxhY2UoXywgYWEpLCBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgcmV0dXJuIChiLnRleHRDb250ZW50IHx8IGIuaW5uZXJUZXh0IHx8IGUoYikpLmluZGV4T2YoYSkgPiAtMTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSwgbGFuZzogaWEoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gVS50ZXN0KGEgfHwgXCJcIikgfHwgZ2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGEpLCBhID0gYS5yZXBsYWNlKF8sIGFhKS50b0xvd2VyQ2FzZSgpLCBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgdmFyIGM7ZG8ge1xuICAgICAgICAgICAgICBpZiAoYyA9IHAgPyBiLmxhbmcgOiBiLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGIuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgcmV0dXJuIGMgPSBjLnRvTG93ZXJDYXNlKCksIGMgPT09IGEgfHwgMCA9PT0gYy5pbmRleE9mKGEgKyBcIi1cIik7XG4gICAgICAgICAgICB9IHdoaWxlICgoYiA9IGIucGFyZW50Tm9kZSkgJiYgMSA9PT0gYi5ub2RlVHlwZSk7cmV0dXJuICExO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLCB0YXJnZXQ6IGZ1bmN0aW9uIHRhcmdldChiKSB7XG4gICAgICAgICAgdmFyIGMgPSBhLmxvY2F0aW9uICYmIGEubG9jYXRpb24uaGFzaDtyZXR1cm4gYyAmJiBjLnNsaWNlKDEpID09PSBiLmlkO1xuICAgICAgICB9LCByb290OiBmdW5jdGlvbiByb290KGEpIHtcbiAgICAgICAgICByZXR1cm4gYSA9PT0gbztcbiAgICAgICAgfSwgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKGEpIHtcbiAgICAgICAgICByZXR1cm4gYSA9PT0gbi5hY3RpdmVFbGVtZW50ICYmICghbi5oYXNGb2N1cyB8fCBuLmhhc0ZvY3VzKCkpICYmICEhKGEudHlwZSB8fCBhLmhyZWYgfHwgfmEudGFiSW5kZXgpO1xuICAgICAgICB9LCBlbmFibGVkOiBvYSghMSksIGRpc2FibGVkOiBvYSghMCksIGNoZWNrZWQ6IGZ1bmN0aW9uIGNoZWNrZWQoYSkge1xuICAgICAgICAgIHZhciBiID0gYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBcImlucHV0XCIgPT09IGIgJiYgISFhLmNoZWNrZWQgfHwgXCJvcHRpb25cIiA9PT0gYiAmJiAhIWEuc2VsZWN0ZWQ7XG4gICAgICAgIH0sIHNlbGVjdGVkOiBmdW5jdGlvbiBzZWxlY3RlZChhKSB7XG4gICAgICAgICAgcmV0dXJuIGEucGFyZW50Tm9kZSAmJiBhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgYS5zZWxlY3RlZCA9PT0gITA7XG4gICAgICAgIH0sIGVtcHR5OiBmdW5jdGlvbiBlbXB0eShhKSB7XG4gICAgICAgICAgZm9yIChhID0gYS5maXJzdENoaWxkOyBhOyBhID0gYS5uZXh0U2libGluZykge1xuICAgICAgICAgICAgaWYgKGEubm9kZVR5cGUgPCA2KSByZXR1cm4gITE7XG4gICAgICAgICAgfXJldHVybiAhMDtcbiAgICAgICAgfSwgcGFyZW50OiBmdW5jdGlvbiBwYXJlbnQoYSkge1xuICAgICAgICAgIHJldHVybiAhZC5wc2V1ZG9zLmVtcHR5KGEpO1xuICAgICAgICB9LCBoZWFkZXI6IGZ1bmN0aW9uIGhlYWRlcihhKSB7XG4gICAgICAgICAgcmV0dXJuIFgudGVzdChhLm5vZGVOYW1lKTtcbiAgICAgICAgfSwgaW5wdXQ6IGZ1bmN0aW9uIGlucHV0KGEpIHtcbiAgICAgICAgICByZXR1cm4gVy50ZXN0KGEubm9kZU5hbWUpO1xuICAgICAgICB9LCBidXR0b246IGZ1bmN0aW9uIGJ1dHRvbihhKSB7XG4gICAgICAgICAgdmFyIGIgPSBhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIFwiaW5wdXRcIiA9PT0gYiAmJiBcImJ1dHRvblwiID09PSBhLnR5cGUgfHwgXCJidXR0b25cIiA9PT0gYjtcbiAgICAgICAgfSwgdGV4dDogZnVuY3Rpb24gdGV4dChhKSB7XG4gICAgICAgICAgdmFyIGI7cmV0dXJuIFwiaW5wdXRcIiA9PT0gYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICYmIFwidGV4dFwiID09PSBhLnR5cGUgJiYgKG51bGwgPT0gKGIgPSBhLmdldEF0dHJpYnV0ZShcInR5cGVcIikpIHx8IFwidGV4dFwiID09PSBiLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9LCBmaXJzdDogcGEoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBbMF07XG4gICAgICAgIH0pLCBsYXN0OiBwYShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBbYiAtIDFdO1xuICAgICAgICB9KSwgZXE6IHBhKGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgcmV0dXJuIFtjIDwgMCA/IGMgKyBiIDogY107XG4gICAgICAgIH0pLCBldmVuOiBwYShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgYjsgYyArPSAyKSB7XG4gICAgICAgICAgICBhLnB1c2goYyk7XG4gICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICB9KSwgb2RkOiBwYShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIGZvciAodmFyIGMgPSAxOyBjIDwgYjsgYyArPSAyKSB7XG4gICAgICAgICAgICBhLnB1c2goYyk7XG4gICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICB9KSwgbHQ6IHBhKGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgZm9yICh2YXIgZCA9IGMgPCAwID8gYyArIGIgOiBjOyAtLWQgPj0gMDspIHtcbiAgICAgICAgICAgIGEucHVzaChkKTtcbiAgICAgICAgICB9cmV0dXJuIGE7XG4gICAgICAgIH0pLCBndDogcGEoZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgICBmb3IgKHZhciBkID0gYyA8IDAgPyBjICsgYiA6IGM7ICsrZCA8IGI7KSB7XG4gICAgICAgICAgICBhLnB1c2goZCk7XG4gICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICB9KSB9IH0sIGQucHNldWRvcy5udGggPSBkLnBzZXVkb3MuZXE7Zm9yIChiIGluIHsgcmFkaW86ICEwLCBjaGVja2JveDogITAsIGZpbGU6ICEwLCBwYXNzd29yZDogITAsIGltYWdlOiAhMCB9KSB7XG4gICAgICBkLnBzZXVkb3NbYl0gPSBtYShiKTtcbiAgICB9Zm9yIChiIGluIHsgc3VibWl0OiAhMCwgcmVzZXQ6ICEwIH0pIHtcbiAgICAgIGQucHNldWRvc1tiXSA9IG5hKGIpO1xuICAgIH1mdW5jdGlvbiByYSgpIHt9cmEucHJvdG90eXBlID0gZC5maWx0ZXJzID0gZC5wc2V1ZG9zLCBkLnNldEZpbHRlcnMgPSBuZXcgcmEoKSwgZyA9IGdhLnRva2VuaXplID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHZhciBjLFxuICAgICAgICAgIGUsXG4gICAgICAgICAgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGsgPSB6W2EgKyBcIiBcIl07aWYgKGspIHJldHVybiBiID8gMCA6IGsuc2xpY2UoMCk7aCA9IGEsIGkgPSBbXSwgaiA9IGQucHJlRmlsdGVyO3doaWxlIChoKSB7XG4gICAgICAgIGMgJiYgIShlID0gUS5leGVjKGgpKSB8fCAoZSAmJiAoaCA9IGguc2xpY2UoZVswXS5sZW5ndGgpIHx8IGgpLCBpLnB1c2goZiA9IFtdKSksIGMgPSAhMSwgKGUgPSBSLmV4ZWMoaCkpICYmIChjID0gZS5zaGlmdCgpLCBmLnB1c2goeyB2YWx1ZTogYywgdHlwZTogZVswXS5yZXBsYWNlKFAsIFwiIFwiKSB9KSwgaCA9IGguc2xpY2UoYy5sZW5ndGgpKTtmb3IgKGcgaW4gZC5maWx0ZXIpIHtcbiAgICAgICAgICAhKGUgPSBWW2ddLmV4ZWMoaCkpIHx8IGpbZ10gJiYgIShlID0galtnXShlKSkgfHwgKGMgPSBlLnNoaWZ0KCksIGYucHVzaCh7IHZhbHVlOiBjLCB0eXBlOiBnLCBtYXRjaGVzOiBlIH0pLCBoID0gaC5zbGljZShjLmxlbmd0aCkpO1xuICAgICAgICB9aWYgKCFjKSBicmVhaztcbiAgICAgIH1yZXR1cm4gYiA/IGgubGVuZ3RoIDogaCA/IGdhLmVycm9yKGEpIDogeihhLCBpKS5zbGljZSgwKTtcbiAgICB9O2Z1bmN0aW9uIHNhKGEpIHtcbiAgICAgIGZvciAodmFyIGIgPSAwLCBjID0gYS5sZW5ndGgsIGQgPSBcIlwiOyBiIDwgYzsgYisrKSB7XG4gICAgICAgIGQgKz0gYVtiXS52YWx1ZTtcbiAgICAgIH1yZXR1cm4gZDtcbiAgICB9ZnVuY3Rpb24gdGEoYSwgYiwgYykge1xuICAgICAgdmFyIGQgPSBiLmRpcixcbiAgICAgICAgICBlID0gYi5uZXh0LFxuICAgICAgICAgIGYgPSBlIHx8IGQsXG4gICAgICAgICAgZyA9IGMgJiYgXCJwYXJlbnROb2RlXCIgPT09IGYsXG4gICAgICAgICAgaCA9IHgrKztyZXR1cm4gYi5maXJzdCA/IGZ1bmN0aW9uIChiLCBjLCBlKSB7XG4gICAgICAgIHdoaWxlIChiID0gYltkXSkge1xuICAgICAgICAgIGlmICgxID09PSBiLm5vZGVUeXBlIHx8IGcpIHJldHVybiBhKGIsIGMsIGUpO1xuICAgICAgICB9cmV0dXJuICExO1xuICAgICAgfSA6IGZ1bmN0aW9uIChiLCBjLCBpKSB7XG4gICAgICAgIHZhciBqLFxuICAgICAgICAgICAgayxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBtID0gW3csIGhdO2lmIChpKSB7XG4gICAgICAgICAgd2hpbGUgKGIgPSBiW2RdKSB7XG4gICAgICAgICAgICBpZiAoKDEgPT09IGIubm9kZVR5cGUgfHwgZykgJiYgYShiLCBjLCBpKSkgcmV0dXJuICEwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHdoaWxlIChiID0gYltkXSkge1xuICAgICAgICAgIGlmICgxID09PSBiLm5vZGVUeXBlIHx8IGcpIGlmIChsID0gYlt1XSB8fCAoYlt1XSA9IHt9KSwgayA9IGxbYi51bmlxdWVJRF0gfHwgKGxbYi51bmlxdWVJRF0gPSB7fSksIGUgJiYgZSA9PT0gYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSBiID0gYltkXSB8fCBiO2Vsc2Uge1xuICAgICAgICAgICAgaWYgKChqID0ga1tmXSkgJiYgalswXSA9PT0gdyAmJiBqWzFdID09PSBoKSByZXR1cm4gbVsyXSA9IGpbMl07aWYgKGtbZl0gPSBtLCBtWzJdID0gYShiLCBjLCBpKSkgcmV0dXJuICEwO1xuICAgICAgICAgIH1cbiAgICAgICAgfXJldHVybiAhMTtcbiAgICAgIH07XG4gICAgfWZ1bmN0aW9uIHVhKGEpIHtcbiAgICAgIHJldHVybiBhLmxlbmd0aCA+IDEgPyBmdW5jdGlvbiAoYiwgYywgZCkge1xuICAgICAgICB2YXIgZSA9IGEubGVuZ3RoO3doaWxlIChlLS0pIHtcbiAgICAgICAgICBpZiAoIWFbZV0oYiwgYywgZCkpIHJldHVybiAhMTtcbiAgICAgICAgfXJldHVybiAhMDtcbiAgICAgIH0gOiBhWzBdO1xuICAgIH1mdW5jdGlvbiB2YShhLCBiLCBjKSB7XG4gICAgICBmb3IgKHZhciBkID0gMCwgZSA9IGIubGVuZ3RoOyBkIDwgZTsgZCsrKSB7XG4gICAgICAgIGdhKGEsIGJbZF0sIGMpO1xuICAgICAgfXJldHVybiBjO1xuICAgIH1mdW5jdGlvbiB3YShhLCBiLCBjLCBkLCBlKSB7XG4gICAgICBmb3IgKHZhciBmLCBnID0gW10sIGggPSAwLCBpID0gYS5sZW5ndGgsIGogPSBudWxsICE9IGI7IGggPCBpOyBoKyspIHtcbiAgICAgICAgKGYgPSBhW2hdKSAmJiAoYyAmJiAhYyhmLCBkLCBlKSB8fCAoZy5wdXNoKGYpLCBqICYmIGIucHVzaChoKSkpO1xuICAgICAgfXJldHVybiBnO1xuICAgIH1mdW5jdGlvbiB4YShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICByZXR1cm4gZCAmJiAhZFt1XSAmJiAoZCA9IHhhKGQpKSwgZSAmJiAhZVt1XSAmJiAoZSA9IHhhKGUsIGYpKSwgaWEoZnVuY3Rpb24gKGYsIGcsIGgsIGkpIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgICBrLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIG0gPSBbXSxcbiAgICAgICAgICAgIG4gPSBbXSxcbiAgICAgICAgICAgIG8gPSBnLmxlbmd0aCxcbiAgICAgICAgICAgIHAgPSBmIHx8IHZhKGIgfHwgXCIqXCIsIGgubm9kZVR5cGUgPyBbaF0gOiBoLCBbXSksXG4gICAgICAgICAgICBxID0gIWEgfHwgIWYgJiYgYiA/IHAgOiB3YShwLCBtLCBhLCBoLCBpKSxcbiAgICAgICAgICAgIHIgPSBjID8gZSB8fCAoZiA/IGEgOiBvIHx8IGQpID8gW10gOiBnIDogcTtpZiAoYyAmJiBjKHEsIHIsIGgsIGkpLCBkKSB7XG4gICAgICAgICAgaiA9IHdhKHIsIG4pLCBkKGosIFtdLCBoLCBpKSwgayA9IGoubGVuZ3RoO3doaWxlIChrLS0pIHtcbiAgICAgICAgICAgIChsID0galtrXSkgJiYgKHJbbltrXV0gPSAhKHFbbltrXV0gPSBsKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9aWYgKGYpIHtcbiAgICAgICAgICBpZiAoZSB8fCBhKSB7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICBqID0gW10sIGsgPSByLmxlbmd0aDt3aGlsZSAoay0tKSB7XG4gICAgICAgICAgICAgICAgKGwgPSByW2tdKSAmJiBqLnB1c2gocVtrXSA9IGwpO1xuICAgICAgICAgICAgICB9ZShudWxsLCByID0gW10sIGosIGkpO1xuICAgICAgICAgICAgfWsgPSByLmxlbmd0aDt3aGlsZSAoay0tKSB7XG4gICAgICAgICAgICAgIChsID0gcltrXSkgJiYgKGogPSBlID8gSShmLCBsKSA6IG1ba10pID4gLTEgJiYgKGZbal0gPSAhKGdbal0gPSBsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgciA9IHdhKHIgPT09IGcgPyByLnNwbGljZShvLCByLmxlbmd0aCkgOiByKSwgZSA/IGUobnVsbCwgZywgciwgaSkgOiBHLmFwcGx5KGcsIHIpO1xuICAgICAgfSk7XG4gICAgfWZ1bmN0aW9uIHlhKGEpIHtcbiAgICAgIGZvciAodmFyIGIsIGMsIGUsIGYgPSBhLmxlbmd0aCwgZyA9IGQucmVsYXRpdmVbYVswXS50eXBlXSwgaCA9IGcgfHwgZC5yZWxhdGl2ZVtcIiBcIl0sIGkgPSBnID8gMSA6IDAsIGsgPSB0YShmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gYSA9PT0gYjtcbiAgICAgIH0sIGgsICEwKSwgbCA9IHRhKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJKGIsIGEpID4gLTE7XG4gICAgICB9LCBoLCAhMCksIG0gPSBbZnVuY3Rpb24gKGEsIGMsIGQpIHtcbiAgICAgICAgdmFyIGUgPSAhZyAmJiAoZCB8fCBjICE9PSBqKSB8fCAoKGIgPSBjKS5ub2RlVHlwZSA/IGsoYSwgYywgZCkgOiBsKGEsIGMsIGQpKTtyZXR1cm4gYiA9IG51bGwsIGU7XG4gICAgICB9XTsgaSA8IGY7IGkrKykge1xuICAgICAgICBpZiAoYyA9IGQucmVsYXRpdmVbYVtpXS50eXBlXSkgbSA9IFt0YSh1YShtKSwgYyldO2Vsc2Uge1xuICAgICAgICAgIGlmIChjID0gZC5maWx0ZXJbYVtpXS50eXBlXS5hcHBseShudWxsLCBhW2ldLm1hdGNoZXMpLCBjW3VdKSB7XG4gICAgICAgICAgICBmb3IgKGUgPSArK2k7IGUgPCBmOyBlKyspIHtcbiAgICAgICAgICAgICAgaWYgKGQucmVsYXRpdmVbYVtlXS50eXBlXSkgYnJlYWs7XG4gICAgICAgICAgICB9cmV0dXJuIHhhKGkgPiAxICYmIHVhKG0pLCBpID4gMSAmJiBzYShhLnNsaWNlKDAsIGkgLSAxKS5jb25jYXQoeyB2YWx1ZTogXCIgXCIgPT09IGFbaSAtIDJdLnR5cGUgPyBcIipcIiA6IFwiXCIgfSkpLnJlcGxhY2UoUCwgXCIkMVwiKSwgYywgaSA8IGUgJiYgeWEoYS5zbGljZShpLCBlKSksIGUgPCBmICYmIHlhKGEgPSBhLnNsaWNlKGUpKSwgZSA8IGYgJiYgc2EoYSkpO1xuICAgICAgICAgIH1tLnB1c2goYyk7XG4gICAgICAgIH1cbiAgICAgIH1yZXR1cm4gdWEobSk7XG4gICAgfWZ1bmN0aW9uIHphKGEsIGIpIHtcbiAgICAgIHZhciBjID0gYi5sZW5ndGggPiAwLFxuICAgICAgICAgIGUgPSBhLmxlbmd0aCA+IDAsXG4gICAgICAgICAgZiA9IGZ1bmN0aW9uIGYoX2YsIGcsIGgsIGksIGspIHtcbiAgICAgICAgdmFyIGwsXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgcSxcbiAgICAgICAgICAgIHIgPSAwLFxuICAgICAgICAgICAgcyA9IFwiMFwiLFxuICAgICAgICAgICAgdCA9IF9mICYmIFtdLFxuICAgICAgICAgICAgdSA9IFtdLFxuICAgICAgICAgICAgdiA9IGosXG4gICAgICAgICAgICB4ID0gX2YgfHwgZSAmJiBkLmZpbmQuVEFHKFwiKlwiLCBrKSxcbiAgICAgICAgICAgIHkgPSB3ICs9IG51bGwgPT0gdiA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IC4xLFxuICAgICAgICAgICAgeiA9IHgubGVuZ3RoO2ZvciAoayAmJiAoaiA9IGcgPT09IG4gfHwgZyB8fCBrKTsgcyAhPT0geiAmJiBudWxsICE9IChsID0geFtzXSk7IHMrKykge1xuICAgICAgICAgIGlmIChlICYmIGwpIHtcbiAgICAgICAgICAgIG8gPSAwLCBnIHx8IGwub3duZXJEb2N1bWVudCA9PT0gbiB8fCAobShsKSwgaCA9ICFwKTt3aGlsZSAocSA9IGFbbysrXSkge1xuICAgICAgICAgICAgICBpZiAocShsLCBnIHx8IG4sIGgpKSB7XG4gICAgICAgICAgICAgICAgaS5wdXNoKGwpO2JyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ayAmJiAodyA9IHkpO1xuICAgICAgICAgIH1jICYmICgobCA9ICFxICYmIGwpICYmIHItLSwgX2YgJiYgdC5wdXNoKGwpKTtcbiAgICAgICAgfWlmIChyICs9IHMsIGMgJiYgcyAhPT0gcikge1xuICAgICAgICAgIG8gPSAwO3doaWxlIChxID0gYltvKytdKSB7XG4gICAgICAgICAgICBxKHQsIHUsIGcsIGgpO1xuICAgICAgICAgIH1pZiAoX2YpIHtcbiAgICAgICAgICAgIGlmIChyID4gMCkgd2hpbGUgKHMtLSkge1xuICAgICAgICAgICAgICB0W3NdIHx8IHVbc10gfHwgKHVbc10gPSBFLmNhbGwoaSkpO1xuICAgICAgICAgICAgfXUgPSB3YSh1KTtcbiAgICAgICAgICB9Ry5hcHBseShpLCB1KSwgayAmJiAhX2YgJiYgdS5sZW5ndGggPiAwICYmIHIgKyBiLmxlbmd0aCA+IDEgJiYgZ2EudW5pcXVlU29ydChpKTtcbiAgICAgICAgfXJldHVybiBrICYmICh3ID0geSwgaiA9IHYpLCB0O1xuICAgICAgfTtyZXR1cm4gYyA/IGlhKGYpIDogZjtcbiAgICB9cmV0dXJuIGggPSBnYS5jb21waWxlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHZhciBjLFxuICAgICAgICAgIGQgPSBbXSxcbiAgICAgICAgICBlID0gW10sXG4gICAgICAgICAgZiA9IEFbYSArIFwiIFwiXTtpZiAoIWYpIHtcbiAgICAgICAgYiB8fCAoYiA9IGcoYSkpLCBjID0gYi5sZW5ndGg7d2hpbGUgKGMtLSkge1xuICAgICAgICAgIGYgPSB5YShiW2NdKSwgZlt1XSA/IGQucHVzaChmKSA6IGUucHVzaChmKTtcbiAgICAgICAgfWYgPSBBKGEsIHphKGUsIGQpKSwgZi5zZWxlY3RvciA9IGE7XG4gICAgICB9cmV0dXJuIGY7XG4gICAgfSwgaSA9IGdhLnNlbGVjdCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBlKSB7XG4gICAgICB2YXIgZixcbiAgICAgICAgICBpLFxuICAgICAgICAgIGosXG4gICAgICAgICAgayxcbiAgICAgICAgICBsLFxuICAgICAgICAgIG0gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEgJiYgYSxcbiAgICAgICAgICBuID0gIWUgJiYgZyhhID0gbS5zZWxlY3RvciB8fCBhKTtpZiAoYyA9IGMgfHwgW10sIDEgPT09IG4ubGVuZ3RoKSB7XG4gICAgICAgIGlmIChpID0gblswXSA9IG5bMF0uc2xpY2UoMCksIGkubGVuZ3RoID4gMiAmJiBcIklEXCIgPT09IChqID0gaVswXSkudHlwZSAmJiA5ID09PSBiLm5vZGVUeXBlICYmIHAgJiYgZC5yZWxhdGl2ZVtpWzFdLnR5cGVdKSB7XG4gICAgICAgICAgaWYgKGIgPSAoZC5maW5kLklEKGoubWF0Y2hlc1swXS5yZXBsYWNlKF8sIGFhKSwgYikgfHwgW10pWzBdLCAhYikgcmV0dXJuIGM7bSAmJiAoYiA9IGIucGFyZW50Tm9kZSksIGEgPSBhLnNsaWNlKGkuc2hpZnQoKS52YWx1ZS5sZW5ndGgpO1xuICAgICAgICB9ZiA9IFYubmVlZHNDb250ZXh0LnRlc3QoYSkgPyAwIDogaS5sZW5ndGg7d2hpbGUgKGYtLSkge1xuICAgICAgICAgIGlmIChqID0gaVtmXSwgZC5yZWxhdGl2ZVtrID0gai50eXBlXSkgYnJlYWs7aWYgKChsID0gZC5maW5kW2tdKSAmJiAoZSA9IGwoai5tYXRjaGVzWzBdLnJlcGxhY2UoXywgYWEpLCAkLnRlc3QoaVswXS50eXBlKSAmJiBxYShiLnBhcmVudE5vZGUpIHx8IGIpKSkge1xuICAgICAgICAgICAgaWYgKGkuc3BsaWNlKGYsIDEpLCBhID0gZS5sZW5ndGggJiYgc2EoaSksICFhKSByZXR1cm4gRy5hcHBseShjLCBlKSwgYzticmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1yZXR1cm4gKG0gfHwgaChhLCBuKSkoZSwgYiwgIXAsIGMsICFiIHx8ICQudGVzdChhKSAmJiBxYShiLnBhcmVudE5vZGUpIHx8IGIpLCBjO1xuICAgIH0sIGMuc29ydFN0YWJsZSA9IHUuc3BsaXQoXCJcIikuc29ydChCKS5qb2luKFwiXCIpID09PSB1LCBjLmRldGVjdER1cGxpY2F0ZXMgPSAhIWwsIG0oKSwgYy5zb3J0RGV0YWNoZWQgPSBqYShmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIDEgJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG4uY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpKTtcbiAgICB9KSwgamEoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBhLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiLCBcIiNcIiA9PT0gYS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gICAgfSkgfHwga2EoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICBpZiAoIWMpIHJldHVybiBhLmdldEF0dHJpYnV0ZShiLCBcInR5cGVcIiA9PT0gYi50b0xvd2VyQ2FzZSgpID8gMSA6IDIpO1xuICAgIH0pLCBjLmF0dHJpYnV0ZXMgJiYgamEoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBhLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIiwgYS5maXJzdENoaWxkLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiXCIpLCBcIlwiID09PSBhLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG4gICAgfSkgfHwga2EoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgaWYgKCFjICYmIFwiaW5wdXRcIiA9PT0gYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gYS5kZWZhdWx0VmFsdWU7XG4gICAgfSksIGphKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gbnVsbCA9PSBhLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgIH0pIHx8IGthKEosIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICB2YXIgZDtpZiAoIWMpIHJldHVybiBhW2JdID09PSAhMCA/IGIudG9Mb3dlckNhc2UoKSA6IChkID0gYS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSAmJiBkLnNwZWNpZmllZCA/IGQudmFsdWUgOiBudWxsO1xuICAgIH0pLCBnYTtcbiAgfShhKTtyLmZpbmQgPSB4LCByLmV4cHIgPSB4LnNlbGVjdG9ycywgci5leHByW1wiOlwiXSA9IHIuZXhwci5wc2V1ZG9zLCByLnVuaXF1ZVNvcnQgPSByLnVuaXF1ZSA9IHgudW5pcXVlU29ydCwgci50ZXh0ID0geC5nZXRUZXh0LCByLmlzWE1MRG9jID0geC5pc1hNTCwgci5jb250YWlucyA9IHguY29udGFpbnMsIHIuZXNjYXBlU2VsZWN0b3IgPSB4LmVzY2FwZTt2YXIgeSA9IGZ1bmN0aW9uIHkoYSwgYiwgYykge1xuICAgIHZhciBkID0gW10sXG4gICAgICAgIGUgPSB2b2lkIDAgIT09IGM7d2hpbGUgKChhID0gYVtiXSkgJiYgOSAhPT0gYS5ub2RlVHlwZSkge1xuICAgICAgaWYgKDEgPT09IGEubm9kZVR5cGUpIHtcbiAgICAgICAgaWYgKGUgJiYgcihhKS5pcyhjKSkgYnJlYWs7ZC5wdXNoKGEpO1xuICAgICAgfVxuICAgIH1yZXR1cm4gZDtcbiAgfSxcbiAgICAgIHogPSBmdW5jdGlvbiB6KGEsIGIpIHtcbiAgICBmb3IgKHZhciBjID0gW107IGE7IGEgPSBhLm5leHRTaWJsaW5nKSB7XG4gICAgICAxID09PSBhLm5vZGVUeXBlICYmIGEgIT09IGIgJiYgYy5wdXNoKGEpO1xuICAgIH1yZXR1cm4gYztcbiAgfSxcbiAgICAgIEEgPSByLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O2Z1bmN0aW9uIEIoYSwgYikge1xuICAgIHJldHVybiBhLm5vZGVOYW1lICYmIGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gYi50b0xvd2VyQ2FzZSgpO1xuICB9dmFyIEMgPSAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSxcbiAgICAgIEQgPSAvXi5bXjojXFxbXFwuLF0qJC87ZnVuY3Rpb24gRShhLCBiLCBjKSB7XG4gICAgcmV0dXJuIHIuaXNGdW5jdGlvbihiKSA/IHIuZ3JlcChhLCBmdW5jdGlvbiAoYSwgZCkge1xuICAgICAgcmV0dXJuICEhYi5jYWxsKGEsIGQsIGEpICE9PSBjO1xuICAgIH0pIDogYi5ub2RlVHlwZSA/IHIuZ3JlcChhLCBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGEgPT09IGIgIT09IGM7XG4gICAgfSkgOiBcInN0cmluZ1wiICE9IHR5cGVvZiBiID8gci5ncmVwKGEsIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gaS5jYWxsKGIsIGEpID4gLTEgIT09IGM7XG4gICAgfSkgOiBELnRlc3QoYikgPyByLmZpbHRlcihiLCBhLCBjKSA6IChiID0gci5maWx0ZXIoYiwgYSksIHIuZ3JlcChhLCBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGkuY2FsbChiLCBhKSA+IC0xICE9PSBjICYmIDEgPT09IGEubm9kZVR5cGU7XG4gICAgfSkpO1xuICB9ci5maWx0ZXIgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgIHZhciBkID0gYlswXTtyZXR1cm4gYyAmJiAoYSA9IFwiOm5vdChcIiArIGEgKyBcIilcIiksIDEgPT09IGIubGVuZ3RoICYmIDEgPT09IGQubm9kZVR5cGUgPyByLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGQsIGEpID8gW2RdIDogW10gOiByLmZpbmQubWF0Y2hlcyhhLCByLmdyZXAoYiwgZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiAxID09PSBhLm5vZGVUeXBlO1xuICAgIH0pKTtcbiAgfSwgci5mbi5leHRlbmQoeyBmaW5kOiBmdW5jdGlvbiBmaW5kKGEpIHtcbiAgICAgIHZhciBiLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgZCA9IHRoaXMubGVuZ3RoLFxuICAgICAgICAgIGUgPSB0aGlzO2lmIChcInN0cmluZ1wiICE9IHR5cGVvZiBhKSByZXR1cm4gdGhpcy5wdXNoU3RhY2socihhKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGIgPSAwOyBiIDwgZDsgYisrKSB7XG4gICAgICAgICAgaWYgKHIuY29udGFpbnMoZVtiXSwgdGhpcykpIHJldHVybiAhMDtcbiAgICAgICAgfVxuICAgICAgfSkpO2ZvciAoYyA9IHRoaXMucHVzaFN0YWNrKFtdKSwgYiA9IDA7IGIgPCBkOyBiKyspIHtcbiAgICAgICAgci5maW5kKGEsIGVbYl0sIGMpO1xuICAgICAgfXJldHVybiBkID4gMSA/IHIudW5pcXVlU29ydChjKSA6IGM7XG4gICAgfSwgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoYSkge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKEUodGhpcywgYSB8fCBbXSwgITEpKTtcbiAgICB9LCBub3Q6IGZ1bmN0aW9uIG5vdChhKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soRSh0aGlzLCBhIHx8IFtdLCAhMCkpO1xuICAgIH0sIGlzOiBmdW5jdGlvbiBpcyhhKSB7XG4gICAgICByZXR1cm4gISFFKHRoaXMsIFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgJiYgQS50ZXN0KGEpID8gcihhKSA6IGEgfHwgW10sICExKS5sZW5ndGg7XG4gICAgfSB9KTt2YXIgRixcbiAgICAgIEcgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcbiAgICAgIEggPSByLmZuLmluaXQgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgIHZhciBlLCBmO2lmICghYSkgcmV0dXJuIHRoaXM7aWYgKGMgPSBjIHx8IEYsIFwic3RyaW5nXCIgPT0gdHlwZW9mIGEpIHtcbiAgICAgIGlmIChlID0gXCI8XCIgPT09IGFbMF0gJiYgXCI+XCIgPT09IGFbYS5sZW5ndGggLSAxXSAmJiBhLmxlbmd0aCA+PSAzID8gW251bGwsIGEsIG51bGxdIDogRy5leGVjKGEpLCAhZSB8fCAhZVsxXSAmJiBiKSByZXR1cm4gIWIgfHwgYi5qcXVlcnkgPyAoYiB8fCBjKS5maW5kKGEpIDogdGhpcy5jb25zdHJ1Y3RvcihiKS5maW5kKGEpO2lmIChlWzFdKSB7XG4gICAgICAgIGlmIChiID0gYiBpbnN0YW5jZW9mIHIgPyBiWzBdIDogYiwgci5tZXJnZSh0aGlzLCByLnBhcnNlSFRNTChlWzFdLCBiICYmIGIubm9kZVR5cGUgPyBiLm93bmVyRG9jdW1lbnQgfHwgYiA6IGQsICEwKSksIEMudGVzdChlWzFdKSAmJiByLmlzUGxhaW5PYmplY3QoYikpIGZvciAoZSBpbiBiKSB7XG4gICAgICAgICAgci5pc0Z1bmN0aW9uKHRoaXNbZV0pID8gdGhpc1tlXShiW2VdKSA6IHRoaXMuYXR0cihlLCBiW2VdKTtcbiAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgfXJldHVybiBmID0gZC5nZXRFbGVtZW50QnlJZChlWzJdKSwgZiAmJiAodGhpc1swXSA9IGYsIHRoaXMubGVuZ3RoID0gMSksIHRoaXM7XG4gICAgfXJldHVybiBhLm5vZGVUeXBlID8gKHRoaXNbMF0gPSBhLCB0aGlzLmxlbmd0aCA9IDEsIHRoaXMpIDogci5pc0Z1bmN0aW9uKGEpID8gdm9pZCAwICE9PSBjLnJlYWR5ID8gYy5yZWFkeShhKSA6IGEocikgOiByLm1ha2VBcnJheShhLCB0aGlzKTtcbiAgfTtILnByb3RvdHlwZSA9IHIuZm4sIEYgPSByKGQpO3ZhciBJID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG4gICAgICBKID0geyBjaGlsZHJlbjogITAsIGNvbnRlbnRzOiAhMCwgbmV4dDogITAsIHByZXY6ICEwIH07ci5mbi5leHRlbmQoeyBoYXM6IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICB2YXIgYiA9IHIoYSwgdGhpcyksXG4gICAgICAgICAgYyA9IGIubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgYzsgYSsrKSB7XG4gICAgICAgICAgaWYgKHIuY29udGFpbnModGhpcywgYlthXSkpIHJldHVybiAhMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgY2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdChhLCBiKSB7XG4gICAgICB2YXIgYyxcbiAgICAgICAgICBkID0gMCxcbiAgICAgICAgICBlID0gdGhpcy5sZW5ndGgsXG4gICAgICAgICAgZiA9IFtdLFxuICAgICAgICAgIGcgPSBcInN0cmluZ1wiICE9IHR5cGVvZiBhICYmIHIoYSk7aWYgKCFBLnRlc3QoYSkpIGZvciAoOyBkIDwgZTsgZCsrKSB7XG4gICAgICAgIGZvciAoYyA9IHRoaXNbZF07IGMgJiYgYyAhPT0gYjsgYyA9IGMucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGlmIChjLm5vZGVUeXBlIDwgMTEgJiYgKGcgPyBnLmluZGV4KGMpID4gLTEgOiAxID09PSBjLm5vZGVUeXBlICYmIHIuZmluZC5tYXRjaGVzU2VsZWN0b3IoYywgYSkpKSB7XG4gICAgICAgICAgICBmLnB1c2goYyk7YnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYubGVuZ3RoID4gMSA/IHIudW5pcXVlU29ydChmKSA6IGYpO1xuICAgIH0sIGluZGV4OiBmdW5jdGlvbiBpbmRleChhKSB7XG4gICAgICByZXR1cm4gYSA/IFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgPyBpLmNhbGwocihhKSwgdGhpc1swXSkgOiBpLmNhbGwodGhpcywgYS5qcXVlcnkgPyBhWzBdIDogYSkgOiB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG4gICAgfSwgYWRkOiBmdW5jdGlvbiBhZGQoYSwgYikge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHIudW5pcXVlU29ydChyLm1lcmdlKHRoaXMuZ2V0KCksIHIoYSwgYikpKSk7XG4gICAgfSwgYWRkQmFjazogZnVuY3Rpb24gYWRkQmFjayhhKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGQobnVsbCA9PSBhID8gdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihhKSk7XG4gICAgfSB9KTtmdW5jdGlvbiBLKGEsIGIpIHtcbiAgICB3aGlsZSAoKGEgPSBhW2JdKSAmJiAxICE9PSBhLm5vZGVUeXBlKSB7fXJldHVybiBhO1xuICB9ci5lYWNoKHsgcGFyZW50OiBmdW5jdGlvbiBwYXJlbnQoYSkge1xuICAgICAgdmFyIGIgPSBhLnBhcmVudE5vZGU7cmV0dXJuIGIgJiYgMTEgIT09IGIubm9kZVR5cGUgPyBiIDogbnVsbDtcbiAgICB9LCBwYXJlbnRzOiBmdW5jdGlvbiBwYXJlbnRzKGEpIHtcbiAgICAgIHJldHVybiB5KGEsIFwicGFyZW50Tm9kZVwiKTtcbiAgICB9LCBwYXJlbnRzVW50aWw6IGZ1bmN0aW9uIHBhcmVudHNVbnRpbChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4geShhLCBcInBhcmVudE5vZGVcIiwgYyk7XG4gICAgfSwgbmV4dDogZnVuY3Rpb24gbmV4dChhKSB7XG4gICAgICByZXR1cm4gSyhhLCBcIm5leHRTaWJsaW5nXCIpO1xuICAgIH0sIHByZXY6IGZ1bmN0aW9uIHByZXYoYSkge1xuICAgICAgcmV0dXJuIEsoYSwgXCJwcmV2aW91c1NpYmxpbmdcIik7XG4gICAgfSwgbmV4dEFsbDogZnVuY3Rpb24gbmV4dEFsbChhKSB7XG4gICAgICByZXR1cm4geShhLCBcIm5leHRTaWJsaW5nXCIpO1xuICAgIH0sIHByZXZBbGw6IGZ1bmN0aW9uIHByZXZBbGwoYSkge1xuICAgICAgcmV0dXJuIHkoYSwgXCJwcmV2aW91c1NpYmxpbmdcIik7XG4gICAgfSwgbmV4dFVudGlsOiBmdW5jdGlvbiBuZXh0VW50aWwoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIHkoYSwgXCJuZXh0U2libGluZ1wiLCBjKTtcbiAgICB9LCBwcmV2VW50aWw6IGZ1bmN0aW9uIHByZXZVbnRpbChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4geShhLCBcInByZXZpb3VzU2libGluZ1wiLCBjKTtcbiAgICB9LCBzaWJsaW5nczogZnVuY3Rpb24gc2libGluZ3MoYSkge1xuICAgICAgcmV0dXJuIHooKGEucGFyZW50Tm9kZSB8fCB7fSkuZmlyc3RDaGlsZCwgYSk7XG4gICAgfSwgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKGEpIHtcbiAgICAgIHJldHVybiB6KGEuZmlyc3RDaGlsZCk7XG4gICAgfSwgY29udGVudHM6IGZ1bmN0aW9uIGNvbnRlbnRzKGEpIHtcbiAgICAgIHJldHVybiBCKGEsIFwiaWZyYW1lXCIpID8gYS5jb250ZW50RG9jdW1lbnQgOiAoQihhLCBcInRlbXBsYXRlXCIpICYmIChhID0gYS5jb250ZW50IHx8IGEpLCByLm1lcmdlKFtdLCBhLmNoaWxkTm9kZXMpKTtcbiAgICB9IH0sIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgci5mblthXSA9IGZ1bmN0aW9uIChjLCBkKSB7XG4gICAgICB2YXIgZSA9IHIubWFwKHRoaXMsIGIsIGMpO3JldHVybiBcIlVudGlsXCIgIT09IGEuc2xpY2UoLTUpICYmIChkID0gYyksIGQgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZCAmJiAoZSA9IHIuZmlsdGVyKGQsIGUpKSwgdGhpcy5sZW5ndGggPiAxICYmIChKW2FdIHx8IHIudW5pcXVlU29ydChlKSwgSS50ZXN0KGEpICYmIGUucmV2ZXJzZSgpKSwgdGhpcy5wdXNoU3RhY2soZSk7XG4gICAgfTtcbiAgfSk7dmFyIEwgPSAvW15cXHgyMFxcdFxcclxcblxcZl0rL2c7ZnVuY3Rpb24gTShhKSB7XG4gICAgdmFyIGIgPSB7fTtyZXR1cm4gci5lYWNoKGEubWF0Y2goTCkgfHwgW10sIGZ1bmN0aW9uIChhLCBjKSB7XG4gICAgICBiW2NdID0gITA7XG4gICAgfSksIGI7XG4gIH1yLkNhbGxiYWNrcyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgYSA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgPyBNKGEpIDogci5leHRlbmQoe30sIGEpO3ZhciBiLFxuICAgICAgICBjLFxuICAgICAgICBkLFxuICAgICAgICBlLFxuICAgICAgICBmID0gW10sXG4gICAgICAgIGcgPSBbXSxcbiAgICAgICAgaCA9IC0xLFxuICAgICAgICBpID0gZnVuY3Rpb24gaSgpIHtcbiAgICAgIGZvciAoZSA9IGUgfHwgYS5vbmNlLCBkID0gYiA9ICEwOyBnLmxlbmd0aDsgaCA9IC0xKSB7XG4gICAgICAgIGMgPSBnLnNoaWZ0KCk7d2hpbGUgKCsraCA8IGYubGVuZ3RoKSB7XG4gICAgICAgICAgZltoXS5hcHBseShjWzBdLCBjWzFdKSA9PT0gITEgJiYgYS5zdG9wT25GYWxzZSAmJiAoaCA9IGYubGVuZ3RoLCBjID0gITEpO1xuICAgICAgICB9XG4gICAgICB9YS5tZW1vcnkgfHwgKGMgPSAhMSksIGIgPSAhMSwgZSAmJiAoZiA9IGMgPyBbXSA6IFwiXCIpO1xuICAgIH0sXG4gICAgICAgIGogPSB7IGFkZDogZnVuY3Rpb24gYWRkKCkge1xuICAgICAgICByZXR1cm4gZiAmJiAoYyAmJiAhYiAmJiAoaCA9IGYubGVuZ3RoIC0gMSwgZy5wdXNoKGMpKSwgZnVuY3Rpb24gZChiKSB7XG4gICAgICAgICAgci5lYWNoKGIsIGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgICAgICAgICByLmlzRnVuY3Rpb24oYykgPyBhLnVuaXF1ZSAmJiBqLmhhcyhjKSB8fCBmLnB1c2goYykgOiBjICYmIGMubGVuZ3RoICYmIFwic3RyaW5nXCIgIT09IHIudHlwZShjKSAmJiBkKGMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KGFyZ3VtZW50cyksIGMgJiYgIWIgJiYgaSgpKSwgdGhpcztcbiAgICAgIH0sIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICByZXR1cm4gci5lYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICB2YXIgYzt3aGlsZSAoKGMgPSByLmluQXJyYXkoYiwgZiwgYykpID4gLTEpIHtcbiAgICAgICAgICAgIGYuc3BsaWNlKGMsIDEpLCBjIDw9IGggJiYgaC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIHRoaXM7XG4gICAgICB9LCBoYXM6IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBhID8gci5pbkFycmF5KGEsIGYpID4gLTEgOiBmLmxlbmd0aCA+IDA7XG4gICAgICB9LCBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBmICYmIChmID0gW10pLCB0aGlzO1xuICAgICAgfSwgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIGUgPSBnID0gW10sIGYgPSBjID0gXCJcIiwgdGhpcztcbiAgICAgIH0sIGRpc2FibGVkOiBmdW5jdGlvbiBkaXNhYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuICFmO1xuICAgICAgfSwgbG9jazogZnVuY3Rpb24gbG9jaygpIHtcbiAgICAgICAgcmV0dXJuIGUgPSBnID0gW10sIGMgfHwgYiB8fCAoZiA9IGMgPSBcIlwiKSwgdGhpcztcbiAgICAgIH0sIGxvY2tlZDogZnVuY3Rpb24gbG9ja2VkKCkge1xuICAgICAgICByZXR1cm4gISFlO1xuICAgICAgfSwgZmlyZVdpdGg6IGZ1bmN0aW9uIGZpcmVXaXRoKGEsIGMpIHtcbiAgICAgICAgcmV0dXJuIGUgfHwgKGMgPSBjIHx8IFtdLCBjID0gW2EsIGMuc2xpY2UgPyBjLnNsaWNlKCkgOiBjXSwgZy5wdXNoKGMpLCBiIHx8IGkoKSksIHRoaXM7XG4gICAgICB9LCBmaXJlOiBmdW5jdGlvbiBmaXJlKCkge1xuICAgICAgICByZXR1cm4gai5maXJlV2l0aCh0aGlzLCBhcmd1bWVudHMpLCB0aGlzO1xuICAgICAgfSwgZmlyZWQ6IGZ1bmN0aW9uIGZpcmVkKCkge1xuICAgICAgICByZXR1cm4gISFkO1xuICAgICAgfSB9O3JldHVybiBqO1xuICB9O2Z1bmN0aW9uIE4oYSkge1xuICAgIHJldHVybiBhO1xuICB9ZnVuY3Rpb24gTyhhKSB7XG4gICAgdGhyb3cgYTtcbiAgfWZ1bmN0aW9uIFAoYSwgYiwgYywgZCkge1xuICAgIHZhciBlO3RyeSB7XG4gICAgICBhICYmIHIuaXNGdW5jdGlvbihlID0gYS5wcm9taXNlKSA/IGUuY2FsbChhKS5kb25lKGIpLmZhaWwoYykgOiBhICYmIHIuaXNGdW5jdGlvbihlID0gYS50aGVuKSA/IGUuY2FsbChhLCBiLCBjKSA6IGIuYXBwbHkodm9pZCAwLCBbYV0uc2xpY2UoZCkpO1xuICAgIH0gY2F0Y2ggKGEpIHtcbiAgICAgIGMuYXBwbHkodm9pZCAwLCBbYV0pO1xuICAgIH1cbiAgfXIuZXh0ZW5kKHsgRGVmZXJyZWQ6IGZ1bmN0aW9uIERlZmVycmVkKGIpIHtcbiAgICAgIHZhciBjID0gW1tcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIHIuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLCByLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwgMl0sIFtcInJlc29sdmVcIiwgXCJkb25lXCIsIHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIDAsIFwicmVzb2x2ZWRcIl0sIFtcInJlamVjdFwiLCBcImZhaWxcIiwgci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgMSwgXCJyZWplY3RlZFwiXV0sXG4gICAgICAgICAgZCA9IFwicGVuZGluZ1wiLFxuICAgICAgICAgIGUgPSB7IHN0YXRlOiBmdW5jdGlvbiBzdGF0ZSgpIHtcbiAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSwgYWx3YXlzOiBmdW5jdGlvbiBhbHdheXMoKSB7XG4gICAgICAgICAgcmV0dXJuIGYuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSwgdGhpcztcbiAgICAgICAgfSwgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2goYSkge1xuICAgICAgICAgIHJldHVybiBlLnRoZW4obnVsbCwgYSk7XG4gICAgICAgIH0sIHBpcGU6IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7cmV0dXJuIHIuRGVmZXJyZWQoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgIHIuZWFjaChjLCBmdW5jdGlvbiAoYywgZCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHIuaXNGdW5jdGlvbihhW2RbNF1dKSAmJiBhW2RbNF1dO2ZbZFsxXV0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gZSAmJiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7YSAmJiByLmlzRnVuY3Rpb24oYS5wcm9taXNlKSA/IGEucHJvbWlzZSgpLnByb2dyZXNzKGIubm90aWZ5KS5kb25lKGIucmVzb2x2ZSkuZmFpbChiLnJlamVjdCkgOiBiW2RbMF0gKyBcIldpdGhcIl0odGhpcywgZSA/IFthXSA6IGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksIGEgPSBudWxsO1xuICAgICAgICAgIH0pLnByb21pc2UoKTtcbiAgICAgICAgfSwgdGhlbjogZnVuY3Rpb24gdGhlbihiLCBkLCBlKSB7XG4gICAgICAgICAgdmFyIGYgPSAwO2Z1bmN0aW9uIGcoYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgaSA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgIGogPSBmdW5jdGlvbiBqKCkge1xuICAgICAgICAgICAgICAgIHZhciBhLCBqO2lmICghKGIgPCBmKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGEgPSBkLmFwcGx5KGgsIGkpLCBhID09PSBjLnByb21pc2UoKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiKTtqID0gYSAmJiAoXCJvYmplY3RcIiA9PSAodHlwZW9mIGEgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihhKSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBhKSAmJiBhLnRoZW4sIHIuaXNGdW5jdGlvbihqKSA/IGUgPyBqLmNhbGwoYSwgZyhmLCBjLCBOLCBlKSwgZyhmLCBjLCBPLCBlKSkgOiAoZisrLCBqLmNhbGwoYSwgZyhmLCBjLCBOLCBlKSwgZyhmLCBjLCBPLCBlKSwgZyhmLCBjLCBOLCBjLm5vdGlmeVdpdGgpKSkgOiAoZCAhPT0gTiAmJiAoaCA9IHZvaWQgMCwgaSA9IFthXSksIChlIHx8IGMucmVzb2x2ZVdpdGgpKGgsIGkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBrID0gZSA/IGogOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGooKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChhKSB7XG4gICAgICAgICAgICAgICAgICByLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgJiYgci5EZWZlcnJlZC5leGNlcHRpb25Ib29rKGEsIGsuc3RhY2tUcmFjZSksIGIgKyAxID49IGYgJiYgKGQgIT09IE8gJiYgKGggPSB2b2lkIDAsIGkgPSBbYV0pLCBjLnJlamVjdFdpdGgoaCwgaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtiID8gaygpIDogKHIuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICYmIChrLnN0YWNrVHJhY2UgPSByLkRlZmVycmVkLmdldFN0YWNrSG9vaygpKSwgYS5zZXRUaW1lb3V0KGspKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfXJldHVybiByLkRlZmVycmVkKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICBjWzBdWzNdLmFkZChnKDAsIGEsIHIuaXNGdW5jdGlvbihlKSA/IGUgOiBOLCBhLm5vdGlmeVdpdGgpKSwgY1sxXVszXS5hZGQoZygwLCBhLCByLmlzRnVuY3Rpb24oYikgPyBiIDogTikpLCBjWzJdWzNdLmFkZChnKDAsIGEsIHIuaXNGdW5jdGlvbihkKSA/IGQgOiBPKSk7XG4gICAgICAgICAgfSkucHJvbWlzZSgpO1xuICAgICAgICB9LCBwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKGEpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCAhPSBhID8gci5leHRlbmQoYSwgZSkgOiBlO1xuICAgICAgICB9IH0sXG4gICAgICAgICAgZiA9IHt9O3JldHVybiByLmVhY2goYywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIGcgPSBiWzJdLFxuICAgICAgICAgICAgaCA9IGJbNV07ZVtiWzFdXSA9IGcuYWRkLCBoICYmIGcuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkID0gaDtcbiAgICAgICAgfSwgY1szIC0gYV1bMl0uZGlzYWJsZSwgY1swXVsyXS5sb2NrKSwgZy5hZGQoYlszXS5maXJlKSwgZltiWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZltiWzBdICsgXCJXaXRoXCJdKHRoaXMgPT09IGYgPyB2b2lkIDAgOiB0aGlzLCBhcmd1bWVudHMpLCB0aGlzO1xuICAgICAgICB9LCBmW2JbMF0gKyBcIldpdGhcIl0gPSBnLmZpcmVXaXRoO1xuICAgICAgfSksIGUucHJvbWlzZShmKSwgYiAmJiBiLmNhbGwoZiwgZiksIGY7XG4gICAgfSwgd2hlbjogZnVuY3Rpb24gd2hlbihhKSB7XG4gICAgICB2YXIgYiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgYyA9IGIsXG4gICAgICAgICAgZCA9IEFycmF5KGMpLFxuICAgICAgICAgIGUgPSBmLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICBnID0gci5EZWZlcnJlZCgpLFxuICAgICAgICAgIGggPSBmdW5jdGlvbiBoKGEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgZFthXSA9IHRoaXMsIGVbYV0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGYuY2FsbChhcmd1bWVudHMpIDogYywgLS1iIHx8IGcucmVzb2x2ZVdpdGgoZCwgZSk7XG4gICAgICAgIH07XG4gICAgICB9O2lmIChiIDw9IDEgJiYgKFAoYSwgZy5kb25lKGgoYykpLnJlc29sdmUsIGcucmVqZWN0LCAhYiksIFwicGVuZGluZ1wiID09PSBnLnN0YXRlKCkgfHwgci5pc0Z1bmN0aW9uKGVbY10gJiYgZVtjXS50aGVuKSkpIHJldHVybiBnLnRoZW4oKTt3aGlsZSAoYy0tKSB7XG4gICAgICAgIFAoZVtjXSwgaChjKSwgZy5yZWplY3QpO1xuICAgICAgfXJldHVybiBnLnByb21pc2UoKTtcbiAgICB9IH0pO3ZhciBRID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87ci5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24gKGIsIGMpIHtcbiAgICBhLmNvbnNvbGUgJiYgYS5jb25zb2xlLndhcm4gJiYgYiAmJiBRLnRlc3QoYi5uYW1lKSAmJiBhLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgYi5tZXNzYWdlLCBiLnN0YWNrLCBjKTtcbiAgfSwgci5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChiKSB7XG4gICAgYS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGI7XG4gICAgfSk7XG4gIH07dmFyIFIgPSByLkRlZmVycmVkKCk7ci5mbi5yZWFkeSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIFIudGhlbihhKVtcImNhdGNoXCJdKGZ1bmN0aW9uIChhKSB7XG4gICAgICByLnJlYWR5RXhjZXB0aW9uKGEpO1xuICAgIH0pLCB0aGlzO1xuICB9LCByLmV4dGVuZCh7IGlzUmVhZHk6ICExLCByZWFkeVdhaXQ6IDEsIHJlYWR5OiBmdW5jdGlvbiByZWFkeShhKSB7XG4gICAgICAoYSA9PT0gITAgPyAtLXIucmVhZHlXYWl0IDogci5pc1JlYWR5KSB8fCAoci5pc1JlYWR5ID0gITAsIGEgIT09ICEwICYmIC0tci5yZWFkeVdhaXQgPiAwIHx8IFIucmVzb2x2ZVdpdGgoZCwgW3JdKSk7XG4gICAgfSB9KSwgci5yZWFkeS50aGVuID0gUi50aGVuO2Z1bmN0aW9uIFMoKSB7XG4gICAgZC5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBTKSwgYS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBTKSwgci5yZWFkeSgpO1xuICB9XCJjb21wbGV0ZVwiID09PSBkLnJlYWR5U3RhdGUgfHwgXCJsb2FkaW5nXCIgIT09IGQucmVhZHlTdGF0ZSAmJiAhZC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgPyBhLnNldFRpbWVvdXQoci5yZWFkeSkgOiAoZC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBTKSwgYS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBTKSk7dmFyIFQgPSBmdW5jdGlvbiBUKGEsIGIsIGMsIGQsIGUsIGYsIGcpIHtcbiAgICB2YXIgaCA9IDAsXG4gICAgICAgIGkgPSBhLmxlbmd0aCxcbiAgICAgICAgaiA9IG51bGwgPT0gYztpZiAoXCJvYmplY3RcIiA9PT0gci50eXBlKGMpKSB7XG4gICAgICBlID0gITA7Zm9yIChoIGluIGMpIHtcbiAgICAgICAgVChhLCBiLCBoLCBjW2hdLCAhMCwgZiwgZyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2b2lkIDAgIT09IGQgJiYgKGUgPSAhMCwgci5pc0Z1bmN0aW9uKGQpIHx8IChnID0gITApLCBqICYmIChnID8gKGIuY2FsbChhLCBkKSwgYiA9IG51bGwpIDogKGogPSBiLCBiID0gZnVuY3Rpb24gYihhLCBfYiwgYykge1xuICAgICAgcmV0dXJuIGouY2FsbChyKGEpLCBjKTtcbiAgICB9KSksIGIpKSBmb3IgKDsgaCA8IGk7IGgrKykge1xuICAgICAgYihhW2hdLCBjLCBnID8gZCA6IGQuY2FsbChhW2hdLCBoLCBiKGFbaF0sIGMpKSk7XG4gICAgfXJldHVybiBlID8gYSA6IGogPyBiLmNhbGwoYSkgOiBpID8gYihhWzBdLCBjKSA6IGY7XG4gIH0sXG4gICAgICBVID0gZnVuY3Rpb24gVShhKSB7XG4gICAgcmV0dXJuIDEgPT09IGEubm9kZVR5cGUgfHwgOSA9PT0gYS5ub2RlVHlwZSB8fCAhK2Eubm9kZVR5cGU7XG4gIH07ZnVuY3Rpb24gVigpIHtcbiAgICB0aGlzLmV4cGFuZG8gPSByLmV4cGFuZG8gKyBWLnVpZCsrO1xuICB9Vi51aWQgPSAxLCBWLnByb3RvdHlwZSA9IHsgY2FjaGU6IGZ1bmN0aW9uIGNhY2hlKGEpIHtcbiAgICAgIHZhciBiID0gYVt0aGlzLmV4cGFuZG9dO3JldHVybiBiIHx8IChiID0ge30sIFUoYSkgJiYgKGEubm9kZVR5cGUgPyBhW3RoaXMuZXhwYW5kb10gPSBiIDogT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsIHRoaXMuZXhwYW5kbywgeyB2YWx1ZTogYiwgY29uZmlndXJhYmxlOiAhMCB9KSkpLCBiO1xuICAgIH0sIHNldDogZnVuY3Rpb24gc2V0KGEsIGIsIGMpIHtcbiAgICAgIHZhciBkLFxuICAgICAgICAgIGUgPSB0aGlzLmNhY2hlKGEpO2lmIChcInN0cmluZ1wiID09IHR5cGVvZiBiKSBlW3IuY2FtZWxDYXNlKGIpXSA9IGM7ZWxzZSBmb3IgKGQgaW4gYikge1xuICAgICAgICBlW3IuY2FtZWxDYXNlKGQpXSA9IGJbZF07XG4gICAgICB9cmV0dXJuIGU7XG4gICAgfSwgZ2V0OiBmdW5jdGlvbiBnZXQoYSwgYikge1xuICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gYiA/IHRoaXMuY2FjaGUoYSkgOiBhW3RoaXMuZXhwYW5kb10gJiYgYVt0aGlzLmV4cGFuZG9dW3IuY2FtZWxDYXNlKGIpXTtcbiAgICB9LCBhY2Nlc3M6IGZ1bmN0aW9uIGFjY2VzcyhhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gdm9pZCAwID09PSBiIHx8IGIgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgYiAmJiB2b2lkIDAgPT09IGMgPyB0aGlzLmdldChhLCBiKSA6ICh0aGlzLnNldChhLCBiLCBjKSwgdm9pZCAwICE9PSBjID8gYyA6IGIpO1xuICAgIH0sIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGEsIGIpIHtcbiAgICAgIHZhciBjLFxuICAgICAgICAgIGQgPSBhW3RoaXMuZXhwYW5kb107aWYgKHZvaWQgMCAhPT0gZCkge1xuICAgICAgICBpZiAodm9pZCAwICE9PSBiKSB7XG4gICAgICAgICAgQXJyYXkuaXNBcnJheShiKSA/IGIgPSBiLm1hcChyLmNhbWVsQ2FzZSkgOiAoYiA9IHIuY2FtZWxDYXNlKGIpLCBiID0gYiBpbiBkID8gW2JdIDogYi5tYXRjaChMKSB8fCBbXSksIGMgPSBiLmxlbmd0aDt3aGlsZSAoYy0tKSB7XG4gICAgICAgICAgICBkZWxldGUgZFtiW2NdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0odm9pZCAwID09PSBiIHx8IHIuaXNFbXB0eU9iamVjdChkKSkgJiYgKGEubm9kZVR5cGUgPyBhW3RoaXMuZXhwYW5kb10gPSB2b2lkIDAgOiBkZWxldGUgYVt0aGlzLmV4cGFuZG9dKTtcbiAgICAgIH1cbiAgICB9LCBoYXNEYXRhOiBmdW5jdGlvbiBoYXNEYXRhKGEpIHtcbiAgICAgIHZhciBiID0gYVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAgIT09IGIgJiYgIXIuaXNFbXB0eU9iamVjdChiKTtcbiAgICB9IH07dmFyIFcgPSBuZXcgVigpLFxuICAgICAgWCA9IG5ldyBWKCksXG4gICAgICBZID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuICAgICAgWiA9IC9bQS1aXS9nO2Z1bmN0aW9uICQoYSkge1xuICAgIHJldHVybiBcInRydWVcIiA9PT0gYSB8fCBcImZhbHNlXCIgIT09IGEgJiYgKFwibnVsbFwiID09PSBhID8gbnVsbCA6IGEgPT09ICthICsgXCJcIiA/ICthIDogWS50ZXN0KGEpID8gSlNPTi5wYXJzZShhKSA6IGEpO1xuICB9ZnVuY3Rpb24gXyhhLCBiLCBjKSB7XG4gICAgdmFyIGQ7aWYgKHZvaWQgMCA9PT0gYyAmJiAxID09PSBhLm5vZGVUeXBlKSBpZiAoZCA9IFwiZGF0YS1cIiArIGIucmVwbGFjZShaLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpLCBjID0gYS5nZXRBdHRyaWJ1dGUoZCksIFwic3RyaW5nXCIgPT0gdHlwZW9mIGMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGMgPSAkKGMpO1xuICAgICAgfSBjYXRjaCAoZSkge31YLnNldChhLCBiLCBjKTtcbiAgICB9IGVsc2UgYyA9IHZvaWQgMDtyZXR1cm4gYztcbiAgfXIuZXh0ZW5kKHsgaGFzRGF0YTogZnVuY3Rpb24gaGFzRGF0YShhKSB7XG4gICAgICByZXR1cm4gWC5oYXNEYXRhKGEpIHx8IFcuaGFzRGF0YShhKTtcbiAgICB9LCBkYXRhOiBmdW5jdGlvbiBkYXRhKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBYLmFjY2VzcyhhLCBiLCBjKTtcbiAgICB9LCByZW1vdmVEYXRhOiBmdW5jdGlvbiByZW1vdmVEYXRhKGEsIGIpIHtcbiAgICAgIFgucmVtb3ZlKGEsIGIpO1xuICAgIH0sIF9kYXRhOiBmdW5jdGlvbiBfZGF0YShhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gVy5hY2Nlc3MoYSwgYiwgYyk7XG4gICAgfSwgX3JlbW92ZURhdGE6IGZ1bmN0aW9uIF9yZW1vdmVEYXRhKGEsIGIpIHtcbiAgICAgIFcucmVtb3ZlKGEsIGIpO1xuICAgIH0gfSksIHIuZm4uZXh0ZW5kKHsgZGF0YTogZnVuY3Rpb24gZGF0YShhLCBiKSB7XG4gICAgICB2YXIgYyxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGUsXG4gICAgICAgICAgZiA9IHRoaXNbMF0sXG4gICAgICAgICAgZyA9IGYgJiYgZi5hdHRyaWJ1dGVzO2lmICh2b2lkIDAgPT09IGEpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICYmIChlID0gWC5nZXQoZiksIDEgPT09IGYubm9kZVR5cGUgJiYgIVcuZ2V0KGYsIFwiaGFzRGF0YUF0dHJzXCIpKSkge1xuICAgICAgICAgIGMgPSBnLmxlbmd0aDt3aGlsZSAoYy0tKSB7XG4gICAgICAgICAgICBnW2NdICYmIChkID0gZ1tjXS5uYW1lLCAwID09PSBkLmluZGV4T2YoXCJkYXRhLVwiKSAmJiAoZCA9IHIuY2FtZWxDYXNlKGQuc2xpY2UoNSkpLCBfKGYsIGQsIGVbZF0pKSk7XG4gICAgICAgICAgfVcuc2V0KGYsIFwiaGFzRGF0YUF0dHJzXCIsICEwKTtcbiAgICAgICAgfXJldHVybiBlO1xuICAgICAgfXJldHVybiBcIm9iamVjdFwiID09ICh0eXBlb2YgYSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGEpKSA/IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIFguc2V0KHRoaXMsIGEpO1xuICAgICAgfSkgOiBUKHRoaXMsIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIHZhciBjO2lmIChmICYmIHZvaWQgMCA9PT0gYikge1xuICAgICAgICAgIGlmIChjID0gWC5nZXQoZiwgYSksIHZvaWQgMCAhPT0gYykgcmV0dXJuIGM7aWYgKGMgPSBfKGYsIGEpLCB2b2lkIDAgIT09IGMpIHJldHVybiBjO1xuICAgICAgICB9IGVsc2UgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBYLnNldCh0aGlzLCBhLCBiKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBudWxsLCBiLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgITApO1xuICAgIH0sIHJlbW92ZURhdGE6IGZ1bmN0aW9uIHJlbW92ZURhdGEoYSkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIFgucmVtb3ZlKHRoaXMsIGEpO1xuICAgICAgfSk7XG4gICAgfSB9KSwgci5leHRlbmQoeyBxdWV1ZTogZnVuY3Rpb24gcXVldWUoYSwgYiwgYykge1xuICAgICAgdmFyIGQ7aWYgKGEpIHJldHVybiBiID0gKGIgfHwgXCJmeFwiKSArIFwicXVldWVcIiwgZCA9IFcuZ2V0KGEsIGIpLCBjICYmICghZCB8fCBBcnJheS5pc0FycmF5KGMpID8gZCA9IFcuYWNjZXNzKGEsIGIsIHIubWFrZUFycmF5KGMpKSA6IGQucHVzaChjKSksIGQgfHwgW107XG4gICAgfSwgZGVxdWV1ZTogZnVuY3Rpb24gZGVxdWV1ZShhLCBiKSB7XG4gICAgICBiID0gYiB8fCBcImZ4XCI7dmFyIGMgPSByLnF1ZXVlKGEsIGIpLFxuICAgICAgICAgIGQgPSBjLmxlbmd0aCxcbiAgICAgICAgICBlID0gYy5zaGlmdCgpLFxuICAgICAgICAgIGYgPSByLl9xdWV1ZUhvb2tzKGEsIGIpLFxuICAgICAgICAgIGcgPSBmdW5jdGlvbiBnKCkge1xuICAgICAgICByLmRlcXVldWUoYSwgYik7XG4gICAgICB9O1wiaW5wcm9ncmVzc1wiID09PSBlICYmIChlID0gYy5zaGlmdCgpLCBkLS0pLCBlICYmIChcImZ4XCIgPT09IGIgJiYgYy51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKSwgZGVsZXRlIGYuc3RvcCwgZS5jYWxsKGEsIGcsIGYpKSwgIWQgJiYgZiAmJiBmLmVtcHR5LmZpcmUoKTtcbiAgICB9LCBfcXVldWVIb29rczogZnVuY3Rpb24gX3F1ZXVlSG9va3MoYSwgYikge1xuICAgICAgdmFyIGMgPSBiICsgXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIFcuZ2V0KGEsIGMpIHx8IFcuYWNjZXNzKGEsIGMsIHsgZW1wdHk6IHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBXLnJlbW92ZShhLCBbYiArIFwicXVldWVcIiwgY10pO1xuICAgICAgICB9KSB9KTtcbiAgICB9IH0pLCByLmZuLmV4dGVuZCh7IHF1ZXVlOiBmdW5jdGlvbiBxdWV1ZShhLCBiKSB7XG4gICAgICB2YXIgYyA9IDI7cmV0dXJuIFwic3RyaW5nXCIgIT0gdHlwZW9mIGEgJiYgKGIgPSBhLCBhID0gXCJmeFwiLCBjLS0pLCBhcmd1bWVudHMubGVuZ3RoIDwgYyA/IHIucXVldWUodGhpc1swXSwgYSkgOiB2b2lkIDAgPT09IGIgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGMgPSByLnF1ZXVlKHRoaXMsIGEsIGIpO3IuX3F1ZXVlSG9va3ModGhpcywgYSksIFwiZnhcIiA9PT0gYSAmJiBcImlucHJvZ3Jlc3NcIiAhPT0gY1swXSAmJiByLmRlcXVldWUodGhpcywgYSk7XG4gICAgICB9KTtcbiAgICB9LCBkZXF1ZXVlOiBmdW5jdGlvbiBkZXF1ZXVlKGEpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICByLmRlcXVldWUodGhpcywgYSk7XG4gICAgICB9KTtcbiAgICB9LCBjbGVhclF1ZXVlOiBmdW5jdGlvbiBjbGVhclF1ZXVlKGEpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXVlKGEgfHwgXCJmeFwiLCBbXSk7XG4gICAgfSwgcHJvbWlzZTogZnVuY3Rpb24gcHJvbWlzZShhLCBiKSB7XG4gICAgICB2YXIgYyxcbiAgICAgICAgICBkID0gMSxcbiAgICAgICAgICBlID0gci5EZWZlcnJlZCgpLFxuICAgICAgICAgIGYgPSB0aGlzLFxuICAgICAgICAgIGcgPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICBoID0gZnVuY3Rpb24gaCgpIHtcbiAgICAgICAgLS1kIHx8IGUucmVzb2x2ZVdpdGgoZiwgW2ZdKTtcbiAgICAgIH07XCJzdHJpbmdcIiAhPSB0eXBlb2YgYSAmJiAoYiA9IGEsIGEgPSB2b2lkIDApLCBhID0gYSB8fCBcImZ4XCI7d2hpbGUgKGctLSkge1xuICAgICAgICBjID0gVy5nZXQoZltnXSwgYSArIFwicXVldWVIb29rc1wiKSwgYyAmJiBjLmVtcHR5ICYmIChkKyssIGMuZW1wdHkuYWRkKGgpKTtcbiAgICAgIH1yZXR1cm4gaCgpLCBlLnByb21pc2UoYik7XG4gICAgfSB9KTt2YXIgYWEgPSAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsXG4gICAgICBiYSA9IG5ldyBSZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiICsgYWEgKyBcIikoW2EteiVdKikkXCIsIFwiaVwiKSxcbiAgICAgIGNhID0gW1wiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCJdLFxuICAgICAgZGEgPSBmdW5jdGlvbiBkYShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPSBiIHx8IGEsIFwibm9uZVwiID09PSBhLnN0eWxlLmRpc3BsYXkgfHwgXCJcIiA9PT0gYS5zdHlsZS5kaXNwbGF5ICYmIHIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LCBhKSAmJiBcIm5vbmVcIiA9PT0gci5jc3MoYSwgXCJkaXNwbGF5XCIpO1xuICB9LFxuICAgICAgZWEgPSBmdW5jdGlvbiBlYShhLCBiLCBjLCBkKSB7XG4gICAgdmFyIGUsXG4gICAgICAgIGYsXG4gICAgICAgIGcgPSB7fTtmb3IgKGYgaW4gYikge1xuICAgICAgZ1tmXSA9IGEuc3R5bGVbZl0sIGEuc3R5bGVbZl0gPSBiW2ZdO1xuICAgIH1lID0gYy5hcHBseShhLCBkIHx8IFtdKTtmb3IgKGYgaW4gYikge1xuICAgICAgYS5zdHlsZVtmXSA9IGdbZl07XG4gICAgfXJldHVybiBlO1xuICB9O2Z1bmN0aW9uIGZhKGEsIGIsIGMsIGQpIHtcbiAgICB2YXIgZSxcbiAgICAgICAgZiA9IDEsXG4gICAgICAgIGcgPSAyMCxcbiAgICAgICAgaCA9IGQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZC5jdXIoKTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHIuY3NzKGEsIGIsIFwiXCIpO1xuICAgIH0sXG4gICAgICAgIGkgPSBoKCksXG4gICAgICAgIGogPSBjICYmIGNbM10gfHwgKHIuY3NzTnVtYmVyW2JdID8gXCJcIiA6IFwicHhcIiksXG4gICAgICAgIGsgPSAoci5jc3NOdW1iZXJbYl0gfHwgXCJweFwiICE9PSBqICYmICtpKSAmJiBiYS5leGVjKHIuY3NzKGEsIGIpKTtpZiAoayAmJiBrWzNdICE9PSBqKSB7XG4gICAgICBqID0gaiB8fCBrWzNdLCBjID0gYyB8fCBbXSwgayA9ICtpIHx8IDE7ZG8ge1xuICAgICAgICBmID0gZiB8fCBcIi41XCIsIGsgLz0gZiwgci5zdHlsZShhLCBiLCBrICsgaik7XG4gICAgICB9IHdoaWxlIChmICE9PSAoZiA9IGgoKSAvIGkpICYmIDEgIT09IGYgJiYgLS1nKTtcbiAgICB9cmV0dXJuIGMgJiYgKGsgPSArayB8fCAraSB8fCAwLCBlID0gY1sxXSA/IGsgKyAoY1sxXSArIDEpICogY1syXSA6ICtjWzJdLCBkICYmIChkLnVuaXQgPSBqLCBkLnN0YXJ0ID0gaywgZC5lbmQgPSBlKSksIGU7XG4gIH12YXIgZ2EgPSB7fTtmdW5jdGlvbiBoYShhKSB7XG4gICAgdmFyIGIsXG4gICAgICAgIGMgPSBhLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIGQgPSBhLm5vZGVOYW1lLFxuICAgICAgICBlID0gZ2FbZF07cmV0dXJuIGUgPyBlIDogKGIgPSBjLmJvZHkuYXBwZW5kQ2hpbGQoYy5jcmVhdGVFbGVtZW50KGQpKSwgZSA9IHIuY3NzKGIsIFwiZGlzcGxheVwiKSwgYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLCBcIm5vbmVcIiA9PT0gZSAmJiAoZSA9IFwiYmxvY2tcIiksIGdhW2RdID0gZSwgZSk7XG4gIH1mdW5jdGlvbiBpYShhLCBiKSB7XG4gICAgZm9yICh2YXIgYywgZCwgZSA9IFtdLCBmID0gMCwgZyA9IGEubGVuZ3RoOyBmIDwgZzsgZisrKSB7XG4gICAgICBkID0gYVtmXSwgZC5zdHlsZSAmJiAoYyA9IGQuc3R5bGUuZGlzcGxheSwgYiA/IChcIm5vbmVcIiA9PT0gYyAmJiAoZVtmXSA9IFcuZ2V0KGQsIFwiZGlzcGxheVwiKSB8fCBudWxsLCBlW2ZdIHx8IChkLnN0eWxlLmRpc3BsYXkgPSBcIlwiKSksIFwiXCIgPT09IGQuc3R5bGUuZGlzcGxheSAmJiBkYShkKSAmJiAoZVtmXSA9IGhhKGQpKSkgOiBcIm5vbmVcIiAhPT0gYyAmJiAoZVtmXSA9IFwibm9uZVwiLCBXLnNldChkLCBcImRpc3BsYXlcIiwgYykpKTtcbiAgICB9Zm9yIChmID0gMDsgZiA8IGc7IGYrKykge1xuICAgICAgbnVsbCAhPSBlW2ZdICYmIChhW2ZdLnN0eWxlLmRpc3BsYXkgPSBlW2ZdKTtcbiAgICB9cmV0dXJuIGE7XG4gIH1yLmZuLmV4dGVuZCh7IHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICByZXR1cm4gaWEodGhpcywgITApO1xuICAgIH0sIGhpZGU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICByZXR1cm4gaWEodGhpcyk7XG4gICAgfSwgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoYSkge1xuICAgICAgcmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiBhID8gYSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCkgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBkYSh0aGlzKSA/IHIodGhpcykuc2hvdygpIDogcih0aGlzKS5oaWRlKCk7XG4gICAgICB9KTtcbiAgICB9IH0pO3ZhciBqYSA9IC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pLFxuICAgICAga2EgPSAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2ksXG4gICAgICBsYSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG4gICAgICBtYSA9IHsgb3B0aW9uOiBbMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCJdLCB0aGVhZDogWzEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCJdLCBjb2w6IFsyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSwgdHI6IFsyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiXSwgdGQ6IFszLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSwgX2RlZmF1bHQ6IFswLCBcIlwiLCBcIlwiXSB9O21hLm9wdGdyb3VwID0gbWEub3B0aW9uLCBtYS50Ym9keSA9IG1hLnRmb290ID0gbWEuY29sZ3JvdXAgPSBtYS5jYXB0aW9uID0gbWEudGhlYWQsIG1hLnRoID0gbWEudGQ7ZnVuY3Rpb24gbmEoYSwgYikge1xuICAgIHZhciBjO3JldHVybiBjID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgYS5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYiB8fCBcIipcIikgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhLnF1ZXJ5U2VsZWN0b3JBbGwgPyBhLnF1ZXJ5U2VsZWN0b3JBbGwoYiB8fCBcIipcIikgOiBbXSwgdm9pZCAwID09PSBiIHx8IGIgJiYgQihhLCBiKSA/IHIubWVyZ2UoW2FdLCBjKSA6IGM7XG4gIH1mdW5jdGlvbiBvYShhLCBiKSB7XG4gICAgZm9yICh2YXIgYyA9IDAsIGQgPSBhLmxlbmd0aDsgYyA8IGQ7IGMrKykge1xuICAgICAgVy5zZXQoYVtjXSwgXCJnbG9iYWxFdmFsXCIsICFiIHx8IFcuZ2V0KGJbY10sIFwiZ2xvYmFsRXZhbFwiKSk7XG4gICAgfVxuICB9dmFyIHBhID0gLzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHFhKGEsIGIsIGMsIGQsIGUpIHtcbiAgICBmb3IgKHZhciBmLCBnLCBoLCBpLCBqLCBrLCBsID0gYi5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIG0gPSBbXSwgbiA9IDAsIG8gPSBhLmxlbmd0aDsgbiA8IG87IG4rKykge1xuICAgICAgaWYgKGYgPSBhW25dLCBmIHx8IDAgPT09IGYpIGlmIChcIm9iamVjdFwiID09PSByLnR5cGUoZikpIHIubWVyZ2UobSwgZi5ub2RlVHlwZSA/IFtmXSA6IGYpO2Vsc2UgaWYgKHBhLnRlc3QoZikpIHtcbiAgICAgICAgZyA9IGcgfHwgbC5hcHBlbmRDaGlsZChiLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLCBoID0gKGthLmV4ZWMoZikgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpLCBpID0gbWFbaF0gfHwgbWEuX2RlZmF1bHQsIGcuaW5uZXJIVE1MID0gaVsxXSArIHIuaHRtbFByZWZpbHRlcihmKSArIGlbMl0sIGsgPSBpWzBdO3doaWxlIChrLS0pIHtcbiAgICAgICAgICBnID0gZy5sYXN0Q2hpbGQ7XG4gICAgICAgIH1yLm1lcmdlKG0sIGcuY2hpbGROb2RlcyksIGcgPSBsLmZpcnN0Q2hpbGQsIGcudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgfSBlbHNlIG0ucHVzaChiLmNyZWF0ZVRleHROb2RlKGYpKTtcbiAgICB9bC50ZXh0Q29udGVudCA9IFwiXCIsIG4gPSAwO3doaWxlIChmID0gbVtuKytdKSB7XG4gICAgICBpZiAoZCAmJiByLmluQXJyYXkoZiwgZCkgPiAtMSkgZSAmJiBlLnB1c2goZik7ZWxzZSBpZiAoaiA9IHIuY29udGFpbnMoZi5vd25lckRvY3VtZW50LCBmKSwgZyA9IG5hKGwuYXBwZW5kQ2hpbGQoZiksIFwic2NyaXB0XCIpLCBqICYmIG9hKGcpLCBjKSB7XG4gICAgICAgIGsgPSAwO3doaWxlIChmID0gZ1trKytdKSB7XG4gICAgICAgICAgbGEudGVzdChmLnR5cGUgfHwgXCJcIikgJiYgYy5wdXNoKGYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfXJldHVybiBsO1xuICB9IWZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYSA9IGQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgICBiID0gYS5hcHBlbmRDaGlsZChkLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLFxuICAgICAgICBjID0gZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yy5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwicmFkaW9cIiksIGMuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiksIGMuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInRcIiksIGIuYXBwZW5kQ2hpbGQoYyksIG8uY2hlY2tDbG9uZSA9IGIuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLCBiLmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLCBvLm5vQ2xvbmVDaGVja2VkID0gISFiLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbiAgfSgpO3ZhciByYSA9IGQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2EgPSAvXmtleS8sXG4gICAgICB0YSA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcbiAgICAgIHVhID0gL14oW14uXSopKD86XFwuKC4rKXwpLztmdW5jdGlvbiB2YSgpIHtcbiAgICByZXR1cm4gITA7XG4gIH1mdW5jdGlvbiB3YSgpIHtcbiAgICByZXR1cm4gITE7XG4gIH1mdW5jdGlvbiB4YSgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGQuYWN0aXZlRWxlbWVudDtcbiAgICB9IGNhdGNoIChhKSB7fVxuICB9ZnVuY3Rpb24geWEoYSwgYiwgYywgZCwgZSwgZikge1xuICAgIHZhciBnLCBoO2lmIChcIm9iamVjdFwiID09ICh0eXBlb2YgYiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGIpKSkge1xuICAgICAgXCJzdHJpbmdcIiAhPSB0eXBlb2YgYyAmJiAoZCA9IGQgfHwgYywgYyA9IHZvaWQgMCk7Zm9yIChoIGluIGIpIHtcbiAgICAgICAgeWEoYSwgaCwgYywgZCwgYltoXSwgZik7XG4gICAgICB9cmV0dXJuIGE7XG4gICAgfWlmIChudWxsID09IGQgJiYgbnVsbCA9PSBlID8gKGUgPSBjLCBkID0gYyA9IHZvaWQgMCkgOiBudWxsID09IGUgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGMgPyAoZSA9IGQsIGQgPSB2b2lkIDApIDogKGUgPSBkLCBkID0gYywgYyA9IHZvaWQgMCkpLCBlID09PSAhMSkgZSA9IHdhO2Vsc2UgaWYgKCFlKSByZXR1cm4gYTtyZXR1cm4gMSA9PT0gZiAmJiAoZyA9IGUsIGUgPSBmdW5jdGlvbiBlKGEpIHtcbiAgICAgIHJldHVybiByKCkub2ZmKGEpLCBnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSwgZS5ndWlkID0gZy5ndWlkIHx8IChnLmd1aWQgPSByLmd1aWQrKykpLCBhLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgci5ldmVudC5hZGQodGhpcywgYiwgZSwgZCwgYyk7XG4gICAgfSk7XG4gIH1yLmV2ZW50ID0geyBnbG9iYWw6IHt9LCBhZGQ6IGZ1bmN0aW9uIGFkZChhLCBiLCBjLCBkLCBlKSB7XG4gICAgICB2YXIgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgbCxcbiAgICAgICAgICBtLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgbyxcbiAgICAgICAgICBwLFxuICAgICAgICAgIHEgPSBXLmdldChhKTtpZiAocSkge1xuICAgICAgICBjLmhhbmRsZXIgJiYgKGYgPSBjLCBjID0gZi5oYW5kbGVyLCBlID0gZi5zZWxlY3RvciksIGUgJiYgci5maW5kLm1hdGNoZXNTZWxlY3RvcihyYSwgZSksIGMuZ3VpZCB8fCAoYy5ndWlkID0gci5ndWlkKyspLCAoaSA9IHEuZXZlbnRzKSB8fCAoaSA9IHEuZXZlbnRzID0ge30pLCAoZyA9IHEuaGFuZGxlKSB8fCAoZyA9IHEuaGFuZGxlID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgciAmJiByLmV2ZW50LnRyaWdnZXJlZCAhPT0gYi50eXBlID8gci5ldmVudC5kaXNwYXRjaC5hcHBseShhLCBhcmd1bWVudHMpIDogdm9pZCAwO1xuICAgICAgICB9KSwgYiA9IChiIHx8IFwiXCIpLm1hdGNoKEwpIHx8IFtcIlwiXSwgaiA9IGIubGVuZ3RoO3doaWxlIChqLS0pIHtcbiAgICAgICAgICBoID0gdWEuZXhlYyhiW2pdKSB8fCBbXSwgbiA9IHAgPSBoWzFdLCBvID0gKGhbMl0gfHwgXCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSwgbiAmJiAobCA9IHIuZXZlbnQuc3BlY2lhbFtuXSB8fCB7fSwgbiA9IChlID8gbC5kZWxlZ2F0ZVR5cGUgOiBsLmJpbmRUeXBlKSB8fCBuLCBsID0gci5ldmVudC5zcGVjaWFsW25dIHx8IHt9LCBrID0gci5leHRlbmQoeyB0eXBlOiBuLCBvcmlnVHlwZTogcCwgZGF0YTogZCwgaGFuZGxlcjogYywgZ3VpZDogYy5ndWlkLCBzZWxlY3RvcjogZSwgbmVlZHNDb250ZXh0OiBlICYmIHIuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChlKSwgbmFtZXNwYWNlOiBvLmpvaW4oXCIuXCIpIH0sIGYpLCAobSA9IGlbbl0pIHx8IChtID0gaVtuXSA9IFtdLCBtLmRlbGVnYXRlQ291bnQgPSAwLCBsLnNldHVwICYmIGwuc2V0dXAuY2FsbChhLCBkLCBvLCBnKSAhPT0gITEgfHwgYS5hZGRFdmVudExpc3RlbmVyICYmIGEuYWRkRXZlbnRMaXN0ZW5lcihuLCBnKSksIGwuYWRkICYmIChsLmFkZC5jYWxsKGEsIGspLCBrLmhhbmRsZXIuZ3VpZCB8fCAoay5oYW5kbGVyLmd1aWQgPSBjLmd1aWQpKSwgZSA/IG0uc3BsaWNlKG0uZGVsZWdhdGVDb3VudCsrLCAwLCBrKSA6IG0ucHVzaChrKSwgci5ldmVudC5nbG9iYWxbbl0gPSAhMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShhLCBiLCBjLCBkLCBlKSB7XG4gICAgICB2YXIgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgbCxcbiAgICAgICAgICBtLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgbyxcbiAgICAgICAgICBwLFxuICAgICAgICAgIHEgPSBXLmhhc0RhdGEoYSkgJiYgVy5nZXQoYSk7aWYgKHEgJiYgKGkgPSBxLmV2ZW50cykpIHtcbiAgICAgICAgYiA9IChiIHx8IFwiXCIpLm1hdGNoKEwpIHx8IFtcIlwiXSwgaiA9IGIubGVuZ3RoO3doaWxlIChqLS0pIHtcbiAgICAgICAgICBpZiAoaCA9IHVhLmV4ZWMoYltqXSkgfHwgW10sIG4gPSBwID0gaFsxXSwgbyA9IChoWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksIG4pIHtcbiAgICAgICAgICAgIGwgPSByLmV2ZW50LnNwZWNpYWxbbl0gfHwge30sIG4gPSAoZCA/IGwuZGVsZWdhdGVUeXBlIDogbC5iaW5kVHlwZSkgfHwgbiwgbSA9IGlbbl0gfHwgW10sIGggPSBoWzJdICYmIG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIG8uam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiksIGcgPSBmID0gbS5sZW5ndGg7d2hpbGUgKGYtLSkge1xuICAgICAgICAgICAgICBrID0gbVtmXSwgIWUgJiYgcCAhPT0gay5vcmlnVHlwZSB8fCBjICYmIGMuZ3VpZCAhPT0gay5ndWlkIHx8IGggJiYgIWgudGVzdChrLm5hbWVzcGFjZSkgfHwgZCAmJiBkICE9PSBrLnNlbGVjdG9yICYmIChcIioqXCIgIT09IGQgfHwgIWsuc2VsZWN0b3IpIHx8IChtLnNwbGljZShmLCAxKSwgay5zZWxlY3RvciAmJiBtLmRlbGVnYXRlQ291bnQtLSwgbC5yZW1vdmUgJiYgbC5yZW1vdmUuY2FsbChhLCBrKSk7XG4gICAgICAgICAgICB9ZyAmJiAhbS5sZW5ndGggJiYgKGwudGVhcmRvd24gJiYgbC50ZWFyZG93bi5jYWxsKGEsIG8sIHEuaGFuZGxlKSAhPT0gITEgfHwgci5yZW1vdmVFdmVudChhLCBuLCBxLmhhbmRsZSksIGRlbGV0ZSBpW25dKTtcbiAgICAgICAgICB9IGVsc2UgZm9yIChuIGluIGkpIHtcbiAgICAgICAgICAgIHIuZXZlbnQucmVtb3ZlKGEsIG4gKyBiW2pdLCBjLCBkLCAhMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9ci5pc0VtcHR5T2JqZWN0KGkpICYmIFcucmVtb3ZlKGEsIFwiaGFuZGxlIGV2ZW50c1wiKTtcbiAgICAgIH1cbiAgICB9LCBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goYSkge1xuICAgICAgdmFyIGIgPSByLmV2ZW50LmZpeChhKSxcbiAgICAgICAgICBjLFxuICAgICAgICAgIGQsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBmLFxuICAgICAgICAgIGcsXG4gICAgICAgICAgaCxcbiAgICAgICAgICBpID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLFxuICAgICAgICAgIGogPSAoVy5nZXQodGhpcywgXCJldmVudHNcIikgfHwge30pW2IudHlwZV0gfHwgW10sXG4gICAgICAgICAgayA9IHIuZXZlbnQuc3BlY2lhbFtiLnR5cGVdIHx8IHt9O2ZvciAoaVswXSA9IGIsIGMgPSAxOyBjIDwgYXJndW1lbnRzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgIGlbY10gPSBhcmd1bWVudHNbY107XG4gICAgICB9aWYgKGIuZGVsZWdhdGVUYXJnZXQgPSB0aGlzLCAhay5wcmVEaXNwYXRjaCB8fCBrLnByZURpc3BhdGNoLmNhbGwodGhpcywgYikgIT09ICExKSB7XG4gICAgICAgIGggPSByLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcywgYiwgaiksIGMgPSAwO3doaWxlICgoZiA9IGhbYysrXSkgJiYgIWIuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgIGIuY3VycmVudFRhcmdldCA9IGYuZWxlbSwgZCA9IDA7d2hpbGUgKChnID0gZi5oYW5kbGVyc1tkKytdKSAmJiAhYi5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgICBiLnJuYW1lc3BhY2UgJiYgIWIucm5hbWVzcGFjZS50ZXN0KGcubmFtZXNwYWNlKSB8fCAoYi5oYW5kbGVPYmogPSBnLCBiLmRhdGEgPSBnLmRhdGEsIGUgPSAoKHIuZXZlbnQuc3BlY2lhbFtnLm9yaWdUeXBlXSB8fCB7fSkuaGFuZGxlIHx8IGcuaGFuZGxlcikuYXBwbHkoZi5lbGVtLCBpKSwgdm9pZCAwICE9PSBlICYmIChiLnJlc3VsdCA9IGUpID09PSAhMSAmJiAoYi5wcmV2ZW50RGVmYXVsdCgpLCBiLnN0b3BQcm9wYWdhdGlvbigpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIGsucG9zdERpc3BhdGNoICYmIGsucG9zdERpc3BhdGNoLmNhbGwodGhpcywgYiksIGIucmVzdWx0O1xuICAgICAgfVxuICAgIH0sIGhhbmRsZXJzOiBmdW5jdGlvbiBoYW5kbGVycyhhLCBiKSB7XG4gICAgICB2YXIgYyxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGUsXG4gICAgICAgICAgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGggPSBbXSxcbiAgICAgICAgICBpID0gYi5kZWxlZ2F0ZUNvdW50LFxuICAgICAgICAgIGogPSBhLnRhcmdldDtpZiAoaSAmJiBqLm5vZGVUeXBlICYmICEoXCJjbGlja1wiID09PSBhLnR5cGUgJiYgYS5idXR0b24gPj0gMSkpIGZvciAoOyBqICE9PSB0aGlzOyBqID0gai5wYXJlbnROb2RlIHx8IHRoaXMpIHtcbiAgICAgICAgaWYgKDEgPT09IGoubm9kZVR5cGUgJiYgKFwiY2xpY2tcIiAhPT0gYS50eXBlIHx8IGouZGlzYWJsZWQgIT09ICEwKSkge1xuICAgICAgICAgIGZvciAoZiA9IFtdLCBnID0ge30sIGMgPSAwOyBjIDwgaTsgYysrKSB7XG4gICAgICAgICAgICBkID0gYltjXSwgZSA9IGQuc2VsZWN0b3IgKyBcIiBcIiwgdm9pZCAwID09PSBnW2VdICYmIChnW2VdID0gZC5uZWVkc0NvbnRleHQgPyByKGUsIHRoaXMpLmluZGV4KGopID4gLTEgOiByLmZpbmQoZSwgdGhpcywgbnVsbCwgW2pdKS5sZW5ndGgpLCBnW2VdICYmIGYucHVzaChkKTtcbiAgICAgICAgICB9Zi5sZW5ndGggJiYgaC5wdXNoKHsgZWxlbTogaiwgaGFuZGxlcnM6IGYgfSk7XG4gICAgICAgIH1cbiAgICAgIH1yZXR1cm4gaiA9IHRoaXMsIGkgPCBiLmxlbmd0aCAmJiBoLnB1c2goeyBlbGVtOiBqLCBoYW5kbGVyczogYi5zbGljZShpKSB9KSwgaDtcbiAgICB9LCBhZGRQcm9wOiBmdW5jdGlvbiBhZGRQcm9wKGEsIGIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLkV2ZW50LnByb3RvdHlwZSwgYSwgeyBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgZ2V0OiByLmlzRnVuY3Rpb24oYikgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3JpZ2luYWxFdmVudCkgcmV0dXJuIGIodGhpcy5vcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcmlnaW5hbEV2ZW50KSByZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W2FdO1xuICAgICAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldChiKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGEsIHsgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCwgdmFsdWU6IGIgfSk7XG4gICAgICAgIH0gfSk7XG4gICAgfSwgZml4OiBmdW5jdGlvbiBmaXgoYSkge1xuICAgICAgcmV0dXJuIGFbci5leHBhbmRvXSA/IGEgOiBuZXcgci5FdmVudChhKTtcbiAgICB9LCBzcGVjaWFsOiB7IGxvYWQ6IHsgbm9CdWJibGU6ICEwIH0sIGZvY3VzOiB7IHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gICAgICAgICAgaWYgKHRoaXMgIT09IHhhKCkgJiYgdGhpcy5mb2N1cykgcmV0dXJuIHRoaXMuZm9jdXMoKSwgITE7XG4gICAgICAgIH0sIGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCIgfSwgYmx1cjogeyB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgICAgIGlmICh0aGlzID09PSB4YSgpICYmIHRoaXMuYmx1cikgcmV0dXJuIHRoaXMuYmx1cigpLCAhMTtcbiAgICAgICAgfSwgZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCIgfSwgY2xpY2s6IHsgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICAgICAgICBpZiAoXCJjaGVja2JveFwiID09PSB0aGlzLnR5cGUgJiYgdGhpcy5jbGljayAmJiBCKHRoaXMsIFwiaW5wdXRcIikpIHJldHVybiB0aGlzLmNsaWNrKCksICExO1xuICAgICAgICB9LCBfZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoYSkge1xuICAgICAgICAgIHJldHVybiBCKGEudGFyZ2V0LCBcImFcIik7XG4gICAgICAgIH0gfSwgYmVmb3JldW5sb2FkOiB7IHBvc3REaXNwYXRjaDogZnVuY3Rpb24gcG9zdERpc3BhdGNoKGEpIHtcbiAgICAgICAgICB2b2lkIDAgIT09IGEucmVzdWx0ICYmIGEub3JpZ2luYWxFdmVudCAmJiAoYS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gYS5yZXN1bHQpO1xuICAgICAgICB9IH0gfSB9LCByLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICBhLnJlbW92ZUV2ZW50TGlzdGVuZXIgJiYgYS5yZW1vdmVFdmVudExpc3RlbmVyKGIsIGMpO1xuICB9LCByLkV2ZW50ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIHIuRXZlbnQgPyAoYSAmJiBhLnR5cGUgPyAodGhpcy5vcmlnaW5hbEV2ZW50ID0gYSwgdGhpcy50eXBlID0gYS50eXBlLCB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGEuZGVmYXVsdFByZXZlbnRlZCB8fCB2b2lkIDAgPT09IGEuZGVmYXVsdFByZXZlbnRlZCAmJiBhLnJldHVyblZhbHVlID09PSAhMSA/IHZhIDogd2EsIHRoaXMudGFyZ2V0ID0gYS50YXJnZXQgJiYgMyA9PT0gYS50YXJnZXQubm9kZVR5cGUgPyBhLnRhcmdldC5wYXJlbnROb2RlIDogYS50YXJnZXQsIHRoaXMuY3VycmVudFRhcmdldCA9IGEuY3VycmVudFRhcmdldCwgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gYS5yZWxhdGVkVGFyZ2V0KSA6IHRoaXMudHlwZSA9IGEsIGIgJiYgci5leHRlbmQodGhpcywgYiksIHRoaXMudGltZVN0YW1wID0gYSAmJiBhLnRpbWVTdGFtcCB8fCByLm5vdygpLCB2b2lkICh0aGlzW3IuZXhwYW5kb10gPSAhMCkpIDogbmV3IHIuRXZlbnQoYSwgYik7XG4gIH0sIHIuRXZlbnQucHJvdG90eXBlID0geyBjb25zdHJ1Y3Rvcjogci5FdmVudCwgaXNEZWZhdWx0UHJldmVudGVkOiB3YSwgaXNQcm9wYWdhdGlvblN0b3BwZWQ6IHdhLCBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogd2EsIGlzU2ltdWxhdGVkOiAhMSwgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgdmFyIGEgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSB2YSwgYSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBhLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSwgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oKSB7XG4gICAgICB2YXIgYSA9IHRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gdmEsIGEgJiYgIXRoaXMuaXNTaW11bGF0ZWQgJiYgYS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9LCBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICAgIHZhciBhID0gdGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB2YSwgYSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gfSwgci5lYWNoKHsgYWx0S2V5OiAhMCwgYnViYmxlczogITAsIGNhbmNlbGFibGU6ICEwLCBjaGFuZ2VkVG91Y2hlczogITAsIGN0cmxLZXk6ICEwLCBkZXRhaWw6ICEwLCBldmVudFBoYXNlOiAhMCwgbWV0YUtleTogITAsIHBhZ2VYOiAhMCwgcGFnZVk6ICEwLCBzaGlmdEtleTogITAsIHZpZXc6ICEwLCBcImNoYXJcIjogITAsIGNoYXJDb2RlOiAhMCwga2V5OiAhMCwga2V5Q29kZTogITAsIGJ1dHRvbjogITAsIGJ1dHRvbnM6ICEwLCBjbGllbnRYOiAhMCwgY2xpZW50WTogITAsIG9mZnNldFg6ICEwLCBvZmZzZXRZOiAhMCwgcG9pbnRlcklkOiAhMCwgcG9pbnRlclR5cGU6ICEwLCBzY3JlZW5YOiAhMCwgc2NyZWVuWTogITAsIHRhcmdldFRvdWNoZXM6ICEwLCB0b0VsZW1lbnQ6ICEwLCB0b3VjaGVzOiAhMCwgd2hpY2g6IGZ1bmN0aW9uIHdoaWNoKGEpIHtcbiAgICAgIHZhciBiID0gYS5idXR0b247cmV0dXJuIG51bGwgPT0gYS53aGljaCAmJiBzYS50ZXN0KGEudHlwZSkgPyBudWxsICE9IGEuY2hhckNvZGUgPyBhLmNoYXJDb2RlIDogYS5rZXlDb2RlIDogIWEud2hpY2ggJiYgdm9pZCAwICE9PSBiICYmIHRhLnRlc3QoYS50eXBlKSA/IDEgJiBiID8gMSA6IDIgJiBiID8gMyA6IDQgJiBiID8gMiA6IDAgOiBhLndoaWNoO1xuICAgIH0gfSwgci5ldmVudC5hZGRQcm9wKSwgci5lYWNoKHsgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLCBwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIiwgcG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIiB9LCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHIuZXZlbnQuc3BlY2lhbFthXSA9IHsgZGVsZWdhdGVUeXBlOiBiLCBiaW5kVHlwZTogYiwgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoYSkge1xuICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgIGQgPSB0aGlzLFxuICAgICAgICAgICAgZSA9IGEucmVsYXRlZFRhcmdldCxcbiAgICAgICAgICAgIGYgPSBhLmhhbmRsZU9iajtyZXR1cm4gZSAmJiAoZSA9PT0gZCB8fCByLmNvbnRhaW5zKGQsIGUpKSB8fCAoYS50eXBlID0gZi5vcmlnVHlwZSwgYyA9IGYuaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBhLnR5cGUgPSBiKSwgYztcbiAgICAgIH0gfTtcbiAgfSksIHIuZm4uZXh0ZW5kKHsgb246IGZ1bmN0aW9uIG9uKGEsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiB5YSh0aGlzLCBhLCBiLCBjLCBkKTtcbiAgICB9LCBvbmU6IGZ1bmN0aW9uIG9uZShhLCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4geWEodGhpcywgYSwgYiwgYywgZCwgMSk7XG4gICAgfSwgb2ZmOiBmdW5jdGlvbiBvZmYoYSwgYiwgYykge1xuICAgICAgdmFyIGQsIGU7aWYgKGEgJiYgYS5wcmV2ZW50RGVmYXVsdCAmJiBhLmhhbmRsZU9iaikgcmV0dXJuIGQgPSBhLmhhbmRsZU9iaiwgcihhLmRlbGVnYXRlVGFyZ2V0KS5vZmYoZC5uYW1lc3BhY2UgPyBkLm9yaWdUeXBlICsgXCIuXCIgKyBkLm5hbWVzcGFjZSA6IGQub3JpZ1R5cGUsIGQuc2VsZWN0b3IsIGQuaGFuZGxlciksIHRoaXM7aWYgKFwib2JqZWN0XCIgPT0gKHR5cGVvZiBhID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYSkpKSB7XG4gICAgICAgIGZvciAoZSBpbiBhKSB7XG4gICAgICAgICAgdGhpcy5vZmYoZSwgYiwgYVtlXSk7XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH1yZXR1cm4gYiAhPT0gITEgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBiIHx8IChjID0gYiwgYiA9IHZvaWQgMCksIGMgPT09ICExICYmIChjID0gd2EpLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICByLmV2ZW50LnJlbW92ZSh0aGlzLCBhLCBjLCBiKTtcbiAgICAgIH0pO1xuICAgIH0gfSk7dmFyIHphID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG4gICAgICBBYSA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuICAgICAgQmEgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuICAgICAgQ2EgPSAvXnRydWVcXC8oLiopLyxcbiAgICAgIERhID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO2Z1bmN0aW9uIEVhKGEsIGIpIHtcbiAgICByZXR1cm4gQihhLCBcInRhYmxlXCIpICYmIEIoMTEgIT09IGIubm9kZVR5cGUgPyBiIDogYi5maXJzdENoaWxkLCBcInRyXCIpID8gcihcIj50Ym9keVwiLCBhKVswXSB8fCBhIDogYTtcbiAgfWZ1bmN0aW9uIEZhKGEpIHtcbiAgICByZXR1cm4gYS50eXBlID0gKG51bGwgIT09IGEuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgKyBcIi9cIiArIGEudHlwZSwgYTtcbiAgfWZ1bmN0aW9uIEdhKGEpIHtcbiAgICB2YXIgYiA9IENhLmV4ZWMoYS50eXBlKTtyZXR1cm4gYiA/IGEudHlwZSA9IGJbMV0gOiBhLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksIGE7XG4gIH1mdW5jdGlvbiBIYShhLCBiKSB7XG4gICAgdmFyIGMsIGQsIGUsIGYsIGcsIGgsIGksIGo7aWYgKDEgPT09IGIubm9kZVR5cGUpIHtcbiAgICAgIGlmIChXLmhhc0RhdGEoYSkgJiYgKGYgPSBXLmFjY2VzcyhhKSwgZyA9IFcuc2V0KGIsIGYpLCBqID0gZi5ldmVudHMpKSB7XG4gICAgICAgIGRlbGV0ZSBnLmhhbmRsZSwgZy5ldmVudHMgPSB7fTtmb3IgKGUgaW4gaikge1xuICAgICAgICAgIGZvciAoYyA9IDAsIGQgPSBqW2VdLmxlbmd0aDsgYyA8IGQ7IGMrKykge1xuICAgICAgICAgICAgci5ldmVudC5hZGQoYiwgZSwgaltlXVtjXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9WC5oYXNEYXRhKGEpICYmIChoID0gWC5hY2Nlc3MoYSksIGkgPSByLmV4dGVuZCh7fSwgaCksIFguc2V0KGIsIGkpKTtcbiAgICB9XG4gIH1mdW5jdGlvbiBJYShhLCBiKSB7XG4gICAgdmFyIGMgPSBiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJpbnB1dFwiID09PSBjICYmIGphLnRlc3QoYS50eXBlKSA/IGIuY2hlY2tlZCA9IGEuY2hlY2tlZCA6IFwiaW5wdXRcIiAhPT0gYyAmJiBcInRleHRhcmVhXCIgIT09IGMgfHwgKGIuZGVmYXVsdFZhbHVlID0gYS5kZWZhdWx0VmFsdWUpO1xuICB9ZnVuY3Rpb24gSmEoYSwgYiwgYywgZCkge1xuICAgIGIgPSBnLmFwcGx5KFtdLCBiKTt2YXIgZSxcbiAgICAgICAgZixcbiAgICAgICAgaCxcbiAgICAgICAgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbCA9IDAsXG4gICAgICAgIG0gPSBhLmxlbmd0aCxcbiAgICAgICAgbiA9IG0gLSAxLFxuICAgICAgICBxID0gYlswXSxcbiAgICAgICAgcyA9IHIuaXNGdW5jdGlvbihxKTtpZiAocyB8fCBtID4gMSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBxICYmICFvLmNoZWNrQ2xvbmUgJiYgQmEudGVzdChxKSkgcmV0dXJuIGEuZWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGYgPSBhLmVxKGUpO3MgJiYgKGJbMF0gPSBxLmNhbGwodGhpcywgZSwgZi5odG1sKCkpKSwgSmEoZiwgYiwgYywgZCk7XG4gICAgfSk7aWYgKG0gJiYgKGUgPSBxYShiLCBhWzBdLm93bmVyRG9jdW1lbnQsICExLCBhLCBkKSwgZiA9IGUuZmlyc3RDaGlsZCwgMSA9PT0gZS5jaGlsZE5vZGVzLmxlbmd0aCAmJiAoZSA9IGYpLCBmIHx8IGQpKSB7XG4gICAgICBmb3IgKGggPSByLm1hcChuYShlLCBcInNjcmlwdFwiKSwgRmEpLCBpID0gaC5sZW5ndGg7IGwgPCBtOyBsKyspIHtcbiAgICAgICAgaiA9IGUsIGwgIT09IG4gJiYgKGogPSByLmNsb25lKGosICEwLCAhMCksIGkgJiYgci5tZXJnZShoLCBuYShqLCBcInNjcmlwdFwiKSkpLCBjLmNhbGwoYVtsXSwgaiwgbCk7XG4gICAgICB9aWYgKGkpIGZvciAoayA9IGhbaC5sZW5ndGggLSAxXS5vd25lckRvY3VtZW50LCByLm1hcChoLCBHYSksIGwgPSAwOyBsIDwgaTsgbCsrKSB7XG4gICAgICAgIGogPSBoW2xdLCBsYS50ZXN0KGoudHlwZSB8fCBcIlwiKSAmJiAhVy5hY2Nlc3MoaiwgXCJnbG9iYWxFdmFsXCIpICYmIHIuY29udGFpbnMoaywgaikgJiYgKGouc3JjID8gci5fZXZhbFVybCAmJiByLl9ldmFsVXJsKGouc3JjKSA6IHAoai50ZXh0Q29udGVudC5yZXBsYWNlKERhLCBcIlwiKSwgaykpO1xuICAgICAgfVxuICAgIH1yZXR1cm4gYTtcbiAgfWZ1bmN0aW9uIEthKGEsIGIsIGMpIHtcbiAgICBmb3IgKHZhciBkLCBlID0gYiA/IHIuZmlsdGVyKGIsIGEpIDogYSwgZiA9IDA7IG51bGwgIT0gKGQgPSBlW2ZdKTsgZisrKSB7XG4gICAgICBjIHx8IDEgIT09IGQubm9kZVR5cGUgfHwgci5jbGVhbkRhdGEobmEoZCkpLCBkLnBhcmVudE5vZGUgJiYgKGMgJiYgci5jb250YWlucyhkLm93bmVyRG9jdW1lbnQsIGQpICYmIG9hKG5hKGQsIFwic2NyaXB0XCIpKSwgZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGQpKTtcbiAgICB9cmV0dXJuIGE7XG4gIH1yLmV4dGVuZCh7IGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uIGh0bWxQcmVmaWx0ZXIoYSkge1xuICAgICAgcmV0dXJuIGEucmVwbGFjZSh6YSwgXCI8JDE+PC8kMj5cIik7XG4gICAgfSwgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKGEsIGIsIGMpIHtcbiAgICAgIHZhciBkLFxuICAgICAgICAgIGUsXG4gICAgICAgICAgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGggPSBhLmNsb25lTm9kZSghMCksXG4gICAgICAgICAgaSA9IHIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LCBhKTtpZiAoIShvLm5vQ2xvbmVDaGVja2VkIHx8IDEgIT09IGEubm9kZVR5cGUgJiYgMTEgIT09IGEubm9kZVR5cGUgfHwgci5pc1hNTERvYyhhKSkpIGZvciAoZyA9IG5hKGgpLCBmID0gbmEoYSksIGQgPSAwLCBlID0gZi5sZW5ndGg7IGQgPCBlOyBkKyspIHtcbiAgICAgICAgSWEoZltkXSwgZ1tkXSk7XG4gICAgICB9aWYgKGIpIGlmIChjKSBmb3IgKGYgPSBmIHx8IG5hKGEpLCBnID0gZyB8fCBuYShoKSwgZCA9IDAsIGUgPSBmLmxlbmd0aDsgZCA8IGU7IGQrKykge1xuICAgICAgICBIYShmW2RdLCBnW2RdKTtcbiAgICAgIH0gZWxzZSBIYShhLCBoKTtyZXR1cm4gZyA9IG5hKGgsIFwic2NyaXB0XCIpLCBnLmxlbmd0aCA+IDAgJiYgb2EoZywgIWkgJiYgbmEoYSwgXCJzY3JpcHRcIikpLCBoO1xuICAgIH0sIGNsZWFuRGF0YTogZnVuY3Rpb24gY2xlYW5EYXRhKGEpIHtcbiAgICAgIGZvciAodmFyIGIsIGMsIGQsIGUgPSByLmV2ZW50LnNwZWNpYWwsIGYgPSAwOyB2b2lkIDAgIT09IChjID0gYVtmXSk7IGYrKykge1xuICAgICAgICBpZiAoVShjKSkge1xuICAgICAgICAgIGlmIChiID0gY1tXLmV4cGFuZG9dKSB7XG4gICAgICAgICAgICBpZiAoYi5ldmVudHMpIGZvciAoZCBpbiBiLmV2ZW50cykge1xuICAgICAgICAgICAgICBlW2RdID8gci5ldmVudC5yZW1vdmUoYywgZCkgOiByLnJlbW92ZUV2ZW50KGMsIGQsIGIuaGFuZGxlKTtcbiAgICAgICAgICAgIH1jW1cuZXhwYW5kb10gPSB2b2lkIDA7XG4gICAgICAgICAgfWNbWC5leHBhbmRvXSAmJiAoY1tYLmV4cGFuZG9dID0gdm9pZCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gfSksIHIuZm4uZXh0ZW5kKHsgZGV0YWNoOiBmdW5jdGlvbiBkZXRhY2goYSkge1xuICAgICAgcmV0dXJuIEthKHRoaXMsIGEsICEwKTtcbiAgICB9LCByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShhKSB7XG4gICAgICByZXR1cm4gS2EodGhpcywgYSk7XG4gICAgfSwgdGV4dDogZnVuY3Rpb24gdGV4dChhKSB7XG4gICAgICByZXR1cm4gVCh0aGlzLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSBhID8gci50ZXh0KHRoaXMpIDogdGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIDEgIT09IHRoaXMubm9kZVR5cGUgJiYgMTEgIT09IHRoaXMubm9kZVR5cGUgJiYgOSAhPT0gdGhpcy5ub2RlVHlwZSB8fCAodGhpcy50ZXh0Q29udGVudCA9IGEpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIG51bGwsIGEsIGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIH0sIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xuICAgICAgcmV0dXJuIEphKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgaWYgKDEgPT09IHRoaXMubm9kZVR5cGUgfHwgMTEgPT09IHRoaXMubm9kZVR5cGUgfHwgOSA9PT0gdGhpcy5ub2RlVHlwZSkge1xuICAgICAgICAgIHZhciBiID0gRWEodGhpcywgYSk7Yi5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgcHJlcGVuZDogZnVuY3Rpb24gcHJlcGVuZCgpIHtcbiAgICAgIHJldHVybiBKYSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGlmICgxID09PSB0aGlzLm5vZGVUeXBlIHx8IDExID09PSB0aGlzLm5vZGVUeXBlIHx8IDkgPT09IHRoaXMubm9kZVR5cGUpIHtcbiAgICAgICAgICB2YXIgYiA9IEVhKHRoaXMsIGEpO2IuaW5zZXJ0QmVmb3JlKGEsIGIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlKCkge1xuICAgICAgcmV0dXJuIEphKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgdGhpcyk7XG4gICAgICB9KTtcbiAgICB9LCBhZnRlcjogZnVuY3Rpb24gYWZ0ZXIoKSB7XG4gICAgICByZXR1cm4gSmEodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCB0aGlzLm5leHRTaWJsaW5nKTtcbiAgICAgIH0pO1xuICAgIH0sIGVtcHR5OiBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICAgIGZvciAodmFyIGEsIGIgPSAwOyBudWxsICE9IChhID0gdGhpc1tiXSk7IGIrKykge1xuICAgICAgICAxID09PSBhLm5vZGVUeXBlICYmIChyLmNsZWFuRGF0YShuYShhLCAhMSkpLCBhLnRleHRDb250ZW50ID0gXCJcIik7XG4gICAgICB9cmV0dXJuIHRoaXM7XG4gICAgfSwgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKGEsIGIpIHtcbiAgICAgIHJldHVybiBhID0gbnVsbCAhPSBhICYmIGEsIGIgPSBudWxsID09IGIgPyBhIDogYiwgdGhpcy5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gci5jbG9uZSh0aGlzLCBhLCBiKTtcbiAgICAgIH0pO1xuICAgIH0sIGh0bWw6IGZ1bmN0aW9uIGh0bWwoYSkge1xuICAgICAgcmV0dXJuIFQodGhpcywgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGIgPSB0aGlzWzBdIHx8IHt9LFxuICAgICAgICAgICAgYyA9IDAsXG4gICAgICAgICAgICBkID0gdGhpcy5sZW5ndGg7aWYgKHZvaWQgMCA9PT0gYSAmJiAxID09PSBiLm5vZGVUeXBlKSByZXR1cm4gYi5pbm5lckhUTUw7aWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgJiYgIUFhLnRlc3QoYSkgJiYgIW1hWyhrYS5leGVjKGEpIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgICBhID0gci5odG1sUHJlZmlsdGVyKGEpO3RyeSB7XG4gICAgICAgICAgICBmb3IgKDsgYyA8IGQ7IGMrKykge1xuICAgICAgICAgICAgICBiID0gdGhpc1tjXSB8fCB7fSwgMSA9PT0gYi5ub2RlVHlwZSAmJiAoci5jbGVhbkRhdGEobmEoYiwgITEpKSwgYi5pbm5lckhUTUwgPSBhKTtcbiAgICAgICAgICAgIH1iID0gMDtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9YiAmJiB0aGlzLmVtcHR5KCkuYXBwZW5kKGEpO1xuICAgICAgfSwgbnVsbCwgYSwgYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgfSwgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKCkge1xuICAgICAgdmFyIGEgPSBbXTtyZXR1cm4gSmEodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoYikge1xuICAgICAgICB2YXIgYyA9IHRoaXMucGFyZW50Tm9kZTtyLmluQXJyYXkodGhpcywgYSkgPCAwICYmIChyLmNsZWFuRGF0YShuYSh0aGlzKSksIGMgJiYgYy5yZXBsYWNlQ2hpbGQoYiwgdGhpcykpO1xuICAgICAgfSwgYSk7XG4gICAgfSB9KSwgci5lYWNoKHsgYXBwZW5kVG86IFwiYXBwZW5kXCIsIHByZXBlbmRUbzogXCJwcmVwZW5kXCIsIGluc2VydEJlZm9yZTogXCJiZWZvcmVcIiwgaW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIiwgcmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiIH0sIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgci5mblthXSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICBmb3IgKHZhciBjLCBkID0gW10sIGUgPSByKGEpLCBmID0gZS5sZW5ndGggLSAxLCBnID0gMDsgZyA8PSBmOyBnKyspIHtcbiAgICAgICAgYyA9IGcgPT09IGYgPyB0aGlzIDogdGhpcy5jbG9uZSghMCksIHIoZVtnXSlbYl0oYyksIGguYXBwbHkoZCwgYy5nZXQoKSk7XG4gICAgICB9cmV0dXJuIHRoaXMucHVzaFN0YWNrKGQpO1xuICAgIH07XG4gIH0pO3ZhciBMYSA9IC9ebWFyZ2luLyxcbiAgICAgIE1hID0gbmV3IFJlZ0V4cChcIl4oXCIgKyBhYSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiKSxcbiAgICAgIE5hID0gZnVuY3Rpb24gTmEoYikge1xuICAgIHZhciBjID0gYi5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiBjICYmIGMub3BlbmVyIHx8IChjID0gYSksIGMuZ2V0Q29tcHV0ZWRTdHlsZShiKTtcbiAgfTshZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGIoKSB7XG4gICAgICBpZiAoaSkge1xuICAgICAgICBpLnN0eWxlLmNzc1RleHQgPSBcImJveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7dG9wOjElO3dpZHRoOjUwJVwiLCBpLmlubmVySFRNTCA9IFwiXCIsIHJhLmFwcGVuZENoaWxkKGgpO3ZhciBiID0gYS5nZXRDb21wdXRlZFN0eWxlKGkpO2MgPSBcIjElXCIgIT09IGIudG9wLCBnID0gXCIycHhcIiA9PT0gYi5tYXJnaW5MZWZ0LCBlID0gXCI0cHhcIiA9PT0gYi53aWR0aCwgaS5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCIsIGYgPSBcIjRweFwiID09PSBiLm1hcmdpblJpZ2h0LCByYS5yZW1vdmVDaGlsZChoKSwgaSA9IG51bGw7XG4gICAgICB9XG4gICAgfXZhciBjLFxuICAgICAgICBlLFxuICAgICAgICBmLFxuICAgICAgICBnLFxuICAgICAgICBoID0gZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICBpID0gZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuc3R5bGUgJiYgKGkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCIsIGkuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCIsIG8uY2xlYXJDbG9uZVN0eWxlID0gXCJjb250ZW50LWJveFwiID09PSBpLnN0eWxlLmJhY2tncm91bmRDbGlwLCBoLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7cGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCIsIGguYXBwZW5kQ2hpbGQoaSksIHIuZXh0ZW5kKG8sIHsgcGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24gcGl4ZWxQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGIoKSwgYztcbiAgICAgIH0sIGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbiBib3hTaXppbmdSZWxpYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIGIoKSwgZTtcbiAgICAgIH0sIHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uIHBpeGVsTWFyZ2luUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiBiKCksIGY7XG4gICAgICB9LCByZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uIHJlbGlhYmxlTWFyZ2luTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIGIoKSwgZztcbiAgICAgIH0gfSkpO1xuICB9KCk7ZnVuY3Rpb24gT2EoYSwgYiwgYykge1xuICAgIHZhciBkLFxuICAgICAgICBlLFxuICAgICAgICBmLFxuICAgICAgICBnLFxuICAgICAgICBoID0gYS5zdHlsZTtyZXR1cm4gYyA9IGMgfHwgTmEoYSksIGMgJiYgKGcgPSBjLmdldFByb3BlcnR5VmFsdWUoYikgfHwgY1tiXSwgXCJcIiAhPT0gZyB8fCByLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCwgYSkgfHwgKGcgPSByLnN0eWxlKGEsIGIpKSwgIW8ucGl4ZWxNYXJnaW5SaWdodCgpICYmIE1hLnRlc3QoZykgJiYgTGEudGVzdChiKSAmJiAoZCA9IGgud2lkdGgsIGUgPSBoLm1pbldpZHRoLCBmID0gaC5tYXhXaWR0aCwgaC5taW5XaWR0aCA9IGgubWF4V2lkdGggPSBoLndpZHRoID0gZywgZyA9IGMud2lkdGgsIGgud2lkdGggPSBkLCBoLm1pbldpZHRoID0gZSwgaC5tYXhXaWR0aCA9IGYpKSwgdm9pZCAwICE9PSBnID8gZyArIFwiXCIgOiBnO1xuICB9ZnVuY3Rpb24gUGEoYSwgYikge1xuICAgIHJldHVybiB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gYSgpID8gdm9pZCBkZWxldGUgdGhpcy5nZXQgOiAodGhpcy5nZXQgPSBiKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSB9O1xuICB9dmFyIFFhID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuICAgICAgUmEgPSAvXi0tLyxcbiAgICAgIFNhID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcbiAgICAgIFRhID0geyBsZXR0ZXJTcGFjaW5nOiBcIjBcIiwgZm9udFdlaWdodDogXCI0MDBcIiB9LFxuICAgICAgVWEgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXSxcbiAgICAgIFZhID0gZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlO2Z1bmN0aW9uIFdhKGEpIHtcbiAgICBpZiAoYSBpbiBWYSkgcmV0dXJuIGE7dmFyIGIgPSBhWzBdLnRvVXBwZXJDYXNlKCkgKyBhLnNsaWNlKDEpLFxuICAgICAgICBjID0gVWEubGVuZ3RoO3doaWxlIChjLS0pIHtcbiAgICAgIGlmIChhID0gVWFbY10gKyBiLCBhIGluIFZhKSByZXR1cm4gYTtcbiAgICB9XG4gIH1mdW5jdGlvbiBYYShhKSB7XG4gICAgdmFyIGIgPSByLmNzc1Byb3BzW2FdO3JldHVybiBiIHx8IChiID0gci5jc3NQcm9wc1thXSA9IFdhKGEpIHx8IGEpLCBiO1xuICB9ZnVuY3Rpb24gWWEoYSwgYiwgYykge1xuICAgIHZhciBkID0gYmEuZXhlYyhiKTtyZXR1cm4gZCA/IE1hdGgubWF4KDAsIGRbMl0gLSAoYyB8fCAwKSkgKyAoZFszXSB8fCBcInB4XCIpIDogYjtcbiAgfWZ1bmN0aW9uIFphKGEsIGIsIGMsIGQsIGUpIHtcbiAgICB2YXIgZixcbiAgICAgICAgZyA9IDA7Zm9yIChmID0gYyA9PT0gKGQgPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIpID8gNCA6IFwid2lkdGhcIiA9PT0gYiA/IDEgOiAwOyBmIDwgNDsgZiArPSAyKSB7XG4gICAgICBcIm1hcmdpblwiID09PSBjICYmIChnICs9IHIuY3NzKGEsIGMgKyBjYVtmXSwgITAsIGUpKSwgZCA/IChcImNvbnRlbnRcIiA9PT0gYyAmJiAoZyAtPSByLmNzcyhhLCBcInBhZGRpbmdcIiArIGNhW2ZdLCAhMCwgZSkpLCBcIm1hcmdpblwiICE9PSBjICYmIChnIC09IHIuY3NzKGEsIFwiYm9yZGVyXCIgKyBjYVtmXSArIFwiV2lkdGhcIiwgITAsIGUpKSkgOiAoZyArPSByLmNzcyhhLCBcInBhZGRpbmdcIiArIGNhW2ZdLCAhMCwgZSksIFwicGFkZGluZ1wiICE9PSBjICYmIChnICs9IHIuY3NzKGEsIFwiYm9yZGVyXCIgKyBjYVtmXSArIFwiV2lkdGhcIiwgITAsIGUpKSk7XG4gICAgfXJldHVybiBnO1xuICB9ZnVuY3Rpb24gJGEoYSwgYiwgYykge1xuICAgIHZhciBkLFxuICAgICAgICBlID0gTmEoYSksXG4gICAgICAgIGYgPSBPYShhLCBiLCBlKSxcbiAgICAgICAgZyA9IFwiYm9yZGVyLWJveFwiID09PSByLmNzcyhhLCBcImJveFNpemluZ1wiLCAhMSwgZSk7cmV0dXJuIE1hLnRlc3QoZikgPyBmIDogKGQgPSBnICYmIChvLmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZiA9PT0gYS5zdHlsZVtiXSksIFwiYXV0b1wiID09PSBmICYmIChmID0gYVtcIm9mZnNldFwiICsgYlswXS50b1VwcGVyQ2FzZSgpICsgYi5zbGljZSgxKV0pLCBmID0gcGFyc2VGbG9hdChmKSB8fCAwLCBmICsgWmEoYSwgYiwgYyB8fCAoZyA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiksIGQsIGUpICsgXCJweFwiKTtcbiAgfXIuZXh0ZW5kKHsgY3NzSG9va3M6IHsgb3BhY2l0eTogeyBnZXQ6IGZ1bmN0aW9uIGdldChhLCBiKSB7XG4gICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgIHZhciBjID0gT2EoYSwgXCJvcGFjaXR5XCIpO3JldHVybiBcIlwiID09PSBjID8gXCIxXCIgOiBjO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB9IH0sIGNzc051bWJlcjogeyBhbmltYXRpb25JdGVyYXRpb25Db3VudDogITAsIGNvbHVtbkNvdW50OiAhMCwgZmlsbE9wYWNpdHk6ICEwLCBmbGV4R3JvdzogITAsIGZsZXhTaHJpbms6ICEwLCBmb250V2VpZ2h0OiAhMCwgbGluZUhlaWdodDogITAsIG9wYWNpdHk6ICEwLCBvcmRlcjogITAsIG9ycGhhbnM6ICEwLCB3aWRvd3M6ICEwLCB6SW5kZXg6ICEwLCB6b29tOiAhMCB9LCBjc3NQcm9wczogeyBcImZsb2F0XCI6IFwiY3NzRmxvYXRcIiB9LCBzdHlsZTogZnVuY3Rpb24gc3R5bGUoYSwgYiwgYywgZCkge1xuICAgICAgaWYgKGEgJiYgMyAhPT0gYS5ub2RlVHlwZSAmJiA4ICE9PSBhLm5vZGVUeXBlICYmIGEuc3R5bGUpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIGggPSByLmNhbWVsQ2FzZShiKSxcbiAgICAgICAgICAgIGkgPSBSYS50ZXN0KGIpLFxuICAgICAgICAgICAgaiA9IGEuc3R5bGU7cmV0dXJuIGkgfHwgKGIgPSBYYShoKSksIGcgPSByLmNzc0hvb2tzW2JdIHx8IHIuY3NzSG9va3NbaF0sIHZvaWQgMCA9PT0gYyA/IGcgJiYgXCJnZXRcIiBpbiBnICYmIHZvaWQgMCAhPT0gKGUgPSBnLmdldChhLCAhMSwgZCkpID8gZSA6IGpbYl0gOiAoZiA9IHR5cGVvZiBjID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYyksIFwic3RyaW5nXCIgPT09IGYgJiYgKGUgPSBiYS5leGVjKGMpKSAmJiBlWzFdICYmIChjID0gZmEoYSwgYiwgZSksIGYgPSBcIm51bWJlclwiKSwgbnVsbCAhPSBjICYmIGMgPT09IGMgJiYgKFwibnVtYmVyXCIgPT09IGYgJiYgKGMgKz0gZSAmJiBlWzNdIHx8IChyLmNzc051bWJlcltoXSA/IFwiXCIgOiBcInB4XCIpKSwgby5jbGVhckNsb25lU3R5bGUgfHwgXCJcIiAhPT0gYyB8fCAwICE9PSBiLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpIHx8IChqW2JdID0gXCJpbmhlcml0XCIpLCBnICYmIFwic2V0XCIgaW4gZyAmJiB2b2lkIDAgPT09IChjID0gZy5zZXQoYSwgYywgZCkpIHx8IChpID8gai5zZXRQcm9wZXJ0eShiLCBjKSA6IGpbYl0gPSBjKSksIHZvaWQgMCk7XG4gICAgICB9XG4gICAgfSwgY3NzOiBmdW5jdGlvbiBjc3MoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIGUsXG4gICAgICAgICAgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGggPSByLmNhbWVsQ2FzZShiKSxcbiAgICAgICAgICBpID0gUmEudGVzdChiKTtyZXR1cm4gaSB8fCAoYiA9IFhhKGgpKSwgZyA9IHIuY3NzSG9va3NbYl0gfHwgci5jc3NIb29rc1toXSwgZyAmJiBcImdldFwiIGluIGcgJiYgKGUgPSBnLmdldChhLCAhMCwgYykpLCB2b2lkIDAgPT09IGUgJiYgKGUgPSBPYShhLCBiLCBkKSksIFwibm9ybWFsXCIgPT09IGUgJiYgYiBpbiBUYSAmJiAoZSA9IFRhW2JdKSwgXCJcIiA9PT0gYyB8fCBjID8gKGYgPSBwYXJzZUZsb2F0KGUpLCBjID09PSAhMCB8fCBpc0Zpbml0ZShmKSA/IGYgfHwgMCA6IGUpIDogZTtcbiAgICB9IH0pLCByLmVhY2goW1wiaGVpZ2h0XCIsIFwid2lkdGhcIl0sIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgci5jc3NIb29rc1tiXSA9IHsgZ2V0OiBmdW5jdGlvbiBnZXQoYSwgYywgZCkge1xuICAgICAgICBpZiAoYykgcmV0dXJuICFRYS50ZXN0KHIuY3NzKGEsIFwiZGlzcGxheVwiKSkgfHwgYS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCAmJiBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoID8gJGEoYSwgYiwgZCkgOiBlYShhLCBTYSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAkYShhLCBiLCBkKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldChhLCBjLCBkKSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgZiA9IGQgJiYgTmEoYSksXG4gICAgICAgICAgICBnID0gZCAmJiBaYShhLCBiLCBkLCBcImJvcmRlci1ib3hcIiA9PT0gci5jc3MoYSwgXCJib3hTaXppbmdcIiwgITEsIGYpLCBmKTtyZXR1cm4gZyAmJiAoZSA9IGJhLmV4ZWMoYykpICYmIFwicHhcIiAhPT0gKGVbM10gfHwgXCJweFwiKSAmJiAoYS5zdHlsZVtiXSA9IGMsIGMgPSByLmNzcyhhLCBiKSksIFlhKGEsIGMsIGcpO1xuICAgICAgfSB9O1xuICB9KSwgci5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gUGEoby5yZWxpYWJsZU1hcmdpbkxlZnQsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGIpIHJldHVybiAocGFyc2VGbG9hdChPYShhLCBcIm1hcmdpbkxlZnRcIikpIHx8IGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIGVhKGEsIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgIH0pKSArIFwicHhcIjtcbiAgfSksIHIuZWFjaCh7IG1hcmdpbjogXCJcIiwgcGFkZGluZzogXCJcIiwgYm9yZGVyOiBcIldpZHRoXCIgfSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByLmNzc0hvb2tzW2EgKyBiXSA9IHsgZXhwYW5kOiBmdW5jdGlvbiBleHBhbmQoYykge1xuICAgICAgICBmb3IgKHZhciBkID0gMCwgZSA9IHt9LCBmID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgYyA/IGMuc3BsaXQoXCIgXCIpIDogW2NdOyBkIDwgNDsgZCsrKSB7XG4gICAgICAgICAgZVthICsgY2FbZF0gKyBiXSA9IGZbZF0gfHwgZltkIC0gMl0gfHwgZlswXTtcbiAgICAgICAgfXJldHVybiBlO1xuICAgICAgfSB9LCBMYS50ZXN0KGEpIHx8IChyLmNzc0hvb2tzW2EgKyBiXS5zZXQgPSBZYSk7XG4gIH0pLCByLmZuLmV4dGVuZCh7IGNzczogZnVuY3Rpb24gY3NzKGEsIGIpIHtcbiAgICAgIHJldHVybiBUKHRoaXMsIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIHZhciBkLFxuICAgICAgICAgICAgZSxcbiAgICAgICAgICAgIGYgPSB7fSxcbiAgICAgICAgICAgIGcgPSAwO2lmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgZm9yIChkID0gTmEoYSksIGUgPSBiLmxlbmd0aDsgZyA8IGU7IGcrKykge1xuICAgICAgICAgICAgZltiW2ddXSA9IHIuY3NzKGEsIGJbZ10sICExLCBkKTtcbiAgICAgICAgICB9cmV0dXJuIGY7XG4gICAgICAgIH1yZXR1cm4gdm9pZCAwICE9PSBjID8gci5zdHlsZShhLCBiLCBjKSA6IHIuY3NzKGEsIGIpO1xuICAgICAgfSwgYSwgYiwgYXJndW1lbnRzLmxlbmd0aCA+IDEpO1xuICAgIH0gfSk7ZnVuY3Rpb24gX2EoYSwgYiwgYywgZCwgZSkge1xuICAgIHJldHVybiBuZXcgX2EucHJvdG90eXBlLmluaXQoYSwgYiwgYywgZCwgZSk7XG4gIH1yLlR3ZWVuID0gX2EsIF9hLnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IF9hLCBpbml0OiBmdW5jdGlvbiBpbml0KGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgIHRoaXMuZWxlbSA9IGEsIHRoaXMucHJvcCA9IGMsIHRoaXMuZWFzaW5nID0gZSB8fCByLmVhc2luZy5fZGVmYXVsdCwgdGhpcy5vcHRpb25zID0gYiwgdGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKSwgdGhpcy5lbmQgPSBkLCB0aGlzLnVuaXQgPSBmIHx8IChyLmNzc051bWJlcltjXSA/IFwiXCIgOiBcInB4XCIpO1xuICAgIH0sIGN1cjogZnVuY3Rpb24gY3VyKCkge1xuICAgICAgdmFyIGEgPSBfYS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gYSAmJiBhLmdldCA/IGEuZ2V0KHRoaXMpIDogX2EucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKTtcbiAgICB9LCBydW46IGZ1bmN0aW9uIHJ1bihhKSB7XG4gICAgICB2YXIgYixcbiAgICAgICAgICBjID0gX2EucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbiA/IHRoaXMucG9zID0gYiA9IHIuZWFzaW5nW3RoaXMuZWFzaW5nXShhLCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBhLCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb24pIDogdGhpcy5wb3MgPSBiID0gYSwgdGhpcy5ub3cgPSAodGhpcy5lbmQgLSB0aGlzLnN0YXJ0KSAqIGIgKyB0aGlzLnN0YXJ0LCB0aGlzLm9wdGlvbnMuc3RlcCAmJiB0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMpLCBjICYmIGMuc2V0ID8gYy5zZXQodGhpcykgOiBfYS5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLCB0aGlzO1xuICAgIH0gfSwgX2EucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gX2EucHJvdG90eXBlLCBfYS5wcm9wSG9va3MgPSB7IF9kZWZhdWx0OiB7IGdldDogZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgdmFyIGI7cmV0dXJuIDEgIT09IGEuZWxlbS5ub2RlVHlwZSB8fCBudWxsICE9IGEuZWxlbVthLnByb3BdICYmIG51bGwgPT0gYS5lbGVtLnN0eWxlW2EucHJvcF0gPyBhLmVsZW1bYS5wcm9wXSA6IChiID0gci5jc3MoYS5lbGVtLCBhLnByb3AsIFwiXCIpLCBiICYmIFwiYXV0b1wiICE9PSBiID8gYiA6IDApO1xuICAgICAgfSwgc2V0OiBmdW5jdGlvbiBzZXQoYSkge1xuICAgICAgICByLmZ4LnN0ZXBbYS5wcm9wXSA/IHIuZnguc3RlcFthLnByb3BdKGEpIDogMSAhPT0gYS5lbGVtLm5vZGVUeXBlIHx8IG51bGwgPT0gYS5lbGVtLnN0eWxlW3IuY3NzUHJvcHNbYS5wcm9wXV0gJiYgIXIuY3NzSG9va3NbYS5wcm9wXSA/IGEuZWxlbVthLnByb3BdID0gYS5ub3cgOiByLnN0eWxlKGEuZWxlbSwgYS5wcm9wLCBhLm5vdyArIGEudW5pdCk7XG4gICAgICB9IH0gfSwgX2EucHJvcEhvb2tzLnNjcm9sbFRvcCA9IF9hLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0geyBzZXQ6IGZ1bmN0aW9uIHNldChhKSB7XG4gICAgICBhLmVsZW0ubm9kZVR5cGUgJiYgYS5lbGVtLnBhcmVudE5vZGUgJiYgKGEuZWxlbVthLnByb3BdID0gYS5ub3cpO1xuICAgIH0gfSwgci5lYXNpbmcgPSB7IGxpbmVhcjogZnVuY3Rpb24gbGluZWFyKGEpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH0sIHN3aW5nOiBmdW5jdGlvbiBzd2luZyhhKSB7XG4gICAgICByZXR1cm4gLjUgLSBNYXRoLmNvcyhhICogTWF0aC5QSSkgLyAyO1xuICAgIH0sIF9kZWZhdWx0OiBcInN3aW5nXCIgfSwgci5meCA9IF9hLnByb3RvdHlwZS5pbml0LCByLmZ4LnN0ZXAgPSB7fTt2YXIgYWIsXG4gICAgICBiYixcbiAgICAgIGNiID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuICAgICAgZGIgPSAvcXVldWVIb29rcyQvO2Z1bmN0aW9uIGViKCkge1xuICAgIGJiICYmIChkLmhpZGRlbiA9PT0gITEgJiYgYS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyBhLnJlcXVlc3RBbmltYXRpb25GcmFtZShlYikgOiBhLnNldFRpbWVvdXQoZWIsIHIuZnguaW50ZXJ2YWwpLCByLmZ4LnRpY2soKSk7XG4gIH1mdW5jdGlvbiBmYigpIHtcbiAgICByZXR1cm4gYS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFiID0gdm9pZCAwO1xuICAgIH0pLCBhYiA9IHIubm93KCk7XG4gIH1mdW5jdGlvbiBnYihhLCBiKSB7XG4gICAgdmFyIGMsXG4gICAgICAgIGQgPSAwLFxuICAgICAgICBlID0geyBoZWlnaHQ6IGEgfTtmb3IgKGIgPSBiID8gMSA6IDA7IGQgPCA0OyBkICs9IDIgLSBiKSB7XG4gICAgICBjID0gY2FbZF0sIGVbXCJtYXJnaW5cIiArIGNdID0gZVtcInBhZGRpbmdcIiArIGNdID0gYTtcbiAgICB9cmV0dXJuIGIgJiYgKGUub3BhY2l0eSA9IGUud2lkdGggPSBhKSwgZTtcbiAgfWZ1bmN0aW9uIGhiKGEsIGIsIGMpIHtcbiAgICBmb3IgKHZhciBkLCBlID0gKGtiLnR3ZWVuZXJzW2JdIHx8IFtdKS5jb25jYXQoa2IudHdlZW5lcnNbXCIqXCJdKSwgZiA9IDAsIGcgPSBlLmxlbmd0aDsgZiA8IGc7IGYrKykge1xuICAgICAgaWYgKGQgPSBlW2ZdLmNhbGwoYywgYiwgYSkpIHJldHVybiBkO1xuICAgIH1cbiAgfWZ1bmN0aW9uIGliKGEsIGIsIGMpIHtcbiAgICB2YXIgZCxcbiAgICAgICAgZSxcbiAgICAgICAgZixcbiAgICAgICAgZyxcbiAgICAgICAgaCxcbiAgICAgICAgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbCA9IFwid2lkdGhcIiBpbiBiIHx8IFwiaGVpZ2h0XCIgaW4gYixcbiAgICAgICAgbSA9IHRoaXMsXG4gICAgICAgIG4gPSB7fSxcbiAgICAgICAgbyA9IGEuc3R5bGUsXG4gICAgICAgIHAgPSBhLm5vZGVUeXBlICYmIGRhKGEpLFxuICAgICAgICBxID0gVy5nZXQoYSwgXCJmeHNob3dcIik7Yy5xdWV1ZSB8fCAoZyA9IHIuX3F1ZXVlSG9va3MoYSwgXCJmeFwiKSwgbnVsbCA9PSBnLnVucXVldWVkICYmIChnLnVucXVldWVkID0gMCwgaCA9IGcuZW1wdHkuZmlyZSwgZy5lbXB0eS5maXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgZy51bnF1ZXVlZCB8fCBoKCk7XG4gICAgfSksIGcudW5xdWV1ZWQrKywgbS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgbS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBnLnVucXVldWVkLS0sIHIucXVldWUoYSwgXCJmeFwiKS5sZW5ndGggfHwgZy5lbXB0eS5maXJlKCk7XG4gICAgICB9KTtcbiAgICB9KSk7Zm9yIChkIGluIGIpIHtcbiAgICAgIGlmIChlID0gYltkXSwgY2IudGVzdChlKSkge1xuICAgICAgICBpZiAoZGVsZXRlIGJbZF0sIGYgPSBmIHx8IFwidG9nZ2xlXCIgPT09IGUsIGUgPT09IChwID8gXCJoaWRlXCIgOiBcInNob3dcIikpIHtcbiAgICAgICAgICBpZiAoXCJzaG93XCIgIT09IGUgfHwgIXEgfHwgdm9pZCAwID09PSBxW2RdKSBjb250aW51ZTtwID0gITA7XG4gICAgICAgIH1uW2RdID0gcSAmJiBxW2RdIHx8IHIuc3R5bGUoYSwgZCk7XG4gICAgICB9XG4gICAgfWlmIChpID0gIXIuaXNFbXB0eU9iamVjdChiKSwgaSB8fCAhci5pc0VtcHR5T2JqZWN0KG4pKSB7XG4gICAgICBsICYmIDEgPT09IGEubm9kZVR5cGUgJiYgKGMub3ZlcmZsb3cgPSBbby5vdmVyZmxvdywgby5vdmVyZmxvd1gsIG8ub3ZlcmZsb3dZXSwgaiA9IHEgJiYgcS5kaXNwbGF5LCBudWxsID09IGogJiYgKGogPSBXLmdldChhLCBcImRpc3BsYXlcIikpLCBrID0gci5jc3MoYSwgXCJkaXNwbGF5XCIpLCBcIm5vbmVcIiA9PT0gayAmJiAoaiA/IGsgPSBqIDogKGlhKFthXSwgITApLCBqID0gYS5zdHlsZS5kaXNwbGF5IHx8IGosIGsgPSByLmNzcyhhLCBcImRpc3BsYXlcIiksIGlhKFthXSkpKSwgKFwiaW5saW5lXCIgPT09IGsgfHwgXCJpbmxpbmUtYmxvY2tcIiA9PT0gayAmJiBudWxsICE9IGopICYmIFwibm9uZVwiID09PSByLmNzcyhhLCBcImZsb2F0XCIpICYmIChpIHx8IChtLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBvLmRpc3BsYXkgPSBqO1xuICAgICAgfSksIG51bGwgPT0gaiAmJiAoayA9IG8uZGlzcGxheSwgaiA9IFwibm9uZVwiID09PSBrID8gXCJcIiA6IGspKSwgby5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIikpLCBjLm92ZXJmbG93ICYmIChvLm92ZXJmbG93ID0gXCJoaWRkZW5cIiwgbS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBvLm92ZXJmbG93ID0gYy5vdmVyZmxvd1swXSwgby5vdmVyZmxvd1ggPSBjLm92ZXJmbG93WzFdLCBvLm92ZXJmbG93WSA9IGMub3ZlcmZsb3dbMl07XG4gICAgICB9KSksIGkgPSAhMTtmb3IgKGQgaW4gbikge1xuICAgICAgICBpIHx8IChxID8gXCJoaWRkZW5cIiBpbiBxICYmIChwID0gcS5oaWRkZW4pIDogcSA9IFcuYWNjZXNzKGEsIFwiZnhzaG93XCIsIHsgZGlzcGxheTogaiB9KSwgZiAmJiAocS5oaWRkZW4gPSAhcCksIHAgJiYgaWEoW2FdLCAhMCksIG0uZG9uZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcCB8fCBpYShbYV0pLCBXLnJlbW92ZShhLCBcImZ4c2hvd1wiKTtmb3IgKGQgaW4gbikge1xuICAgICAgICAgICAgci5zdHlsZShhLCBkLCBuW2RdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKSwgaSA9IGhiKHAgPyBxW2RdIDogMCwgZCwgbSksIGQgaW4gcSB8fCAocVtkXSA9IGkuc3RhcnQsIHAgJiYgKGkuZW5kID0gaS5zdGFydCwgaS5zdGFydCA9IDApKTtcbiAgICAgIH1cbiAgICB9XG4gIH1mdW5jdGlvbiBqYihhLCBiKSB7XG4gICAgdmFyIGMsIGQsIGUsIGYsIGc7Zm9yIChjIGluIGEpIHtcbiAgICAgIGlmIChkID0gci5jYW1lbENhc2UoYyksIGUgPSBiW2RdLCBmID0gYVtjXSwgQXJyYXkuaXNBcnJheShmKSAmJiAoZSA9IGZbMV0sIGYgPSBhW2NdID0gZlswXSksIGMgIT09IGQgJiYgKGFbZF0gPSBmLCBkZWxldGUgYVtjXSksIGcgPSByLmNzc0hvb2tzW2RdLCBnICYmIFwiZXhwYW5kXCIgaW4gZykge1xuICAgICAgICBmID0gZy5leHBhbmQoZiksIGRlbGV0ZSBhW2RdO2ZvciAoYyBpbiBmKSB7XG4gICAgICAgICAgYyBpbiBhIHx8IChhW2NdID0gZltjXSwgYltjXSA9IGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgYltkXSA9IGU7XG4gICAgfVxuICB9ZnVuY3Rpb24ga2IoYSwgYiwgYykge1xuICAgIHZhciBkLFxuICAgICAgICBlLFxuICAgICAgICBmID0gMCxcbiAgICAgICAgZyA9IGtiLnByZWZpbHRlcnMubGVuZ3RoLFxuICAgICAgICBoID0gci5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICBkZWxldGUgaS5lbGVtO1xuICAgIH0pLFxuICAgICAgICBpID0gZnVuY3Rpb24gaSgpIHtcbiAgICAgIGlmIChlKSByZXR1cm4gITE7Zm9yICh2YXIgYiA9IGFiIHx8IGZiKCksIGMgPSBNYXRoLm1heCgwLCBqLnN0YXJ0VGltZSArIGouZHVyYXRpb24gLSBiKSwgZCA9IGMgLyBqLmR1cmF0aW9uIHx8IDAsIGYgPSAxIC0gZCwgZyA9IDAsIGkgPSBqLnR3ZWVucy5sZW5ndGg7IGcgPCBpOyBnKyspIHtcbiAgICAgICAgai50d2VlbnNbZ10ucnVuKGYpO1xuICAgICAgfXJldHVybiBoLm5vdGlmeVdpdGgoYSwgW2osIGYsIGNdKSwgZiA8IDEgJiYgaSA/IGMgOiAoaSB8fCBoLm5vdGlmeVdpdGgoYSwgW2osIDEsIDBdKSwgaC5yZXNvbHZlV2l0aChhLCBbal0pLCAhMSk7XG4gICAgfSxcbiAgICAgICAgaiA9IGgucHJvbWlzZSh7IGVsZW06IGEsIHByb3BzOiByLmV4dGVuZCh7fSwgYiksIG9wdHM6IHIuZXh0ZW5kKCEwLCB7IHNwZWNpYWxFYXNpbmc6IHt9LCBlYXNpbmc6IHIuZWFzaW5nLl9kZWZhdWx0IH0sIGMpLCBvcmlnaW5hbFByb3BlcnRpZXM6IGIsIG9yaWdpbmFsT3B0aW9uczogYywgc3RhcnRUaW1lOiBhYiB8fCBmYigpLCBkdXJhdGlvbjogYy5kdXJhdGlvbiwgdHdlZW5zOiBbXSwgY3JlYXRlVHdlZW46IGZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKGIsIGMpIHtcbiAgICAgICAgdmFyIGQgPSByLlR3ZWVuKGEsIGoub3B0cywgYiwgYywgai5vcHRzLnNwZWNpYWxFYXNpbmdbYl0gfHwgai5vcHRzLmVhc2luZyk7cmV0dXJuIGoudHdlZW5zLnB1c2goZCksIGQ7XG4gICAgICB9LCBzdG9wOiBmdW5jdGlvbiBzdG9wKGIpIHtcbiAgICAgICAgdmFyIGMgPSAwLFxuICAgICAgICAgICAgZCA9IGIgPyBqLnR3ZWVucy5sZW5ndGggOiAwO2lmIChlKSByZXR1cm4gdGhpcztmb3IgKGUgPSAhMDsgYyA8IGQ7IGMrKykge1xuICAgICAgICAgIGoudHdlZW5zW2NdLnJ1bigxKTtcbiAgICAgICAgfXJldHVybiBiID8gKGgubm90aWZ5V2l0aChhLCBbaiwgMSwgMF0pLCBoLnJlc29sdmVXaXRoKGEsIFtqLCBiXSkpIDogaC5yZWplY3RXaXRoKGEsIFtqLCBiXSksIHRoaXM7XG4gICAgICB9IH0pLFxuICAgICAgICBrID0gai5wcm9wcztmb3IgKGpiKGssIGoub3B0cy5zcGVjaWFsRWFzaW5nKTsgZiA8IGc7IGYrKykge1xuICAgICAgaWYgKGQgPSBrYi5wcmVmaWx0ZXJzW2ZdLmNhbGwoaiwgYSwgaywgai5vcHRzKSkgcmV0dXJuIHIuaXNGdW5jdGlvbihkLnN0b3ApICYmIChyLl9xdWV1ZUhvb2tzKGouZWxlbSwgai5vcHRzLnF1ZXVlKS5zdG9wID0gci5wcm94eShkLnN0b3AsIGQpKSwgZDtcbiAgICB9cmV0dXJuIHIubWFwKGssIGhiLCBqKSwgci5pc0Z1bmN0aW9uKGoub3B0cy5zdGFydCkgJiYgai5vcHRzLnN0YXJ0LmNhbGwoYSwgaiksIGoucHJvZ3Jlc3Moai5vcHRzLnByb2dyZXNzKS5kb25lKGoub3B0cy5kb25lLCBqLm9wdHMuY29tcGxldGUpLmZhaWwoai5vcHRzLmZhaWwpLmFsd2F5cyhqLm9wdHMuYWx3YXlzKSwgci5meC50aW1lcihyLmV4dGVuZChpLCB7IGVsZW06IGEsIGFuaW06IGosIHF1ZXVlOiBqLm9wdHMucXVldWUgfSkpLCBqO1xuICB9ci5BbmltYXRpb24gPSByLmV4dGVuZChrYiwgeyB0d2VlbmVyczogeyBcIipcIjogW2Z1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHZhciBjID0gdGhpcy5jcmVhdGVUd2VlbihhLCBiKTtyZXR1cm4gZmEoYy5lbGVtLCBhLCBiYS5leGVjKGIpLCBjKSwgYztcbiAgICAgIH1dIH0sIHR3ZWVuZXI6IGZ1bmN0aW9uIHR3ZWVuZXIoYSwgYikge1xuICAgICAgci5pc0Z1bmN0aW9uKGEpID8gKGIgPSBhLCBhID0gW1wiKlwiXSkgOiBhID0gYS5tYXRjaChMKTtmb3IgKHZhciBjLCBkID0gMCwgZSA9IGEubGVuZ3RoOyBkIDwgZTsgZCsrKSB7XG4gICAgICAgIGMgPSBhW2RdLCBrYi50d2VlbmVyc1tjXSA9IGtiLnR3ZWVuZXJzW2NdIHx8IFtdLCBrYi50d2VlbmVyc1tjXS51bnNoaWZ0KGIpO1xuICAgICAgfVxuICAgIH0sIHByZWZpbHRlcnM6IFtpYl0sIHByZWZpbHRlcjogZnVuY3Rpb24gcHJlZmlsdGVyKGEsIGIpIHtcbiAgICAgIGIgPyBrYi5wcmVmaWx0ZXJzLnVuc2hpZnQoYSkgOiBrYi5wcmVmaWx0ZXJzLnB1c2goYSk7XG4gICAgfSB9KSwgci5zcGVlZCA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgdmFyIGQgPSBhICYmIFwib2JqZWN0XCIgPT0gKHR5cGVvZiBhID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYSkpID8gci5leHRlbmQoe30sIGEpIDogeyBjb21wbGV0ZTogYyB8fCAhYyAmJiBiIHx8IHIuaXNGdW5jdGlvbihhKSAmJiBhLCBkdXJhdGlvbjogYSwgZWFzaW5nOiBjICYmIGIgfHwgYiAmJiAhci5pc0Z1bmN0aW9uKGIpICYmIGIgfTtyZXR1cm4gci5meC5vZmYgPyBkLmR1cmF0aW9uID0gMCA6IFwibnVtYmVyXCIgIT0gdHlwZW9mIGQuZHVyYXRpb24gJiYgKGQuZHVyYXRpb24gaW4gci5meC5zcGVlZHMgPyBkLmR1cmF0aW9uID0gci5meC5zcGVlZHNbZC5kdXJhdGlvbl0gOiBkLmR1cmF0aW9uID0gci5meC5zcGVlZHMuX2RlZmF1bHQpLCBudWxsICE9IGQucXVldWUgJiYgZC5xdWV1ZSAhPT0gITAgfHwgKGQucXVldWUgPSBcImZ4XCIpLCBkLm9sZCA9IGQuY29tcGxldGUsIGQuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByLmlzRnVuY3Rpb24oZC5vbGQpICYmIGQub2xkLmNhbGwodGhpcyksIGQucXVldWUgJiYgci5kZXF1ZXVlKHRoaXMsIGQucXVldWUpO1xuICAgIH0sIGQ7XG4gIH0sIHIuZm4uZXh0ZW5kKHsgZmFkZVRvOiBmdW5jdGlvbiBmYWRlVG8oYSwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGRhKS5jc3MoXCJvcGFjaXR5XCIsIDApLnNob3coKS5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogYiB9LCBhLCBjLCBkKTtcbiAgICB9LCBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciBlID0gci5pc0VtcHR5T2JqZWN0KGEpLFxuICAgICAgICAgIGYgPSByLnNwZWVkKGIsIGMsIGQpLFxuICAgICAgICAgIGcgPSBmdW5jdGlvbiBnKCkge1xuICAgICAgICB2YXIgYiA9IGtiKHRoaXMsIHIuZXh0ZW5kKHt9LCBhKSwgZik7KGUgfHwgVy5nZXQodGhpcywgXCJmaW5pc2hcIikpICYmIGIuc3RvcCghMCk7XG4gICAgICB9O3JldHVybiBnLmZpbmlzaCA9IGcsIGUgfHwgZi5xdWV1ZSA9PT0gITEgPyB0aGlzLmVhY2goZykgOiB0aGlzLnF1ZXVlKGYucXVldWUsIGcpO1xuICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoYSwgYiwgYykge1xuICAgICAgdmFyIGQgPSBmdW5jdGlvbiBkKGEpIHtcbiAgICAgICAgdmFyIGIgPSBhLnN0b3A7ZGVsZXRlIGEuc3RvcCwgYihjKTtcbiAgICAgIH07cmV0dXJuIFwic3RyaW5nXCIgIT0gdHlwZW9mIGEgJiYgKGMgPSBiLCBiID0gYSwgYSA9IHZvaWQgMCksIGIgJiYgYSAhPT0gITEgJiYgdGhpcy5xdWV1ZShhIHx8IFwiZnhcIiwgW10pLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYiA9ICEwLFxuICAgICAgICAgICAgZSA9IG51bGwgIT0gYSAmJiBhICsgXCJxdWV1ZUhvb2tzXCIsXG4gICAgICAgICAgICBmID0gci50aW1lcnMsXG4gICAgICAgICAgICBnID0gVy5nZXQodGhpcyk7aWYgKGUpIGdbZV0gJiYgZ1tlXS5zdG9wICYmIGQoZ1tlXSk7ZWxzZSBmb3IgKGUgaW4gZykge1xuICAgICAgICAgIGdbZV0gJiYgZ1tlXS5zdG9wICYmIGRiLnRlc3QoZSkgJiYgZChnW2VdKTtcbiAgICAgICAgfWZvciAoZSA9IGYubGVuZ3RoOyBlLS07KSB7XG4gICAgICAgICAgZltlXS5lbGVtICE9PSB0aGlzIHx8IG51bGwgIT0gYSAmJiBmW2VdLnF1ZXVlICE9PSBhIHx8IChmW2VdLmFuaW0uc3RvcChjKSwgYiA9ICExLCBmLnNwbGljZShlLCAxKSk7XG4gICAgICAgIH0hYiAmJiBjIHx8IHIuZGVxdWV1ZSh0aGlzLCBhKTtcbiAgICAgIH0pO1xuICAgIH0sIGZpbmlzaDogZnVuY3Rpb24gZmluaXNoKGEpIHtcbiAgICAgIHJldHVybiBhICE9PSAhMSAmJiAoYSA9IGEgfHwgXCJmeFwiKSwgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIsXG4gICAgICAgICAgICBjID0gVy5nZXQodGhpcyksXG4gICAgICAgICAgICBkID0gY1thICsgXCJxdWV1ZVwiXSxcbiAgICAgICAgICAgIGUgPSBjW2EgKyBcInF1ZXVlSG9va3NcIl0sXG4gICAgICAgICAgICBmID0gci50aW1lcnMsXG4gICAgICAgICAgICBnID0gZCA/IGQubGVuZ3RoIDogMDtmb3IgKGMuZmluaXNoID0gITAsIHIucXVldWUodGhpcywgYSwgW10pLCBlICYmIGUuc3RvcCAmJiBlLnN0b3AuY2FsbCh0aGlzLCAhMCksIGIgPSBmLmxlbmd0aDsgYi0tOykge1xuICAgICAgICAgIGZbYl0uZWxlbSA9PT0gdGhpcyAmJiBmW2JdLnF1ZXVlID09PSBhICYmIChmW2JdLmFuaW0uc3RvcCghMCksIGYuc3BsaWNlKGIsIDEpKTtcbiAgICAgICAgfWZvciAoYiA9IDA7IGIgPCBnOyBiKyspIHtcbiAgICAgICAgICBkW2JdICYmIGRbYl0uZmluaXNoICYmIGRbYl0uZmluaXNoLmNhbGwodGhpcyk7XG4gICAgICAgIH1kZWxldGUgYy5maW5pc2g7XG4gICAgICB9KTtcbiAgICB9IH0pLCByLmVhY2goW1widG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIl0sIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGMgPSByLmZuW2JdO3IuZm5bYl0gPSBmdW5jdGlvbiAoYSwgZCwgZSkge1xuICAgICAgcmV0dXJuIG51bGwgPT0gYSB8fCBcImJvb2xlYW5cIiA9PSB0eXBlb2YgYSA/IGMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRoaXMuYW5pbWF0ZShnYihiLCAhMCksIGEsIGQsIGUpO1xuICAgIH07XG4gIH0pLCByLmVhY2goeyBzbGlkZURvd246IGdiKFwic2hvd1wiKSwgc2xpZGVVcDogZ2IoXCJoaWRlXCIpLCBzbGlkZVRvZ2dsZTogZ2IoXCJ0b2dnbGVcIiksIGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LCBmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sIGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9IH0sIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgci5mblthXSA9IGZ1bmN0aW9uIChhLCBjLCBkKSB7XG4gICAgICByZXR1cm4gdGhpcy5hbmltYXRlKGIsIGEsIGMsIGQpO1xuICAgIH07XG4gIH0pLCByLnRpbWVycyA9IFtdLCByLmZ4LnRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGEsXG4gICAgICAgIGIgPSAwLFxuICAgICAgICBjID0gci50aW1lcnM7Zm9yIChhYiA9IHIubm93KCk7IGIgPCBjLmxlbmd0aDsgYisrKSB7XG4gICAgICBhID0gY1tiXSwgYSgpIHx8IGNbYl0gIT09IGEgfHwgYy5zcGxpY2UoYi0tLCAxKTtcbiAgICB9Yy5sZW5ndGggfHwgci5meC5zdG9wKCksIGFiID0gdm9pZCAwO1xuICB9LCByLmZ4LnRpbWVyID0gZnVuY3Rpb24gKGEpIHtcbiAgICByLnRpbWVycy5wdXNoKGEpLCByLmZ4LnN0YXJ0KCk7XG4gIH0sIHIuZnguaW50ZXJ2YWwgPSAxMywgci5meC5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICBiYiB8fCAoYmIgPSAhMCwgZWIoKSk7XG4gIH0sIHIuZnguc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBiYiA9IG51bGw7XG4gIH0sIHIuZnguc3BlZWRzID0geyBzbG93OiA2MDAsIGZhc3Q6IDIwMCwgX2RlZmF1bHQ6IDQwMCB9LCByLmZuLmRlbGF5ID0gZnVuY3Rpb24gKGIsIGMpIHtcbiAgICByZXR1cm4gYiA9IHIuZnggPyByLmZ4LnNwZWVkc1tiXSB8fCBiIDogYiwgYyA9IGMgfHwgXCJmeFwiLCB0aGlzLnF1ZXVlKGMsIGZ1bmN0aW9uIChjLCBkKSB7XG4gICAgICB2YXIgZSA9IGEuc2V0VGltZW91dChjLCBiKTtkLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGEuY2xlYXJUaW1lb3V0KGUpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBhID0gZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXG4gICAgICAgIGIgPSBkLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiksXG4gICAgICAgIGMgPSBiLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSk7YS50eXBlID0gXCJjaGVja2JveFwiLCBvLmNoZWNrT24gPSBcIlwiICE9PSBhLnZhbHVlLCBvLm9wdFNlbGVjdGVkID0gYy5zZWxlY3RlZCwgYSA9IGQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCBhLnZhbHVlID0gXCJ0XCIsIGEudHlwZSA9IFwicmFkaW9cIiwgby5yYWRpb1ZhbHVlID0gXCJ0XCIgPT09IGEudmFsdWU7XG4gIH0oKTt2YXIgbGIsXG4gICAgICBtYiA9IHIuZXhwci5hdHRySGFuZGxlO3IuZm4uZXh0ZW5kKHsgYXR0cjogZnVuY3Rpb24gYXR0cihhLCBiKSB7XG4gICAgICByZXR1cm4gVCh0aGlzLCByLmF0dHIsIGEsIGIsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcbiAgICB9LCByZW1vdmVBdHRyOiBmdW5jdGlvbiByZW1vdmVBdHRyKGEpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICByLnJlbW92ZUF0dHIodGhpcywgYSk7XG4gICAgICB9KTtcbiAgICB9IH0pLCByLmV4dGVuZCh7IGF0dHI6IGZ1bmN0aW9uIGF0dHIoYSwgYiwgYykge1xuICAgICAgdmFyIGQsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBmID0gYS5ub2RlVHlwZTtpZiAoMyAhPT0gZiAmJiA4ICE9PSBmICYmIDIgIT09IGYpIHJldHVybiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiBhLmdldEF0dHJpYnV0ZSA/IHIucHJvcChhLCBiLCBjKSA6ICgxID09PSBmICYmIHIuaXNYTUxEb2MoYSkgfHwgKGUgPSByLmF0dHJIb29rc1tiLnRvTG93ZXJDYXNlKCldIHx8IChyLmV4cHIubWF0Y2guYm9vbC50ZXN0KGIpID8gbGIgOiB2b2lkIDApKSwgdm9pZCAwICE9PSBjID8gbnVsbCA9PT0gYyA/IHZvaWQgci5yZW1vdmVBdHRyKGEsIGIpIDogZSAmJiBcInNldFwiIGluIGUgJiYgdm9pZCAwICE9PSAoZCA9IGUuc2V0KGEsIGMsIGIpKSA/IGQgOiAoYS5zZXRBdHRyaWJ1dGUoYiwgYyArIFwiXCIpLCBjKSA6IGUgJiYgXCJnZXRcIiBpbiBlICYmIG51bGwgIT09IChkID0gZS5nZXQoYSwgYikpID8gZCA6IChkID0gci5maW5kLmF0dHIoYSwgYiksIG51bGwgPT0gZCA/IHZvaWQgMCA6IGQpKTtcbiAgICB9LCBhdHRySG9va3M6IHsgdHlwZTogeyBzZXQ6IGZ1bmN0aW9uIHNldChhLCBiKSB7XG4gICAgICAgICAgaWYgKCFvLnJhZGlvVmFsdWUgJiYgXCJyYWRpb1wiID09PSBiICYmIEIoYSwgXCJpbnB1dFwiKSkge1xuICAgICAgICAgICAgdmFyIGMgPSBhLnZhbHVlO3JldHVybiBhLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgYiksIGMgJiYgKGEudmFsdWUgPSBjKSwgYjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gfSB9LCByZW1vdmVBdHRyOiBmdW5jdGlvbiByZW1vdmVBdHRyKGEsIGIpIHtcbiAgICAgIHZhciBjLFxuICAgICAgICAgIGQgPSAwLFxuICAgICAgICAgIGUgPSBiICYmIGIubWF0Y2goTCk7aWYgKGUgJiYgMSA9PT0gYS5ub2RlVHlwZSkgd2hpbGUgKGMgPSBlW2QrK10pIHtcbiAgICAgICAgYS5yZW1vdmVBdHRyaWJ1dGUoYyk7XG4gICAgICB9XG4gICAgfSB9KSwgbGIgPSB7IHNldDogZnVuY3Rpb24gc2V0KGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBiID09PSAhMSA/IHIucmVtb3ZlQXR0cihhLCBjKSA6IGEuc2V0QXR0cmlidXRlKGMsIGMpLCBjO1xuICAgIH0gfSwgci5lYWNoKHIuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgYyA9IG1iW2JdIHx8IHIuZmluZC5hdHRyO21iW2JdID0gZnVuY3Rpb24gKGEsIGIsIGQpIHtcbiAgICAgIHZhciBlLFxuICAgICAgICAgIGYsXG4gICAgICAgICAgZyA9IGIudG9Mb3dlckNhc2UoKTtyZXR1cm4gZCB8fCAoZiA9IG1iW2ddLCBtYltnXSA9IGUsIGUgPSBudWxsICE9IGMoYSwgYiwgZCkgPyBnIDogbnVsbCwgbWJbZ10gPSBmKSwgZTtcbiAgICB9O1xuICB9KTt2YXIgbmIgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuICAgICAgb2IgPSAvXig/OmF8YXJlYSkkL2k7ci5mbi5leHRlbmQoeyBwcm9wOiBmdW5jdGlvbiBwcm9wKGEsIGIpIHtcbiAgICAgIHJldHVybiBUKHRoaXMsIHIucHJvcCwgYSwgYiwgYXJndW1lbnRzLmxlbmd0aCA+IDEpO1xuICAgIH0sIHJlbW92ZVByb3A6IGZ1bmN0aW9uIHJlbW92ZVByb3AoYSkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW3IucHJvcEZpeFthXSB8fCBhXTtcbiAgICAgIH0pO1xuICAgIH0gfSksIHIuZXh0ZW5kKHsgcHJvcDogZnVuY3Rpb24gcHJvcChhLCBiLCBjKSB7XG4gICAgICB2YXIgZCxcbiAgICAgICAgICBlLFxuICAgICAgICAgIGYgPSBhLm5vZGVUeXBlO2lmICgzICE9PSBmICYmIDggIT09IGYgJiYgMiAhPT0gZikgcmV0dXJuIDEgPT09IGYgJiYgci5pc1hNTERvYyhhKSB8fCAoYiA9IHIucHJvcEZpeFtiXSB8fCBiLCBlID0gci5wcm9wSG9va3NbYl0pLCB2b2lkIDAgIT09IGMgPyBlICYmIFwic2V0XCIgaW4gZSAmJiB2b2lkIDAgIT09IChkID0gZS5zZXQoYSwgYywgYikpID8gZCA6IGFbYl0gPSBjIDogZSAmJiBcImdldFwiIGluIGUgJiYgbnVsbCAhPT0gKGQgPSBlLmdldChhLCBiKSkgPyBkIDogYVtiXTtcbiAgICB9LCBwcm9wSG9va3M6IHsgdGFiSW5kZXg6IHsgZ2V0OiBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICAgIHZhciBiID0gci5maW5kLmF0dHIoYSwgXCJ0YWJpbmRleFwiKTtyZXR1cm4gYiA/IHBhcnNlSW50KGIsIDEwKSA6IG5iLnRlc3QoYS5ub2RlTmFtZSkgfHwgb2IudGVzdChhLm5vZGVOYW1lKSAmJiBhLmhyZWYgPyAwIDogLTE7XG4gICAgICAgIH0gfSB9LCBwcm9wRml4OiB7IFwiZm9yXCI6IFwiaHRtbEZvclwiLCBcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCIgfSB9KSwgby5vcHRTZWxlY3RlZCB8fCAoci5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7IGdldDogZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgIHZhciBiID0gYS5wYXJlbnROb2RlO3JldHVybiBiICYmIGIucGFyZW50Tm9kZSAmJiBiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgbnVsbDtcbiAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldChhKSB7XG4gICAgICB2YXIgYiA9IGEucGFyZW50Tm9kZTtiICYmIChiLnNlbGVjdGVkSW5kZXgsIGIucGFyZW50Tm9kZSAmJiBiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCk7XG4gICAgfSB9KSwgci5lYWNoKFtcInRhYkluZGV4XCIsIFwicmVhZE9ubHlcIiwgXCJtYXhMZW5ndGhcIiwgXCJjZWxsU3BhY2luZ1wiLCBcImNlbGxQYWRkaW5nXCIsIFwicm93U3BhblwiLCBcImNvbFNwYW5cIiwgXCJ1c2VNYXBcIiwgXCJmcmFtZUJvcmRlclwiLCBcImNvbnRlbnRFZGl0YWJsZVwiXSwgZnVuY3Rpb24gKCkge1xuICAgIHIucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldID0gdGhpcztcbiAgfSk7ZnVuY3Rpb24gcGIoYSkge1xuICAgIHZhciBiID0gYS5tYXRjaChMKSB8fCBbXTtyZXR1cm4gYi5qb2luKFwiIFwiKTtcbiAgfWZ1bmN0aW9uIHFiKGEpIHtcbiAgICByZXR1cm4gYS5nZXRBdHRyaWJ1dGUgJiYgYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuICB9ci5mbi5leHRlbmQoeyBhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3MoYSkge1xuICAgICAgdmFyIGIsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGUsXG4gICAgICAgICAgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGgsXG4gICAgICAgICAgaSA9IDA7aWYgKHIuaXNGdW5jdGlvbihhKSkgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoYikge1xuICAgICAgICByKHRoaXMpLmFkZENsYXNzKGEuY2FsbCh0aGlzLCBiLCBxYih0aGlzKSkpO1xuICAgICAgfSk7aWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgJiYgYSkge1xuICAgICAgICBiID0gYS5tYXRjaChMKSB8fCBbXTt3aGlsZSAoYyA9IHRoaXNbaSsrXSkge1xuICAgICAgICAgIGlmIChlID0gcWIoYyksIGQgPSAxID09PSBjLm5vZGVUeXBlICYmIFwiIFwiICsgcGIoZSkgKyBcIiBcIikge1xuICAgICAgICAgICAgZyA9IDA7d2hpbGUgKGYgPSBiW2crK10pIHtcbiAgICAgICAgICAgICAgZC5pbmRleE9mKFwiIFwiICsgZiArIFwiIFwiKSA8IDAgJiYgKGQgKz0gZiArIFwiIFwiKTtcbiAgICAgICAgICAgIH1oID0gcGIoZCksIGUgIT09IGggJiYgYy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1yZXR1cm4gdGhpcztcbiAgICB9LCByZW1vdmVDbGFzczogZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoYSkge1xuICAgICAgdmFyIGIsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGUsXG4gICAgICAgICAgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIGgsXG4gICAgICAgICAgaSA9IDA7aWYgKHIuaXNGdW5jdGlvbihhKSkgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoYikge1xuICAgICAgICByKHRoaXMpLnJlbW92ZUNsYXNzKGEuY2FsbCh0aGlzLCBiLCBxYih0aGlzKSkpO1xuICAgICAgfSk7aWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5hdHRyKFwiY2xhc3NcIiwgXCJcIik7aWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGEgJiYgYSkge1xuICAgICAgICBiID0gYS5tYXRjaChMKSB8fCBbXTt3aGlsZSAoYyA9IHRoaXNbaSsrXSkge1xuICAgICAgICAgIGlmIChlID0gcWIoYyksIGQgPSAxID09PSBjLm5vZGVUeXBlICYmIFwiIFwiICsgcGIoZSkgKyBcIiBcIikge1xuICAgICAgICAgICAgZyA9IDA7d2hpbGUgKGYgPSBiW2crK10pIHtcbiAgICAgICAgICAgICAgd2hpbGUgKGQuaW5kZXhPZihcIiBcIiArIGYgKyBcIiBcIikgPiAtMSkge1xuICAgICAgICAgICAgICAgIGQgPSBkLnJlcGxhY2UoXCIgXCIgKyBmICsgXCIgXCIsIFwiIFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWggPSBwYihkKSwgZSAhPT0gaCAmJiBjLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfXJldHVybiB0aGlzO1xuICAgIH0sIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiB0b2dnbGVDbGFzcyhhLCBiKSB7XG4gICAgICB2YXIgYyA9IHR5cGVvZiBhID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYSk7cmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiBiICYmIFwic3RyaW5nXCIgPT09IGMgPyBiID8gdGhpcy5hZGRDbGFzcyhhKSA6IHRoaXMucmVtb3ZlQ2xhc3MoYSkgOiByLmlzRnVuY3Rpb24oYSkgPyB0aGlzLmVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcih0aGlzKS50b2dnbGVDbGFzcyhhLmNhbGwodGhpcywgYywgcWIodGhpcyksIGIpLCBiKTtcbiAgICAgIH0pIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIsIGQsIGUsIGY7aWYgKFwic3RyaW5nXCIgPT09IGMpIHtcbiAgICAgICAgICBkID0gMCwgZSA9IHIodGhpcyksIGYgPSBhLm1hdGNoKEwpIHx8IFtdO3doaWxlIChiID0gZltkKytdKSB7XG4gICAgICAgICAgICBlLmhhc0NsYXNzKGIpID8gZS5yZW1vdmVDbGFzcyhiKSA6IGUuYWRkQ2xhc3MoYik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Ugdm9pZCAwICE9PSBhICYmIFwiYm9vbGVhblwiICE9PSBjIHx8IChiID0gcWIodGhpcyksIGIgJiYgVy5zZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGIpLCB0aGlzLnNldEF0dHJpYnV0ZSAmJiB0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGIgfHwgYSA9PT0gITEgPyBcIlwiIDogVy5nZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIpIHx8IFwiXCIpKTtcbiAgICAgIH0pO1xuICAgIH0sIGhhc0NsYXNzOiBmdW5jdGlvbiBoYXNDbGFzcyhhKSB7XG4gICAgICB2YXIgYixcbiAgICAgICAgICBjLFxuICAgICAgICAgIGQgPSAwO2IgPSBcIiBcIiArIGEgKyBcIiBcIjt3aGlsZSAoYyA9IHRoaXNbZCsrXSkge1xuICAgICAgICBpZiAoMSA9PT0gYy5ub2RlVHlwZSAmJiAoXCIgXCIgKyBwYihxYihjKSkgKyBcIiBcIikuaW5kZXhPZihiKSA+IC0xKSByZXR1cm4gITA7XG4gICAgICB9cmV0dXJuICExO1xuICAgIH0gfSk7dmFyIHJiID0gL1xcci9nO3IuZm4uZXh0ZW5kKHsgdmFsOiBmdW5jdGlvbiB2YWwoYSkge1xuICAgICAgdmFyIGIsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGUgPSB0aGlzWzBdO3tcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkID0gci5pc0Z1bmN0aW9uKGEpLCB0aGlzLmVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICB2YXIgZTsxID09PSB0aGlzLm5vZGVUeXBlICYmIChlID0gZCA/IGEuY2FsbCh0aGlzLCBjLCByKHRoaXMpLnZhbCgpKSA6IGEsIG51bGwgPT0gZSA/IGUgPSBcIlwiIDogXCJudW1iZXJcIiA9PSB0eXBlb2YgZSA/IGUgKz0gXCJcIiA6IEFycmF5LmlzQXJyYXkoZSkgJiYgKGUgPSByLm1hcChlLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gYSA/IFwiXCIgOiBhICsgXCJcIjtcbiAgICAgICAgICB9KSksIGIgPSByLnZhbEhvb2tzW3RoaXMudHlwZV0gfHwgci52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLCBiICYmIFwic2V0XCIgaW4gYiAmJiB2b2lkIDAgIT09IGIuc2V0KHRoaXMsIGUsIFwidmFsdWVcIikgfHwgKHRoaXMudmFsdWUgPSBlKSk7XG4gICAgICAgIH0pO2lmIChlKSByZXR1cm4gYiA9IHIudmFsSG9va3NbZS50eXBlXSB8fCByLnZhbEhvb2tzW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sIGIgJiYgXCJnZXRcIiBpbiBiICYmIHZvaWQgMCAhPT0gKGMgPSBiLmdldChlLCBcInZhbHVlXCIpKSA/IGMgOiAoYyA9IGUudmFsdWUsIFwic3RyaW5nXCIgPT0gdHlwZW9mIGMgPyBjLnJlcGxhY2UocmIsIFwiXCIpIDogbnVsbCA9PSBjID8gXCJcIiA6IGMpO1xuICAgICAgfVxuICAgIH0gfSksIHIuZXh0ZW5kKHsgdmFsSG9va3M6IHsgb3B0aW9uOiB7IGdldDogZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgICB2YXIgYiA9IHIuZmluZC5hdHRyKGEsIFwidmFsdWVcIik7cmV0dXJuIG51bGwgIT0gYiA/IGIgOiBwYihyLnRleHQoYSkpO1xuICAgICAgICB9IH0sIHNlbGVjdDogeyBnZXQ6IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgICAgdmFyIGIsXG4gICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgIGUgPSBhLm9wdGlvbnMsXG4gICAgICAgICAgICAgIGYgPSBhLnNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgICAgIGcgPSBcInNlbGVjdC1vbmVcIiA9PT0gYS50eXBlLFxuICAgICAgICAgICAgICBoID0gZyA/IG51bGwgOiBbXSxcbiAgICAgICAgICAgICAgaSA9IGcgPyBmICsgMSA6IGUubGVuZ3RoO2ZvciAoZCA9IGYgPCAwID8gaSA6IGcgPyBmIDogMDsgZCA8IGk7IGQrKykge1xuICAgICAgICAgICAgaWYgKGMgPSBlW2RdLCAoYy5zZWxlY3RlZCB8fCBkID09PSBmKSAmJiAhYy5kaXNhYmxlZCAmJiAoIWMucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhQihjLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIikpKSB7XG4gICAgICAgICAgICAgIGlmIChiID0gcihjKS52YWwoKSwgZykgcmV0dXJuIGI7aC5wdXNoKGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1yZXR1cm4gaDtcbiAgICAgICAgfSwgc2V0OiBmdW5jdGlvbiBzZXQoYSwgYikge1xuICAgICAgICAgIHZhciBjLFxuICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICBlID0gYS5vcHRpb25zLFxuICAgICAgICAgICAgICBmID0gci5tYWtlQXJyYXkoYiksXG4gICAgICAgICAgICAgIGcgPSBlLmxlbmd0aDt3aGlsZSAoZy0tKSB7XG4gICAgICAgICAgICBkID0gZVtnXSwgKGQuc2VsZWN0ZWQgPSByLmluQXJyYXkoci52YWxIb29rcy5vcHRpb24uZ2V0KGQpLCBmKSA+IC0xKSAmJiAoYyA9ICEwKTtcbiAgICAgICAgICB9cmV0dXJuIGMgfHwgKGEuc2VsZWN0ZWRJbmRleCA9IC0xKSwgZjtcbiAgICAgICAgfSB9IH0gfSksIHIuZWFjaChbXCJyYWRpb1wiLCBcImNoZWNrYm94XCJdLCBmdW5jdGlvbiAoKSB7XG4gICAgci52YWxIb29rc1t0aGlzXSA9IHsgc2V0OiBmdW5jdGlvbiBzZXQoYSwgYikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShiKSkgcmV0dXJuIGEuY2hlY2tlZCA9IHIuaW5BcnJheShyKGEpLnZhbCgpLCBiKSA+IC0xO1xuICAgICAgfSB9LCBvLmNoZWNrT24gfHwgKHIudmFsSG9va3NbdGhpc10uZ2V0ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBudWxsID09PSBhLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID8gXCJvblwiIDogYS52YWx1ZTtcbiAgICB9KTtcbiAgfSk7dmFyIHNiID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO3IuZXh0ZW5kKHIuZXZlbnQsIHsgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcihiLCBjLCBlLCBmKSB7XG4gICAgICB2YXIgZyxcbiAgICAgICAgICBoLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaixcbiAgICAgICAgICBrLFxuICAgICAgICAgIG0sXG4gICAgICAgICAgbixcbiAgICAgICAgICBvID0gW2UgfHwgZF0sXG4gICAgICAgICAgcCA9IGwuY2FsbChiLCBcInR5cGVcIikgPyBiLnR5cGUgOiBiLFxuICAgICAgICAgIHEgPSBsLmNhbGwoYiwgXCJuYW1lc3BhY2VcIikgPyBiLm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtpZiAoaCA9IGkgPSBlID0gZSB8fCBkLCAzICE9PSBlLm5vZGVUeXBlICYmIDggIT09IGUubm9kZVR5cGUgJiYgIXNiLnRlc3QocCArIHIuZXZlbnQudHJpZ2dlcmVkKSAmJiAocC5pbmRleE9mKFwiLlwiKSA+IC0xICYmIChxID0gcC5zcGxpdChcIi5cIiksIHAgPSBxLnNoaWZ0KCksIHEuc29ydCgpKSwgayA9IHAuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHAsIGIgPSBiW3IuZXhwYW5kb10gPyBiIDogbmV3IHIuRXZlbnQocCwgXCJvYmplY3RcIiA9PSAodHlwZW9mIGIgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihiKSkgJiYgYiksIGIuaXNUcmlnZ2VyID0gZiA/IDIgOiAzLCBiLm5hbWVzcGFjZSA9IHEuam9pbihcIi5cIiksIGIucm5hbWVzcGFjZSA9IGIubmFtZXNwYWNlID8gbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgcS5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKSA6IG51bGwsIGIucmVzdWx0ID0gdm9pZCAwLCBiLnRhcmdldCB8fCAoYi50YXJnZXQgPSBlKSwgYyA9IG51bGwgPT0gYyA/IFtiXSA6IHIubWFrZUFycmF5KGMsIFtiXSksIG4gPSByLmV2ZW50LnNwZWNpYWxbcF0gfHwge30sIGYgfHwgIW4udHJpZ2dlciB8fCBuLnRyaWdnZXIuYXBwbHkoZSwgYykgIT09ICExKSkge1xuICAgICAgICBpZiAoIWYgJiYgIW4ubm9CdWJibGUgJiYgIXIuaXNXaW5kb3coZSkpIHtcbiAgICAgICAgICBmb3IgKGogPSBuLmRlbGVnYXRlVHlwZSB8fCBwLCBzYi50ZXN0KGogKyBwKSB8fCAoaCA9IGgucGFyZW50Tm9kZSk7IGg7IGggPSBoLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIG8ucHVzaChoKSwgaSA9IGg7XG4gICAgICAgICAgfWkgPT09IChlLm93bmVyRG9jdW1lbnQgfHwgZCkgJiYgby5wdXNoKGkuZGVmYXVsdFZpZXcgfHwgaS5wYXJlbnRXaW5kb3cgfHwgYSk7XG4gICAgICAgIH1nID0gMDt3aGlsZSAoKGggPSBvW2crK10pICYmICFiLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICBiLnR5cGUgPSBnID4gMSA/IGogOiBuLmJpbmRUeXBlIHx8IHAsIG0gPSAoVy5nZXQoaCwgXCJldmVudHNcIikgfHwge30pW2IudHlwZV0gJiYgVy5nZXQoaCwgXCJoYW5kbGVcIiksIG0gJiYgbS5hcHBseShoLCBjKSwgbSA9IGsgJiYgaFtrXSwgbSAmJiBtLmFwcGx5ICYmIFUoaCkgJiYgKGIucmVzdWx0ID0gbS5hcHBseShoLCBjKSwgYi5yZXN1bHQgPT09ICExICYmIGIucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgIH1yZXR1cm4gYi50eXBlID0gcCwgZiB8fCBiLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IG4uX2RlZmF1bHQgJiYgbi5fZGVmYXVsdC5hcHBseShvLnBvcCgpLCBjKSAhPT0gITEgfHwgIVUoZSkgfHwgayAmJiByLmlzRnVuY3Rpb24oZVtwXSkgJiYgIXIuaXNXaW5kb3coZSkgJiYgKGkgPSBlW2tdLCBpICYmIChlW2tdID0gbnVsbCksIHIuZXZlbnQudHJpZ2dlcmVkID0gcCwgZVtwXSgpLCByLmV2ZW50LnRyaWdnZXJlZCA9IHZvaWQgMCwgaSAmJiAoZVtrXSA9IGkpKSwgYi5yZXN1bHQ7XG4gICAgICB9XG4gICAgfSwgc2ltdWxhdGU6IGZ1bmN0aW9uIHNpbXVsYXRlKGEsIGIsIGMpIHtcbiAgICAgIHZhciBkID0gci5leHRlbmQobmV3IHIuRXZlbnQoKSwgYywgeyB0eXBlOiBhLCBpc1NpbXVsYXRlZDogITAgfSk7ci5ldmVudC50cmlnZ2VyKGQsIG51bGwsIGIpO1xuICAgIH0gfSksIHIuZm4uZXh0ZW5kKHsgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcihhLCBiKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgci5ldmVudC50cmlnZ2VyKGEsIGIsIHRoaXMpO1xuICAgICAgfSk7XG4gICAgfSwgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVyKGEsIGIpIHtcbiAgICAgIHZhciBjID0gdGhpc1swXTtpZiAoYykgcmV0dXJuIHIuZXZlbnQudHJpZ2dlcihhLCBiLCBjLCAhMCk7XG4gICAgfSB9KSwgci5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByLmZuW2JdID0gZnVuY3Rpb24gKGEsIGMpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/IHRoaXMub24oYiwgbnVsbCwgYSwgYykgOiB0aGlzLnRyaWdnZXIoYik7XG4gICAgfTtcbiAgfSksIHIuZm4uZXh0ZW5kKHsgaG92ZXI6IGZ1bmN0aW9uIGhvdmVyKGEsIGIpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vdXNlZW50ZXIoYSkubW91c2VsZWF2ZShiIHx8IGEpO1xuICAgIH0gfSksIG8uZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gYSwgby5mb2N1c2luIHx8IHIuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGMgPSBmdW5jdGlvbiBjKGEpIHtcbiAgICAgIHIuZXZlbnQuc2ltdWxhdGUoYiwgYS50YXJnZXQsIHIuZXZlbnQuZml4KGEpKTtcbiAgICB9O3IuZXZlbnQuc3BlY2lhbFtiXSA9IHsgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKCkge1xuICAgICAgICB2YXIgZCA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuICAgICAgICAgICAgZSA9IFcuYWNjZXNzKGQsIGIpO2UgfHwgZC5hZGRFdmVudExpc3RlbmVyKGEsIGMsICEwKSwgVy5hY2Nlc3MoZCwgYiwgKGUgfHwgMCkgKyAxKTtcbiAgICAgIH0sIHRlYXJkb3duOiBmdW5jdGlvbiB0ZWFyZG93bigpIHtcbiAgICAgICAgdmFyIGQgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcbiAgICAgICAgICAgIGUgPSBXLmFjY2VzcyhkLCBiKSAtIDE7ZSA/IFcuYWNjZXNzKGQsIGIsIGUpIDogKGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLCBjLCAhMCksIFcucmVtb3ZlKGQsIGIpKTtcbiAgICAgIH0gfTtcbiAgfSk7dmFyIHRiID0gYS5sb2NhdGlvbixcbiAgICAgIHViID0gci5ub3coKSxcbiAgICAgIHZiID0gL1xcPy87ci5wYXJzZVhNTCA9IGZ1bmN0aW9uIChiKSB7XG4gICAgdmFyIGM7aWYgKCFiIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIGIpIHJldHVybiBudWxsO3RyeSB7XG4gICAgICBjID0gbmV3IGEuRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGIsIFwidGV4dC94bWxcIik7XG4gICAgfSBjYXRjaCAoZCkge1xuICAgICAgYyA9IHZvaWQgMDtcbiAgICB9cmV0dXJuIGMgJiYgIWMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGggfHwgci5lcnJvcihcIkludmFsaWQgWE1MOiBcIiArIGIpLCBjO1xuICB9O3ZhciB3YiA9IC9cXFtcXF0kLyxcbiAgICAgIHhiID0gL1xccj9cXG4vZyxcbiAgICAgIHliID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuICAgICAgemIgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7ZnVuY3Rpb24gQWIoYSwgYiwgYywgZCkge1xuICAgIHZhciBlO2lmIChBcnJheS5pc0FycmF5KGIpKSByLmVhY2goYiwgZnVuY3Rpb24gKGIsIGUpIHtcbiAgICAgIGMgfHwgd2IudGVzdChhKSA/IGQoYSwgZSkgOiBBYihhICsgXCJbXCIgKyAoXCJvYmplY3RcIiA9PSAodHlwZW9mIGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihlKSkgJiYgbnVsbCAhPSBlID8gYiA6IFwiXCIpICsgXCJdXCIsIGUsIGMsIGQpO1xuICAgIH0pO2Vsc2UgaWYgKGMgfHwgXCJvYmplY3RcIiAhPT0gci50eXBlKGIpKSBkKGEsIGIpO2Vsc2UgZm9yIChlIGluIGIpIHtcbiAgICAgIEFiKGEgKyBcIltcIiArIGUgKyBcIl1cIiwgYltlXSwgYywgZCk7XG4gICAgfVxuICB9ci5wYXJhbSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGMsXG4gICAgICAgIGQgPSBbXSxcbiAgICAgICAgZSA9IGZ1bmN0aW9uIGUoYSwgYikge1xuICAgICAgdmFyIGMgPSByLmlzRnVuY3Rpb24oYikgPyBiKCkgOiBiO2RbZC5sZW5ndGhdID0gZW5jb2RlVVJJQ29tcG9uZW50KGEpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQobnVsbCA9PSBjID8gXCJcIiA6IGMpO1xuICAgIH07aWYgKEFycmF5LmlzQXJyYXkoYSkgfHwgYS5qcXVlcnkgJiYgIXIuaXNQbGFpbk9iamVjdChhKSkgci5lYWNoKGEsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGUodGhpcy5uYW1lLCB0aGlzLnZhbHVlKTtcbiAgICB9KTtlbHNlIGZvciAoYyBpbiBhKSB7XG4gICAgICBBYihjLCBhW2NdLCBiLCBlKTtcbiAgICB9cmV0dXJuIGQuam9pbihcIiZcIik7XG4gIH0sIHIuZm4uZXh0ZW5kKHsgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUoKSB7XG4gICAgICByZXR1cm4gci5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpO1xuICAgIH0sIHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbiBzZXJpYWxpemVBcnJheSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhID0gci5wcm9wKHRoaXMsIFwiZWxlbWVudHNcIik7cmV0dXJuIGEgPyByLm1ha2VBcnJheShhKSA6IHRoaXM7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lICYmICFyKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpICYmIHpiLnRlc3QodGhpcy5ub2RlTmFtZSkgJiYgIXliLnRlc3QoYSkgJiYgKHRoaXMuY2hlY2tlZCB8fCAhamEudGVzdChhKSk7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIGMgPSByKHRoaXMpLnZhbCgpO3JldHVybiBudWxsID09IGMgPyBudWxsIDogQXJyYXkuaXNBcnJheShjKSA/IHIubWFwKGMsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIHsgbmFtZTogYi5uYW1lLCB2YWx1ZTogYS5yZXBsYWNlKHhiLCBcIlxcclxcblwiKSB9O1xuICAgICAgICB9KSA6IHsgbmFtZTogYi5uYW1lLCB2YWx1ZTogYy5yZXBsYWNlKHhiLCBcIlxcclxcblwiKSB9O1xuICAgICAgfSkuZ2V0KCk7XG4gICAgfSB9KTt2YXIgQmIgPSAvJTIwL2csXG4gICAgICBDYiA9IC8jLiokLyxcbiAgICAgIERiID0gLyhbPyZdKV89W14mXSovLFxuICAgICAgRWIgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL2dtLFxuICAgICAgRmIgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcbiAgICAgIEdiID0gL14oPzpHRVR8SEVBRCkkLyxcbiAgICAgIEhiID0gL15cXC9cXC8vLFxuICAgICAgSWIgPSB7fSxcbiAgICAgIEpiID0ge30sXG4gICAgICBLYiA9IFwiKi9cIi5jb25jYXQoXCIqXCIpLFxuICAgICAgTGIgPSBkLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO0xiLmhyZWYgPSB0Yi5ocmVmO2Z1bmN0aW9uIE1iKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIsIGMpIHtcbiAgICAgIFwic3RyaW5nXCIgIT0gdHlwZW9mIGIgJiYgKGMgPSBiLCBiID0gXCIqXCIpO3ZhciBkLFxuICAgICAgICAgIGUgPSAwLFxuICAgICAgICAgIGYgPSBiLnRvTG93ZXJDYXNlKCkubWF0Y2goTCkgfHwgW107aWYgKHIuaXNGdW5jdGlvbihjKSkgd2hpbGUgKGQgPSBmW2UrK10pIHtcbiAgICAgICAgXCIrXCIgPT09IGRbMF0gPyAoZCA9IGQuc2xpY2UoMSkgfHwgXCIqXCIsIChhW2RdID0gYVtkXSB8fCBbXSkudW5zaGlmdChjKSkgOiAoYVtkXSA9IGFbZF0gfHwgW10pLnB1c2goYyk7XG4gICAgICB9XG4gICAgfTtcbiAgfWZ1bmN0aW9uIE5iKGEsIGIsIGMsIGQpIHtcbiAgICB2YXIgZSA9IHt9LFxuICAgICAgICBmID0gYSA9PT0gSmI7ZnVuY3Rpb24gZyhoKSB7XG4gICAgICB2YXIgaTtyZXR1cm4gZVtoXSA9ICEwLCByLmVhY2goYVtoXSB8fCBbXSwgZnVuY3Rpb24gKGEsIGgpIHtcbiAgICAgICAgdmFyIGogPSBoKGIsIGMsIGQpO3JldHVybiBcInN0cmluZ1wiICE9IHR5cGVvZiBqIHx8IGYgfHwgZVtqXSA/IGYgPyAhKGkgPSBqKSA6IHZvaWQgMCA6IChiLmRhdGFUeXBlcy51bnNoaWZ0KGopLCBnKGopLCAhMSk7XG4gICAgICB9KSwgaTtcbiAgICB9cmV0dXJuIGcoYi5kYXRhVHlwZXNbMF0pIHx8ICFlW1wiKlwiXSAmJiBnKFwiKlwiKTtcbiAgfWZ1bmN0aW9uIE9iKGEsIGIpIHtcbiAgICB2YXIgYyxcbiAgICAgICAgZCxcbiAgICAgICAgZSA9IHIuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O2ZvciAoYyBpbiBiKSB7XG4gICAgICB2b2lkIDAgIT09IGJbY10gJiYgKChlW2NdID8gYSA6IGQgfHwgKGQgPSB7fSkpW2NdID0gYltjXSk7XG4gICAgfXJldHVybiBkICYmIHIuZXh0ZW5kKCEwLCBhLCBkKSwgYTtcbiAgfWZ1bmN0aW9uIFBiKGEsIGIsIGMpIHtcbiAgICB2YXIgZCxcbiAgICAgICAgZSxcbiAgICAgICAgZixcbiAgICAgICAgZyxcbiAgICAgICAgaCA9IGEuY29udGVudHMsXG4gICAgICAgIGkgPSBhLmRhdGFUeXBlczt3aGlsZSAoXCIqXCIgPT09IGlbMF0pIHtcbiAgICAgIGkuc2hpZnQoKSwgdm9pZCAwID09PSBkICYmIChkID0gYS5taW1lVHlwZSB8fCBiLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtcbiAgICB9aWYgKGQpIGZvciAoZSBpbiBoKSB7XG4gICAgICBpZiAoaFtlXSAmJiBoW2VdLnRlc3QoZCkpIHtcbiAgICAgICAgaS51bnNoaWZ0KGUpO2JyZWFrO1xuICAgICAgfVxuICAgIH1pZiAoaVswXSBpbiBjKSBmID0gaVswXTtlbHNlIHtcbiAgICAgIGZvciAoZSBpbiBjKSB7XG4gICAgICAgIGlmICghaVswXSB8fCBhLmNvbnZlcnRlcnNbZSArIFwiIFwiICsgaVswXV0pIHtcbiAgICAgICAgICBmID0gZTticmVhaztcbiAgICAgICAgfWcgfHwgKGcgPSBlKTtcbiAgICAgIH1mID0gZiB8fCBnO1xuICAgIH1pZiAoZikgcmV0dXJuIGYgIT09IGlbMF0gJiYgaS51bnNoaWZ0KGYpLCBjW2ZdO1xuICB9ZnVuY3Rpb24gUWIoYSwgYiwgYywgZCkge1xuICAgIHZhciBlLFxuICAgICAgICBmLFxuICAgICAgICBnLFxuICAgICAgICBoLFxuICAgICAgICBpLFxuICAgICAgICBqID0ge30sXG4gICAgICAgIGsgPSBhLmRhdGFUeXBlcy5zbGljZSgpO2lmIChrWzFdKSBmb3IgKGcgaW4gYS5jb252ZXJ0ZXJzKSB7XG4gICAgICBqW2cudG9Mb3dlckNhc2UoKV0gPSBhLmNvbnZlcnRlcnNbZ107XG4gICAgfWYgPSBrLnNoaWZ0KCk7d2hpbGUgKGYpIHtcbiAgICAgIGlmIChhLnJlc3BvbnNlRmllbGRzW2ZdICYmIChjW2EucmVzcG9uc2VGaWVsZHNbZl1dID0gYiksICFpICYmIGQgJiYgYS5kYXRhRmlsdGVyICYmIChiID0gYS5kYXRhRmlsdGVyKGIsIGEuZGF0YVR5cGUpKSwgaSA9IGYsIGYgPSBrLnNoaWZ0KCkpIGlmIChcIipcIiA9PT0gZikgZiA9IGk7ZWxzZSBpZiAoXCIqXCIgIT09IGkgJiYgaSAhPT0gZikge1xuICAgICAgICBpZiAoZyA9IGpbaSArIFwiIFwiICsgZl0gfHwgaltcIiogXCIgKyBmXSwgIWcpIGZvciAoZSBpbiBqKSB7XG4gICAgICAgICAgaWYgKGggPSBlLnNwbGl0KFwiIFwiKSwgaFsxXSA9PT0gZiAmJiAoZyA9IGpbaSArIFwiIFwiICsgaFswXV0gfHwgaltcIiogXCIgKyBoWzBdXSkpIHtcbiAgICAgICAgICAgIGcgPT09ICEwID8gZyA9IGpbZV0gOiBqW2VdICE9PSAhMCAmJiAoZiA9IGhbMF0sIGsudW5zaGlmdChoWzFdKSk7YnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9aWYgKGcgIT09ICEwKSBpZiAoZyAmJiBhW1widGhyb3dzXCJdKSBiID0gZyhiKTtlbHNlIHRyeSB7XG4gICAgICAgICAgYiA9IGcoYik7XG4gICAgICAgIH0gY2F0Y2ggKGwpIHtcbiAgICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogZyA/IGwgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIGkgKyBcIiB0byBcIiArIGYgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1yZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IGIgfTtcbiAgfXIuZXh0ZW5kKHsgYWN0aXZlOiAwLCBsYXN0TW9kaWZpZWQ6IHt9LCBldGFnOiB7fSwgYWpheFNldHRpbmdzOiB7IHVybDogdGIuaHJlZiwgdHlwZTogXCJHRVRcIiwgaXNMb2NhbDogRmIudGVzdCh0Yi5wcm90b2NvbCksIGdsb2JhbDogITAsIHByb2Nlc3NEYXRhOiAhMCwgYXN5bmM6ICEwLCBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIiwgYWNjZXB0czogeyBcIipcIjogS2IsIHRleHQ6IFwidGV4dC9wbGFpblwiLCBodG1sOiBcInRleHQvaHRtbFwiLCB4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLCBqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiIH0sIGNvbnRlbnRzOiB7IHhtbDogL1xcYnhtbFxcYi8sIGh0bWw6IC9cXGJodG1sLywganNvbjogL1xcYmpzb25cXGIvIH0sIHJlc3BvbnNlRmllbGRzOiB7IHhtbDogXCJyZXNwb25zZVhNTFwiLCB0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLCBqc29uOiBcInJlc3BvbnNlSlNPTlwiIH0sIGNvbnZlcnRlcnM6IHsgXCIqIHRleHRcIjogU3RyaW5nLCBcInRleHQgaHRtbFwiOiAhMCwgXCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSwgXCJ0ZXh0IHhtbFwiOiByLnBhcnNlWE1MIH0sIGZsYXRPcHRpb25zOiB7IHVybDogITAsIGNvbnRleHQ6ICEwIH0gfSwgYWpheFNldHVwOiBmdW5jdGlvbiBhamF4U2V0dXAoYSwgYikge1xuICAgICAgcmV0dXJuIGIgPyBPYihPYihhLCByLmFqYXhTZXR0aW5ncyksIGIpIDogT2Ioci5hamF4U2V0dGluZ3MsIGEpO1xuICAgIH0sIGFqYXhQcmVmaWx0ZXI6IE1iKEliKSwgYWpheFRyYW5zcG9ydDogTWIoSmIpLCBhamF4OiBmdW5jdGlvbiBhamF4KGIsIGMpIHtcbiAgICAgIFwib2JqZWN0XCIgPT0gKHR5cGVvZiBiID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYikpICYmIChjID0gYiwgYiA9IHZvaWQgMCksIGMgPSBjIHx8IHt9O3ZhciBlLFxuICAgICAgICAgIGYsXG4gICAgICAgICAgZyxcbiAgICAgICAgICBoLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaixcbiAgICAgICAgICBrLFxuICAgICAgICAgIGwsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBuLFxuICAgICAgICAgIG8gPSByLmFqYXhTZXR1cCh7fSwgYyksXG4gICAgICAgICAgcCA9IG8uY29udGV4dCB8fCBvLFxuICAgICAgICAgIHEgPSBvLmNvbnRleHQgJiYgKHAubm9kZVR5cGUgfHwgcC5qcXVlcnkpID8gcihwKSA6IHIuZXZlbnQsXG4gICAgICAgICAgcyA9IHIuRGVmZXJyZWQoKSxcbiAgICAgICAgICB0ID0gci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcbiAgICAgICAgICB1ID0gby5zdGF0dXNDb2RlIHx8IHt9LFxuICAgICAgICAgIHYgPSB7fSxcbiAgICAgICAgICB3ID0ge30sXG4gICAgICAgICAgeCA9IFwiY2FuY2VsZWRcIixcbiAgICAgICAgICB5ID0geyByZWFkeVN0YXRlOiAwLCBnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24gZ2V0UmVzcG9uc2VIZWFkZXIoYSkge1xuICAgICAgICAgIHZhciBiO2lmIChrKSB7XG4gICAgICAgICAgICBpZiAoIWgpIHtcbiAgICAgICAgICAgICAgaCA9IHt9O3doaWxlIChiID0gRWIuZXhlYyhnKSkge1xuICAgICAgICAgICAgICAgIGhbYlsxXS50b0xvd2VyQ2FzZSgpXSA9IGJbMl07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1iID0gaFthLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgIH1yZXR1cm4gbnVsbCA9PSBiID8gbnVsbCA6IGI7XG4gICAgICAgIH0sIGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24gZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkge1xuICAgICAgICAgIHJldHVybiBrID8gZyA6IG51bGw7XG4gICAgICAgIH0sIHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIoYSwgYikge1xuICAgICAgICAgIHJldHVybiBudWxsID09IGsgJiYgKGEgPSB3W2EudG9Mb3dlckNhc2UoKV0gPSB3W2EudG9Mb3dlckNhc2UoKV0gfHwgYSwgdlthXSA9IGIpLCB0aGlzO1xuICAgICAgICB9LCBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiBvdmVycmlkZU1pbWVUeXBlKGEpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSBrICYmIChvLm1pbWVUeXBlID0gYSksIHRoaXM7XG4gICAgICAgIH0sIHN0YXR1c0NvZGU6IGZ1bmN0aW9uIHN0YXR1c0NvZGUoYSkge1xuICAgICAgICAgIHZhciBiO2lmIChhKSBpZiAoaykgeS5hbHdheXMoYVt5LnN0YXR1c10pO2Vsc2UgZm9yIChiIGluIGEpIHtcbiAgICAgICAgICAgIHVbYl0gPSBbdVtiXSwgYVtiXV07XG4gICAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgICB9LCBhYm9ydDogZnVuY3Rpb24gYWJvcnQoYSkge1xuICAgICAgICAgIHZhciBiID0gYSB8fCB4O3JldHVybiBlICYmIGUuYWJvcnQoYiksIEEoMCwgYiksIHRoaXM7XG4gICAgICAgIH0gfTtpZiAocy5wcm9taXNlKHkpLCBvLnVybCA9ICgoYiB8fCBvLnVybCB8fCB0Yi5ocmVmKSArIFwiXCIpLnJlcGxhY2UoSGIsIHRiLnByb3RvY29sICsgXCIvL1wiKSwgby50eXBlID0gYy5tZXRob2QgfHwgYy50eXBlIHx8IG8ubWV0aG9kIHx8IG8udHlwZSwgby5kYXRhVHlwZXMgPSAoby5kYXRhVHlwZSB8fCBcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChMKSB8fCBbXCJcIl0sIG51bGwgPT0gby5jcm9zc0RvbWFpbikge1xuICAgICAgICBqID0gZC5jcmVhdGVFbGVtZW50KFwiYVwiKTt0cnkge1xuICAgICAgICAgIGouaHJlZiA9IG8udXJsLCBqLmhyZWYgPSBqLmhyZWYsIG8uY3Jvc3NEb21haW4gPSBMYi5wcm90b2NvbCArIFwiLy9cIiArIExiLmhvc3QgIT0gai5wcm90b2NvbCArIFwiLy9cIiArIGouaG9zdDtcbiAgICAgICAgfSBjYXRjaCAoeikge1xuICAgICAgICAgIG8uY3Jvc3NEb21haW4gPSAhMDtcbiAgICAgICAgfVxuICAgICAgfWlmIChvLmRhdGEgJiYgby5wcm9jZXNzRGF0YSAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiBvLmRhdGEgJiYgKG8uZGF0YSA9IHIucGFyYW0oby5kYXRhLCBvLnRyYWRpdGlvbmFsKSksIE5iKEliLCBvLCBjLCB5KSwgaykgcmV0dXJuIHk7bCA9IHIuZXZlbnQgJiYgby5nbG9iYWwsIGwgJiYgMCA9PT0gci5hY3RpdmUrKyAmJiByLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIiksIG8udHlwZSA9IG8udHlwZS50b1VwcGVyQ2FzZSgpLCBvLmhhc0NvbnRlbnQgPSAhR2IudGVzdChvLnR5cGUpLCBmID0gby51cmwucmVwbGFjZShDYiwgXCJcIiksIG8uaGFzQ29udGVudCA/IG8uZGF0YSAmJiBvLnByb2Nlc3NEYXRhICYmIDAgPT09IChvLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgKG8uZGF0YSA9IG8uZGF0YS5yZXBsYWNlKEJiLCBcIitcIikpIDogKG4gPSBvLnVybC5zbGljZShmLmxlbmd0aCksIG8uZGF0YSAmJiAoZiArPSAodmIudGVzdChmKSA/IFwiJlwiIDogXCI/XCIpICsgby5kYXRhLCBkZWxldGUgby5kYXRhKSwgby5jYWNoZSA9PT0gITEgJiYgKGYgPSBmLnJlcGxhY2UoRGIsIFwiJDFcIiksIG4gPSAodmIudGVzdChmKSA/IFwiJlwiIDogXCI/XCIpICsgXCJfPVwiICsgdWIrKyArIG4pLCBvLnVybCA9IGYgKyBuKSwgby5pZk1vZGlmaWVkICYmIChyLmxhc3RNb2RpZmllZFtmXSAmJiB5LnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCByLmxhc3RNb2RpZmllZFtmXSksIHIuZXRhZ1tmXSAmJiB5LnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsIHIuZXRhZ1tmXSkpLCAoby5kYXRhICYmIG8uaGFzQ29udGVudCAmJiBvLmNvbnRlbnRUeXBlICE9PSAhMSB8fCBjLmNvbnRlbnRUeXBlKSAmJiB5LnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgby5jb250ZW50VHlwZSksIHkuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBvLmRhdGFUeXBlc1swXSAmJiBvLmFjY2VwdHNbby5kYXRhVHlwZXNbMF1dID8gby5hY2NlcHRzW28uZGF0YVR5cGVzWzBdXSArIChcIipcIiAhPT0gby5kYXRhVHlwZXNbMF0gPyBcIiwgXCIgKyBLYiArIFwiOyBxPTAuMDFcIiA6IFwiXCIpIDogby5hY2NlcHRzW1wiKlwiXSk7Zm9yIChtIGluIG8uaGVhZGVycykge1xuICAgICAgICB5LnNldFJlcXVlc3RIZWFkZXIobSwgby5oZWFkZXJzW21dKTtcbiAgICAgIH1pZiAoby5iZWZvcmVTZW5kICYmIChvLmJlZm9yZVNlbmQuY2FsbChwLCB5LCBvKSA9PT0gITEgfHwgaykpIHJldHVybiB5LmFib3J0KCk7aWYgKHggPSBcImFib3J0XCIsIHQuYWRkKG8uY29tcGxldGUpLCB5LmRvbmUoby5zdWNjZXNzKSwgeS5mYWlsKG8uZXJyb3IpLCBlID0gTmIoSmIsIG8sIGMsIHkpKSB7XG4gICAgICAgIGlmICh5LnJlYWR5U3RhdGUgPSAxLCBsICYmIHEudHJpZ2dlcihcImFqYXhTZW5kXCIsIFt5LCBvXSksIGspIHJldHVybiB5O28uYXN5bmMgJiYgby50aW1lb3V0ID4gMCAmJiAoaSA9IGEuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgeS5hYm9ydChcInRpbWVvdXRcIik7XG4gICAgICAgIH0sIG8udGltZW91dCkpO3RyeSB7XG4gICAgICAgICAgayA9ICExLCBlLnNlbmQodiwgQSk7XG4gICAgICAgIH0gY2F0Y2ggKHopIHtcbiAgICAgICAgICBpZiAoaykgdGhyb3cgejtBKC0xLCB6KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIEEoLTEsIFwiTm8gVHJhbnNwb3J0XCIpO2Z1bmN0aW9uIEEoYiwgYywgZCwgaCkge1xuICAgICAgICB2YXIgaixcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgdixcbiAgICAgICAgICAgIHcsXG4gICAgICAgICAgICB4ID0gYztrIHx8IChrID0gITAsIGkgJiYgYS5jbGVhclRpbWVvdXQoaSksIGUgPSB2b2lkIDAsIGcgPSBoIHx8IFwiXCIsIHkucmVhZHlTdGF0ZSA9IGIgPiAwID8gNCA6IDAsIGogPSBiID49IDIwMCAmJiBiIDwgMzAwIHx8IDMwNCA9PT0gYiwgZCAmJiAodiA9IFBiKG8sIHksIGQpKSwgdiA9IFFiKG8sIHYsIHksIGopLCBqID8gKG8uaWZNb2RpZmllZCAmJiAodyA9IHkuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpLCB3ICYmIChyLmxhc3RNb2RpZmllZFtmXSA9IHcpLCB3ID0geS5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIiksIHcgJiYgKHIuZXRhZ1tmXSA9IHcpKSwgMjA0ID09PSBiIHx8IFwiSEVBRFwiID09PSBvLnR5cGUgPyB4ID0gXCJub2NvbnRlbnRcIiA6IDMwNCA9PT0gYiA/IHggPSBcIm5vdG1vZGlmaWVkXCIgOiAoeCA9IHYuc3RhdGUsIG0gPSB2LmRhdGEsIG4gPSB2LmVycm9yLCBqID0gIW4pKSA6IChuID0geCwgIWIgJiYgeCB8fCAoeCA9IFwiZXJyb3JcIiwgYiA8IDAgJiYgKGIgPSAwKSkpLCB5LnN0YXR1cyA9IGIsIHkuc3RhdHVzVGV4dCA9IChjIHx8IHgpICsgXCJcIiwgaiA/IHMucmVzb2x2ZVdpdGgocCwgW20sIHgsIHldKSA6IHMucmVqZWN0V2l0aChwLCBbeSwgeCwgbl0pLCB5LnN0YXR1c0NvZGUodSksIHUgPSB2b2lkIDAsIGwgJiYgcS50cmlnZ2VyKGogPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLCBbeSwgbywgaiA/IG0gOiBuXSksIHQuZmlyZVdpdGgocCwgW3ksIHhdKSwgbCAmJiAocS50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsIFt5LCBvXSksIC0tci5hY3RpdmUgfHwgci5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKTtcbiAgICAgIH1yZXR1cm4geTtcbiAgICB9LCBnZXRKU09OOiBmdW5jdGlvbiBnZXRKU09OKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiByLmdldChhLCBiLCBjLCBcImpzb25cIik7XG4gICAgfSwgZ2V0U2NyaXB0OiBmdW5jdGlvbiBnZXRTY3JpcHQoYSwgYikge1xuICAgICAgcmV0dXJuIHIuZ2V0KGEsIHZvaWQgMCwgYiwgXCJzY3JpcHRcIik7XG4gICAgfSB9KSwgci5lYWNoKFtcImdldFwiLCBcInBvc3RcIl0sIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcltiXSA9IGZ1bmN0aW9uIChhLCBjLCBkLCBlKSB7XG4gICAgICByZXR1cm4gci5pc0Z1bmN0aW9uKGMpICYmIChlID0gZSB8fCBkLCBkID0gYywgYyA9IHZvaWQgMCksIHIuYWpheChyLmV4dGVuZCh7IHVybDogYSwgdHlwZTogYiwgZGF0YVR5cGU6IGUsIGRhdGE6IGMsIHN1Y2Nlc3M6IGQgfSwgci5pc1BsYWluT2JqZWN0KGEpICYmIGEpKTtcbiAgICB9O1xuICB9KSwgci5fZXZhbFVybCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHIuYWpheCh7IHVybDogYSwgdHlwZTogXCJHRVRcIiwgZGF0YVR5cGU6IFwic2NyaXB0XCIsIGNhY2hlOiAhMCwgYXN5bmM6ICExLCBnbG9iYWw6ICExLCBcInRocm93c1wiOiAhMCB9KTtcbiAgfSwgci5mbi5leHRlbmQoeyB3cmFwQWxsOiBmdW5jdGlvbiB3cmFwQWxsKGEpIHtcbiAgICAgIHZhciBiO3JldHVybiB0aGlzWzBdICYmIChyLmlzRnVuY3Rpb24oYSkgJiYgKGEgPSBhLmNhbGwodGhpc1swXSkpLCBiID0gcihhLCB0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSwgdGhpc1swXS5wYXJlbnROb2RlICYmIGIuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLCBiLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhID0gdGhpczt3aGlsZSAoYS5maXJzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgICAgIGEgPSBhLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB9cmV0dXJuIGE7XG4gICAgICB9KS5hcHBlbmQodGhpcykpLCB0aGlzO1xuICAgIH0sIHdyYXBJbm5lcjogZnVuY3Rpb24gd3JhcElubmVyKGEpIHtcbiAgICAgIHJldHVybiByLmlzRnVuY3Rpb24oYSkgPyB0aGlzLmVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgcih0aGlzKS53cmFwSW5uZXIoYS5jYWxsKHRoaXMsIGIpKTtcbiAgICAgIH0pIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGIgPSByKHRoaXMpLFxuICAgICAgICAgICAgYyA9IGIuY29udGVudHMoKTtjLmxlbmd0aCA/IGMud3JhcEFsbChhKSA6IGIuYXBwZW5kKGEpO1xuICAgICAgfSk7XG4gICAgfSwgd3JhcDogZnVuY3Rpb24gd3JhcChhKSB7XG4gICAgICB2YXIgYiA9IHIuaXNGdW5jdGlvbihhKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHIodGhpcykud3JhcEFsbChiID8gYS5jYWxsKHRoaXMsIGMpIDogYSk7XG4gICAgICB9KTtcbiAgICB9LCB1bndyYXA6IGZ1bmN0aW9uIHVud3JhcChhKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQoYSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcih0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpO1xuICAgICAgfSksIHRoaXM7XG4gICAgfSB9KSwgci5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gIXIuZXhwci5wc2V1ZG9zLnZpc2libGUoYSk7XG4gIH0sIHIuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAhIShhLm9mZnNldFdpZHRoIHx8IGEub2Zmc2V0SGVpZ2h0IHx8IGEuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpO1xuICB9LCByLmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgYS5YTUxIdHRwUmVxdWVzdCgpO1xuICAgIH0gY2F0Y2ggKGIpIHt9XG4gIH07dmFyIFJiID0geyAwOiAyMDAsIDEyMjM6IDIwNCB9LFxuICAgICAgU2IgPSByLmFqYXhTZXR0aW5ncy54aHIoKTtvLmNvcnMgPSAhIVNiICYmIFwid2l0aENyZWRlbnRpYWxzXCIgaW4gU2IsIG8uYWpheCA9IFNiID0gISFTYiwgci5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uIChiKSB7XG4gICAgdmFyIF9jLCBkO2lmIChvLmNvcnMgfHwgU2IgJiYgIWIuY3Jvc3NEb21haW4pIHJldHVybiB7IHNlbmQ6IGZ1bmN0aW9uIHNlbmQoZSwgZikge1xuICAgICAgICB2YXIgZyxcbiAgICAgICAgICAgIGggPSBiLnhocigpO2lmIChoLm9wZW4oYi50eXBlLCBiLnVybCwgYi5hc3luYywgYi51c2VybmFtZSwgYi5wYXNzd29yZCksIGIueGhyRmllbGRzKSBmb3IgKGcgaW4gYi54aHJGaWVsZHMpIHtcbiAgICAgICAgICBoW2ddID0gYi54aHJGaWVsZHNbZ107XG4gICAgICAgIH1iLm1pbWVUeXBlICYmIGgub3ZlcnJpZGVNaW1lVHlwZSAmJiBoLm92ZXJyaWRlTWltZVR5cGUoYi5taW1lVHlwZSksIGIuY3Jvc3NEb21haW4gfHwgZVtcIlgtUmVxdWVzdGVkLVdpdGhcIl0gfHwgKGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiKTtmb3IgKGcgaW4gZSkge1xuICAgICAgICAgIGguc2V0UmVxdWVzdEhlYWRlcihnLCBlW2ddKTtcbiAgICAgICAgfV9jID0gZnVuY3Rpb24gYyhhKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9jICYmIChfYyA9IGQgPSBoLm9ubG9hZCA9IGgub25lcnJvciA9IGgub25hYm9ydCA9IGgub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbCwgXCJhYm9ydFwiID09PSBhID8gaC5hYm9ydCgpIDogXCJlcnJvclwiID09PSBhID8gXCJudW1iZXJcIiAhPSB0eXBlb2YgaC5zdGF0dXMgPyBmKDAsIFwiZXJyb3JcIikgOiBmKGguc3RhdHVzLCBoLnN0YXR1c1RleHQpIDogZihSYltoLnN0YXR1c10gfHwgaC5zdGF0dXMsIGguc3RhdHVzVGV4dCwgXCJ0ZXh0XCIgIT09IChoLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIikgfHwgXCJzdHJpbmdcIiAhPSB0eXBlb2YgaC5yZXNwb25zZVRleHQgPyB7IGJpbmFyeTogaC5yZXNwb25zZSB9IDogeyB0ZXh0OiBoLnJlc3BvbnNlVGV4dCB9LCBoLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgaC5vbmxvYWQgPSBfYygpLCBkID0gaC5vbmVycm9yID0gX2MoXCJlcnJvclwiKSwgdm9pZCAwICE9PSBoLm9uYWJvcnQgPyBoLm9uYWJvcnQgPSBkIDogaC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgNCA9PT0gaC5yZWFkeVN0YXRlICYmIGEuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfYyAmJiBkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIF9jID0gX2MoXCJhYm9ydFwiKTt0cnkge1xuICAgICAgICAgIGguc2VuZChiLmhhc0NvbnRlbnQgJiYgYi5kYXRhIHx8IG51bGwpO1xuICAgICAgICB9IGNhdGNoIChpKSB7XG4gICAgICAgICAgaWYgKF9jKSB0aHJvdyBpO1xuICAgICAgICB9XG4gICAgICB9LCBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgIF9jICYmIF9jKCk7XG4gICAgICB9IH07XG4gIH0pLCByLmFqYXhQcmVmaWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICBhLmNyb3NzRG9tYWluICYmIChhLmNvbnRlbnRzLnNjcmlwdCA9ICExKTtcbiAgfSksIHIuYWpheFNldHVwKHsgYWNjZXB0czogeyBzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIiB9LCBjb250ZW50czogeyBzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiLyB9LCBjb252ZXJ0ZXJzOiB7IFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24gdGV4dFNjcmlwdChhKSB7XG4gICAgICAgIHJldHVybiByLmdsb2JhbEV2YWwoYSksIGE7XG4gICAgICB9IH0gfSksIHIuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLCBmdW5jdGlvbiAoYSkge1xuICAgIHZvaWQgMCA9PT0gYS5jYWNoZSAmJiAoYS5jYWNoZSA9ICExKSwgYS5jcm9zc0RvbWFpbiAmJiAoYS50eXBlID0gXCJHRVRcIik7XG4gIH0pLCByLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIiwgZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYS5jcm9zc0RvbWFpbikge1xuICAgICAgdmFyIGIsIF9jMjtyZXR1cm4geyBzZW5kOiBmdW5jdGlvbiBzZW5kKGUsIGYpIHtcbiAgICAgICAgICBiID0gcihcIjxzY3JpcHQ+XCIpLnByb3AoeyBjaGFyc2V0OiBhLnNjcmlwdENoYXJzZXQsIHNyYzogYS51cmwgfSkub24oXCJsb2FkIGVycm9yXCIsIF9jMiA9IGZ1bmN0aW9uIGMoYSkge1xuICAgICAgICAgICAgYi5yZW1vdmUoKSwgX2MyID0gbnVsbCwgYSAmJiBmKFwiZXJyb3JcIiA9PT0gYS50eXBlID8gNDA0IDogMjAwLCBhLnR5cGUpO1xuICAgICAgICAgIH0pLCBkLmhlYWQuYXBwZW5kQ2hpbGQoYlswXSk7XG4gICAgICAgIH0sIGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgICAgICBfYzIgJiYgX2MyKCk7XG4gICAgICAgIH0gfTtcbiAgICB9XG4gIH0pO3ZhciBUYiA9IFtdLFxuICAgICAgVWIgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO3IuYWpheFNldHVwKHsganNvbnA6IFwiY2FsbGJhY2tcIiwganNvbnBDYWxsYmFjazogZnVuY3Rpb24ganNvbnBDYWxsYmFjaygpIHtcbiAgICAgIHZhciBhID0gVGIucG9wKCkgfHwgci5leHBhbmRvICsgXCJfXCIgKyB1YisrO3JldHVybiB0aGlzW2FdID0gITAsIGE7XG4gICAgfSB9KSwgci5hamF4UHJlZmlsdGVyKFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiAoYiwgYywgZCkge1xuICAgIHZhciBlLFxuICAgICAgICBmLFxuICAgICAgICBnLFxuICAgICAgICBoID0gYi5qc29ucCAhPT0gITEgJiYgKFViLnRlc3QoYi51cmwpID8gXCJ1cmxcIiA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIGIuZGF0YSAmJiAwID09PSAoYi5jb250ZW50VHlwZSB8fCBcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIFViLnRlc3QoYi5kYXRhKSAmJiBcImRhdGFcIik7aWYgKGggfHwgXCJqc29ucFwiID09PSBiLmRhdGFUeXBlc1swXSkgcmV0dXJuIGUgPSBiLmpzb25wQ2FsbGJhY2sgPSByLmlzRnVuY3Rpb24oYi5qc29ucENhbGxiYWNrKSA/IGIuanNvbnBDYWxsYmFjaygpIDogYi5qc29ucENhbGxiYWNrLCBoID8gYltoXSA9IGJbaF0ucmVwbGFjZShVYiwgXCIkMVwiICsgZSkgOiBiLmpzb25wICE9PSAhMSAmJiAoYi51cmwgKz0gKHZiLnRlc3QoYi51cmwpID8gXCImXCIgOiBcIj9cIikgKyBiLmpzb25wICsgXCI9XCIgKyBlKSwgYi5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZyB8fCByLmVycm9yKGUgKyBcIiB3YXMgbm90IGNhbGxlZFwiKSwgZ1swXTtcbiAgICB9LCBiLmRhdGFUeXBlc1swXSA9IFwianNvblwiLCBmID0gYVtlXSwgYVtlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGcgPSBhcmd1bWVudHM7XG4gICAgfSwgZC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgdm9pZCAwID09PSBmID8gcihhKS5yZW1vdmVQcm9wKGUpIDogYVtlXSA9IGYsIGJbZV0gJiYgKGIuanNvbnBDYWxsYmFjayA9IGMuanNvbnBDYWxsYmFjaywgVGIucHVzaChlKSksIGcgJiYgci5pc0Z1bmN0aW9uKGYpICYmIGYoZ1swXSksIGcgPSBmID0gdm9pZCAwO1xuICAgIH0pLCBcInNjcmlwdFwiO1xuICB9KSwgby5jcmVhdGVIVE1MRG9jdW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGEgPSBkLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5O3JldHVybiBhLmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiwgMiA9PT0gYS5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgfSgpLCByLnBhcnNlSFRNTCA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGEpIHJldHVybiBbXTtcImJvb2xlYW5cIiA9PSB0eXBlb2YgYiAmJiAoYyA9IGIsIGIgPSAhMSk7dmFyIGUsIGYsIGc7cmV0dXJuIGIgfHwgKG8uY3JlYXRlSFRNTERvY3VtZW50ID8gKGIgPSBkLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSwgZSA9IGIuY3JlYXRlRWxlbWVudChcImJhc2VcIiksIGUuaHJlZiA9IGQubG9jYXRpb24uaHJlZiwgYi5oZWFkLmFwcGVuZENoaWxkKGUpKSA6IGIgPSBkKSwgZiA9IEMuZXhlYyhhKSwgZyA9ICFjICYmIFtdLCBmID8gW2IuY3JlYXRlRWxlbWVudChmWzFdKV0gOiAoZiA9IHFhKFthXSwgYiwgZyksIGcgJiYgZy5sZW5ndGggJiYgcihnKS5yZW1vdmUoKSwgci5tZXJnZShbXSwgZi5jaGlsZE5vZGVzKSk7XG4gIH0sIHIuZm4ubG9hZCA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgdmFyIGQsXG4gICAgICAgIGUsXG4gICAgICAgIGYsXG4gICAgICAgIGcgPSB0aGlzLFxuICAgICAgICBoID0gYS5pbmRleE9mKFwiIFwiKTtyZXR1cm4gaCA+IC0xICYmIChkID0gcGIoYS5zbGljZShoKSksIGEgPSBhLnNsaWNlKDAsIGgpKSwgci5pc0Z1bmN0aW9uKGIpID8gKGMgPSBiLCBiID0gdm9pZCAwKSA6IGIgJiYgXCJvYmplY3RcIiA9PSAodHlwZW9mIGIgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihiKSkgJiYgKGUgPSBcIlBPU1RcIiksIGcubGVuZ3RoID4gMCAmJiByLmFqYXgoeyB1cmw6IGEsIHR5cGU6IGUgfHwgXCJHRVRcIiwgZGF0YVR5cGU6IFwiaHRtbFwiLCBkYXRhOiBiIH0pLmRvbmUoZnVuY3Rpb24gKGEpIHtcbiAgICAgIGYgPSBhcmd1bWVudHMsIGcuaHRtbChkID8gcihcIjxkaXY+XCIpLmFwcGVuZChyLnBhcnNlSFRNTChhKSkuZmluZChkKSA6IGEpO1xuICAgIH0pLmFsd2F5cyhjICYmIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjLmFwcGx5KHRoaXMsIGYgfHwgW2EucmVzcG9uc2VUZXh0LCBiLCBhXSk7XG4gICAgICB9KTtcbiAgICB9KSwgdGhpcztcbiAgfSwgci5lYWNoKFtcImFqYXhTdGFydFwiLCBcImFqYXhTdG9wXCIsIFwiYWpheENvbXBsZXRlXCIsIFwiYWpheEVycm9yXCIsIFwiYWpheFN1Y2Nlc3NcIiwgXCJhamF4U2VuZFwiXSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByLmZuW2JdID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiB0aGlzLm9uKGIsIGEpO1xuICAgIH07XG4gIH0pLCByLmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIHIuZ3JlcChyLnRpbWVycywgZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBhID09PSBiLmVsZW07XG4gICAgfSkubGVuZ3RoO1xuICB9LCByLm9mZnNldCA9IHsgc2V0T2Zmc2V0OiBmdW5jdGlvbiBzZXRPZmZzZXQoYSwgYiwgYykge1xuICAgICAgdmFyIGQsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBmLFxuICAgICAgICAgIGcsXG4gICAgICAgICAgaCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGosXG4gICAgICAgICAgayA9IHIuY3NzKGEsIFwicG9zaXRpb25cIiksXG4gICAgICAgICAgbCA9IHIoYSksXG4gICAgICAgICAgbSA9IHt9O1wic3RhdGljXCIgPT09IGsgJiYgKGEuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCIpLCBoID0gbC5vZmZzZXQoKSwgZiA9IHIuY3NzKGEsIFwidG9wXCIpLCBpID0gci5jc3MoYSwgXCJsZWZ0XCIpLCBqID0gKFwiYWJzb2x1dGVcIiA9PT0gayB8fCBcImZpeGVkXCIgPT09IGspICYmIChmICsgaSkuaW5kZXhPZihcImF1dG9cIikgPiAtMSwgaiA/IChkID0gbC5wb3NpdGlvbigpLCBnID0gZC50b3AsIGUgPSBkLmxlZnQpIDogKGcgPSBwYXJzZUZsb2F0KGYpIHx8IDAsIGUgPSBwYXJzZUZsb2F0KGkpIHx8IDApLCByLmlzRnVuY3Rpb24oYikgJiYgKGIgPSBiLmNhbGwoYSwgYywgci5leHRlbmQoe30sIGgpKSksIG51bGwgIT0gYi50b3AgJiYgKG0udG9wID0gYi50b3AgLSBoLnRvcCArIGcpLCBudWxsICE9IGIubGVmdCAmJiAobS5sZWZ0ID0gYi5sZWZ0IC0gaC5sZWZ0ICsgZSksIFwidXNpbmdcIiBpbiBiID8gYi51c2luZy5jYWxsKGEsIG0pIDogbC5jc3MobSk7XG4gICAgfSB9LCByLmZuLmV4dGVuZCh7IG9mZnNldDogZnVuY3Rpb24gb2Zmc2V0KGEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdm9pZCAwID09PSBhID8gdGhpcyA6IHRoaXMuZWFjaChmdW5jdGlvbiAoYikge1xuICAgICAgICByLm9mZnNldC5zZXRPZmZzZXQodGhpcywgYSwgYik7XG4gICAgICB9KTt2YXIgYixcbiAgICAgICAgICBjLFxuICAgICAgICAgIGQsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBmID0gdGhpc1swXTtpZiAoZikgcmV0dXJuIGYuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPyAoZCA9IGYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGIgPSBmLm93bmVyRG9jdW1lbnQsIGMgPSBiLmRvY3VtZW50RWxlbWVudCwgZSA9IGIuZGVmYXVsdFZpZXcsIHsgdG9wOiBkLnRvcCArIGUucGFnZVlPZmZzZXQgLSBjLmNsaWVudFRvcCwgbGVmdDogZC5sZWZ0ICsgZS5wYWdlWE9mZnNldCAtIGMuY2xpZW50TGVmdCB9KSA6IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gICAgfSwgcG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuICAgICAgaWYgKHRoaXNbMF0pIHtcbiAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICBiLFxuICAgICAgICAgICAgYyA9IHRoaXNbMF0sXG4gICAgICAgICAgICBkID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtyZXR1cm4gXCJmaXhlZFwiID09PSByLmNzcyhjLCBcInBvc2l0aW9uXCIpID8gYiA9IGMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiAoYSA9IHRoaXMub2Zmc2V0UGFyZW50KCksIGIgPSB0aGlzLm9mZnNldCgpLCBCKGFbMF0sIFwiaHRtbFwiKSB8fCAoZCA9IGEub2Zmc2V0KCkpLCBkID0geyB0b3A6IGQudG9wICsgci5jc3MoYVswXSwgXCJib3JkZXJUb3BXaWR0aFwiLCAhMCksIGxlZnQ6IGQubGVmdCArIHIuY3NzKGFbMF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsICEwKSB9KSwgeyB0b3A6IGIudG9wIC0gZC50b3AgLSByLmNzcyhjLCBcIm1hcmdpblRvcFwiLCAhMCksIGxlZnQ6IGIubGVmdCAtIGQubGVmdCAtIHIuY3NzKGMsIFwibWFyZ2luTGVmdFwiLCAhMCkgfTtcbiAgICAgIH1cbiAgICB9LCBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uIG9mZnNldFBhcmVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5vZmZzZXRQYXJlbnQ7d2hpbGUgKGEgJiYgXCJzdGF0aWNcIiA9PT0gci5jc3MoYSwgXCJwb3NpdGlvblwiKSkge1xuICAgICAgICAgIGEgPSBhLm9mZnNldFBhcmVudDtcbiAgICAgICAgfXJldHVybiBhIHx8IHJhO1xuICAgICAgfSk7XG4gICAgfSB9KSwgci5lYWNoKHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBjID0gXCJwYWdlWU9mZnNldFwiID09PSBiO3IuZm5bYV0gPSBmdW5jdGlvbiAoZCkge1xuICAgICAgcmV0dXJuIFQodGhpcywgZnVuY3Rpb24gKGEsIGQsIGUpIHtcbiAgICAgICAgdmFyIGY7cmV0dXJuIHIuaXNXaW5kb3coYSkgPyBmID0gYSA6IDkgPT09IGEubm9kZVR5cGUgJiYgKGYgPSBhLmRlZmF1bHRWaWV3KSwgdm9pZCAwID09PSBlID8gZiA/IGZbYl0gOiBhW2RdIDogdm9pZCAoZiA/IGYuc2Nyb2xsVG8oYyA/IGYucGFnZVhPZmZzZXQgOiBlLCBjID8gZSA6IGYucGFnZVlPZmZzZXQpIDogYVtkXSA9IGUpO1xuICAgICAgfSwgYSwgZCwgYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgfTtcbiAgfSksIHIuZWFjaChbXCJ0b3BcIiwgXCJsZWZ0XCJdLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHIuY3NzSG9va3NbYl0gPSBQYShvLnBpeGVsUG9zaXRpb24sIGZ1bmN0aW9uIChhLCBjKSB7XG4gICAgICBpZiAoYykgcmV0dXJuIGMgPSBPYShhLCBiKSwgTWEudGVzdChjKSA/IHIoYSkucG9zaXRpb24oKVtiXSArIFwicHhcIiA6IGM7XG4gICAgfSk7XG4gIH0pLCByLmVhY2goeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByLmVhY2goeyBwYWRkaW5nOiBcImlubmVyXCIgKyBhLCBjb250ZW50OiBiLCBcIlwiOiBcIm91dGVyXCIgKyBhIH0sIGZ1bmN0aW9uIChjLCBkKSB7XG4gICAgICByLmZuW2RdID0gZnVuY3Rpb24gKGUsIGYpIHtcbiAgICAgICAgdmFyIGcgPSBhcmd1bWVudHMubGVuZ3RoICYmIChjIHx8IFwiYm9vbGVhblwiICE9IHR5cGVvZiBlKSxcbiAgICAgICAgICAgIGggPSBjIHx8IChlID09PSAhMCB8fCBmID09PSAhMCA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiKTtyZXR1cm4gVCh0aGlzLCBmdW5jdGlvbiAoYiwgYywgZSkge1xuICAgICAgICAgIHZhciBmO3JldHVybiByLmlzV2luZG93KGIpID8gMCA9PT0gZC5pbmRleE9mKFwib3V0ZXJcIikgPyBiW1wiaW5uZXJcIiArIGFdIDogYi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIGFdIDogOSA9PT0gYi5ub2RlVHlwZSA/IChmID0gYi5kb2N1bWVudEVsZW1lbnQsIE1hdGgubWF4KGIuYm9keVtcInNjcm9sbFwiICsgYV0sIGZbXCJzY3JvbGxcIiArIGFdLCBiLmJvZHlbXCJvZmZzZXRcIiArIGFdLCBmW1wib2Zmc2V0XCIgKyBhXSwgZltcImNsaWVudFwiICsgYV0pKSA6IHZvaWQgMCA9PT0gZSA/IHIuY3NzKGIsIGMsIGgpIDogci5zdHlsZShiLCBjLCBlLCBoKTtcbiAgICAgICAgfSwgYiwgZyA/IGUgOiB2b2lkIDAsIGcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSksIHIuZm4uZXh0ZW5kKHsgYmluZDogZnVuY3Rpb24gYmluZChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gdGhpcy5vbihhLCBudWxsLCBiLCBjKTtcbiAgICB9LCB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZChhLCBiKSB7XG4gICAgICByZXR1cm4gdGhpcy5vZmYoYSwgbnVsbCwgYik7XG4gICAgfSwgZGVsZWdhdGU6IGZ1bmN0aW9uIGRlbGVnYXRlKGEsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiB0aGlzLm9uKGIsIGEsIGMsIGQpO1xuICAgIH0sIHVuZGVsZWdhdGU6IGZ1bmN0aW9uIHVuZGVsZWdhdGUoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIDEgPT09IGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLm9mZihhLCBcIioqXCIpIDogdGhpcy5vZmYoYiwgYSB8fCBcIioqXCIsIGMpO1xuICAgIH0gfSksIHIuaG9sZFJlYWR5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBhID8gci5yZWFkeVdhaXQrKyA6IHIucmVhZHkoITApO1xuICB9LCByLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5LCByLnBhcnNlSlNPTiA9IEpTT04ucGFyc2UsIHIubm9kZU5hbWUgPSBCLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kICYmIGRlZmluZShcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByO1xuICB9KTt2YXIgVmIgPSBhLmpRdWVyeSxcbiAgICAgIFdiID0gYS4kO3JldHVybiByLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiBhLiQgPT09IHIgJiYgKGEuJCA9IFdiKSwgYiAmJiBhLmpRdWVyeSA9PT0gciAmJiAoYS5qUXVlcnkgPSBWYiksIHI7XG4gIH0sIGIgfHwgKGEualF1ZXJ5ID0gYS4kID0gciksIHI7XG59KTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cbiFmdW5jdGlvbiAoJCkge1xuXG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBGT1VOREFUSU9OX1ZFUlNJT04gPSAnNi4zLjEnO1xuXG4gIC8vIEdsb2JhbCBGb3VuZGF0aW9uIG9iamVjdFxuICAvLyBUaGlzIGlzIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3csIG9yIHVzZWQgYXMgYSBtb2R1bGUgZm9yIEFNRC9Ccm93c2VyaWZ5XG4gIHZhciBGb3VuZGF0aW9uID0ge1xuICAgIHZlcnNpb246IEZPVU5EQVRJT05fVkVSU0lPTixcblxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBpbml0aWFsaXplZCBwbHVnaW5zLlxuICAgICAqL1xuICAgIF9wbHVnaW5zOiB7fSxcblxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBnZW5lcmF0ZWQgdW5pcXVlIGlkcyBmb3IgcGx1Z2luIGluc3RhbmNlc1xuICAgICAqL1xuICAgIF91dWlkczogW10sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAgICAgKi9cbiAgICBydGw6IGZ1bmN0aW9uIHJ0bCgpIHtcbiAgICAgIHJldHVybiAkKCdodG1sJykuYXR0cignZGlyJykgPT09ICdydGwnO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIEZvdW5kYXRpb24gcGx1Z2luLCBhZGRpbmcgaXQgdG8gdGhlIGBGb3VuZGF0aW9uYCBuYW1lc3BhY2UgYW5kIHRoZSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZSB3aGVuIHJlZmxvd2luZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBwbHVnaW4uXG4gICAgICovXG4gICAgcGx1Z2luOiBmdW5jdGlvbiBwbHVnaW4oX3BsdWdpbiwgbmFtZSkge1xuICAgICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBhZGRpbmcgdG8gZ2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4gICAgICAvLyBFeGFtcGxlczogRm91bmRhdGlvbi5SZXZlYWwsIEZvdW5kYXRpb24uT2ZmQ2FudmFzXG4gICAgICB2YXIgY2xhc3NOYW1lID0gbmFtZSB8fCBmdW5jdGlvbk5hbWUoX3BsdWdpbik7XG4gICAgICAvLyBPYmplY3Qga2V5IHRvIHVzZSB3aGVuIHN0b3JpbmcgdGhlIHBsdWdpbiwgYWxzbyB1c2VkIHRvIGNyZWF0ZSB0aGUgaWRlbnRpZnlpbmcgZGF0YSBhdHRyaWJ1dGUgZm9yIHRoZSBwbHVnaW5cbiAgICAgIC8vIEV4YW1wbGVzOiBkYXRhLXJldmVhbCwgZGF0YS1vZmYtY2FudmFzXG4gICAgICB2YXIgYXR0ck5hbWUgPSBoeXBoZW5hdGUoY2xhc3NOYW1lKTtcblxuICAgICAgLy8gQWRkIHRvIHRoZSBGb3VuZGF0aW9uIG9iamVjdCBhbmQgdGhlIHBsdWdpbnMgbGlzdCAoZm9yIHJlZmxvd2luZylcbiAgICAgIHRoaXMuX3BsdWdpbnNbYXR0ck5hbWVdID0gdGhpc1tjbGFzc05hbWVdID0gX3BsdWdpbjtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICAgKiBBZGRzIHRoZSBgemZQbHVnaW5gIGRhdGEtYXR0cmlidXRlIHRvIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlZCBwbHVnaW5zIHRvIGFsbG93IHVzZSBvZiAkKHNlbGVjdG9yKS5mb3VuZGF0aW9uKG1ldGhvZCkgY2FsbHMuXG4gICAgICogQWxzbyBmaXJlcyB0aGUgaW5pdGlhbGl6YXRpb24gZXZlbnQgZm9yIGVhY2ggcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgcGx1Z2luLCBwYXNzZWQgYXMgYSBjYW1lbENhc2VkIHN0cmluZy5cbiAgICAgKiBAZmlyZXMgUGx1Z2luI2luaXRcbiAgICAgKi9cbiAgICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW4ocGx1Z2luLCBuYW1lKSB7XG4gICAgICB2YXIgcGx1Z2luTmFtZSA9IG5hbWUgPyBoeXBoZW5hdGUobmFtZSkgOiBmdW5jdGlvbk5hbWUocGx1Z2luLmNvbnN0cnVjdG9yKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcGx1Z2luLnV1aWQgPSB0aGlzLkdldFlvRGlnaXRzKDYsIHBsdWdpbk5hbWUpO1xuXG4gICAgICBpZiAoIXBsdWdpbi4kZWxlbWVudC5hdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lKSkge1xuICAgICAgICBwbHVnaW4uJGVsZW1lbnQuYXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSwgcGx1Z2luLnV1aWQpO1xuICAgICAgfVxuICAgICAgaWYgKCFwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICBwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nLCBwbHVnaW4pO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAgICogQGV2ZW50IFBsdWdpbiNpbml0XG4gICAgICAgKi9cbiAgICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKCdpbml0LnpmLicgKyBwbHVnaW5OYW1lKTtcblxuICAgICAgdGhpcy5fdXVpZHMucHVzaChwbHVnaW4udXVpZCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAgICogUmVtb3ZlcyB0aGUgemZQbHVnaW4gZGF0YSBhdHRyaWJ1dGUsIGFzIHdlbGwgYXMgdGhlIGRhdGEtcGx1Z2luLW5hbWUgYXR0cmlidXRlLlxuICAgICAqIEFsc28gZmlyZXMgdGhlIGRlc3Ryb3llZCBldmVudCBmb3IgdGhlIHBsdWdpbiwgY29uc29saWRhdGluZyByZXBldGl0aXZlIGNvZGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgICAqIEBmaXJlcyBQbHVnaW4jZGVzdHJveWVkXG4gICAgICovXG4gICAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gdW5yZWdpc3RlclBsdWdpbihwbHVnaW4pIHtcbiAgICAgIHZhciBwbHVnaW5OYW1lID0gaHlwaGVuYXRlKGZ1bmN0aW9uTmFtZShwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKS5jb25zdHJ1Y3RvcikpO1xuXG4gICAgICB0aGlzLl91dWlkcy5zcGxpY2UodGhpcy5fdXVpZHMuaW5kZXhPZihwbHVnaW4udXVpZCksIDEpO1xuICAgICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUpLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGhhcyBiZWVuIGRlc3Ryb3llZC5cbiAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgKi9cbiAgICAgIC50cmlnZ2VyKCdkZXN0cm95ZWQuemYuJyArIHBsdWdpbk5hbWUpO1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBwbHVnaW4pIHtcbiAgICAgICAgcGx1Z2luW3Byb3BdID0gbnVsbDsgLy9jbGVhbiB1cCBzY3JpcHQgdG8gcHJlcCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBDYXVzZXMgb25lIG9yIG1vcmUgYWN0aXZlIHBsdWdpbnMgdG8gcmUtaW5pdGlhbGl6ZSwgcmVzZXR0aW5nIGV2ZW50IGxpc3RlbmVycywgcmVjYWxjdWxhdGluZyBwb3NpdGlvbnMsIGV0Yy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2lucyAtIG9wdGlvbmFsIHN0cmluZyBvZiBhbiBpbmRpdmlkdWFsIHBsdWdpbiBrZXksIGF0dGFpbmVkIGJ5IGNhbGxpbmcgYCQoZWxlbWVudCkuZGF0YSgncGx1Z2luTmFtZScpYCwgb3Igc3RyaW5nIG9mIGEgcGx1Z2luIGNsYXNzIGkuZS4gYCdkcm9wZG93bidgXG4gICAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICAgKi9cbiAgICByZUluaXQ6IGZ1bmN0aW9uIHJlSW5pdChwbHVnaW5zKSB7XG4gICAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiAkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzSlEpIHtcbiAgICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgcGx1Z2lucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGx1Z2lucyksXG4gICAgICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgICAgZm5zID0ge1xuICAgICAgICAgICAgJ29iamVjdCc6IGZ1bmN0aW9uIG9iamVjdChwbGdzKSB7XG4gICAgICAgICAgICAgIHBsZ3MuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIHAgPSBoeXBoZW5hdGUocCk7XG4gICAgICAgICAgICAgICAgJCgnW2RhdGEtJyArIHAgKyAnXScpLmZvdW5kYXRpb24oJ19pbml0Jyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdzdHJpbmcnOiBmdW5jdGlvbiBzdHJpbmcoKSB7XG4gICAgICAgICAgICAgIHBsdWdpbnMgPSBoeXBoZW5hdGUocGx1Z2lucyk7XG4gICAgICAgICAgICAgICQoJ1tkYXRhLScgKyBwbHVnaW5zICsgJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICd1bmRlZmluZWQnOiBmdW5jdGlvbiB1bmRlZmluZWQoKSB7XG4gICAgICAgICAgICAgIHRoaXNbJ29iamVjdCddKE9iamVjdC5rZXlzKF90aGlzLl9wbHVnaW5zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmbnNbdHlwZV0ocGx1Z2lucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICByZXR1cm4gcGx1Z2lucztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyBhIHJhbmRvbSBiYXNlLTM2IHVpZCB3aXRoIG5hbWVzcGFjaW5nXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIG51bWJlciBvZiByYW5kb20gYmFzZS0zNiBkaWdpdHMgZGVzaXJlZC4gSW5jcmVhc2UgZm9yIG1vcmUgcmFuZG9tIHN0cmluZ3MuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIG5hbWUgb2YgcGx1Z2luIHRvIGJlIGluY29ycG9yYXRlZCBpbiB1aWQsIG9wdGlvbmFsLlxuICAgICAqIEBkZWZhdWx0IHtTdHJpbmd9ICcnIC0gaWYgbm8gcGx1Z2luIG5hbWUgaXMgcHJvdmlkZWQsIG5vdGhpbmcgaXMgYXBwZW5kZWQgdG8gdGhlIHVpZC5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHVuaXF1ZSBpZFxuICAgICAqL1xuICAgIEdldFlvRGlnaXRzOiBmdW5jdGlvbiBHZXRZb0RpZ2l0cyhsZW5ndGgsIG5hbWVzcGFjZSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHx8IDY7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnBvdygzNiwgbGVuZ3RoICsgMSkgLSBNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMzYsIGxlbmd0aCkpLnRvU3RyaW5nKDM2KS5zbGljZSgxKSArIChuYW1lc3BhY2UgPyAnLScgKyBuYW1lc3BhY2UgOiAnJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHBsdWdpbnMgb24gYW55IGVsZW1lbnRzIHdpdGhpbiBgZWxlbWAgKGFuZCBgZWxlbWAgaXRzZWxmKSB0aGF0IGFyZW4ndCBhbHJlYWR5IGluaXRpYWxpemVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBsdWdpbnMgLSBBIGxpc3Qgb2YgcGx1Z2lucyB0byBpbml0aWFsaXplLiBMZWF2ZSB0aGlzIG91dCB0byBpbml0aWFsaXplIGV2ZXJ5dGhpbmcuXG4gICAgICovXG4gICAgcmVmbG93OiBmdW5jdGlvbiByZWZsb3coZWxlbSwgcGx1Z2lucykge1xuXG4gICAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGx1Z2lucyA9IE9iamVjdC5rZXlzKHRoaXMuX3BsdWdpbnMpO1xuICAgICAgfVxuICAgICAgLy8gSWYgcGx1Z2lucyBpcyBhIHN0cmluZywgY29udmVydCBpdCB0byBhbiBhcnJheSB3aXRoIG9uZSBpdGVtXG4gICAgICBlbHNlIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBwbHVnaW5zID0gW3BsdWdpbnNdO1xuICAgICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHBsdWdpblxuICAgICAgJC5lYWNoKHBsdWdpbnMsIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG4gICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgICAgdmFyIHBsdWdpbiA9IF90aGlzLl9wbHVnaW5zW25hbWVdO1xuXG4gICAgICAgIC8vIExvY2FsaXplIHRoZSBzZWFyY2ggdG8gYWxsIGVsZW1lbnRzIGluc2lkZSBlbGVtLCBhcyB3ZWxsIGFzIGVsZW0gaXRzZWxmLCB1bmxlc3MgZWxlbSA9PT0gZG9jdW1lbnRcbiAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKS5maW5kKCdbZGF0YS0nICsgbmFtZSArICddJykuYWRkQmFjaygnW2RhdGEtJyArIG5hbWUgKyAnXScpO1xuXG4gICAgICAgIC8vIEZvciBlYWNoIHBsdWdpbiBmb3VuZCwgaW5pdGlhbGl6ZSBpdFxuICAgICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgb3B0cyA9IHt9O1xuICAgICAgICAgIC8vIERvbid0IGRvdWJsZS1kaXAgb24gcGx1Z2luc1xuICAgICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVHJpZWQgdG8gaW5pdGlhbGl6ZSBcIiArIG5hbWUgKyBcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCRlbC5hdHRyKCdkYXRhLW9wdGlvbnMnKSkge1xuICAgICAgICAgICAgdmFyIHRoaW5nID0gJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpLnNwbGl0KCc7JykuZm9yRWFjaChmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICB2YXIgb3B0ID0gZS5zcGxpdCgnOicpLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwudHJpbSgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAkZWwuZGF0YSgnemZQbHVnaW4nLCBuZXcgcGx1Z2luKCQodGhpcyksIG9wdHMpKTtcbiAgICAgICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRGbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICB0cmFuc2l0aW9uZW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uZW5kKCRlbGVtKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgICAnV2Via2l0VHJhbnNpdGlvbic6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgICAgIH07XG4gICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgIGVuZDtcblxuICAgICAgZm9yICh2YXIgdCBpbiB0cmFuc2l0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW0uc3R5bGVbdF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZW5kID0gdHJhbnNpdGlvbnNbdF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgcmV0dXJuIGVuZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgWyRlbGVtXSk7XG4gICAgICAgIH0sIDEpO1xuICAgICAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGb3VuZGF0aW9uLnV0aWwgPSB7XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gZm9yIGFwcGx5aW5nIGEgZGVib3VuY2UgZWZmZWN0IHRvIGEgZnVuY3Rpb24gY2FsbC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIC0gRnVuY3Rpb24gdG8gYmUgY2FsbGVkIGF0IGVuZCBvZiB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheSAtIFRpbWUgaW4gbXMgdG8gZGVsYXkgdGhlIGNhbGwgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAgICovXG4gICAgdGhyb3R0bGU6IGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIGRlbGF5KSB7XG4gICAgICB2YXIgdGltZXIgPSBudWxsO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4gIC8vIFRPRE86IG5lZWQgd2F5IHRvIHJlZmxvdyB2cy4gcmUtaW5pdGlhbGl6ZVxuICAvKipcbiAgICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG1ldGhvZCAtIEFuIGFjdGlvbiB0byBwZXJmb3JtIG9uIHRoZSBjdXJyZW50IGpRdWVyeSBvYmplY3QuXG4gICAqL1xuICB2YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uIGZvdW5kYXRpb24obWV0aG9kKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgbWV0aG9kID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihtZXRob2QpLFxuICAgICAgICAkbWV0YSA9ICQoJ21ldGEuZm91bmRhdGlvbi1tcScpLFxuICAgICAgICAkbm9KUyA9ICQoJy5uby1qcycpO1xuXG4gICAgaWYgKCEkbWV0YS5sZW5ndGgpIHtcbiAgICAgICQoJzxtZXRhIGNsYXNzPVwiZm91bmRhdGlvbi1tcVwiPicpLmFwcGVuZFRvKGRvY3VtZW50LmhlYWQpO1xuICAgIH1cbiAgICBpZiAoJG5vSlMubGVuZ3RoKSB7XG4gICAgICAkbm9KUy5yZW1vdmVDbGFzcygnbm8tanMnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vbmVlZHMgdG8gaW5pdGlhbGl6ZSB0aGUgRm91bmRhdGlvbiBvYmplY3QsIG9yIGFuIGluZGl2aWR1YWwgcGx1Z2luLlxuICAgICAgRm91bmRhdGlvbi5NZWRpYVF1ZXJ5Ll9pbml0KCk7XG4gICAgICBGb3VuZGF0aW9uLnJlZmxvdyh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvL2FuIGluZGl2aWR1YWwgbWV0aG9kIHRvIGludm9rZSBvbiBhIHBsdWdpbiBvciBncm91cCBvZiBwbHVnaW5zXG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7IC8vY29sbGVjdCBhbGwgdGhlIGFyZ3VtZW50cywgaWYgbmVjZXNzYXJ5XG4gICAgICB2YXIgcGx1Z0NsYXNzID0gdGhpcy5kYXRhKCd6ZlBsdWdpbicpOyAvL2RldGVybWluZSB0aGUgY2xhc3Mgb2YgcGx1Z2luXG5cbiAgICAgIGlmIChwbHVnQ2xhc3MgIT09IHVuZGVmaW5lZCAmJiBwbHVnQ2xhc3NbbWV0aG9kXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vbWFrZSBzdXJlIGJvdGggdGhlIGNsYXNzIGFuZCBtZXRob2QgZXhpc3RcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgLy9pZiB0aGVyZSdzIG9ubHkgb25lLCBjYWxsIGl0IGRpcmVjdGx5LlxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KHBsdWdDbGFzcywgYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICAgICAgLy9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgICAgcGx1Z0NsYXNzW21ldGhvZF0uYXBwbHkoJChlbCkuZGF0YSgnemZQbHVnaW4nKSwgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vZXJyb3IgZm9yIG5vIGNsYXNzIG9yIG5vIG1ldGhvZFxuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJXZSdyZSBzb3JyeSwgJ1wiICsgbWV0aG9kICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUgbWV0aG9kIGZvciBcIiArIChwbHVnQ2xhc3MgPyBmdW5jdGlvbk5hbWUocGx1Z0NsYXNzKSA6ICd0aGlzIGVsZW1lbnQnKSArICcuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignV2VcXCdyZSBzb3JyeSwgJyArIHR5cGUgKyAnIGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlci4gWW91IG11c3QgdXNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWV0aG9kIHlvdSB3aXNoIHRvIGludm9rZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgd2luZG93LkZvdW5kYXRpb24gPSBGb3VuZGF0aW9uO1xuICAkLmZuLmZvdW5kYXRpb24gPSBmb3VuZGF0aW9uO1xuXG4gIC8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIURhdGUubm93IHx8ICF3aW5kb3cuRGF0ZS5ub3cpIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH07XG5cbiAgICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsraSkge1xuICAgICAgdmFyIHZwID0gdmVuZG9yc1tpXTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnAgKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnAgKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdnAgKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgfVxuICAgIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIHx8ICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7XG4gICAgICAgIH0sIG5leHRUaW1lIC0gbm93KTtcbiAgICAgIH07XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjbGVhclRpbWVvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBvbHlmaWxsIGZvciBwZXJmb3JtYW5jZS5ub3csIHJlcXVpcmVkIGJ5IHJBRlxuICAgICAqL1xuICAgIGlmICghd2luZG93LnBlcmZvcm1hbmNlIHx8ICF3aW5kb3cucGVyZm9ybWFuY2Uubm93KSB7XG4gICAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxuICAgICAgICBub3c6IGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KSgpO1xuICBpZiAoIUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKSB7XG4gICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAob1RoaXMpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBjbG9zZXN0IHRoaW5nIHBvc3NpYmxlIHRvIHRoZSBFQ01BU2NyaXB0IDVcbiAgICAgICAgLy8gaW50ZXJuYWwgSXNDYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYUFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgIGZUb0JpbmQgPSB0aGlzLFxuICAgICAgICAgIGZOT1AgPSBmdW5jdGlvbiBmTk9QKCkge30sXG4gICAgICAgICAgZkJvdW5kID0gZnVuY3Rpb24gZkJvdW5kKCkge1xuICAgICAgICByZXR1cm4gZlRvQmluZC5hcHBseSh0aGlzIGluc3RhbmNlb2YgZk5PUCA/IHRoaXMgOiBvVGhpcywgYUFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLnByb3RvdHlwZSkge1xuICAgICAgICAvLyBuYXRpdmUgZnVuY3Rpb25zIGRvbid0IGhhdmUgYSBwcm90b3R5cGVcbiAgICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICAgIH1cbiAgICAgIGZCb3VuZC5wcm90b3R5cGUgPSBuZXcgZk5PUCgpO1xuXG4gICAgICByZXR1cm4gZkJvdW5kO1xuICAgIH07XG4gIH1cbiAgLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG4gIGZ1bmN0aW9uIGZ1bmN0aW9uTmFtZShmbikge1xuICAgIGlmIChGdW5jdGlvbi5wcm90b3R5cGUubmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgICAgdmFyIHJlc3VsdHMgPSBmdW5jTmFtZVJlZ2V4LmV4ZWMoZm4udG9TdHJpbmcoKSk7XG4gICAgICByZXR1cm4gcmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDEgPyByZXN1bHRzWzFdLnRyaW0oKSA6IFwiXCI7XG4gICAgfSBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZuLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpIHtcbiAgICBpZiAoJ3RydWUnID09PSBzdHIpIHJldHVybiB0cnVlO2Vsc2UgaWYgKCdmYWxzZScgPT09IHN0cikgcmV0dXJuIGZhbHNlO2Vsc2UgaWYgKCFpc05hTihzdHIgKiAxKSkgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIC8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4gIC8vIFRoYW5rIHlvdTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvODk1NTU4MFxuICBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICB9XG59KGpRdWVyeSk7XG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfXJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbiFmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiBPZmZDYW52YXMgbW9kdWxlLlxuICAgKiBAbW9kdWxlIGZvdW5kYXRpb24ub2ZmY2FudmFzXG4gICAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAgICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gICAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAgICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAgICovXG5cbiAgdmFyIE9mZkNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIG9mZi1jYW52YXMgd3JhcHBlci5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAZmlyZXMgT2ZmQ2FudmFzI2luaXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gaW5pdGlhbGl6ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgZnVuY3Rpb24gT2ZmQ2FudmFzKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPZmZDYW52YXMpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBPZmZDYW52YXMuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gJCgpO1xuICAgICAgdGhpcy4kdHJpZ2dlcnMgPSAkKCk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdPZmZDYW52YXMnKTtcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ09mZkNhbnZhcycsIHtcbiAgICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYnkgYWRkaW5nIHRoZSBleGl0IG92ZXJsYXkgKGlmIG5lZWRlZCkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICAgIF9jcmVhdGVDbGFzcyhPZmZDYW52YXMsIFt7XG4gICAgICBrZXk6ICdfaW5pdCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcblxuICAgICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy10cmFuc2l0aW9uLScgKyB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbik7XG5cbiAgICAgICAgLy8gRmluZCB0cmlnZ2VycyB0aGF0IGFmZmVjdCB0aGlzIGVsZW1lbnQgYW5kIGFkZCBhcmlhLWV4cGFuZGVkIHRvIHRoZW1cbiAgICAgICAgdGhpcy4kdHJpZ2dlcnMgPSAkKGRvY3VtZW50KS5maW5kKCdbZGF0YS1vcGVuPVwiJyArIGlkICsgJ1wiXSwgW2RhdGEtY2xvc2U9XCInICsgaWQgKyAnXCJdLCBbZGF0YS10b2dnbGU9XCInICsgaWQgKyAnXCJdJykuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAgICAgLy8gQWRkIGFuIG92ZXJsYXkgb3ZlciB0aGUgY29udGVudCBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdmFyIG92ZXJsYXlQb3NpdGlvbiA9ICQodGhpcy4kZWxlbWVudCkuY3NzKFwicG9zaXRpb25cIikgPT09ICdmaXhlZCcgPyAnaXMtb3ZlcmxheS1maXhlZCcgOiAnaXMtb3ZlcmxheS1hYnNvbHV0ZSc7XG4gICAgICAgICAgb3ZlcmxheS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2pzLW9mZi1jYW52YXMtb3ZlcmxheSAnICsgb3ZlcmxheVBvc2l0aW9uKTtcbiAgICAgICAgICB0aGlzLiRvdmVybGF5ID0gJChvdmVybGF5KTtcbiAgICAgICAgICBpZiAob3ZlcmxheVBvc2l0aW9uID09PSAnaXMtb3ZlcmxheS1maXhlZCcpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQodGhpcy4kb3ZlcmxheSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuc2libGluZ3MoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5hcHBlbmQodGhpcy4kb3ZlcmxheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMucmV2ZWFsT24gPSB0aGlzLm9wdGlvbnMucmV2ZWFsT24gfHwgdGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyhyZXZlYWwtZm9yLW1lZGl1bXxyZXZlYWwtZm9yLWxhcmdlKS9nKVswXS5zcGxpdCgnLScpWzJdO1xuICAgICAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCdbZGF0YS1vZmYtY2FudmFzXScpWzBdKS50cmFuc2l0aW9uRHVyYXRpb24pICogMTAwMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG9mZi1jYW52YXMgd3JhcHBlciBhbmQgdGhlIGV4aXQgb3ZlcmxheS5cbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnX2V2ZW50cycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5vZmZjYW52YXMnKS5vbih7XG4gICAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAgICAgJ2tleWRvd24uemYub2ZmY2FudmFzJzogdGhpcy5faGFuZGxlS2V5Ym9hcmQuYmluZCh0aGlzKVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID8gdGhpcy4kb3ZlcmxheSA6ICQoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKTtcbiAgICAgICAgICAkdGFyZ2V0Lm9uKHsgJ2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEFwcGxpZXMgZXZlbnQgbGlzdGVuZXIgZm9yIGVsZW1lbnRzIHRoYXQgd2lsbCByZXZlYWwgYXQgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ19zZXRNUUNoZWNrZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRNUUNoZWNrZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXZlYWwodHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5vbmUoJ2xvYWQuemYub2ZmY2FudmFzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChfdGhpcy5vcHRpb25zLnJldmVhbE9uKSkge1xuICAgICAgICAgICAgX3RoaXMucmV2ZWFsKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSGFuZGxlcyB0aGUgcmV2ZWFsaW5nL2hpZGluZyB0aGUgb2ZmLWNhbnZhcyBhdCBicmVha3BvaW50cywgbm90IHRoZSBzYW1lIGFzIG9wZW4uXG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmV2ZWFsZWQgLSB0cnVlIGlmIGVsZW1lbnQgc2hvdWxkIGJlIHJldmVhbGVkLlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JldmVhbCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmV2ZWFsKGlzUmV2ZWFsZWQpIHtcbiAgICAgICAgdmFyICRjbG9zZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWNsb3NlXScpO1xuICAgICAgICBpZiAoaXNSZXZlYWxlZCkge1xuICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICB0aGlzLmlzUmV2ZWFsZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignb3Blbi56Zi50cmlnZ2VyIHRvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgaWYgKCRjbG9zZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAkY2xvc2VyLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pc1JldmVhbGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5vbih7XG4gICAgICAgICAgICAnb3Blbi56Zi50cmlnZ2VyJzogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCRjbG9zZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAkY2xvc2VyLnNob3coKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTdG9wcyBzY3JvbGxpbmcgb2YgdGhlIGJvZHkgd2hlbiBvZmZjYW52YXMgaXMgb3BlbiBvbiBtb2JpbGUgU2FmYXJpIGFuZCBvdGhlciB0cm91Ymxlc29tZSBicm93c2Vycy5cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ19zdG9wU2Nyb2xsaW5nJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RvcFNjcm9sbGluZyhldmVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIFRha2VuIGFuZCBhZGFwdGVkIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjg4OTQ0Ny9wcmV2ZW50LWZ1bGwtcGFnZS1zY3JvbGxpbmctaW9zXG4gICAgICAvLyBPbmx5IHJlYWxseSB3b3JrcyBmb3IgeSwgbm90IHN1cmUgaG93IHRvIGV4dGVuZCB0byB4IG9yIGlmIHdlIG5lZWQgdG8uXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfcmVjb3JkU2Nyb2xsYWJsZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlY29yZFNjcm9sbGFibGUoZXZlbnQpIHtcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzOyAvLyBjYWxsZWQgZnJvbSBldmVudCBoYW5kbGVyIGNvbnRleHQgd2l0aCB0aGlzIGFzIGVsZW1cblxuICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlIChjb250ZW50IG92ZXJmbG93cyksIHRoZW4uLi5cbiAgICAgICAgaWYgKGVsZW0uc2Nyb2xsSGVpZ2h0ICE9PSBlbGVtLmNsaWVudEhlaWdodCkge1xuICAgICAgICAgIC8vIElmIHdlJ3JlIGF0IHRoZSB0b3AsIHNjcm9sbCBkb3duIG9uZSBwaXhlbCB0byBhbGxvdyBzY3JvbGxpbmcgdXBcbiAgICAgICAgICBpZiAoZWxlbS5zY3JvbGxUb3AgPT09IDApIHtcbiAgICAgICAgICAgIGVsZW0uc2Nyb2xsVG9wID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gSWYgd2UncmUgYXQgdGhlIGJvdHRvbSwgc2Nyb2xsIHVwIG9uZSBwaXhlbCB0byBhbGxvdyBzY3JvbGxpbmcgZG93blxuICAgICAgICAgIGlmIChlbGVtLnNjcm9sbFRvcCA9PT0gZWxlbS5zY3JvbGxIZWlnaHQgLSBlbGVtLmNsaWVudEhlaWdodCkge1xuICAgICAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSBlbGVtLnNjcm9sbEhlaWdodCAtIGVsZW0uY2xpZW50SGVpZ2h0IC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxlbS5hbGxvd1VwID0gZWxlbS5zY3JvbGxUb3AgPiAwO1xuICAgICAgICBlbGVtLmFsbG93RG93biA9IGVsZW0uc2Nyb2xsVG9wIDwgZWxlbS5zY3JvbGxIZWlnaHQgLSBlbGVtLmNsaWVudEhlaWdodDtcbiAgICAgICAgZWxlbS5sYXN0WSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQucGFnZVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnX3N0b3BTY3JvbGxQcm9wYWdhdGlvbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3N0b3BTY3JvbGxQcm9wYWdhdGlvbihldmVudCkge1xuICAgICAgICB2YXIgZWxlbSA9IHRoaXM7IC8vIGNhbGxlZCBmcm9tIGV2ZW50IGhhbmRsZXIgY29udGV4dCB3aXRoIHRoaXMgYXMgZWxlbVxuICAgICAgICB2YXIgdXAgPSBldmVudC5wYWdlWSA8IGVsZW0ubGFzdFk7XG4gICAgICAgIHZhciBkb3duID0gIXVwO1xuICAgICAgICBlbGVtLmxhc3RZID0gZXZlbnQucGFnZVk7XG5cbiAgICAgICAgaWYgKHVwICYmIGVsZW0uYWxsb3dVcCB8fCBkb3duICYmIGVsZW0uYWxsb3dEb3duKSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIE9wZW5zIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0cmlnZ2VyIC0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgb2ZmLWNhbnZhcyB0byBvcGVuLlxuICAgICAgICogQGZpcmVzIE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnb3BlbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbihldmVudCwgdHJpZ2dlcikge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpIHx8IHRoaXMuaXNSZXZlYWxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgdGhpcy4kbGFzdFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvID09PSAndG9wJykge1xuICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZm9yY2VUbyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgICAgICogQGV2ZW50IE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1vcGVuJyk7XG5cbiAgICAgICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKS50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAgICAgLy8gSWYgYGNvbnRlbnRTY3JvbGxgIGlzIHNldCB0byBmYWxzZSwgYWRkIGNsYXNzIGFuZCBkaXNhYmxlIHNjcm9sbGluZyBvbiB0b3VjaCBkZXZpY2VzLlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRTY3JvbGwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpcy1vZmYtY2FudmFzLW9wZW4nKS5vbigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5vbigndG91Y2hzdGFydCcsIHRoaXMuX3JlY29yZFNjcm9sbGFibGUpO1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3RvdWNobW92ZScsIHRoaXMuX3N0b3BTY3JvbGxQcm9wYWdhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgPT09IHRydWUgJiYgdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnaXMtY2xvc2FibGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKHRoaXMuJGVsZW1lbnQpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5maW5kKCdhLCBidXR0b24nKS5lcSgwKS5mb2N1cygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFwRm9jdXMgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENsb3NlcyB0aGUgb2ZmLWNhbnZhcyBtZW51LlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICAgICAqIEBmaXJlcyBPZmZDYW52YXMjY2xvc2VkXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Nsb3NlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZShjYikge1xuICAgICAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgICAgICogQGV2ZW50IE9mZkNhbnZhcyNjbG9zZWRcbiAgICAgICAgICovXG4gICAgICAgIC50cmlnZ2VyKCdjbG9zZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAgICAgLy8gSWYgYGNvbnRlbnRTY3JvbGxgIGlzIHNldCB0byBmYWxzZSwgcmVtb3ZlIGNsYXNzIGFuZCByZS1lbmFibGUgc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXMuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudFNjcm9sbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLW9mZi1jYW52YXMtb3BlbicpLm9mZigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3RvdWNoc3RhcnQnLCB0aGlzLl9yZWNvcmRTY3JvbGxhYmxlKTtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbFByb3BhZ2F0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLiRvdmVybGF5LnJlbW92ZUNsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayA9PT0gdHJ1ZSAmJiB0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLiRvdmVybGF5LnJlbW92ZUNsYXNzKCdpcy1jbG9zYWJsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWxlYXNlRm9jdXModGhpcy4kZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBUb2dnbGVzIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbiBvciBjbG9zZWQuXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0cmlnZ2VyIC0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgb2ZmLWNhbnZhcyB0byBvcGVuLlxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICd0b2dnbGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZShldmVudCwgdHJpZ2dlcikge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgICAgdGhpcy5jbG9zZShldmVudCwgdHJpZ2dlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vcGVuKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZXMga2V5Ym9hcmQgaW5wdXQgd2hlbiBkZXRlY3RlZC4gV2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLCB0aGUgb2ZmLWNhbnZhcyBtZW51IGNsb3NlcywgYW5kIGZvY3VzIGlzIHJlc3RvcmVkIHRvIHRoZSBlbGVtZW50IHRoYXQgb3BlbmVkIHRoZSBtZW51LlxuICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfaGFuZGxlS2V5Ym9hcmQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVLZXlib2FyZChlKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdPZmZDYW52YXMnLCB7XG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgICAgX3RoaXMyLmNsb3NlKCk7XG4gICAgICAgICAgICBfdGhpczIuJGxhc3RUcmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIGhhbmRsZWQoKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGVzdHJveXMgdGhlIG9mZmNhbnZhcyBwbHVnaW4uXG4gICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpO1xuICAgICAgICB0aGlzLiRvdmVybGF5Lm9mZignLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gT2ZmQ2FudmFzO1xuICB9KCk7XG5cbiAgT2ZmQ2FudmFzLmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICAqIEFsbG93IHRoZSB1c2VyIHRvIGNsaWNrIG91dHNpZGUgb2YgdGhlIG1lbnUgdG8gY2xvc2UgaXQuXG4gICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBjbG9zZU9uQ2xpY2s6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIG92ZXJsYXkgb24gdG9wIG9mIGBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdYC5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIGNvbnRlbnRPdmVybGF5OiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlL2Rpc2FibGUgc2Nyb2xsaW5nIG9mIHRoZSBtYWluIGNvbnRlbnQgd2hlbiBhbiBvZmYgY2FudmFzIHBhbmVsIGlzIG9wZW4uXG4gICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBjb250ZW50U2Nyb2xsOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogQW1vdW50IG9mIHRpbWUgaW4gbXMgdGhlIG9wZW4gYW5kIGNsb3NlIHRyYW5zaXRpb24gcmVxdWlyZXMuIElmIG5vbmUgc2VsZWN0ZWQsIHB1bGxzIGZyb20gYm9keSBzdHlsZS5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdHJhbnNpdGlvblRpbWU6IDAsXG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHRyYW5zaXRpb24gZm9yIHRoZSBvZmZjYW52YXMgbWVudS4gT3B0aW9ucyBhcmUgJ3B1c2gnLCAnZGV0YWNoZWQnIG9yICdzbGlkZScuXG4gICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQGRlZmF1bHQgcHVzaFxuICAgICAqL1xuICAgIHRyYW5zaXRpb246ICdwdXNoJyxcblxuICAgIC8qKlxuICAgICAqIEZvcmNlIHRoZSBwYWdlIHRvIHNjcm9sbCB0byB0b3Agb3IgYm90dG9tIG9uIG9wZW4uXG4gICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBmb3JjZVRvOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBpc1JldmVhbGVkOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgcmV2ZWFsT246IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBGb3JjZSBmb2N1cyB0byB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uIElmIHRydWUsIHdpbGwgZm9jdXMgdGhlIG9wZW5pbmcgdHJpZ2dlciBvbiBjbG9zZS5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIENsYXNzIHVzZWQgdG8gZm9yY2UgYW4gb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuLiBGb3VuZGF0aW9uIGRlZmF1bHRzIGZvciB0aGlzIGFyZSBgcmV2ZWFsLWZvci1sYXJnZWAgJiBgcmV2ZWFsLWZvci1tZWRpdW1gLlxuICAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBkZWZhdWx0IHJldmVhbC1mb3ItXG4gICAgICogQHRvZG8gaW1wcm92ZSB0aGUgcmVnZXggdGVzdGluZyBmb3IgdGhpcy5cbiAgICAgKi9cbiAgICByZXZlYWxDbGFzczogJ3JldmVhbC1mb3ItJyxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIG9wdGlvbmFsIGZvY3VzIHRyYXBwaW5nIHdoZW4gb3BlbmluZyBhbiBvZmZjYW52YXMuIFNldHMgdGFiaW5kZXggb2YgW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XSB0byAtMSBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3Nlcy5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICB0cmFwRm9jdXM6IGZhbHNlXG4gIH07XG5cbiAgLy8gV2luZG93IGV4cG9ydHNcbiAgRm91bmRhdGlvbi5wbHVnaW4oT2ZmQ2FudmFzLCAnT2ZmQ2FudmFzJyk7XG59KGpRdWVyeSk7XG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuIWZ1bmN0aW9uICgkKSB7XG5cbiAgLyoqXG4gICAqIE9yYml0IG1vZHVsZS5cbiAgICogQG1vZHVsZSBmb3VuZGF0aW9uLm9yYml0XG4gICAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAgICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAgICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gICAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudG91Y2hcbiAgICovXG5cbiAgdmFyIE9yYml0ID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvcmJpdCBjYXJvdXNlbC5cbiAgICAqIEBjbGFzc1xuICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBPcmJpdCBDYXJvdXNlbC5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIE9yYml0KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmJpdCk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9yYml0LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcblxuICAgICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT3JiaXQnKTtcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ09yYml0Jywge1xuICAgICAgICAnbHRyJzoge1xuICAgICAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgICAgfSxcbiAgICAgICAgJ3J0bCc6IHtcbiAgICAgICAgICAnQVJST1dfTEVGVCc6ICduZXh0JyxcbiAgICAgICAgICAnQVJST1dfUklHSFQnOiAncHJldmlvdXMnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMsIHNldHRpbmcgYXR0cmlidXRlcywgYW5kIHN0YXJ0aW5nIHRoZSBhbmltYXRpb24uXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwcml2YXRlXG4gICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKE9yYml0LCBbe1xuICAgICAga2V5OiAnX2luaXQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICAvLyBAVE9ETzogY29uc2lkZXIgZGlzY3Vzc2lvbiBvbiBQUiAjOTI3OCBhYm91dCBET00gcG9sbHV0aW9uIGJ5IGNoYW5nZVNsaWRlXG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XG5cbiAgICAgICAgdGhpcy4kd3JhcHBlciA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpO1xuICAgICAgICB0aGlzLiRzbGlkZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpO1xuXG4gICAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKSxcbiAgICAgICAgICAgIGluaXRBY3RpdmUgPSB0aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJyksXG4gICAgICAgICAgICBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnb3JiaXQnKTtcblxuICAgICAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgICAgICdpZCc6IGlkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghaW5pdEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLiRzbGlkZXMuZXEoMCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlTVVJKSB7XG4gICAgICAgICAgdGhpcy4kc2xpZGVzLmFkZENsYXNzKCduby1tb3Rpb251aScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCgkaW1hZ2VzLCB0aGlzLl9wcmVwYXJlRm9yT3JiaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHJlcGFyZUZvck9yYml0KCk7IC8vaGVoZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgICAgdGhpcy5fbG9hZEJ1bGxldHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkgJiYgdGhpcy4kc2xpZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aGlzLmdlb1N5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSkge1xuICAgICAgICAgIC8vIGFsbG93IHdyYXBwZXIgdG8gYmUgZm9jdXNhYmxlIHRvIGVuYWJsZSBhcnJvdyBuYXZpZ2F0aW9uXG4gICAgICAgICAgdGhpcy4kd3JhcHBlci5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBDcmVhdGVzIGEgalF1ZXJ5IGNvbGxlY3Rpb24gb2YgYnVsbGV0cywgaWYgdGhleSBhcmUgYmVpbmcgdXNlZC5cbiAgICAgICogQGZ1bmN0aW9uXG4gICAgICAqIEBwcml2YXRlXG4gICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnX2xvYWRCdWxsZXRzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZEJ1bGxldHMoKSB7XG4gICAgICAgIHRoaXMuJGJ1bGxldHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmJveE9mQnVsbGV0cykuZmluZCgnYnV0dG9uJyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBTZXRzIGEgYHRpbWVyYCBvYmplY3Qgb24gdGhlIG9yYml0LCBhbmQgc3RhcnRzIHRoZSBjb3VudGVyIGZvciB0aGUgbmV4dCBzbGlkZS5cbiAgICAgICogQGZ1bmN0aW9uXG4gICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZ2VvU3luYycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2VvU3luYygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy50aW1lciA9IG5ldyBGb3VuZGF0aW9uLlRpbWVyKHRoaXMuJGVsZW1lbnQsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhpcy5vcHRpb25zLnRpbWVyRGVsYXksXG4gICAgICAgICAgaW5maW5pdGU6IGZhbHNlXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGltZXIuc3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIFNldHMgd3JhcHBlciBhbmQgc2xpZGUgaGVpZ2h0cyBmb3IgdGhlIG9yYml0LlxuICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICogQHByaXZhdGVcbiAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfcHJlcGFyZUZvck9yYml0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJlcGFyZUZvck9yYml0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9zZXRXcmFwcGVySGVpZ2h0KCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBDYWx1bGF0ZXMgdGhlIGhlaWdodCBvZiBlYWNoIHNsaWRlIGluIHRoZSBjb2xsZWN0aW9uLCBhbmQgdXNlcyB0aGUgdGFsbGVzdCBvbmUgZm9yIHRoZSB3cmFwcGVyIGhlaWdodC5cbiAgICAgICogQGZ1bmN0aW9uXG4gICAgICAqIEBwcml2YXRlXG4gICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIHdoZW4gY29tcGxldGUuXG4gICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnX3NldFdyYXBwZXJIZWlnaHQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRXcmFwcGVySGVpZ2h0KGNiKSB7XG4gICAgICAgIC8vcmV3cml0ZSB0aGlzIHRvIGBmb3JgIGxvb3BcbiAgICAgICAgdmFyIG1heCA9IDAsXG4gICAgICAgICAgICB0ZW1wLFxuICAgICAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtc2xpZGUnLCBjb3VudGVyKTtcblxuICAgICAgICAgIGlmIChfdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpWzBdICE9PSBfdGhpcy4kc2xpZGVzLmVxKGNvdW50ZXIpWzBdKSB7XG4gICAgICAgICAgICAvL2lmIG5vdCB0aGUgYWN0aXZlIHNsaWRlLCBzZXQgY3NzIHBvc2l0aW9uIGFuZCBkaXNwbGF5IHByb3BlcnR5XG4gICAgICAgICAgICAkKHRoaXMpLmNzcyh7ICdwb3NpdGlvbic6ICdyZWxhdGl2ZScsICdkaXNwbGF5JzogJ25vbmUnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjb3VudGVyID09PSB0aGlzLiRzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy4kd3JhcHBlci5jc3MoeyAnaGVpZ2h0JzogbWF4IH0pOyAvL29ubHkgY2hhbmdlIHRoZSB3cmFwcGVyIGhlaWdodCBwcm9wZXJ0eSBvbmNlLlxuICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgY2IobWF4KTtcbiAgICAgICAgICB9IC8vZmlyZSBjYWxsYmFjayB3aXRoIG1heCBoZWlnaHQgZGltZW5zaW9uLlxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBTZXRzIHRoZSBtYXgtaGVpZ2h0IG9mIGVhY2ggc2xpZGUuXG4gICAgICAqIEBmdW5jdGlvblxuICAgICAgKiBAcHJpdmF0ZVxuICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ19zZXRTbGlkZUhlaWdodCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFNsaWRlSGVpZ2h0KGhlaWdodCkge1xuICAgICAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJCh0aGlzKS5jc3MoJ21heC1oZWlnaHQnLCBoZWlnaHQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIGJhc2ljYWxseSBldmVyeXRoaW5nIHdpdGhpbiB0aGUgZWxlbWVudC5cbiAgICAgICogQGZ1bmN0aW9uXG4gICAgICAqIEBwcml2YXRlXG4gICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnX2V2ZW50cycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAvLyoqTm93IHVzaW5nIGN1c3RvbSBldmVudCAtIHRoYW5rcyB0bzoqKlxuICAgICAgICAvLyoqICAgICAgWW9oYWkgQXJhcmF0IG9mIFRvcm9udG8gICAgICAqKlxuICAgICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAvL1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnJlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbih7XG4gICAgICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9wcmVwYXJlRm9yT3JiaXQuYmluZCh0aGlzKVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN3aXBlKSB7XG4gICAgICAgICAgICB0aGlzLiRzbGlkZXMub2ZmKCdzd2lwZWxlZnQuemYub3JiaXQgc3dpcGVyaWdodC56Zi5vcmJpdCcpLm9uKCdzd2lwZWxlZnQuemYub3JiaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgICAgICAgfSkub24oJ3N3aXBlcmlnaHQuemYub3JiaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSkge1xuICAgICAgICAgICAgdGhpcy4kc2xpZGVzLm9uKCdjbGljay56Zi5vcmJpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJywgX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJykgPyBmYWxzZSA6IHRydWUpO1xuICAgICAgICAgICAgICBfdGhpcy50aW1lcltfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSA/ICdwYXVzZScgOiAnc3RhcnQnXSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF1c2VPbkhvdmVyKSB7XG4gICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZW50ZXIuemYub3JiaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGltZXIucGF1c2UoKTtcbiAgICAgICAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYub3JiaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMudGltZXIuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubmF2QnV0dG9ucykge1xuICAgICAgICAgICAgdmFyICRjb250cm9scyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubmV4dENsYXNzICsgJywgLicgKyB0aGlzLm9wdGlvbnMucHJldkNsYXNzKTtcbiAgICAgICAgICAgICRjb250cm9scy5hdHRyKCd0YWJpbmRleCcsIDApXG4gICAgICAgICAgICAvL2Fsc28gbmVlZCB0byBoYW5kbGUgZW50ZXIvcmV0dXJuIGFuZCBzcGFjZWJhciBrZXkgcHJlc3Nlc1xuICAgICAgICAgICAgLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoJCh0aGlzKS5oYXNDbGFzcyhfdGhpcy5vcHRpb25zLm5leHRDbGFzcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgICAgICB0aGlzLiRidWxsZXRzLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKC9pcy1hY3RpdmUvZy50ZXN0KHRoaXMuY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfSAvL2lmIHRoaXMgaXMgYWN0aXZlLCBraWNrIG91dCBvZiBmdW5jdGlvbi5cbiAgICAgICAgICAgICAgdmFyIGlkeCA9ICQodGhpcykuZGF0YSgnc2xpZGUnKSxcbiAgICAgICAgICAgICAgICAgIGx0ciA9IGlkeCA+IF90aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZGF0YSgnc2xpZGUnKSxcbiAgICAgICAgICAgICAgICAgICRzbGlkZSA9IF90aGlzLiRzbGlkZXMuZXEoaWR4KTtcblxuICAgICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShsdHIsICRzbGlkZSwgaWR4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy4kd3JhcHBlci5hZGQodGhpcy4kYnVsbGV0cykub24oJ2tleWRvd24uemYub3JiaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICAgICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdPcmJpdCcsIHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwcmV2aW91czogZnVuY3Rpb24gcHJldmlvdXMoKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbiBoYW5kbGVkKCkge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgYnVsbGV0IGlzIGZvY3VzZWQsIG1ha2Ugc3VyZSBmb2N1cyBtb3Zlc1xuICAgICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKF90aGlzLiRidWxsZXRzKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kYnVsbGV0cy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXNldHMgT3JiaXQgc28gaXQgY2FuIGJlIHJlaW5pdGlhbGl6ZWRcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnX3Jlc2V0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzZXQoKSB7XG4gICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZXJlIGFyZSBubyBzbGlkZXMgKGZpcnN0IHJ1bilcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLiRzbGlkZXMgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy4kc2xpZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgb2xkIGV2ZW50c1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYub3JiaXQnKS5maW5kKCcqJykub2ZmKCcuemYub3JiaXQnKTtcblxuICAgICAgICAgIC8vIFJlc3RhcnQgdGltZXIgaWYgYXV0b1BsYXkgaXMgZW5hYmxlZFxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMudGltZXIucmVzdGFydCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJlc2V0IGFsbCBzbGlkZGVzXG4gICAgICAgICAgdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAkKGVsKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWFjdGl2ZSBpcy1pbicpLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpLmhpZGUoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFNob3cgdGhlIGZpcnN0IHNsaWRlXG4gICAgICAgICAgdGhpcy4kc2xpZGVzLmZpcnN0KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLnNob3coKTtcblxuICAgICAgICAgIC8vIFRyaWdnZXJzIHdoZW4gdGhlIHNsaWRlIGhhcyBmaW5pc2hlZCBhbmltYXRpbmdcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3NsaWRlY2hhbmdlLnpmLm9yYml0JywgW3RoaXMuJHNsaWRlcy5maXJzdCgpXSk7XG5cbiAgICAgICAgICAvLyBTZWxlY3QgZmlyc3QgYnVsbGV0IGlmIGJ1bGxldHMgYXJlIHByZXNlbnRcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUJ1bGxldHMoMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBDaGFuZ2VzIHRoZSBjdXJyZW50IHNsaWRlIHRvIGEgbmV3IG9uZS5cbiAgICAgICogQGZ1bmN0aW9uXG4gICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMVFIgLSBmbGFnIGlmIHRoZSBzbGlkZSBzaG91bGQgbW92ZSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gY2hvc2VuU2xpZGUgLSB0aGUgalF1ZXJ5IGVsZW1lbnQgb2YgdGhlIHNsaWRlIHRvIHNob3cgbmV4dCwgaWYgb25lIGlzIHNlbGVjdGVkLlxuICAgICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gdGhlIGluZGV4IG9mIHRoZSBuZXcgc2xpZGUgaW4gaXRzIGNvbGxlY3Rpb24sIGlmIG9uZSBjaG9zZW4uXG4gICAgICAqIEBmaXJlcyBPcmJpdCNzbGlkZWNoYW5nZVxuICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NoYW5nZVNsaWRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VTbGlkZShpc0xUUiwgY2hvc2VuU2xpZGUsIGlkeCkge1xuICAgICAgICBpZiAoIXRoaXMuJHNsaWRlcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBEb24ndCBmcmVhayBvdXQgaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBjbGVhbnVwXG4gICAgICAgIHZhciAkY3VyU2xpZGUgPSB0aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZXEoMCk7XG5cbiAgICAgICAgaWYgKC9tdWkvZy50ZXN0KCRjdXJTbGlkZVswXS5jbGFzc05hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IC8vaWYgdGhlIHNsaWRlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcsIGtpY2sgb3V0IG9mIHRoZSBmdW5jdGlvblxuXG4gICAgICAgIHZhciAkZmlyc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5maXJzdCgpLFxuICAgICAgICAgICAgJGxhc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5sYXN0KCksXG4gICAgICAgICAgICBkaXJJbiA9IGlzTFRSID8gJ1JpZ2h0JyA6ICdMZWZ0JyxcbiAgICAgICAgICAgIGRpck91dCA9IGlzTFRSID8gJ0xlZnQnIDogJ1JpZ2h0JyxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgICRuZXdTbGlkZTtcblxuICAgICAgICBpZiAoIWNob3NlblNsaWRlKSB7XG4gICAgICAgICAgLy9tb3N0IG9mIHRoZSB0aW1lLCB0aGlzIHdpbGwgYmUgYXV0byBwbGF5ZWQgb3IgY2xpY2tlZCBmcm9tIHRoZSBuYXZCdXR0b25zLlxuICAgICAgICAgICRuZXdTbGlkZSA9IGlzTFRSID8gLy9pZiB3cmFwcGluZyBlbmFibGVkLCBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBgbmV4dGAgb3IgYHByZXZgIHNpYmxpbmcsIGlmIG5vdCwgc2VsZWN0IHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlIHRvIGZpbGwgaW4uIGlmIHdyYXBwaW5nIG5vdCBlbmFibGVkLCBhdHRlbXB0IHRvIHNlbGVjdCBgbmV4dGAgb3IgYHByZXZgLCBpZiB0aGVyZSdzIG5vdGhpbmcgdGhlcmUsIHRoZSBmdW5jdGlvbiB3aWxsIGtpY2sgb3V0IG9uIG5leHQgc3RlcC4gQ1JBWlkgTkVTVEVEIFRFUk5BUklFUyEhISEhXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5uZXh0KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKS5sZW5ndGggPyAkY3VyU2xpZGUubmV4dCgnLicgKyB0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcykgOiAkZmlyc3RTbGlkZSA6ICRjdXJTbGlkZS5uZXh0KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKSA6IC8vcGljayBuZXh0IHNsaWRlIGlmIG1vdmluZyBsZWZ0IHRvIHJpZ2h0XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5wcmV2KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKS5sZW5ndGggPyAkY3VyU2xpZGUucHJldignLicgKyB0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcykgOiAkbGFzdFNsaWRlIDogJGN1clNsaWRlLnByZXYoJy4nICsgdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpOyAvL3BpY2sgcHJldiBzbGlkZSBpZiBtb3ZpbmcgcmlnaHQgdG8gbGVmdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRuZXdTbGlkZSA9IGNob3NlblNsaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRuZXdTbGlkZS5sZW5ndGgpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAqIFRyaWdnZXJzIGJlZm9yZSB0aGUgbmV4dCBzbGlkZSBzdGFydHMgYW5pbWF0aW5nIGluIGFuZCBvbmx5IGlmIGEgbmV4dCBzbGlkZSBoYXMgYmVlbiBmb3VuZC5cbiAgICAgICAgICAqIEBldmVudCBPcmJpdCNiZWZvcmVzbGlkZWNoYW5nZVxuICAgICAgICAgICovXG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdiZWZvcmVzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFskY3VyU2xpZGUsICRuZXdTbGlkZV0pO1xuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgICAgICBpZHggPSBpZHggfHwgdGhpcy4kc2xpZGVzLmluZGV4KCRuZXdTbGlkZSk7IC8vZ3JhYiBpbmRleCB0byB1cGRhdGUgYnVsbGV0c1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQnVsbGV0cyhpZHgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlTVVJICYmICF0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbigkbmV3U2xpZGUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLmNzcyh7ICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsICd0b3AnOiAwIH0pLCB0aGlzLm9wdGlvbnNbJ2FuaW1JbkZyb20nICsgZGlySW5dLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICRuZXdTbGlkZS5jc3MoeyAncG9zaXRpb24nOiAncmVsYXRpdmUnLCAnZGlzcGxheSc6ICdibG9jaycgfSkuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQoJGN1clNsaWRlLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKSwgdGhpcy5vcHRpb25zWydhbmltT3V0VG8nICsgZGlyT3V0XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAkY3VyU2xpZGUucmVtb3ZlQXR0cignYXJpYS1saXZlJyk7XG4gICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmICFfdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRpbWVyLnJlc3RhcnQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvL2RvIHN0dWZmP1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWluJykucmVtb3ZlQXR0cignYXJpYS1saXZlJykuaGlkZSgpO1xuICAgICAgICAgICAgJG5ld1NsaWRlLmFkZENsYXNzKCdpcy1hY3RpdmUgaXMtaW4nKS5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJykuc2hvdygpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgICAgICB0aGlzLnRpbWVyLnJlc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBzbGlkZSBoYXMgZmluaXNoZWQgYW5pbWF0aW5nIGluLlxuICAgICAgICAgICogQGV2ZW50IE9yYml0I3NsaWRlY2hhbmdlXG4gICAgICAgICAgKi9cbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3NsaWRlY2hhbmdlLnpmLm9yYml0JywgWyRuZXdTbGlkZV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBVcGRhdGVzIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJ1bGxldHMsIGlmIGRpc3BsYXllZC5cbiAgICAgICogQGZ1bmN0aW9uXG4gICAgICAqIEBwcml2YXRlXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgc2xpZGUuXG4gICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnX3VwZGF0ZUJ1bGxldHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVCdWxsZXRzKGlkeCkge1xuICAgICAgICB2YXIgJG9sZEJ1bGxldCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuYm94T2ZCdWxsZXRzKS5maW5kKCcuaXMtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmJsdXIoKSxcbiAgICAgICAgICAgIHNwYW4gPSAkb2xkQnVsbGV0LmZpbmQoJ3NwYW46bGFzdCcpLmRldGFjaCgpLFxuICAgICAgICAgICAgJG5ld0J1bGxldCA9IHRoaXMuJGJ1bGxldHMuZXEoaWR4KS5hZGRDbGFzcygnaXMtYWN0aXZlJykuYXBwZW5kKHNwYW4pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogRGVzdHJveXMgdGhlIGNhcm91c2VsIGFuZCBoaWRlcyB0aGUgZWxlbWVudC5cbiAgICAgICogQGZ1bmN0aW9uXG4gICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5vcmJpdCcpLmZpbmQoJyonKS5vZmYoJy56Zi5vcmJpdCcpLmVuZCgpLmhpZGUoKTtcbiAgICAgICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBPcmJpdDtcbiAgfSgpO1xuXG4gIE9yYml0LmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICogVGVsbHMgdGhlIEpTIHRvIGxvb2sgZm9yIGFuZCBsb2FkQnVsbGV0cy5cbiAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAqL1xuICAgIGJ1bGxldHM6IHRydWUsXG4gICAgLyoqXG4gICAgKiBUZWxscyB0aGUgSlMgdG8gYXBwbHkgZXZlbnQgbGlzdGVuZXJzIHRvIG5hdiBidXR0b25zXG4gICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgKi9cbiAgICBuYXZCdXR0b25zOiB0cnVlLFxuICAgIC8qKlxuICAgICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgKiBAZGVmYXVsdCAnc2xpZGUtaW4tcmlnaHQnXG4gICAgKi9cbiAgICBhbmltSW5Gcm9tUmlnaHQ6ICdzbGlkZS1pbi1yaWdodCcsXG4gICAgLyoqXG4gICAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAqIEBkZWZhdWx0ICdzbGlkZS1vdXQtcmlnaHQnXG4gICAgKi9cbiAgICBhbmltT3V0VG9SaWdodDogJ3NsaWRlLW91dC1yaWdodCcsXG4gICAgLyoqXG4gICAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAqIEBkZWZhdWx0ICdzbGlkZS1pbi1sZWZ0J1xuICAgICpcbiAgICAqL1xuICAgIGFuaW1JbkZyb21MZWZ0OiAnc2xpZGUtaW4tbGVmdCcsXG4gICAgLyoqXG4gICAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAqIEBkZWZhdWx0ICdzbGlkZS1vdXQtbGVmdCdcbiAgICAqL1xuICAgIGFuaW1PdXRUb0xlZnQ6ICdzbGlkZS1vdXQtbGVmdCcsXG4gICAgLyoqXG4gICAgKiBBbGxvd3MgT3JiaXQgdG8gYXV0b21hdGljYWxseSBhbmltYXRlIG9uIHBhZ2UgbG9hZC5cbiAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAqL1xuICAgIGF1dG9QbGF5OiB0cnVlLFxuICAgIC8qKlxuICAgICogQW1vdW50IG9mIHRpbWUsIGluIG1zLCBiZXR3ZWVuIHNsaWRlIHRyYW5zaXRpb25zXG4gICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAqIEBkZWZhdWx0IDUwMDBcbiAgICAqL1xuICAgIHRpbWVyRGVsYXk6IDUwMDAsXG4gICAgLyoqXG4gICAgKiBBbGxvd3MgT3JiaXQgdG8gaW5maW5pdGVseSBsb29wIHRocm91Z2ggdGhlIHNsaWRlc1xuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICovXG4gICAgaW5maW5pdGVXcmFwOiB0cnVlLFxuICAgIC8qKlxuICAgICogQWxsb3dzIHRoZSBPcmJpdCBzbGlkZXMgdG8gYmluZCB0byBzd2lwZSBldmVudHMgZm9yIG1vYmlsZSwgcmVxdWlyZXMgYW4gYWRkaXRpb25hbCB1dGlsIGxpYnJhcnlcbiAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAqL1xuICAgIHN3aXBlOiB0cnVlLFxuICAgIC8qKlxuICAgICogQWxsb3dzIHRoZSB0aW1pbmcgZnVuY3Rpb24gdG8gcGF1c2UgYW5pbWF0aW9uIG9uIGhvdmVyLlxuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICovXG4gICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgIC8qKlxuICAgICogQWxsb3dzIE9yYml0IHRvIGJpbmQga2V5Ym9hcmQgZXZlbnRzIHRvIHRoZSBzbGlkZXIsIHRvIGFuaW1hdGUgZnJhbWVzIHdpdGggYXJyb3cga2V5c1xuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICovXG4gICAgYWNjZXNzaWJsZTogdHJ1ZSxcbiAgICAvKipcbiAgICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBvZiBPcmJpdFxuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgKiBAZGVmYXVsdCAnb3JiaXQtY29udGFpbmVyJ1xuICAgICovXG4gICAgY29udGFpbmVyQ2xhc3M6ICdvcmJpdC1jb250YWluZXInLFxuICAgIC8qKlxuICAgICogQ2xhc3MgYXBwbGllZCB0byBpbmRpdmlkdWFsIHNsaWRlcy5cbiAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICogQGRlZmF1bHQgJ29yYml0LXNsaWRlJ1xuICAgICovXG4gICAgc2xpZGVDbGFzczogJ29yYml0LXNsaWRlJyxcbiAgICAvKipcbiAgICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGJ1bGxldCBjb250YWluZXIuIFlvdSdyZSB3ZWxjb21lLlxuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgKiBAZGVmYXVsdCAnb3JiaXQtYnVsbGV0cydcbiAgICAqL1xuICAgIGJveE9mQnVsbGV0czogJ29yYml0LWJ1bGxldHMnLFxuICAgIC8qKlxuICAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYG5leHRgIG5hdmlnYXRpb24gYnV0dG9uLlxuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgKiBAZGVmYXVsdCAnb3JiaXQtbmV4dCdcbiAgICAqL1xuICAgIG5leHRDbGFzczogJ29yYml0LW5leHQnLFxuICAgIC8qKlxuICAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYHByZXZpb3VzYCBuYXZpZ2F0aW9uIGJ1dHRvbi5cbiAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICogQGRlZmF1bHQgJ29yYml0LXByZXZpb3VzJ1xuICAgICovXG4gICAgcHJldkNsYXNzOiAnb3JiaXQtcHJldmlvdXMnLFxuICAgIC8qKlxuICAgICogQm9vbGVhbiB0byBmbGFnIHRoZSBqcyB0byB1c2UgbW90aW9uIHVpIGNsYXNzZXMgb3Igbm90LiBEZWZhdWx0IHRvIHRydWUgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5LlxuICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICovXG4gICAgdXNlTVVJOiB0cnVlXG4gIH07XG5cbiAgLy8gV2luZG93IGV4cG9ydHNcbiAgRm91bmRhdGlvbi5wbHVnaW4oT3JiaXQsICdPcmJpdCcpO1xufShqUXVlcnkpO1xuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFRoaXMgdXRpbCB3YXMgY3JlYXRlZCBieSBNYXJpdXMgT2xiZXJ0eiAqXG4gKiBQbGVhc2UgdGhhbmsgTWFyaXVzIG9uIEdpdEh1YiAvb3dsYmVydHogKlxuICogb3IgdGhlIHdlYiBodHRwOi8vd3d3Lm1hcml1c29sYmVydHouZGUvICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4ndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbiAoJCkge1xuXG4gIHZhciBrZXlDb2RlcyA9IHtcbiAgICA5OiAnVEFCJyxcbiAgICAxMzogJ0VOVEVSJyxcbiAgICAyNzogJ0VTQ0FQRScsXG4gICAgMzI6ICdTUEFDRScsXG4gICAgMzc6ICdBUlJPV19MRUZUJyxcbiAgICAzODogJ0FSUk9XX1VQJyxcbiAgICAzOTogJ0FSUk9XX1JJR0hUJyxcbiAgICA0MDogJ0FSUk9XX0RPV04nXG4gIH07XG5cbiAgdmFyIGNvbW1hbmRzID0ge307XG5cbiAgdmFyIEtleWJvYXJkID0ge1xuICAgIGtleXM6IGdldEtleUNvZGVzKGtleUNvZGVzKSxcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgICAqIENhbiBiZSB1c2VkIGxpa2UgRm91bmRhdGlvbi5wYXJzZUtleShldmVudCkgPT09IEZvdW5kYXRpb24ua2V5cy5TUEFDRVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAgICovXG4gICAgcGFyc2VLZXk6IGZ1bmN0aW9uIHBhcnNlS2V5KGV2ZW50KSB7XG4gICAgICB2YXIga2V5ID0ga2V5Q29kZXNbZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZV0gfHwgU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC53aGljaCkudG9VcHBlckNhc2UoKTtcblxuICAgICAgLy8gUmVtb3ZlIHVuLXByaW50YWJsZSBjaGFyYWN0ZXJzLCBlLmcuIGZvciBgZnJvbUNoYXJDb2RlYCBjYWxscyBmb3IgQ1RSTCBvbmx5IGV2ZW50c1xuICAgICAga2V5ID0ga2V5LnJlcGxhY2UoL1xcVysvLCAnJyk7XG5cbiAgICAgIGlmIChldmVudC5zaGlmdEtleSkga2V5ID0gJ1NISUZUXycgKyBrZXk7XG4gICAgICBpZiAoZXZlbnQuY3RybEtleSkga2V5ID0gJ0NUUkxfJyArIGtleTtcbiAgICAgIGlmIChldmVudC5hbHRLZXkpIGtleSA9ICdBTFRfJyArIGtleTtcblxuICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHVuZGVyc2NvcmUsIGluIGNhc2Ugb25seSBtb2RpZmllcnMgd2VyZSB1c2VkIChlLmcuIG9ubHkgYENUUkxfQUxUYClcbiAgICAgIGtleSA9IGtleS5yZXBsYWNlKC9fJC8sICcnKTtcblxuICAgICAgcmV0dXJuIGtleTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgZ2l2ZW4gKGtleWJvYXJkKSBldmVudFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0c30gZnVuY3Rpb25zIC0gY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgdGhhdCBhcmUgdG8gYmUgZXhlY3V0ZWRcbiAgICAgKi9cbiAgICBoYW5kbGVLZXk6IGZ1bmN0aW9uIGhhbmRsZUtleShldmVudCwgY29tcG9uZW50LCBmdW5jdGlvbnMpIHtcbiAgICAgIHZhciBjb21tYW5kTGlzdCA9IGNvbW1hbmRzW2NvbXBvbmVudF0sXG4gICAgICAgICAga2V5Q29kZSA9IHRoaXMucGFyc2VLZXkoZXZlbnQpLFxuICAgICAgICAgIGNtZHMsXG4gICAgICAgICAgY29tbWFuZCxcbiAgICAgICAgICBmbjtcblxuICAgICAgaWYgKCFjb21tYW5kTGlzdCkgcmV0dXJuIGNvbnNvbGUud2FybignQ29tcG9uZW50IG5vdCBkZWZpbmVkIScpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG1lcmdlIGx0ciBhbmQgcnRsOiBpZiBkb2N1bWVudCBpcyBydGwsIHJ0bCBvdmVyd3JpdGVzIGx0ciBhbmQgdmljZSB2ZXJzYVxuICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgY21kcyA9ICQuZXh0ZW5kKHt9LCBjb21tYW5kTGlzdC5sdHIsIGNvbW1hbmRMaXN0LnJ0bCk7ZWxzZSBjbWRzID0gJC5leHRlbmQoe30sIGNvbW1hbmRMaXN0LnJ0bCwgY29tbWFuZExpc3QubHRyKTtcbiAgICAgIH1cbiAgICAgIGNvbW1hbmQgPSBjbWRzW2tleUNvZGVdO1xuXG4gICAgICBmbiA9IGZ1bmN0aW9uc1tjb21tYW5kXTtcbiAgICAgIGlmIChmbiAmJiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiAgaWYgZXhpc3RzXG4gICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCk7XG4gICAgICAgIGlmIChmdW5jdGlvbnMuaGFuZGxlZCB8fCB0eXBlb2YgZnVuY3Rpb25zLmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBleGVjdXRlIGZ1bmN0aW9uIHdoZW4gZXZlbnQgd2FzIGhhbmRsZWRcbiAgICAgICAgICBmdW5jdGlvbnMuaGFuZGxlZChyZXR1cm5WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmdW5jdGlvbnMudW5oYW5kbGVkIHx8IHR5cGVvZiBmdW5jdGlvbnMudW5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy51bmhhbmRsZWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiB0aGUgZ2l2ZW4gYCRlbGVtZW50YFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgICAqIEByZXR1cm4ge2pRdWVyeX0gJGZvY3VzYWJsZSAtIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIGAkZWxlbWVudGBcbiAgICAgKi9cbiAgICBmaW5kRm9jdXNhYmxlOiBmdW5jdGlvbiBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gICAgICBpZiAoISRlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkZWxlbWVudC5maW5kKCdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCAqW3RhYmluZGV4XSwgKltjb250ZW50ZWRpdGFibGVdJykuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCEkKHRoaXMpLmlzKCc6dmlzaWJsZScpIHx8ICQodGhpcykuYXR0cigndGFiaW5kZXgnKSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBuYW1lIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgICAqIEByZXR1cm4gU3RyaW5nIGNvbXBvbmVudE5hbWVcbiAgICAgKi9cblxuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3Rlcihjb21wb25lbnROYW1lLCBjbWRzKSB7XG4gICAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYXBzIHRoZSBmb2N1cyBpbiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gIHtqUXVlcnl9ICRlbGVtZW50ICBqUXVlcnkgb2JqZWN0IHRvIHRyYXAgdGhlIGZvdWNzIGludG8uXG4gICAgICovXG4gICAgdHJhcEZvY3VzOiBmdW5jdGlvbiB0cmFwRm9jdXMoJGVsZW1lbnQpIHtcbiAgICAgIHZhciAkZm9jdXNhYmxlID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKCRlbGVtZW50KSxcbiAgICAgICAgICAkZmlyc3RGb2N1c2FibGUgPSAkZm9jdXNhYmxlLmVxKDApLFxuICAgICAgICAgICRsYXN0Rm9jdXNhYmxlID0gJGZvY3VzYWJsZS5lcSgtMSk7XG5cbiAgICAgICRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnRyYXBmb2N1cycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSAkbGFzdEZvY3VzYWJsZVswXSAmJiBGb3VuZGF0aW9uLktleWJvYXJkLnBhcnNlS2V5KGV2ZW50KSA9PT0gJ1RBQicpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRmaXJzdEZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldCA9PT0gJGZpcnN0Rm9jdXNhYmxlWzBdICYmIEZvdW5kYXRpb24uS2V5Ym9hcmQucGFyc2VLZXkoZXZlbnQpID09PSAnU0hJRlRfVEFCJykge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJGxhc3RGb2N1c2FibGUuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbGVhc2VzIHRoZSB0cmFwcGVkIGZvY3VzIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICogQHBhcmFtICB7alF1ZXJ5fSAkZWxlbWVudCAgalF1ZXJ5IG9iamVjdCB0byByZWxlYXNlIHRoZSBmb2N1cyBmb3IuXG4gICAgICovXG4gICAgcmVsZWFzZUZvY3VzOiBmdW5jdGlvbiByZWxlYXNlRm9jdXMoJGVsZW1lbnQpIHtcbiAgICAgICRlbGVtZW50Lm9mZigna2V5ZG93bi56Zi50cmFwZm9jdXMnKTtcbiAgICB9XG4gIH07XG5cbiAgLypcbiAgICogQ29uc3RhbnRzIGZvciBlYXNpZXIgY29tcGFyaW5nLlxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICovXG4gIGZ1bmN0aW9uIGdldEtleUNvZGVzKGtjcykge1xuICAgIHZhciBrID0ge307XG4gICAgZm9yICh2YXIga2MgaW4ga2NzKSB7XG4gICAgICBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgICB9cmV0dXJuIGs7XG4gIH1cblxuICBGb3VuZGF0aW9uLktleWJvYXJkID0gS2V5Ym9hcmQ7XG59KGpRdWVyeSk7XG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4hZnVuY3Rpb24gKCQpIHtcblxuICAvLyBEZWZhdWx0IHNldCBvZiBtZWRpYSBxdWVyaWVzXG4gIHZhciBkZWZhdWx0UXVlcmllcyA9IHtcbiAgICAnZGVmYXVsdCc6ICdvbmx5IHNjcmVlbicsXG4gICAgbGFuZHNjYXBlOiAnb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gICAgcG9ydHJhaXQ6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAgIHJldGluYTogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICsgJ29ubHkgc2NyZWVuIGFuZCAobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICsgJ29ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwnICsgJ29ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCcgKyAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xuICB9O1xuXG4gIHZhciBNZWRpYVF1ZXJ5ID0ge1xuICAgIHF1ZXJpZXM6IFtdLFxuXG4gICAgY3VycmVudDogJycsXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgbWVkaWEgcXVlcnkgaGVscGVyLCBieSBleHRyYWN0aW5nIHRoZSBicmVha3BvaW50IGxpc3QgZnJvbSB0aGUgQ1NTIGFuZCBhY3RpdmF0aW5nIHRoZSBicmVha3BvaW50IHdhdGNoZXIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdDogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZXh0cmFjdGVkU3R5bGVzID0gJCgnLmZvdW5kYXRpb24tbXEnKS5jc3MoJ2ZvbnQtZmFtaWx5Jyk7XG4gICAgICB2YXIgbmFtZWRRdWVyaWVzO1xuXG4gICAgICBuYW1lZFF1ZXJpZXMgPSBwYXJzZVN0eWxlVG9PYmplY3QoZXh0cmFjdGVkU3R5bGVzKTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG5hbWVkUXVlcmllcykge1xuICAgICAgICBpZiAobmFtZWRRdWVyaWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICB2YWx1ZTogJ29ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAnICsgbmFtZWRRdWVyaWVzW2tleV0gKyAnKSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpO1xuXG4gICAgICB0aGlzLl93YXRjaGVyKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgc2NyZWVuIGlzIGF0IGxlYXN0IGFzIHdpZGUgYXMgYSBicmVha3BvaW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAqL1xuICAgIGF0TGVhc3Q6IGZ1bmN0aW9uIGF0TGVhc3Qoc2l6ZSkge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5nZXQoc2l6ZSk7XG5cbiAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gbWF0Y2hlcyB0byBhIGJyZWFrcG9pbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGNoZWNrLCBlaXRoZXIgJ3NtYWxsIG9ubHknIG9yICdzbWFsbCcuIE9taXR0aW5nICdvbmx5JyBmYWxscyBiYWNrIHRvIHVzaW5nIGF0TGVhc3QoKSBtZXRob2QuXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgYnJlYWtwb2ludCBtYXRjaGVzLCBgZmFsc2VgIGlmIGl0IGRvZXMgbm90LlxuICAgICAqL1xuICAgIGlzOiBmdW5jdGlvbiBpcyhzaXplKSB7XG4gICAgICBzaXplID0gc2l6ZS50cmltKCkuc3BsaXQoJyAnKTtcbiAgICAgIGlmIChzaXplLmxlbmd0aCA+IDEgJiYgc2l6ZVsxXSA9PT0gJ29ubHknKSB7XG4gICAgICAgIGlmIChzaXplWzBdID09PSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0TGVhc3Qoc2l6ZVswXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1lZGlhIHF1ZXJ5IG9mIGEgYnJlYWtwb2ludC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gLSBUaGUgbWVkaWEgcXVlcnkgb2YgdGhlIGJyZWFrcG9pbnQsIG9yIGBudWxsYCBpZiB0aGUgYnJlYWtwb2ludCBkb2Vzbid0IGV4aXN0LlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KHNpemUpIHtcbiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICAgIGlmICh0aGlzLnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJpZXNbaV07XG4gICAgICAgICAgaWYgKHNpemUgPT09IHF1ZXJ5Lm5hbWUpIHJldHVybiBxdWVyeS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBicmVha3BvaW50IG5hbWUgYnkgdGVzdGluZyBldmVyeSBicmVha3BvaW50IGFuZCByZXR1cm5pbmcgdGhlIGxhc3Qgb25lIHRvIG1hdGNoICh0aGUgYmlnZ2VzdCBvbmUpLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge1N0cmluZ30gTmFtZSBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgICAqL1xuICAgIF9nZXRDdXJyZW50U2l6ZTogZnVuY3Rpb24gX2dldEN1cnJlbnRTaXplKCkge1xuICAgICAgdmFyIG1hdGNoZWQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWVyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcblxuICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocXVlcnkudmFsdWUpLm1hdGNoZXMpIHtcbiAgICAgICAgICBtYXRjaGVkID0gcXVlcnk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCh0eXBlb2YgbWF0Y2hlZCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobWF0Y2hlZCkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbWF0Y2hlZC5uYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZWQ7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLCB3aGljaCBmaXJlcyBhbiBldmVudCBvbiB0aGUgd2luZG93IHdoZW5ldmVyIHRoZSBicmVha3BvaW50IGNoYW5nZXMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfd2F0Y2hlcjogZnVuY3Rpb24gX3dhdGNoZXIoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3U2l6ZSA9IF90aGlzLl9nZXRDdXJyZW50U2l6ZSgpLFxuICAgICAgICAgICAgY3VycmVudFNpemUgPSBfdGhpcy5jdXJyZW50O1xuXG4gICAgICAgIGlmIChuZXdTaXplICE9PSBjdXJyZW50U2l6ZSkge1xuICAgICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICAgIF90aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgICAgLy8gQnJvYWRjYXN0IHRoZSBtZWRpYSBxdWVyeSBjaGFuZ2Ugb24gdGhlIHdpbmRvd1xuICAgICAgICAgICQod2luZG93KS50cmlnZ2VyKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBbbmV3U2l6ZSwgY3VycmVudFNpemVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIEZvdW5kYXRpb24uTWVkaWFRdWVyeSA9IE1lZGlhUXVlcnk7XG5cbiAgLy8gbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIC0gVGVzdCBhIENTUyBtZWRpYSB0eXBlL3F1ZXJ5IGluIEpTLlxuICAvLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxuICB3aW5kb3cubWF0Y2hNZWRpYSB8fCAod2luZG93Lm1hdGNoTWVkaWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gRm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBtYXRjaE1lZGl1bSBhcGkgc3VjaCBhcyBJRSA5IGFuZCB3ZWJraXRcblxuICAgIHZhciBzdHlsZU1lZGlhID0gd2luZG93LnN0eWxlTWVkaWEgfHwgd2luZG93Lm1lZGlhO1xuXG4gICAgLy8gRm9yIHRob3NlIHRoYXQgZG9uJ3Qgc3VwcG9ydCBtYXRjaE1lZGl1bVxuICAgIGlmICghc3R5bGVNZWRpYSkge1xuICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICAgICAgICBzY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0sXG4gICAgICAgICAgaW5mbyA9IG51bGw7XG5cbiAgICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgc3R5bGUuaWQgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgICBzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgICAvLyAnc3R5bGUuY3VycmVudFN0eWxlJyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICd3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZScgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgaW5mbyA9ICdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc3R5bGUsIG51bGwpIHx8IHN0eWxlLmN1cnJlbnRTdHlsZTtcblxuICAgICAgc3R5bGVNZWRpYSA9IHtcbiAgICAgICAgbWF0Y2hNZWRpdW06IGZ1bmN0aW9uIG1hdGNoTWVkaXVtKG1lZGlhKSB7XG4gICAgICAgICAgdmFyIHRleHQgPSAnQG1lZGlhICcgKyBtZWRpYSArICd7ICNtYXRjaG1lZGlhanMtdGVzdCB7IHdpZHRoOiAxcHg7IH0gfSc7XG5cbiAgICAgICAgICAvLyAnc3R5bGUuc3R5bGVTaGVldCcgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnc3R5bGUudGV4dENvbnRlbnQnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gdGV4dDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRlc3QgaWYgbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBzdHlsZU1lZGlhLm1hdGNoTWVkaXVtKG1lZGlhIHx8ICdhbGwnKSxcbiAgICAgICAgbWVkaWE6IG1lZGlhIHx8ICdhbGwnXG4gICAgICB9O1xuICAgIH07XG4gIH0oKSk7XG5cbiAgLy8gVGhhbmsgeW91OiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZ1xuICBmdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gICAgdmFyIHN0eWxlT2JqZWN0ID0ge307XG5cbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgICB9XG5cbiAgICBzdHIgPSBzdHIudHJpbSgpLnNsaWNlKDEsIC0xKTsgLy8gYnJvd3NlcnMgcmUtcXVvdGUgc3RyaW5nIHN0eWxlIHZhbHVlc1xuXG4gICAgaWYgKCFzdHIpIHtcbiAgICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgICB9XG5cbiAgICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbiAocmV0LCBwYXJhbSkge1xuICAgICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICAgIHZhciBrZXkgPSBwYXJ0c1swXTtcbiAgICAgIHZhciB2YWwgPSBwYXJ0c1sxXTtcbiAgICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgICAvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuICAgICAgLy8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuICAgICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICAgIGlmICghcmV0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgcmV0W2tleV0gPSB2YWw7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICAgIHJldFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LCB7fSk7XG5cbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBGb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xufShqUXVlcnkpO1xuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbiAoJCkge1xuXG4gIC8qKlxuICAgKiBNb3Rpb24gbW9kdWxlLlxuICAgKiBAbW9kdWxlIGZvdW5kYXRpb24ubW90aW9uXG4gICAqL1xuXG4gIHZhciBpbml0Q2xhc3NlcyA9IFsnbXVpLWVudGVyJywgJ211aS1sZWF2ZSddO1xuICB2YXIgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbiAgdmFyIE1vdGlvbiA9IHtcbiAgICBhbmltYXRlSW46IGZ1bmN0aW9uIGFuaW1hdGVJbihlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICAgIH0sXG5cbiAgICBhbmltYXRlT3V0OiBmdW5jdGlvbiBhbmltYXRlT3V0KGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICAgIGFuaW1hdGUoZmFsc2UsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbikge1xuICAgIHZhciBhbmltLFxuICAgICAgICBwcm9nLFxuICAgICAgICBzdGFydCA9IG51bGw7XG4gICAgLy8gY29uc29sZS5sb2coJ2NhbGxlZCcpO1xuXG4gICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICBmbi5hcHBseShlbGVtKTtcbiAgICAgIGVsZW0udHJpZ2dlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSkudHJpZ2dlckhhbmRsZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUodHMpIHtcbiAgICAgIGlmICghc3RhcnQpIHN0YXJ0ID0gdHM7XG4gICAgICAvLyBjb25zb2xlLmxvZyhzdGFydCwgdHMpO1xuICAgICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgICBmbi5hcHBseShlbGVtKTtcblxuICAgICAgaWYgKHByb2cgPCBkdXJhdGlvbikge1xuICAgICAgICBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltKTtcbiAgICAgICAgZWxlbS50cmlnZ2VyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKS50cmlnZ2VySGFuZGxlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGFuaW0gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuaW1hdGVzIGFuIGVsZW1lbnQgaW4gb3Igb3V0IHVzaW5nIGEgQ1NTIHRyYW5zaXRpb24gY2xhc3MuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW4gLSBEZWZpbmVzIGlmIHRoZSBhbmltYXRpb24gaXMgaW4gb3Igb3V0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYW5pbWF0aW9uIC0gQ1NTIGNsYXNzIHRvIHVzZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBDYWxsYmFjayB0byBydW4gd2hlbiBhbmltYXRpb24gaXMgZmluaXNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBhbmltYXRlKGlzSW4sIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBlbGVtZW50ID0gJChlbGVtZW50KS5lcSgwKTtcblxuICAgIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICAgIHZhciBpbml0Q2xhc3MgPSBpc0luID8gaW5pdENsYXNzZXNbMF0gOiBpbml0Q2xhc3Nlc1sxXTtcbiAgICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0luID8gYWN0aXZlQ2xhc3Nlc1swXSA6IGFjdGl2ZUNsYXNzZXNbMV07XG5cbiAgICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICAgIHJlc2V0KCk7XG5cbiAgICBlbGVtZW50LmFkZENsYXNzKGFuaW1hdGlvbikuY3NzKCd0cmFuc2l0aW9uJywgJ25vbmUnKTtcblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKGluaXRDbGFzcyk7XG4gICAgICBpZiAoaXNJbikgZWxlbWVudC5zaG93KCk7XG4gICAgfSk7XG5cbiAgICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsICcnKS5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG4gICAgfSk7XG5cbiAgICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgICBlbGVtZW50Lm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoZWxlbWVudCksIGZpbmlzaCk7XG5cbiAgICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gICAgZnVuY3Rpb24gZmluaXNoKCkge1xuICAgICAgaWYgKCFpc0luKSBlbGVtZW50LmhpZGUoKTtcbiAgICAgIHJlc2V0KCk7XG4gICAgICBpZiAoY2IpIGNiLmFwcGx5KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgZWxlbWVudFswXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhpbml0Q2xhc3MgKyAnICcgKyBhY3RpdmVDbGFzcyArICcgJyArIGFuaW1hdGlvbik7XG4gICAgfVxuICB9XG5cbiAgRm91bmRhdGlvbi5Nb3ZlID0gTW92ZTtcbiAgRm91bmRhdGlvbi5Nb3Rpb24gPSBNb3Rpb247XG59KGpRdWVyeSk7XG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cbid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uICgkKSB7XG5cbiAgZnVuY3Rpb24gVGltZXIoZWxlbSwgb3B0aW9ucywgY2IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAgIC8vb3B0aW9ucyBpcyBhbiBvYmplY3QgZm9yIGVhc2lseSBhZGRpbmcgZmVhdHVyZXMgbGF0ZXIuXG4gICAgbmFtZVNwYWNlID0gT2JqZWN0LmtleXMoZWxlbS5kYXRhKCkpWzBdIHx8ICd0aW1lcicsXG4gICAgICAgIHJlbWFpbiA9IC0xLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgdGltZXI7XG5cbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZW1haW4gPSAtMTtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgICAvLyBpZighZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgICAgZWxlbS5kYXRhKCdwYXVzZWQnLCBmYWxzZSk7XG4gICAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pbmZpbml0ZSkge1xuICAgICAgICAgIF90aGlzLnJlc3RhcnQoKTsgLy9yZXJ1biB0aGUgdGltZXIuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJlbWFpbik7XG4gICAgICBlbGVtLnRyaWdnZXIoJ3RpbWVyc3RhcnQuemYuJyArIG5hbWVTcGFjZSk7XG4gICAgfTtcblxuICAgIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIC8vaWYoZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgICAgdmFyIGVuZCA9IERhdGUubm93KCk7XG4gICAgICByZW1haW4gPSByZW1haW4gLSAoZW5kIC0gc3RhcnQpO1xuICAgICAgZWxlbS50cmlnZ2VyKCd0aW1lcnBhdXNlZC56Zi4nICsgbmFtZVNwYWNlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VzIC0gSW1hZ2UocykgdG8gY2hlY2sgaWYgbG9hZGVkLlxuICAgKiBAcGFyYW0ge0Z1bmN9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIG9uSW1hZ2VzTG9hZGVkKGltYWdlcywgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIHVubG9hZGVkID0gaW1hZ2VzLmxlbmd0aDtcblxuICAgIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBpbWFnZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDaGVjayBpZiBpbWFnZSBpcyBsb2FkZWRcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gNCB8fCB0aGlzLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICAgIH1cbiAgICAgIC8vIEZvcmNlIGxvYWQgdGhlIGltYWdlXG4gICAgICBlbHNlIHtcbiAgICAgICAgICAvLyBmaXggZm9yIElFLiBTZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9qcXVlcnkvZml4aW5nLWxvYWQtaW4taWUtZm9yLWNhY2hlZC1pbWFnZXMvXG4gICAgICAgICAgdmFyIHNyYyA9ICQodGhpcykuYXR0cignc3JjJyk7XG4gICAgICAgICAgJCh0aGlzKS5hdHRyKCdzcmMnLCBzcmMgKyAoc3JjLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nKSArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICAgICAgICAkKHRoaXMpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHNpbmdsZUltYWdlTG9hZGVkKCkge1xuICAgICAgdW5sb2FkZWQtLTtcbiAgICAgIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcbiAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCA9IG9uSW1hZ2VzTG9hZGVkO1xufShqUXVlcnkpO1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipXb3JrIGluc3BpcmVkIGJ5IG11bHRpcGxlIGpxdWVyeSBzd2lwZSBwbHVnaW5zKipcbi8vKipEb25lIGJ5IFlvaGFpIEFyYXJhdCAqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbihmdW5jdGlvbiAoJCkge1xuXG5cdCQuc3BvdFN3aXBlID0ge1xuXHRcdHZlcnNpb246ICcxLjAuMCcsXG5cdFx0ZW5hYmxlZDogJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuXHRcdHByZXZlbnREZWZhdWx0OiBmYWxzZSxcblx0XHRtb3ZlVGhyZXNob2xkOiA3NSxcblx0XHR0aW1lVGhyZXNob2xkOiAyMDBcblx0fTtcblxuXHR2YXIgc3RhcnRQb3NYLFxuXHQgICAgc3RhcnRQb3NZLFxuXHQgICAgc3RhcnRUaW1lLFxuXHQgICAgZWxhcHNlZFRpbWUsXG5cdCAgICBpc01vdmluZyA9IGZhbHNlO1xuXG5cdGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG5cdFx0Ly8gIGFsZXJ0KHRoaXMpO1xuXHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUpO1xuXHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kKTtcblx0XHRpc01vdmluZyA9IGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuXHRcdGlmICgkLnNwb3RTd2lwZS5wcmV2ZW50RGVmYXVsdCkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0XHRpZiAoaXNNb3ZpbmcpIHtcblx0XHRcdHZhciB4ID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuXHRcdFx0dmFyIHkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG5cdFx0XHR2YXIgZHggPSBzdGFydFBvc1ggLSB4O1xuXHRcdFx0dmFyIGR5ID0gc3RhcnRQb3NZIC0geTtcblx0XHRcdHZhciBkaXI7XG5cdFx0XHRlbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lO1xuXHRcdFx0aWYgKE1hdGguYWJzKGR4KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcblx0XHRcdFx0ZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0Jztcblx0XHRcdH1cblx0XHRcdC8vIGVsc2UgaWYoTWF0aC5hYnMoZHkpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuXHRcdFx0Ly8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuXHRcdFx0Ly8gfVxuXHRcdFx0aWYgKGRpcikge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdG9uVG91Y2hFbmQuY2FsbCh0aGlzKTtcblx0XHRcdFx0JCh0aGlzKS50cmlnZ2VyKCdzd2lwZScsIGRpcikudHJpZ2dlcignc3dpcGUnICsgZGlyKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuXHRcdGlmIChlLnRvdWNoZXMubGVuZ3RoID09IDEpIHtcblx0XHRcdHN0YXJ0UG9zWCA9IGUudG91Y2hlc1swXS5wYWdlWDtcblx0XHRcdHN0YXJ0UG9zWSA9IGUudG91Y2hlc1swXS5wYWdlWTtcblx0XHRcdGlzTW92aW5nID0gdHJ1ZTtcblx0XHRcdHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwgZmFsc2UpO1xuXHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lciAmJiB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHRlYXJkb3duKCkge1xuXHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCk7XG5cdH1cblxuXHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7IHNldHVwOiBpbml0IH07XG5cblx0JC5lYWNoKFsnbGVmdCcsICd1cCcsICdkb3duJywgJ3JpZ2h0J10sIGZ1bmN0aW9uICgpIHtcblx0XHQkLmV2ZW50LnNwZWNpYWxbJ3N3aXBlJyArIHRoaXNdID0geyBzZXR1cDogZnVuY3Rpb24gc2V0dXAoKSB7XG5cdFx0XHRcdCQodGhpcykub24oJ3N3aXBlJywgJC5ub29wKTtcblx0XHRcdH0gfTtcblx0fSk7XG59KShqUXVlcnkpO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIE1ldGhvZCBmb3IgYWRkaW5nIHBzdWVkbyBkcmFnIGV2ZW50cyB0byBlbGVtZW50cyAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIWZ1bmN0aW9uICgkKSB7XG5cdCQuZm4uYWRkVG91Y2ggPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xuXHRcdFx0JChlbCkuYmluZCgndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdC8vd2UgcGFzcyB0aGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0IGJlY2F1c2UgdGhlIGpRdWVyeSBldmVudFxuXHRcdFx0XHQvL29iamVjdCBpcyBub3JtYWxpemVkIHRvIHczYyBzcGVjcyBhbmQgZG9lcyBub3QgcHJvdmlkZSB0aGUgVG91Y2hMaXN0XG5cdFx0XHRcdGhhbmRsZVRvdWNoKGV2ZW50KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0dmFyIGhhbmRsZVRvdWNoID0gZnVuY3Rpb24gaGFuZGxlVG91Y2goZXZlbnQpIHtcblx0XHRcdHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG5cdFx0XHQgICAgZmlyc3QgPSB0b3VjaGVzWzBdLFxuXHRcdFx0ICAgIGV2ZW50VHlwZXMgPSB7XG5cdFx0XHRcdHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuXHRcdFx0XHR0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuXHRcdFx0XHR0b3VjaGVuZDogJ21vdXNldXAnXG5cdFx0XHR9LFxuXHRcdFx0ICAgIHR5cGUgPSBldmVudFR5cGVzW2V2ZW50LnR5cGVdLFxuXHRcdFx0ICAgIHNpbXVsYXRlZEV2ZW50O1xuXG5cdFx0XHRpZiAoJ01vdXNlRXZlbnQnIGluIHdpbmRvdyAmJiB0eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0c2ltdWxhdGVkRXZlbnQgPSBuZXcgd2luZG93Lk1vdXNlRXZlbnQodHlwZSwge1xuXHRcdFx0XHRcdCdidWJibGVzJzogdHJ1ZSxcblx0XHRcdFx0XHQnY2FuY2VsYWJsZSc6IHRydWUsXG5cdFx0XHRcdFx0J3NjcmVlblgnOiBmaXJzdC5zY3JlZW5YLFxuXHRcdFx0XHRcdCdzY3JlZW5ZJzogZmlyc3Quc2NyZWVuWSxcblx0XHRcdFx0XHQnY2xpZW50WCc6IGZpcnN0LmNsaWVudFgsXG5cdFx0XHRcdFx0J2NsaWVudFknOiBmaXJzdC5jbGllbnRZXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2ltdWxhdGVkRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuXHRcdFx0XHRzaW11bGF0ZWRFdmVudC5pbml0TW91c2VFdmVudCh0eXBlLCB0cnVlLCB0cnVlLCB3aW5kb3csIDEsIGZpcnN0LnNjcmVlblgsIGZpcnN0LnNjcmVlblksIGZpcnN0LmNsaWVudFgsIGZpcnN0LmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwIC8qbGVmdCovLCBudWxsKTtcblx0XHRcdH1cblx0XHRcdGZpcnN0LnRhcmdldC5kaXNwYXRjaEV2ZW50KHNpbXVsYXRlZEV2ZW50KTtcblx0XHR9O1xuXHR9O1xufShqUXVlcnkpO1xuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipGcm9tIHRoZSBqUXVlcnkgTW9iaWxlIExpYnJhcnkqKlxuLy8qKm5lZWQgdG8gcmVjcmVhdGUgZnVuY3Rpb25hbGl0eSoqXG4vLyoqYW5kIHRyeSB0byBpbXByb3ZlIGlmIHBvc3NpYmxlKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4vKiBSZW1vdmluZyB0aGUgalF1ZXJ5IGZ1bmN0aW9uICoqKipcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXG5cdHZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRcdC8vIHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdFx0dG91Y2hTdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoc3RhcnRcIiA6IFwibW91c2Vkb3duXCIsXG5cdFx0dG91Y2hTdG9wRXZlbnQgPSAndG91Y2hlbmQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0XHR0b3VjaE1vdmVFdmVudCA9ICd0b3VjaG1vdmUnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuXHQvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzXG5cdCQuZWFjaCggKCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIFwiICtcblx0XHRcInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0XCIgKS5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0XHQkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gZm4gPyB0aGlzLmJpbmQoIG5hbWUsIGZuICkgOiB0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXG5cdFx0Ly8galF1ZXJ5IDwgMS44XG5cdFx0aWYgKCAkLmF0dHJGbiApIHtcblx0XHRcdCQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KCBvYmosIGV2ZW50VHlwZSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHR2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTtcblx0XHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0JC5ldmVudC50cmlnZ2VyKCBldmVudCwgdW5kZWZpbmVkLCBvYmogKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5ldmVudC5kaXNwYXRjaC5jYWxsKCBvYmosIGV2ZW50ICk7XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG5cdH1cblxuXHQvLyBhbHNvIGhhbmRsZXMgdGFwaG9sZFxuXG5cdC8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcblx0JC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuXG5cdFx0Ly8gTW9yZSB0aGFuIHRoaXMgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQsIGFuZCB3ZSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZy5cblx0XHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHRcdC8vIE1vcmUgdGltZSB0aGFuIHRoaXMsIGFuZCBpdCBpc24ndCBhIHN3aXBlLlxuXHRcdGR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLFxuXG5cdFx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0XHRob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Ly8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuXG5cdFx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHRnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdHZhciB3aW5QYWdlWCA9IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0d2luUGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0XHR5ID0gZXZlbnQuY2xpZW50WTtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSA9PT0gMCAmJiBNYXRoLmZsb29yKCB5ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWSApIHx8XG5cdFx0XHRcdGV2ZW50LnBhZ2VYID09PSAwICYmIE1hdGguZmxvb3IoIHggKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHRcdC8vIGluIHBhZ2VYL3BhZ2VZLiBXaGlsZSBwYWdlWC9wYWdlLyBoYXZlIHRoZSB2YWx1ZSAwXG5cdFx0XHRcdHggPSB4IC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0XHR9IGVsc2UgaWYgKCB5IDwgKCBldmVudC5wYWdlWSAtIHdpblBhZ2VZKSB8fCB4IDwgKCBldmVudC5wYWdlWCAtIHdpblBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0XHQvLyB3aGVuIHNjcm9sbGluZy96b29taW5nIGEgcGFnZS4gRGV0ZWN0YWJsZSBzaW5jZSBjbGllbnRYL2NsaWVudFlcblx0XHRcdFx0Ly8gc2hvdWxkIG5ldmVyIGJlIHNtYWxsZXIgdGhhbiBwYWdlWC9wYWdlWSBtaW51cyBwYWdlIHNjcm9sbFxuXHRcdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IGV2ZW50LnBhZ2VZIC0gd2luUGFnZVk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVTd2lwZTogZnVuY3Rpb24oIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICkge1xuXHRcdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJzd2lwZVwiLCAkLkV2ZW50KCBcInN3aXBlXCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0pLCB0cnVlICk7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCQuRXZlbnQoIGRpcmVjdGlvbiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSApLCB0cnVlICk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHRcdC8vIGluIHdvcmsgYXQgYW55IGdpdmVuIHRpbWVcblx0XHRldmVudEluUHJvZ3Jlc3M6IGZhbHNlLFxuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cyxcblx0XHRcdFx0dGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRjb250ZXh0ID0ge307XG5cblx0XHRcdC8vIFJldHJpZXZlIHRoZSBldmVudHMgZGF0YSBmb3IgdGhpcyBlbGVtZW50IGFuZCBhZGQgdGhlIHN3aXBlIGNvbnRleHRcblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggIWV2ZW50cyApIHtcblx0XHRcdFx0ZXZlbnRzID0geyBsZW5ndGg6IDAgfTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0XHR9XG5cdFx0XHRldmVudHMubGVuZ3RoKys7XG5cdFx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0XHRjb250ZXh0LnN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIEJhaWwgaWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGEgc3dpcGUgZXZlbnRcblx0XHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgc3RvcCxcblx0XHRcdFx0XHRzdGFydCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdGFydCggZXZlbnQgKSxcblx0XHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRcdGVtaXR0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRcdGlmICggIWVtaXR0ZWQgKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhhbmRsZVN3aXBlKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApO1xuXHRcdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnRleHQuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQkZG9jdW1lbnQub24oIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKVxuXHRcdFx0XHRcdC5vbmUoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdH07XG5cdFx0XHQkdGhpcy5vbiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsIGNvbnRleHQ7XG5cblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0XHRjb250ZXh0ID0gZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRkZWxldGUgZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRcdGlmICggZXZlbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLm9mZiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0JC5lYWNoKHtcblx0XHRzd2lwZWxlZnQ6IFwic3dpcGUubGVmdFwiLFxuXHRcdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxuXHR9LCBmdW5jdGlvbiggZXZlbnQsIHNvdXJjZUV2ZW50ICkge1xuXG5cdFx0JC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn0pKCBqUXVlcnksIHRoaXMgKTtcbiovXG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4hZnVuY3Rpb24gKCQpIHtcblxuICB2YXIgTXV0YXRpb25PYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3dbcHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlciddO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0oKTtcblxuICB2YXIgdHJpZ2dlcnMgPSBmdW5jdGlvbiB0cmlnZ2VycyhlbCwgdHlwZSkge1xuICAgIGVsLmRhdGEodHlwZSkuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgJCgnIycgKyBpZClbdHlwZSA9PT0gJ2Nsb3NlJyA/ICd0cmlnZ2VyJyA6ICd0cmlnZ2VySGFuZGxlciddKHR5cGUgKyAnLnpmLnRyaWdnZXInLCBbZWxdKTtcbiAgICB9KTtcbiAgfTtcbiAgLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1vcGVuXSB3aWxsIHJldmVhbCBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBmdW5jdGlvbiAoKSB7XG4gICAgdHJpZ2dlcnMoJCh0aGlzKSwgJ29wZW4nKTtcbiAgfSk7XG5cbiAgLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zZV0gd2lsbCBjbG9zZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbiAgLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VdJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9ICQodGhpcykuZGF0YSgnY2xvc2UnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKCQodGhpcyksICdjbG9zZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlXSB3aWxsIHRvZ2dsZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZScpO1xuICAgIGlmIChpZCkge1xuICAgICAgdHJpZ2dlcnMoJCh0aGlzKSwgJ3RvZ2dsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9KTtcblxuICAvLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NhYmxlXSB3aWxsIHJlc3BvbmQgdG8gY2xvc2UuemYudHJpZ2dlciBldmVudHMuXG4gICQoZG9jdW1lbnQpLm9uKCdjbG9zZS56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NhYmxlXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgYW5pbWF0aW9uID0gJCh0aGlzKS5kYXRhKCdjbG9zYWJsZScpO1xuXG4gICAgaWYgKGFuaW1hdGlvbiAhPT0gJycpIHtcbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQoJCh0aGlzKSwgYW5pbWF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQodGhpcykudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgfVxuICB9KTtcblxuICAkKGRvY3VtZW50KS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAgICQoJyMnICsgaWQpLnRyaWdnZXJIYW5kbGVyKCd0b2dnbGUuemYudHJpZ2dlcicsIFskKHRoaXMpXSk7XG4gIH0pO1xuXG4gIC8qKlxuICAqIEZpcmVzIG9uY2UgYWZ0ZXIgYWxsIG90aGVyIHNjcmlwdHMgaGF2ZSBsb2FkZWRcbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tMaXN0ZW5lcnMoKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcnMoKSB7XG4gICAgZXZlbnRzTGlzdGVuZXIoKTtcbiAgICByZXNpemVMaXN0ZW5lcigpO1xuICAgIHNjcm9sbExpc3RlbmVyKCk7XG4gICAgbXV0YXRlTGlzdGVuZXIoKTtcbiAgICBjbG9zZW1lTGlzdGVuZXIoKTtcbiAgfVxuXG4gIC8vKioqKioqKiogb25seSBmaXJlcyB0aGlzIGZ1bmN0aW9uIG9uY2Ugb24gbG9hZCwgaWYgdGhlcmUncyBzb21ldGhpbmcgdG8gd2F0Y2ggKioqKioqKipcbiAgZnVuY3Rpb24gY2xvc2VtZUxpc3RlbmVyKHBsdWdpbk5hbWUpIHtcbiAgICB2YXIgeWV0aUJveGVzID0gJCgnW2RhdGEteWV0aS1ib3hdJyksXG4gICAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICAgIGlmIChwbHVnaW5OYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBsdWdOYW1lcy5wdXNoKHBsdWdpbk5hbWUpO1xuICAgICAgfSBlbHNlIGlmICgodHlwZW9mIHBsdWdpbk5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBsdWdpbk5hbWUpKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHBsdWdpbk5hbWVbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBsdWdOYW1lcy5jb25jYXQocGx1Z2luTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdQbHVnaW4gbmFtZXMgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh5ZXRpQm94ZXMubGVuZ3RoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gJ2Nsb3NlbWUuemYuJyArIG5hbWU7XG4gICAgICB9KS5qb2luKCcgJyk7XG5cbiAgICAgICQod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIGZ1bmN0aW9uIChlLCBwbHVnaW5JZCkge1xuICAgICAgICB2YXIgcGx1Z2luID0gZS5uYW1lc3BhY2Uuc3BsaXQoJy4nKVswXTtcbiAgICAgICAgdmFyIHBsdWdpbnMgPSAkKCdbZGF0YS0nICsgcGx1Z2luICsgJ10nKS5ub3QoJ1tkYXRhLXlldGktYm94PVwiJyArIHBsdWdpbklkICsgJ1wiXScpO1xuXG4gICAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIF90aGlzID0gJCh0aGlzKTtcblxuICAgICAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzaXplTGlzdGVuZXIoZGVib3VuY2UpIHtcbiAgICB2YXIgdGltZXIgPSB2b2lkIDAsXG4gICAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnpmLnRyaWdnZXInKS5vbigncmVzaXplLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgLy9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwicmVzaXplXCIpO1xuICAgICAgICB9LCBkZWJvdW5jZSB8fCAxMCk7IC8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgcmVzaXplIGV2ZW50XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGxMaXN0ZW5lcihkZWJvdW5jZSkge1xuICAgIHZhciB0aW1lciA9IHZvaWQgMCxcbiAgICAgICAgJG5vZGVzID0gJCgnW2RhdGEtc2Nyb2xsXScpO1xuICAgIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYudHJpZ2dlcicpLm9uKCdzY3JvbGwuemYudHJpZ2dlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aW1lcikge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAgICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgICAgICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJzY3JvbGxcIik7XG4gICAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsgLy9kZWZhdWx0IHRpbWUgdG8gZW1pdCBzY3JvbGwgZXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG11dGF0ZUxpc3RlbmVyKGRlYm91bmNlKSB7XG4gICAgdmFyICRub2RlcyA9ICQoJ1tkYXRhLW11dGF0ZV0nKTtcbiAgICBpZiAoJG5vZGVzLmxlbmd0aCAmJiBNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgbXV0YXRlIGV2ZW50XG4gICAgICAvL25vIElFIDkgb3IgMTBcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCh0aGlzKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZXZlbnRzTGlzdGVuZXIoKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAgIC8vZWxlbWVudCBjYWxsYmFja1xuICAgIHZhciBsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uID0gZnVuY3Rpb24gbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbihtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgICB2YXIgJHRhcmdldCA9ICQobXV0YXRpb25SZWNvcmRzTGlzdFswXS50YXJnZXQpO1xuXG4gICAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgICBzd2l0Y2ggKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udHlwZSkge1xuXG4gICAgICAgIGNhc2UgXCJhdHRyaWJ1dGVzXCI6XG4gICAgICAgICAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInNjcm9sbFwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG4gICAgICAgICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQsIHdpbmRvdy5wYWdlWU9mZnNldF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwicmVzaXplXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcbiAgICAgICAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsIFwibXV0YXRlXCIpO1xuICAgICAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLCBcIm11dGF0ZVwiKTtcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy9ub3RoaW5nXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbiAgICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgb3IgbXV0YXRpb24gYWRkIGEgc2luZ2xlIG9ic2VydmVyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2Rlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnRPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24pO1xuICAgICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZShub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFtcImRhdGEtZXZlbnRzXCIsIFwic3R5bGVcIl0gfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gW1BIXVxuICAvLyBGb3VuZGF0aW9uLkNoZWNrV2F0Y2hlcnMgPSBjaGVja1dhdGNoZXJzO1xuICBGb3VuZGF0aW9uLklIZWFyWW91ID0gY2hlY2tMaXN0ZW5lcnM7XG4gIC8vIEZvdW5kYXRpb24uSVNlZVlvdSA9IHNjcm9sbExpc3RlbmVyO1xuICAvLyBGb3VuZGF0aW9uLklGZWVsWW91ID0gY2xvc2VtZUxpc3RlbmVyO1xufShqUXVlcnkpO1xuXG4vLyBmdW5jdGlvbiBkb21NdXRhdGlvbk9ic2VydmVyKGRlYm91bmNlKSB7XG4vLyAgIC8vICEhISBUaGlzIGlzIGNvbWluZyBzb29uIGFuZCBuZWVkcyBtb3JlIHdvcms7IG5vdCBhY3RpdmUgICEhISAvL1xuLy8gICB2YXIgdGltZXIsXG4vLyAgIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbXV0YXRlXScpO1xuLy8gICAvL1xuLy8gICBpZiAobm9kZXMubGVuZ3RoKSB7XG4vLyAgICAgLy8gdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuLy8gICAgIC8vICAgdmFyIHByZWZpeGVzID0gWydXZWJLaXQnLCAnTW96JywgJ08nLCAnTXMnLCAnJ107XG4vLyAgICAgLy8gICBmb3IgKHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuLy8gICAgIC8vICAgICBpZiAocHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4vLyAgICAgLy8gICAgICAgcmV0dXJuIHdpbmRvd1twcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJ107XG4vLyAgICAgLy8gICAgIH1cbi8vICAgICAvLyAgIH1cbi8vICAgICAvLyAgIHJldHVybiBmYWxzZTtcbi8vICAgICAvLyB9KCkpO1xuLy9cbi8vXG4vLyAgICAgLy9mb3IgdGhlIGJvZHksIHdlIG5lZWQgdG8gbGlzdGVuIGZvciBhbGwgY2hhbmdlcyBlZmZlY3RpbmcgdGhlIHN0eWxlIGFuZCBjbGFzcyBhdHRyaWJ1dGVzXG4vLyAgICAgdmFyIGJvZHlPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGJvZHlNdXRhdGlvbik7XG4vLyAgICAgYm9keU9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOnRydWUsIGF0dHJpYnV0ZUZpbHRlcjpbXCJzdHlsZVwiLCBcImNsYXNzXCJdfSk7XG4vL1xuLy9cbi8vICAgICAvL2JvZHkgY2FsbGJhY2tcbi8vICAgICBmdW5jdGlvbiBib2R5TXV0YXRpb24obXV0YXRlKSB7XG4vLyAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgbXV0YXRpb24gZXZlbnRcbi8vICAgICAgIGlmICh0aW1lcikgeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG4vL1xuLy8gICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICBib2R5T2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuLy8gICAgICAgICAkKCdbZGF0YS1tdXRhdGVdJykuYXR0cignZGF0YS1ldmVudHMnLFwibXV0YXRlXCIpO1xuLy8gICAgICAgfSwgZGVib3VuY2UgfHwgMTUwKTtcbi8vICAgICB9XG4vLyAgIH1cbi8vIH1cblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAkKGRvY3VtZW50KS5mb3VuZGF0aW9uKCk7XG59KSgpO1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGV4cG9ydHMpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuTW90aW9uVUkgPSBmYWN0b3J5KHJvb3QualF1ZXJ5KTtcbiAgfVxufSkodW5kZWZpbmVkLCBmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gUG9seWZpbGwgZm9yIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFEYXRlLm5vdykgRGF0ZS5ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgfTtcblxuICAgIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKytpKSB7XG4gICAgICB2YXIgdnAgPSB2ZW5kb3JzW2ldO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCArICdDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8IHdpbmRvd1t2cCArICdDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICB9XG4gICAgaWYgKC9pUChhZHxob25lfG9kKS4qT1MgNi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBuZXh0VGltZSA9IE1hdGgubWF4KGxhc3RUaW1lICsgMTYsIG5vdyk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTtcbiAgICAgICAgfSwgbmV4dFRpbWUgLSBub3cpO1xuICAgICAgfTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgICB9XG4gIH0pKCk7XG5cbiAgdmFyIGluaXRDbGFzc2VzID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG4gIHZhciBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuICAvLyBGaW5kIHRoZSByaWdodCBcInRyYW5zaXRpb25lbmRcIiBldmVudCBmb3IgdGhpcyBicm93c2VyXG4gIHZhciBlbmRFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgICB2YXIgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGZvciAodmFyIHQgaW4gdHJhbnNpdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25zW3RdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgZWxlbWVudCA9ICQoZWxlbWVudCkuZXEoMCk7XG5cbiAgICBpZiAoIWVsZW1lbnQubGVuZ3RoKSByZXR1cm47XG5cbiAgICBpZiAoZW5kRXZlbnQgPT09IG51bGwpIHtcbiAgICAgIGlzSW4gPyBlbGVtZW50LnNob3coKSA6IGVsZW1lbnQuaGlkZSgpO1xuICAgICAgY2IoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gICAgdmFyIGFjdGl2ZUNsYXNzID0gaXNJbiA/IGFjdGl2ZUNsYXNzZXNbMF0gOiBhY3RpdmVDbGFzc2VzWzFdO1xuXG4gICAgLy8gU2V0IHVwIHRoZSBhbmltYXRpb25cbiAgICByZXNldCgpO1xuICAgIGVsZW1lbnQuYWRkQ2xhc3MoYW5pbWF0aW9uKTtcbiAgICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsICdub25lJyk7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoaW5pdENsYXNzKTtcbiAgICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgICB9KTtcblxuICAgIC8vIFN0YXJ0IHRoZSBhbmltYXRpb25cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgZWxlbWVudC5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG4gICAgfSk7XG5cbiAgICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgICBlbGVtZW50Lm9uZSgndHJhbnNpdGlvbmVuZCcsIGZpbmlzaCk7XG5cbiAgICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gICAgZnVuY3Rpb24gZmluaXNoKCkge1xuICAgICAgaWYgKCFpc0luKSBlbGVtZW50LmhpZGUoKTtcbiAgICAgIHJlc2V0KCk7XG4gICAgICBpZiAoY2IpIGNiLmFwcGx5KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgZWxlbWVudFswXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhpbml0Q2xhc3MgKyAnICcgKyBhY3RpdmVDbGFzcyArICcgJyArIGFuaW1hdGlvbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIE1vdGlvblVJID0ge1xuICAgIGFuaW1hdGVJbjogZnVuY3Rpb24gYW5pbWF0ZUluKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICAgIGFuaW1hdGUodHJ1ZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gICAgfSxcblxuICAgIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uIGFuaW1hdGVPdXQoZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICAgICAgYW5pbWF0ZShmYWxzZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBNb3Rpb25VSTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbXB4ZFdWeWVTNXRhVzR1YW5NaUxDSm1iM1Z1WkdGMGFXOXVMbU52Y21VdWFuTWlMQ0ptYjNWdVpHRjBhVzl1TG05bVptTmhiblpoY3k1cWN5SXNJbVp2ZFc1a1lYUnBiMjR1YjNKaWFYUXVhbk1pTENKbWIzVnVaR0YwYVc5dUxuVjBhV3d1YTJWNVltOWhjbVF1YW5NaUxDSm1iM1Z1WkdGMGFXOXVMblYwYVd3dWJXVmthV0ZSZFdWeWVTNXFjeUlzSW1admRXNWtZWFJwYjI0dWRYUnBiQzV0YjNScGIyNHVhbk1pTENKbWIzVnVaR0YwYVc5dUxuVjBhV3d1ZEdsdFpYSkJibVJKYldGblpVeHZZV1JsY2k1cWN5SXNJbVp2ZFc1a1lYUnBiMjR1ZFhScGJDNTBiM1ZqYUM1cWN5SXNJbVp2ZFc1a1lYUnBiMjR1ZFhScGJDNTBjbWxuWjJWeWN5NXFjeUlzSW0xaGFXNHVhbk1pTENKdGIzUnBiMjR0ZFdrdWFuTWlYU3dpYm1GdFpYTWlPbHNpWVNJc0ltSWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWkc5amRXMWxiblFpTENKRmNuSnZjaUlzSW5kcGJtUnZkeUlzSW1NaUxDSmtJaXdpWlNJc0lrOWlhbVZqZENJc0ltZGxkRkJ5YjNSdmRIbHdaVTltSWl3aVppSXNJbk5zYVdObElpd2laeUlzSW1OdmJtTmhkQ0lzSW1naUxDSndkWE5vSWl3aWFTSXNJbWx1WkdWNFQyWWlMQ0pxSWl3aWF5SXNJblJ2VTNSeWFXNW5JaXdpYkNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWJTSXNJbTRpTENKallXeHNJaXdpYnlJc0luQWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lkR1Y0ZENJc0ltaGxZV1FpTENKaGNIQmxibVJEYUdsc1pDSXNJbkJoY21WdWRFNXZaR1VpTENKeVpXMXZkbVZEYUdsc1pDSXNJbkVpTENKeUlpd2labTRpTENKcGJtbDBJaXdpY3lJc0luUWlMQ0oxSWl3aWRpSXNJblJ2VlhCd1pYSkRZWE5sSWl3aWNISnZkRzkwZVhCbElpd2lhbkYxWlhKNUlpd2lZMjl1YzNSeWRXTjBiM0lpTENKc1pXNW5kR2dpTENKMGIwRnljbUY1SWl3aVoyVjBJaXdpY0hWemFGTjBZV05ySWl3aWJXVnlaMlVpTENKd2NtVjJUMkpxWldOMElpd2laV0ZqYUNJc0ltMWhjQ0lzSW1Gd2NHeDVJaXdpWVhKbmRXMWxiblJ6SWl3aVptbHljM1FpTENKbGNTSXNJbXhoYzNRaUxDSmxibVFpTENKemIzSjBJaXdpYzNCc2FXTmxJaXdpWlhoMFpXNWtJaXdpYVhOR2RXNWpkR2x2YmlJc0ltbHpVR3hoYVc1UFltcGxZM1FpTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKbGVIQmhibVJ2SWl3aVRXRjBhQ0lzSW5KaGJtUnZiU0lzSW5KbGNHeGhZMlVpTENKcGMxSmxZV1I1SWl3aVpYSnliM0lpTENKdWIyOXdJaXdpZEhsd1pTSXNJbWx6VjJsdVpHOTNJaXdpYVhOT2RXMWxjbWxqSWl3aWFYTk9ZVTRpTENKd1lYSnpaVVpzYjJGMElpd2lhWE5GYlhCMGVVOWlhbVZqZENJc0ltZHNiMkpoYkVWMllXd2lMQ0pqWVcxbGJFTmhjMlVpTENKM0lpd2lkSEpwYlNJc0ltMWhhMlZCY25KaGVTSXNJbWx1UVhKeVlYa2lMQ0puY21Wd0lpd2laM1ZwWkNJc0luQnliM2g1SWl3aWJtOTNJaXdpUkdGMFpTSXNJbk4xY0hCdmNuUWlMQ0pUZVcxaWIyd2lMQ0pwZEdWeVlYUnZjaUlzSW5Od2JHbDBJaXdpZEc5TWIzZGxja05oYzJVaUxDSjRJaXdpZVNJc0ltaGhJaXdpZWlJc0lrRWlMQ0pDSWl3aVF5SXNJa1FpTENKRklpd2ljRzl3SWl3aVJpSXNJa2NpTENKSUlpd2lTU0lzSWtvaUxDSkxJaXdpVENJc0lrMGlMQ0pPSWl3aVR5SXNJbEpsWjBWNGNDSXNJbEFpTENKUklpd2lVaUlzSWxNaUxDSlVJaXdpVlNJc0lsWWlMQ0pKUkNJc0lrTk1RVk5USWl3aVZFRkhJaXdpUVZSVVVpSXNJbEJUUlZWRVR5SXNJa05JU1V4RUlpd2lZbTl2YkNJc0ltNWxaV1J6UTI5dWRHVjRkQ0lzSWxjaUxDSllJaXdpV1NJc0lsb2lMQ0lrSWl3aVh5SXNJbUZoSWl3aVUzUnlhVzVuSWl3aVpuSnZiVU5vWVhKRGIyUmxJaXdpWW1FaUxDSmpZU0lzSW1Ob1lYSkRiMlJsUVhRaUxDSmtZU0lzSW1WaElpd2lkR0VpTENKa2FYTmhZbXhsWkNJc0ltUnBjaUlzSW01bGVIUWlMQ0pqYUdsc1pFNXZaR1Z6SWl3aWJtOWtaVlI1Y0dVaUxDSm1ZU0lzSW1kaElpd2liM2R1WlhKRWIyTjFiV1Z1ZENJc0ltVjRaV01pTENKblpYUkZiR1Z0Wlc1MFFubEpaQ0lzSW1sa0lpd2laMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VpTENKblpYUkZiR1Z0Wlc1MGMwSjVRMnhoYzNOT1lXMWxJaXdpY1hOaElpd2lkR1Z6ZENJc0ltNXZaR1ZPWVcxbElpd2laMlYwUVhSMGNtbGlkWFJsSWl3aWMyVjBRWFIwY21saWRYUmxJaXdpYzJFaUxDSnFiMmx1SWl3aWNXRWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNJaXdpY21WdGIzWmxRWFIwY21saWRYUmxJaXdpWTJGamFHVk1aVzVuZEdnaUxDSnphR2xtZENJc0ltbGhJaXdpYW1FaUxDSnJZU0lzSW1GMGRISklZVzVrYkdVaUxDSnNZU0lzSW5OdmRYSmpaVWx1WkdWNElpd2libVY0ZEZOcFlteHBibWNpTENKdFlTSXNJbTVoSWl3aWIyRWlMQ0pwYzBScGMyRmliR1ZrSWl3aWNHRWlMQ0pwYzFoTlRDSXNJbVJ2WTNWdFpXNTBSV3hsYldWdWRDSXNJbk5sZEVSdlkzVnRaVzUwSWl3aVpHVm1ZWFZzZEZacFpYY2lMQ0owYjNBaUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2lZWFIwWVdOb1JYWmxiblFpTENKaGRIUnlhV0oxZEdWeklpd2lZMnhoYzNOT1lXMWxJaXdpWTNKbFlYUmxRMjl0YldWdWRDSXNJbWRsZEVKNVNXUWlMQ0puWlhSRmJHVnRaVzUwYzBKNVRtRnRaU0lzSW1acGJIUmxjaUlzSW1acGJtUWlMQ0puWlhSQmRIUnlhV0oxZEdWT2IyUmxJaXdpZG1Gc2RXVWlMQ0pwYm01bGNraFVUVXdpTENKdFlYUmphR1Z6VTJWc1pXTjBiM0lpTENKdFlYUmphR1Z6SWl3aWQyVmlhMmwwVFdGMFkyaGxjMU5sYkdWamRHOXlJaXdpYlc5NlRXRjBZMmhsYzFObGJHVmpkRzl5SWl3aWIwMWhkR05vWlhOVFpXeGxZM1J2Y2lJc0ltMXpUV0YwWTJobGMxTmxiR1ZqZEc5eUlpd2laR2x6WTI5dWJtVmpkR1ZrVFdGMFkyZ2lMQ0pqYjIxd1lYSmxSRzlqZFcxbGJuUlFiM05wZEdsdmJpSXNJbU52Ym5SaGFXNXpJaXdpYzI5eWRFUmxkR0ZqYUdWa0lpd2lkVzV6YUdsbWRDSXNJbUYwZEhJaUxDSnpjR1ZqYVdacFpXUWlMQ0psYzJOaGNHVWlMQ0oxYm1seGRXVlRiM0owSWl3aVpHVjBaV04wUkhWd2JHbGpZWFJsY3lJc0luTnZjblJUZEdGaWJHVWlMQ0puWlhSVVpYaDBJaXdpZEdWNGRFTnZiblJsYm5RaUxDSm1hWEp6ZEVOb2FXeGtJaXdpYm05a1pWWmhiSFZsSWl3aWMyVnNaV04wYjNKeklpd2lZM0psWVhSbFVITmxkV1J2SWl3aWJXRjBZMmdpTENKeVpXeGhkR2wyWlNJc0luQnlaVVpwYkhSbGNpSXNJbXhoYzNSRGFHbHNaQ0lzSW5WdWFYRjFaVWxFSWl3aWNITmxkV1J2Y3lJc0luTmxkRVpwYkhSbGNuTWlMQ0p1YjNRaUxDSm9ZWE1pTENKcGJtNWxjbFJsZUhRaUxDSnNZVzVuSWl3aWRHRnlaMlYwSWl3aWJHOWpZWFJwYjI0aUxDSm9ZWE5vSWl3aWNtOXZkQ0lzSW1adlkzVnpJaXdpWVdOMGFYWmxSV3hsYldWdWRDSXNJbWhoYzBadlkzVnpJaXdpYUhKbFppSXNJblJoWWtsdVpHVjRJaXdpWlc1aFlteGxaQ0lzSW1Ob1pXTnJaV1FpTENKelpXeGxZM1JsWkNJc0luTmxiR1ZqZEdWa1NXNWtaWGdpTENKbGJYQjBlU0lzSW5CaGNtVnVkQ0lzSW1obFlXUmxjaUlzSW1sdWNIVjBJaXdpWW5WMGRHOXVJaXdpWlhabGJpSXNJbTlrWkNJc0lteDBJaXdpWjNRaUxDSnVkR2dpTENKeVlXUnBieUlzSW1Ob1pXTnJZbTk0SWl3aVptbHNaU0lzSW5CaGMzTjNiM0prSWl3aWFXMWhaMlVpTENKemRXSnRhWFFpTENKeVpYTmxkQ0lzSW5KaElpd2labWxzZEdWeWN5SXNJblJ2YTJWdWFYcGxJaXdpZFdFaUxDSjJZU0lzSW5kaElpd2llR0VpTENKNVlTSXNJbnBoSWl3aVkyOXRjR2xzWlNJc0luTmxiR1ZqZEc5eUlpd2ljMlZzWldOMElpd2laR1ZtWVhWc2RGWmhiSFZsSWl3aVpYaHdjaUlzSW5WdWFYRjFaU0lzSW1seldFMU1SRzlqSWl3aVpYTmpZWEJsVTJWc1pXTjBiM0lpTENKcGN5SXNJbkJoY25ObFNGUk5UQ0lzSW5KbFlXUjVJaXdpWTJocGJHUnlaVzRpTENKamIyNTBaVzUwY3lJc0luQnlaWFlpTENKamJHOXpaWE4wSWl3aWFXNWtaWGdpTENKd2NtVjJRV3hzSWl3aVlXUmtJaXdpWVdSa1FtRmpheUlzSW5CaGNtVnVkSE1pTENKd1lYSmxiblJ6Vlc1MGFXd2lMQ0p1WlhoMFFXeHNJaXdpYm1WNGRGVnVkR2xzSWl3aWNISmxkbFZ1ZEdsc0lpd2ljMmxpYkdsdVozTWlMQ0pqYjI1MFpXNTBSRzlqZFcxbGJuUWlMQ0pqYjI1MFpXNTBJaXdpY21WMlpYSnpaU0lzSWtOaGJHeGlZV05yY3lJc0ltOXVZMlVpTENKemRHOXdUMjVHWVd4elpTSXNJbTFsYlc5eWVTSXNJbkpsYlc5MlpTSXNJbVJwYzJGaWJHVWlMQ0pzYjJOcklpd2liRzlqYTJWa0lpd2labWx5WlZkcGRHZ2lMQ0ptYVhKbElpd2labWx5WldRaUxDSndjbTl0YVhObElpd2laRzl1WlNJc0ltWmhhV3dpTENKMGFHVnVJaXdpUkdWbVpYSnlaV1FpTENKemRHRjBaU0lzSW1Gc2QyRjVjeUlzSW5CcGNHVWlMQ0p3Y205bmNtVnpjeUlzSW01dmRHbG1lU0lzSW5KbGMyOXNkbVVpTENKeVpXcGxZM1FpTENKVWVYQmxSWEp5YjNJaUxDSnViM1JwWm5sWGFYUm9JaXdpY21WemIyeDJaVmRwZEdnaUxDSmxlR05sY0hScGIyNUliMjlySWl3aWMzUmhZMnRVY21GalpTSXNJbkpsYW1WamRGZHBkR2dpTENKblpYUlRkR0ZqYTBodmIyc2lMQ0p6WlhSVWFXMWxiM1YwSWl3aWQyaGxiaUlzSW1OdmJuTnZiR1VpTENKM1lYSnVJaXdpYm1GdFpTSXNJbTFsYzNOaFoyVWlMQ0p6ZEdGamF5SXNJbkpsWVdSNVJYaGpaWEIwYVc5dUlpd2ljbVZoWkhsWFlXbDBJaXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lJc0luSmxZV1I1VTNSaGRHVWlMQ0prYjFOamNtOXNiQ0lzSW5WcFpDSXNJbU5oWTJobElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmpiMjVtYVdkMWNtRmliR1VpTENKelpYUWlMQ0poWTJObGMzTWlMQ0pvWVhORVlYUmhJaXdpU2xOUFRpSXNJbkJoY25ObElpd2laR0YwWVNJc0luSmxiVzkyWlVSaGRHRWlMQ0pmWkdGMFlTSXNJbDl5WlcxdmRtVkVZWFJoSWl3aWNYVmxkV1VpTENKa1pYRjFaWFZsSWl3aVgzRjFaWFZsU0c5dmEzTWlMQ0p6ZEc5d0lpd2lZMnhsWVhKUmRXVjFaU0lzSW5OdmRYSmpaU0lzSW5OMGVXeGxJaXdpWkdsemNHeGhlU0lzSW1OemN5SXNJbU4xY2lJc0ltTnpjMDUxYldKbGNpSXNJblZ1YVhRaUxDSnpkR0Z5ZENJc0ltSnZaSGtpTENKemFHOTNJaXdpYUdsa1pTSXNJblJ2WjJkc1pTSXNJbTl3ZEdsdmJpSXNJblJvWldGa0lpd2lZMjlzSWl3aWRISWlMQ0owWkNJc0lsOWtaV1poZFd4MElpd2liM0IwWjNKdmRYQWlMQ0owWW05a2VTSXNJblJtYjI5MElpd2lZMjlzWjNKdmRYQWlMQ0pqWVhCMGFXOXVJaXdpZEdnaUxDSmpjbVZoZEdWRWIyTjFiV1Z1ZEVaeVlXZHRaVzUwSWl3aWFIUnRiRkJ5WldacGJIUmxjaUlzSW1OeVpXRjBaVlJsZUhST2IyUmxJaXdpWTJobFkydERiRzl1WlNJc0ltTnNiMjVsVG05a1pTSXNJbTV2UTJ4dmJtVkRhR1ZqYTJWa0lpd2liMlptSWl3aVpYWmxiblFpTENKbmJHOWlZV3dpTENKb1lXNWtiR1Z5SWl3aVpYWmxiblJ6SWl3aWFHRnVaR3hsSWl3aWRISnBaMmRsY21Wa0lpd2laR2x6Y0dGMFkyZ2lMQ0p6Y0dWamFXRnNJaXdpWkdWc1pXZGhkR1ZVZVhCbElpd2lZbWx1WkZSNWNHVWlMQ0p2Y21sblZIbHdaU0lzSW01aGJXVnpjR0ZqWlNJc0ltUmxiR1ZuWVhSbFEyOTFiblFpTENKelpYUjFjQ0lzSW5SbFlYSmtiM2R1SWl3aWNtVnRiM1psUlhabGJuUWlMQ0ptYVhnaUxDSmtaV3hsWjJGMFpWUmhjbWRsZENJc0luQnlaVVJwYzNCaGRHTm9JaXdpYUdGdVpHeGxjbk1pTENKcGMxQnliM0JoWjJGMGFXOXVVM1J2Y0hCbFpDSXNJbU4xY25KbGJuUlVZWEpuWlhRaUxDSmxiR1Z0SWl3aWFYTkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUWlMQ0p5Ym1GdFpYTndZV05sSWl3aWFHRnVaR3hsVDJKcUlpd2ljbVZ6ZFd4MElpd2ljSEpsZG1WdWRFUmxabUYxYkhRaUxDSnpkRzl3VUhKdmNHRm5ZWFJwYjI0aUxDSndiM04wUkdsemNHRjBZMmdpTENKaFpHUlFjbTl3SWl3aVJYWmxiblFpTENKbGJuVnRaWEpoWW14bElpd2liM0pwWjJsdVlXeEZkbVZ1ZENJc0luZHlhWFJoWW14bElpd2liRzloWkNJc0ltNXZRblZpWW14bElpd2lkSEpwWjJkbGNpSXNJbUpzZFhJaUxDSmpiR2xqYXlJc0ltSmxabTl5WlhWdWJHOWhaQ0lzSW5KbGRIVnlibFpoYkhWbElpd2lhWE5FWldaaGRXeDBVSEpsZG1WdWRHVmtJaXdpWkdWbVlYVnNkRkJ5WlhabGJuUmxaQ0lzSW5KbGJHRjBaV1JVWVhKblpYUWlMQ0owYVcxbFUzUmhiWEFpTENKcGMxTnBiWFZzWVhSbFpDSXNJbk4wYjNCSmJXMWxaR2xoZEdWUWNtOXdZV2RoZEdsdmJpSXNJbUZzZEV0bGVTSXNJbUoxWW1Kc1pYTWlMQ0pqWVc1alpXeGhZbXhsSWl3aVkyaGhibWRsWkZSdmRXTm9aWE1pTENKamRISnNTMlY1SWl3aVpHVjBZV2xzSWl3aVpYWmxiblJRYUdGelpTSXNJbTFsZEdGTFpYa2lMQ0p3WVdkbFdDSXNJbkJoWjJWWklpd2ljMmhwWm5STFpYa2lMQ0oyYVdWM0lpd2lZMmhoY2tOdlpHVWlMQ0pyWlhraUxDSnJaWGxEYjJSbElpd2lZblYwZEc5dWN5SXNJbU5zYVdWdWRGZ2lMQ0pqYkdsbGJuUlpJaXdpYjJabWMyVjBXQ0lzSW05bVpuTmxkRmtpTENKd2IybHVkR1Z5U1dRaUxDSndiMmx1ZEdWeVZIbHdaU0lzSW5OamNtVmxibGdpTENKelkzSmxaVzVaSWl3aWRHRnlaMlYwVkc5MVkyaGxjeUlzSW5SdlJXeGxiV1Z1ZENJc0luUnZkV05vWlhNaUxDSjNhR2xqYUNJc0ltMXZkWE5sWlc1MFpYSWlMQ0p0YjNWelpXeGxZWFpsSWl3aWNHOXBiblJsY21WdWRHVnlJaXdpY0c5cGJuUmxjbXhsWVhabElpd2liMjRpTENKdmJtVWlMQ0pCWVNJc0lrSmhJaXdpUTJFaUxDSkVZU0lzSWtWaElpd2lSbUVpTENKSFlTSXNJa2hoSWl3aVNXRWlMQ0pLWVNJc0ltaDBiV3dpTENKamJHOXVaU0lzSW5OeVl5SXNJbDlsZG1Gc1ZYSnNJaXdpUzJFaUxDSmpiR1ZoYmtSaGRHRWlMQ0prWlhSaFkyZ2lMQ0poY0hCbGJtUWlMQ0p3Y21Wd1pXNWtJaXdpYVc1elpYSjBRbVZtYjNKbElpd2lZbVZtYjNKbElpd2lZV1owWlhJaUxDSnlaWEJzWVdObFYybDBhQ0lzSW5KbGNHeGhZMlZEYUdsc1pDSXNJbUZ3Y0dWdVpGUnZJaXdpY0hKbGNHVnVaRlJ2SWl3aWFXNXpaWEowUVdaMFpYSWlMQ0p5WlhCc1lXTmxRV3hzSWl3aVRHRWlMQ0pOWVNJc0lrNWhJaXdpYjNCbGJtVnlJaXdpWjJWMFEyOXRjSFYwWldSVGRIbHNaU0lzSW1OemMxUmxlSFFpTENKdFlYSm5hVzVNWldaMElpd2lkMmxrZEdnaUxDSnRZWEpuYVc1U2FXZG9kQ0lzSW1KaFkydG5jbTkxYm1SRGJHbHdJaXdpWTJ4bFlYSkRiRzl1WlZOMGVXeGxJaXdpY0dsNFpXeFFiM05wZEdsdmJpSXNJbUp2ZUZOcGVtbHVaMUpsYkdsaFlteGxJaXdpY0dsNFpXeE5ZWEpuYVc1U2FXZG9kQ0lzSW5KbGJHbGhZbXhsVFdGeVoybHVUR1ZtZENJc0lrOWhJaXdpWjJWMFVISnZjR1Z5ZEhsV1lXeDFaU0lzSW0xcGJsZHBaSFJvSWl3aWJXRjRWMmxrZEdnaUxDSlFZU0lzSWxGaElpd2lVbUVpTENKVFlTSXNJbkJ2YzJsMGFXOXVJaXdpZG1semFXSnBiR2wwZVNJc0lsUmhJaXdpYkdWMGRHVnlVM0JoWTJsdVp5SXNJbVp2Ym5SWFpXbG5hSFFpTENKVllTSXNJbFpoSWl3aVYyRWlMQ0pZWVNJc0ltTnpjMUJ5YjNCeklpd2lXV0VpTENKdFlYZ2lMQ0phWVNJc0lpUmhJaXdpWTNOelNHOXZhM01pTENKdmNHRmphWFI1SWl3aVlXNXBiV0YwYVc5dVNYUmxjbUYwYVc5dVEyOTFiblFpTENKamIyeDFiVzVEYjNWdWRDSXNJbVpwYkd4UGNHRmphWFI1SWl3aVpteGxlRWR5YjNjaUxDSm1iR1Y0VTJoeWFXNXJJaXdpYkdsdVpVaGxhV2RvZENJc0ltOXlaR1Z5SWl3aWIzSndhR0Z1Y3lJc0luZHBaRzkzY3lJc0lucEpibVJsZUNJc0lucHZiMjBpTENKelpYUlFjbTl3WlhKMGVTSXNJbWx6Um1sdWFYUmxJaXdpWjJWMFEyeHBaVzUwVW1WamRITWlMQ0puWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRaUxDSnNaV1owSWl3aWJXRnlaMmx1SWl3aWNHRmtaR2x1WnlJc0ltSnZjbVJsY2lJc0ltVjRjR0Z1WkNJc0lsOWhJaXdpVkhkbFpXNGlMQ0p3Y205d0lpd2laV0Z6YVc1bklpd2liM0IwYVc5dWN5SXNJbkJ5YjNCSWIyOXJjeUlzSW5KMWJpSXNJbVIxY21GMGFXOXVJaXdpY0c5eklpd2ljM1JsY0NJc0ltWjRJaXdpYzJOeWIyeHNWRzl3SWl3aWMyTnliMnhzVEdWbWRDSXNJbXhwYm1WaGNpSXNJbk4zYVc1bklpd2lZMjl6SWl3aVVFa2lMQ0poWWlJc0ltSmlJaXdpWTJJaUxDSmtZaUlzSW1WaUlpd2lhR2xrWkdWdUlpd2ljbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSWl3aWFXNTBaWEoyWVd3aUxDSjBhV05ySWl3aVptSWlMQ0puWWlJc0ltaGxhV2RvZENJc0ltaGlJaXdpYTJJaUxDSjBkMlZsYm1WeWN5SXNJbWxpSWl3aWRXNXhkV1YxWldRaUxDSnZkbVZ5Wm14dmR5SXNJbTkyWlhKbWJHOTNXQ0lzSW05MlpYSm1iRzkzV1NJc0ltcGlJaXdpY0hKbFptbHNkR1Z5Y3lJc0luTjBZWEowVkdsdFpTSXNJblIzWldWdWN5SXNJbkJ5YjNCeklpd2liM0IwY3lJc0luTndaV05wWVd4RllYTnBibWNpTENKdmNtbG5hVzVoYkZCeWIzQmxjblJwWlhNaUxDSnZjbWxuYVc1aGJFOXdkR2x2Ym5NaUxDSmpjbVZoZEdWVWQyVmxiaUlzSW1OdmJYQnNaWFJsSWl3aWRHbHRaWElpTENKaGJtbHRJaXdpUVc1cGJXRjBhVzl1SWl3aWRIZGxaVzVsY2lJc0luQnlaV1pwYkhSbGNpSXNJbk53WldWa0lpd2ljM0JsWldSeklpd2liMnhrSWl3aVptRmtaVlJ2SWl3aVlXNXBiV0YwWlNJc0ltWnBibWx6YUNJc0luUnBiV1Z5Y3lJc0luTnNhV1JsUkc5M2JpSXNJbk5zYVdSbFZYQWlMQ0p6Ykdsa1pWUnZaMmRzWlNJc0ltWmhaR1ZKYmlJc0ltWmhaR1ZQZFhRaUxDSm1ZV1JsVkc5bloyeGxJaXdpYzJ4dmR5SXNJbVpoYzNRaUxDSmtaV3hoZVNJc0ltTnNaV0Z5VkdsdFpXOTFkQ0lzSW1Ob1pXTnJUMjRpTENKdmNIUlRaV3hsWTNSbFpDSXNJbkpoWkdsdlZtRnNkV1VpTENKc1lpSXNJbTFpSWl3aWNtVnRiM1psUVhSMGNpSXNJbUYwZEhKSWIyOXJjeUlzSW01aUlpd2liMklpTENKeVpXMXZkbVZRY205d0lpd2ljSEp2Y0VacGVDSXNJbkJoY25ObFNXNTBJaXdpY0dJaUxDSnhZaUlzSW1Ga1pFTnNZWE56SWl3aWNtVnRiM1psUTJ4aGMzTWlMQ0owYjJkbmJHVkRiR0Z6Y3lJc0ltaGhjME5zWVhOeklpd2ljbUlpTENKMllXd2lMQ0oyWVd4SWIyOXJjeUlzSW5OaUlpd2lhWE5VY21sbloyVnlJaXdpY0dGeVpXNTBWMmx1Wkc5M0lpd2ljMmx0ZFd4aGRHVWlMQ0owY21sbloyVnlTR0Z1Wkd4bGNpSXNJbWh2ZG1WeUlpd2labTlqZFhOcGJpSXNJblJpSWl3aWRXSWlMQ0oyWWlJc0luQmhjbk5sV0UxTUlpd2lSRTlOVUdGeWMyVnlJaXdpY0dGeWMyVkdjbTl0VTNSeWFXNW5JaXdpZDJJaUxDSjRZaUlzSW5saUlpd2llbUlpTENKQllpSXNJbkJoY21GdElpd2laVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBJaXdpYzJWeWFXRnNhWHBsSWl3aWMyVnlhV0ZzYVhwbFFYSnlZWGtpTENKQ1lpSXNJa05pSWl3aVJHSWlMQ0pGWWlJc0lrWmlJaXdpUjJJaUxDSklZaUlzSWtsaUlpd2lTbUlpTENKTFlpSXNJa3hpSWl3aVRXSWlMQ0pPWWlJc0ltUmhkR0ZVZVhCbGN5SXNJazlpSWl3aVlXcGhlRk5sZEhScGJtZHpJaXdpWm14aGRFOXdkR2x2Ym5NaUxDSlFZaUlzSW0xcGJXVlVlWEJsSWl3aVoyVjBVbVZ6Y0c5dWMyVklaV0ZrWlhJaUxDSmpiMjUyWlhKMFpYSnpJaXdpVVdJaUxDSnlaWE53YjI1elpVWnBaV3hrY3lJc0ltUmhkR0ZHYVd4MFpYSWlMQ0prWVhSaFZIbHdaU0lzSW1GamRHbDJaU0lzSW14aGMzUk5iMlJwWm1sbFpDSXNJbVYwWVdjaUxDSjFjbXdpTENKcGMweHZZMkZzSWl3aWNISnZkRzlqYjJ3aUxDSndjbTlqWlhOelJHRjBZU0lzSW1GemVXNWpJaXdpWTI5dWRHVnVkRlI1Y0dVaUxDSmhZMk5sY0hSeklpd2llRzFzSWl3aWFuTnZiaUlzSW1OdmJuUmxlSFFpTENKaGFtRjRVMlYwZFhBaUxDSmhhbUY0VUhKbFptbHNkR1Z5SWl3aVlXcGhlRlJ5WVc1emNHOXlkQ0lzSW1GcVlYZ2lMQ0p6ZEdGMGRYTkRiMlJsSWl3aVoyVjBRV3hzVW1WemNHOXVjMlZJWldGa1pYSnpJaXdpYzJWMFVtVnhkV1Z6ZEVobFlXUmxjaUlzSW05MlpYSnlhV1JsVFdsdFpWUjVjR1VpTENKemRHRjBkWE1pTENKaFltOXlkQ0lzSW0xbGRHaHZaQ0lzSW1OeWIzTnpSRzl0WVdsdUlpd2lhRzl6ZENJc0luUnlZV1JwZEdsdmJtRnNJaXdpYUdGelEyOXVkR1Z1ZENJc0ltbG1UVzlrYVdacFpXUWlMQ0pvWldGa1pYSnpJaXdpWW1WbWIzSmxVMlZ1WkNJc0luTjFZMk5sYzNNaUxDSjBhVzFsYjNWMElpd2ljMlZ1WkNJc0luTjBZWFIxYzFSbGVIUWlMQ0puWlhSS1UwOU9JaXdpWjJWMFUyTnlhWEIwSWl3aWQzSmhjRUZzYkNJc0ltWnBjbk4wUld4bGJXVnVkRU5vYVd4a0lpd2lkM0poY0VsdWJtVnlJaXdpZDNKaGNDSXNJblZ1ZDNKaGNDSXNJblpwYzJsaWJHVWlMQ0p2Wm1aelpYUlhhV1IwYUNJc0ltOW1abk5sZEVobGFXZG9kQ0lzSW5ob2NpSXNJbGhOVEVoMGRIQlNaWEYxWlhOMElpd2lVbUlpTENKVFlpSXNJbU52Y25NaUxDSnZjR1Z1SWl3aWRYTmxjbTVoYldVaUxDSjRhSEpHYVdWc1pITWlMQ0p2Ym14dllXUWlMQ0p2Ym1WeWNtOXlJaXdpYjI1aFltOXlkQ0lzSW05dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlNJc0luSmxjM0J2Ym5ObFZIbHdaU0lzSW5KbGMzQnZibk5sVkdWNGRDSXNJbUpwYm1GeWVTSXNJbkpsYzNCdmJuTmxJaXdpYzJOeWFYQjBJaXdpWTJoaGNuTmxkQ0lzSW5OamNtbHdkRU5vWVhKelpYUWlMQ0pVWWlJc0lsVmlJaXdpYW5OdmJuQWlMQ0pxYzI5dWNFTmhiR3hpWVdOcklpd2lZM0psWVhSbFNGUk5URVJ2WTNWdFpXNTBJaXdpYVcxd2JHVnRaVzUwWVhScGIyNGlMQ0poYm1sdFlYUmxaQ0lzSW05bVpuTmxkQ0lzSW5ObGRFOW1abk5sZENJc0luVnphVzVuSWl3aWNHRm5aVmxQWm1aelpYUWlMQ0pqYkdsbGJuUlViM0FpTENKd1lXZGxXRTltWm5ObGRDSXNJbU5zYVdWdWRFeGxablFpTENKdlptWnpaWFJRWVhKbGJuUWlMQ0p6WTNKdmJHeFVieUlzSWtobGFXZG9kQ0lzSWxkcFpIUm9JaXdpWW1sdVpDSXNJblZ1WW1sdVpDSXNJbVJsYkdWbllYUmxJaXdpZFc1a1pXeGxaMkYwWlNJc0ltaHZiR1JTWldGa2VTSXNJbkJoY25ObFNsTlBUaUlzSW1SbFptbHVaU0lzSW1GdFpDSXNJbFppSWl3aWFsRjFaWEo1SWl3aVYySWlMQ0p1YjBOdmJtWnNhV04wSWl3aVJrOVZUa1JCVkVsUFRsOVdSVkpUU1U5T0lpd2lSbTkxYm1SaGRHbHZiaUlzSW5abGNuTnBiMjRpTENKZmNHeDFaMmx1Y3lJc0lsOTFkV2xrY3lJc0luSjBiQ0lzSW5Cc2RXZHBiaUlzSW1aMWJtTjBhVzl1VG1GdFpTSXNJbUYwZEhKT1lXMWxJaXdpYUhsd2FHVnVZWFJsSWl3aWNtVm5hWE4wWlhKUWJIVm5hVzRpTENKd2JIVm5hVzVPWVcxbElpd2lkWFZwWkNJc0lrZGxkRmx2UkdsbmFYUnpJaXdpSkdWc1pXMWxiblFpTENKMWJuSmxaMmx6ZEdWeVVHeDFaMmx1SWl3aWNtVkpibWwwSWl3aWNHeDFaMmx1Y3lJc0ltbHpTbEVpTENKZmFXNXBkQ0lzSWw5MGFHbHpJaXdpWm01eklpd2ljR3huY3lJc0ltWnZja1ZoWTJnaUxDSm1iM1Z1WkdGMGFXOXVJaXdpYTJWNWN5SXNJbVZ5Y2lJc0luSnZkVzVrSWl3aWNHOTNJaXdpY21WbWJHOTNJaXdpSkdWc1pXMGlMQ0lrWld3aUxDSjBhR2x1WnlJc0ltOXdkQ0lzSW1Wc0lpd2ljR0Z5YzJWV1lXeDFaU0lzSW1WeUlpd2laMlYwUm01T1lXMWxJaXdpZEhKaGJuTnBkR2x2Ym1WdVpDSXNJblJ5WVc1emFYUnBiMjV6SWl3aWRYUnBiQ0lzSW5Sb2NtOTBkR3hsSWl3aVpuVnVZeUlzSW1GeVozTWlMQ0lrYldWMFlTSXNJaVJ1YjBwVElpd2lUV1ZrYVdGUmRXVnllU0lzSW5Cc2RXZERiR0Z6Y3lJc0luVnVaR1ZtYVc1bFpDSXNJbEpsWm1WeVpXNWpaVVZ5Y205eUlpd2laMlYwVkdsdFpTSXNJblpsYm1SdmNuTWlMQ0oyY0NJc0ltTmhibU5sYkVGdWFXMWhkR2x2YmtaeVlXMWxJaXdpYm1GMmFXZGhkRzl5SWl3aWRYTmxja0ZuWlc1MElpd2liR0Z6ZEZScGJXVWlMQ0pqWVd4c1ltRmpheUlzSW01bGVIUlVhVzFsSWl3aWNHVnlabTl5YldGdVkyVWlMQ0pHZFc1amRHbHZiaUlzSW05VWFHbHpJaXdpWVVGeVozTWlMQ0ptVkc5Q2FXNWtJaXdpWms1UFVDSXNJbVpDYjNWdVpDSXNJbVoxYm1OT1lXMWxVbVZuWlhnaUxDSnlaWE4xYkhSeklpd2ljM1J5SWl3aVgyTnlaV0YwWlVOc1lYTnpJaXdpWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeUlzSW1SbGMyTnlhWEIwYjNJaUxDSkRiMjV6ZEhKMVkzUnZjaUlzSW5CeWIzUnZVSEp2Y0hNaUxDSnpkR0YwYVdOUWNtOXdjeUlzSWw5amJHRnpjME5oYkd4RGFHVmpheUlzSW1sdWMzUmhibU5sSWl3aVQyWm1RMkZ1ZG1Geklpd2laV3hsYldWdWRDSXNJbVJsWm1GMWJIUnpJaXdpSkd4aGMzUlVjbWxuWjJWeUlpd2lKSFJ5YVdkblpYSnpJaXdpWDJWMlpXNTBjeUlzSWt0bGVXSnZZWEprSWl3aWNtVm5hWE4wWlhJaUxDSjBjbUZ1YzJsMGFXOXVJaXdpWTI5dWRHVnVkRTkyWlhKc1lYa2lMQ0p2ZG1WeWJHRjVJaXdpYjNabGNteGhlVkJ2YzJsMGFXOXVJaXdpSkc5MlpYSnNZWGtpTENKcGMxSmxkbVZoYkdWa0lpd2ljbVYyWldGc1EyeGhjM01pTENKeVpYWmxZV3hQYmlJc0lsOXpaWFJOVVVOb1pXTnJaWElpTENKMGNtRnVjMmwwYVc5dVZHbHRaU0lzSW5SeVlXNXphWFJwYjI1RWRYSmhkR2x2YmlJc0ltTnNiM05sSWl3aVgyaGhibVJzWlV0bGVXSnZZWEprSWl3aVkyeHZjMlZQYmtOc2FXTnJJaXdpSkhSaGNtZGxkQ0lzSW1GMFRHVmhjM1FpTENKeVpYWmxZV3dpTENJa1kyeHZjMlZ5SWl3aVgzTjBiM0JUWTNKdmJHeHBibWNpTENKZmNtVmpiM0prVTJOeWIyeHNZV0pzWlNJc0luTmpjbTlzYkVobGFXZG9kQ0lzSW1Oc2FXVnVkRWhsYVdkb2RDSXNJbUZzYkc5M1ZYQWlMQ0poYkd4dmQwUnZkMjRpTENKc1lYTjBXU0lzSWw5emRHOXdVMk55YjJ4c1VISnZjR0ZuWVhScGIyNGlMQ0oxY0NJc0ltUnZkMjRpTENKbWIzSmpaVlJ2SWl3aVkyOXVkR1Z1ZEZOamNtOXNiQ0lzSW1GMWRHOUdiMk4xY3lJc0luUnlZWEJHYjJOMWN5SXNJbkpsYkdWaGMyVkdiMk4xY3lJc0lsOTBhR2x6TWlJc0ltaGhibVJzWlV0bGVTSXNJbWhoYm1Sc1pXUWlMQ0prWlhOMGNtOTVJaXdpVDNKaWFYUWlMQ0pmY21WelpYUWlMQ0lrZDNKaGNIQmxjaUlzSW1OdmJuUmhhVzVsY2tOc1lYTnpJaXdpSkhOc2FXUmxjeUlzSW5Oc2FXUmxRMnhoYzNNaUxDSWthVzFoWjJWeklpd2lhVzVwZEVGamRHbDJaU0lzSW5WelpVMVZTU0lzSW05dVNXMWhaMlZ6VEc5aFpHVmtJaXdpWDNCeVpYQmhjbVZHYjNKUGNtSnBkQ0lzSW1KMWJHeGxkSE1pTENKZmJHOWhaRUoxYkd4bGRITWlMQ0poZFhSdlVHeGhlU0lzSW1kbGIxTjVibU1pTENKaFkyTmxjM05wWW14bElpd2lKR0oxYkd4bGRITWlMQ0ppYjNoUFprSjFiR3hsZEhNaUxDSlVhVzFsY2lJc0luUnBiV1Z5UkdWc1lYa2lMQ0pwYm1acGJtbDBaU0lzSW1Ob1lXNW5aVk5zYVdSbElpd2lYM05sZEZkeVlYQndaWEpJWldsbmFIUWlMQ0owWlcxd0lpd2lZMjkxYm5SbGNpSXNJbk4zYVhCbElpd2ljR0YxYzJWUGJraHZkbVZ5SWl3aWNHRjFjMlVpTENKdVlYWkNkWFIwYjI1eklpd2lKR052Ym5SeWIyeHpJaXdpYm1WNGRFTnNZWE56SWl3aWNISmxka05zWVhOeklpd2lhV1I0SWl3aWJIUnlJaXdpSkhOc2FXUmxJaXdpY0hKbGRtbHZkWE1pTENKeVpYTjBZWEowSWl3aVgzVndaR0YwWlVKMWJHeGxkSE1pTENKcGMweFVVaUlzSW1Ob2IzTmxibE5zYVdSbElpd2lKR04xY2xOc2FXUmxJaXdpSkdacGNuTjBVMnhwWkdVaUxDSWtiR0Z6ZEZOc2FXUmxJaXdpWkdseVNXNGlMQ0prYVhKUGRYUWlMQ0lrYm1WM1UyeHBaR1VpTENKcGJtWnBibWwwWlZkeVlYQWlMQ0pOYjNScGIyNGlMQ0poYm1sdFlYUmxTVzRpTENKaGJtbHRZWFJsVDNWMElpd2lhWE5RWVhWelpXUWlMQ0lrYjJ4a1FuVnNiR1YwSWl3aWMzQmhiaUlzSWlSdVpYZENkV3hzWlhRaUxDSmhibWx0U1c1R2NtOXRVbWxuYUhRaUxDSmhibWx0VDNWMFZHOVNhV2RvZENJc0ltRnVhVzFKYmtaeWIyMU1aV1owSWl3aVlXNXBiVTkxZEZSdlRHVm1kQ0lzSW10bGVVTnZaR1Z6SWl3aVkyOXRiV0Z1WkhNaUxDSm5aWFJMWlhsRGIyUmxjeUlzSW5CaGNuTmxTMlY1SWl3aVkyOXRjRzl1Wlc1MElpd2lablZ1WTNScGIyNXpJaXdpWTI5dGJXRnVaRXhwYzNRaUxDSmpiV1J6SWl3aVkyOXRiV0Z1WkNJc0luVnVhR0Z1Wkd4bFpDSXNJbVpwYm1SR2IyTjFjMkZpYkdVaUxDSmpiMjF3YjI1bGJuUk9ZVzFsSWl3aUpHWnZZM1Z6WVdKc1pTSXNJaVJtYVhKemRFWnZZM1Z6WVdKc1pTSXNJaVJzWVhOMFJtOWpkWE5oWW14bElpd2lhMk56SWl3aWEyTWlMQ0prWldaaGRXeDBVWFZsY21sbGN5SXNJbXhoYm1SelkyRndaU0lzSW5CdmNuUnlZV2wwSWl3aWNtVjBhVzVoSWl3aWNYVmxjbWxsY3lJc0ltTjFjbkpsYm5RaUxDSnpaV3htSWl3aVpYaDBjbUZqZEdWa1UzUjViR1Z6SWl3aWJtRnRaV1JSZFdWeWFXVnpJaXdpY0dGeWMyVlRkSGxzWlZSdlQySnFaV04wSWl3aVgyZGxkRU4xY25KbGJuUlRhWHBsSWl3aVgzZGhkR05vWlhJaUxDSnphWHBsSWl3aWNYVmxjbmtpTENKdFlYUmphRTFsWkdsaElpd2liV0YwWTJobFpDSXNJbTVsZDFOcGVtVWlMQ0pqZFhKeVpXNTBVMmw2WlNJc0luTjBlV3hsVFdWa2FXRWlMQ0p0WldScFlTSXNJbWx1Wm04aUxDSmpkWEp5Wlc1MFUzUjViR1VpTENKdFlYUmphRTFsWkdsMWJTSXNJbk4wZVd4bFUyaGxaWFFpTENKemRIbHNaVTlpYW1WamRDSXNJbkpsWkhWalpTSXNJbkpsZENJc0luQmhjblJ6SWl3aVpHVmpiMlJsVlZKSlEyOXRjRzl1Wlc1MElpd2lhVzVwZEVOc1lYTnpaWE1pTENKaFkzUnBkbVZEYkdGemMyVnpJaXdpWVc1cGJXRjBhVzl1SWl3aVRXOTJaU0lzSW5CeWIyY2lMQ0p0YjNabElpd2lkSE1pTENKcGMwbHVJaXdpYVc1cGRFTnNZWE56SWl3aVlXTjBhWFpsUTJ4aGMzTWlMQ0p1WVcxbFUzQmhZMlVpTENKeVpXMWhhVzRpTENKcGJXRm5aWE1pTENKMWJteHZZV1JsWkNJc0luTnBibWRzWlVsdFlXZGxURzloWkdWa0lpd2ljM0J2ZEZOM2FYQmxJaXdpYlc5MlpWUm9jbVZ6YUc5c1pDSXNJblJwYldWVWFISmxjMmh2YkdRaUxDSnpkR0Z5ZEZCdmMxZ2lMQ0p6ZEdGeWRGQnZjMWtpTENKbGJHRndjMlZrVkdsdFpTSXNJbWx6VFc5MmFXNW5JaXdpYjI1VWIzVmphRVZ1WkNJc0ltOXVWRzkxWTJoTmIzWmxJaXdpWkhnaUxDSmtlU0lzSW1GaWN5SXNJbTl1Vkc5MVkyaFRkR0Z5ZENJc0ltRmtaRlJ2ZFdOb0lpd2lhR0Z1Wkd4bFZHOTFZMmdpTENKbGRtVnVkRlI1Y0dWeklpd2lkRzkxWTJoemRHRnlkQ0lzSW5SdmRXTm9iVzkyWlNJc0luUnZkV05vWlc1a0lpd2ljMmx0ZFd4aGRHVmtSWFpsYm5RaUxDSk5iM1Z6WlVWMlpXNTBJaXdpWTNKbFlYUmxSWFpsYm5RaUxDSnBibWwwVFc5MWMyVkZkbVZ1ZENJc0ltUnBjM0JoZEdOb1JYWmxiblFpTENKTmRYUmhkR2x2Yms5aWMyVnlkbVZ5SWl3aWNISmxabWw0WlhNaUxDSjBjbWxuWjJWeWN5SXNJbU5vWldOclRHbHpkR1Z1WlhKeklpd2laWFpsYm5SelRHbHpkR1Z1WlhJaUxDSnlaWE5wZW1WTWFYTjBaVzVsY2lJc0luTmpjbTlzYkV4cGMzUmxibVZ5SWl3aWJYVjBZWFJsVEdsemRHVnVaWElpTENKamJHOXpaVzFsVEdsemRHVnVaWElpTENKNVpYUnBRbTk0WlhNaUxDSndiSFZuVG1GdFpYTWlMQ0pzYVhOMFpXNWxjbk1pTENKd2JIVm5hVzVKWkNJc0ltUmxZbTkxYm1ObElpd2lKRzV2WkdWeklpd2libTlrWlhNaUxDSnNhWE4wWlc1cGJtZEZiR1Z0Wlc1MGMwMTFkR0YwYVc5dUlpd2liWFYwWVhScGIyNVNaV052Y21SelRHbHpkQ0lzSW1GMGRISnBZblYwWlU1aGJXVWlMQ0psYkdWdFpXNTBUMkp6WlhKMlpYSWlMQ0p2WW5ObGNuWmxJaXdpWTJocGJHUk1hWE4wSWl3aVkyaGhjbUZqZEdWeVJHRjBZU0lzSW5OMVluUnlaV1VpTENKaGRIUnlhV0oxZEdWR2FXeDBaWElpTENKSlNHVmhjbGx2ZFNJc0ltWmhZM1J2Y25raUxDSnlaWEYxYVhKbElpd2lUVzkwYVc5dVZVa2lMQ0psYm1SRmRtVnVkQ0pkTENKdFlYQndhVzVuY3lJNklqczdPenRCUVVGQk8wRkJRMEVzUTBGQlF5eFZRVUZUUVN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETzBGQlFXRXNjMEpCUVdsQ1F5eE5RVUZxUWl4NVEwRkJhVUpCTEUxQlFXcENMRTFCUVhsQ0xHOUNRVUZwUWtFc1QwRkJUME1zVDBGQmVFSXNRMEZCZWtJc1IwRkJlVVJFTEU5QlFVOURMRTlCUVZBc1IwRkJaVWdzUlVGQlJVa3NVVUZCUml4SFFVRlhTQ3hGUVVGRlJDeERRVUZHTEVWQlFVa3NRMEZCUXl4RFFVRk1MRU5CUVZnc1IwRkJiVUlzVlVGQlUwRXNRMEZCVkN4RlFVRlhPMEZCUVVNc1VVRkJSeXhEUVVGRFFTeEZRVUZGU1N4UlFVRk9MRVZCUVdVc1RVRkJUU3hKUVVGSlF5eExRVUZLTEVOQlFWVXNNRU5CUVZZc1EwRkJUaXhEUVVFMFJDeFBRVUZQU2l4RlFVRkZSQ3hEUVVGR0xFTkJRVkE3UVVGQldTeEhRVUU1VEN4SFFVRXJURU1zUlVGQlJVUXNRMEZCUml4RFFVRXZURHRCUVVGdlRTeERRVUV2VGl4RFFVRm5UeXhsUVVGaExFOUJRVTlOTEUxQlFYQkNMRWRCUVRKQ1FTeE5RVUV6UWl4WlFVRm9UeXhGUVVGMVVTeFZRVUZUVGl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETzBGQlFXRXNUVUZCU1Uwc1NVRkJSU3hGUVVGT08wRkJRVUVzVFVGQlUwTXNTVUZCUlZJc1JVRkJSVWtzVVVGQllqdEJRVUZCTEUxQlFYTkNTeXhKUVVGRlF5eFBRVUZQUXl4alFVRXZRanRCUVVGQkxFMUJRVGhEUXl4SlFVRkZUQ3hGUVVGRlRTeExRVUZzUkR0QlFVRkJMRTFCUVhkRVF5eEpRVUZGVUN4RlFVRkZVU3hOUVVFMVJEdEJRVUZCTEUxQlFXMUZReXhKUVVGRlZDeEZRVUZGVlN4SlFVRjJSVHRCUVVGQkxFMUJRVFJGUXl4SlFVRkZXQ3hGUVVGRldTeFBRVUZvUmp0QlFVRkJMRTFCUVhkR1F5eEpRVUZGTEVWQlFURkdPMEZCUVVFc1RVRkJOa1pETEVsQlFVVkVMRVZCUVVWRkxGRkJRV3BITzBGQlFVRXNUVUZCTUVkRExFbEJRVVZJTEVWQlFVVkpMR05CUVRsSE8wRkJRVUVzVFVGQk5raERMRWxCUVVWR0xFVkJRVVZFTEZGQlFXcEpPMEZCUVVFc1RVRkJNRWxKTEVsQlFVVkVMRVZCUVVWRkxFbEJRVVlzUTBGQlQycENMRTFCUVZBc1EwRkJOVWs3UVVGQlFTeE5RVUV5U210Q0xFbEJRVVVzUlVGQk4wb3NRMEZCWjBzc1UwRkJVME1zUTBGQlZDeERRVUZYTjBJc1EwRkJXQ3hGUVVGaFF5eERRVUZpTEVWQlFXVTdRVUZCUTBFc1VVRkJSVUVzUzBGQlIwOHNRMEZCVEN4RFFVRlBMRWxCUVVsRUxFbEJRVVZPTEVWQlFVVTJRaXhoUVVGR0xFTkJRV2RDTEZGQlFXaENMRU5CUVU0c1EwRkJaME4yUWl4RlFVRkZkMElzU1VGQlJpeEhRVUZQTDBJc1EwRkJVQ3hGUVVGVFF5eEZRVUZGSzBJc1NVRkJSaXhEUVVGUFF5eFhRVUZRTEVOQlFXMUNNVUlzUTBGQmJrSXNSVUZCYzBJeVFpeFZRVUYwUWl4RFFVRnBRME1zVjBGQmFrTXNRMEZCTmtNMVFpeERRVUUzUXl4RFFVRlVPMEZCUVhsRUxFOUJRVWsyUWl4SlFVRkZMRTlCUVU0N1FVRkJRU3hOUVVGalF5eEpRVUZGTEZOQlFVWkJMRU5CUVVVc1EwRkJVM0pETEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zVjBGQlR5eEpRVUZKYjBNc1JVRkJSVU1zUlVGQlJpeERRVUZMUXl4SlFVRlVMRU5CUVdOMlF5eERRVUZrTEVWQlFXZENReXhEUVVGb1FpeERRVUZRTzBGQlFUQkNMRWRCUVhoRU8wRkJRVUVzVFVGQmVVUjFReXhKUVVGRkxHOURRVUV6UkR0QlFVRkJMRTFCUVdkSFF5eEpRVUZGTEU5QlFXeEhPMEZCUVVFc1RVRkJNRWRETEVsQlFVVXNWMEZCTlVjN1FVRkJRU3hOUVVGM1NFTXNTVUZCUlN4VFFVRkdRU3hEUVVGRkxFTkJRVk16UXl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEZkQlFVOUJMRVZCUVVVeVF5eFhRVUZHTEVWQlFWQTdRVUZCZFVJc1IwRkJMMG9zUTBGQlowdFFMRVZCUVVWRExFVkJRVVlzUjBGQlMwUXNSVUZCUlZFc1UwRkJSaXhIUVVGWkxFVkJRVU5ETEZGQlFVOVdMRU5CUVZJc1JVRkJWVmNzWVVGQldWWXNRMEZCZEVJc1JVRkJkMEpYTEZGQlFVOHNRMEZCTDBJc1JVRkJhVU5ETEZOQlFWRXNiVUpCUVZVN1FVRkJReXhoUVVGUGNrTXNSVUZCUldVc1NVRkJSaXhEUVVGUExFbEJRVkFzUTBGQlVEdEJRVUZ2UWl4TFFVRjRSU3hGUVVGNVJYVkNMRXRCUVVrc1lVRkJVMnhFTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU4c1VVRkJUVUVzUTBGQlRpeEhRVUZSV1N4RlFVRkZaU3hKUVVGR0xFTkJRVThzU1VGQlVDeERRVUZTTEVkQlFYRkNNMElzU1VGQlJTeERRVUZHTEVkQlFVa3NTMEZCUzBFc1NVRkJSU3hMUVVGTFowUXNUVUZCV2l4RFFVRktMRWRCUVhkQ0xFdEJRVXRvUkN4RFFVRk1MRU5CUVhCRU8wRkJRVFJFTEV0QlFYSktMRVZCUVhOS2JVUXNWMEZCVlN4dFFrRkJVMjVFTEVOQlFWUXNSVUZCVnp0QlFVRkRMRlZCUVVsRExFbEJRVVZ2UXl4RlFVRkZaU3hMUVVGR0xFTkJRVkVzUzBGQlMwd3NWMEZCVEN4RlFVRlNMRVZCUVRKQ0wwTXNRMEZCTTBJc1EwRkJUaXhEUVVGdlF5eFBRVUZQUXl4RlFVRkZiMFFzVlVGQlJpeEhRVUZoTEVsQlFXSXNSVUZCYTBKd1JDeERRVUY2UWp0QlFVRXlRaXhMUVVFelR5eEZRVUUwVDNGRUxFMUJRVXNzWTBGQlUzUkVMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVTl4UXl4RlFVRkZhVUlzU1VGQlJpeERRVUZQTEVsQlFWQXNSVUZCV1hSRUxFTkJRVm9zUTBGQlVEdEJRVUZ6UWl4TFFVRnVVaXhGUVVGdlVuVkVMRXRCUVVrc1lVRkJVM1pFTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU4c1MwRkJTMjFFTEZOQlFVd3NRMEZCWldRc1JVRkJSV3RDTEVkQlFVWXNRMEZCVFN4SlFVRk9MRVZCUVZjc1ZVRkJVM1JFTEVOQlFWUXNSVUZCVjAwc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWlVGQlQxQXNSVUZCUlRKQ0xFbEJRVVlzUTBGQlR6RkNMRU5CUVZBc1JVRkJVMDBzUTBGQlZDeEZRVUZYVGl4RFFVRllMRU5CUVZBN1FVRkJjVUlzVDBGQk9VTXNRMEZCWml4RFFVRlFPMEZCUVhWRkxFdEJRVE5YTEVWQlFUUlhXU3hQUVVGTkxHbENRVUZWTzBGQlFVTXNZVUZCVHl4TFFVRkxjME1zVTBGQlRDeERRVUZsZGtNc1JVRkJSVFJETEV0QlFVWXNRMEZCVVN4SlFVRlNMRVZCUVdGRExGTkJRV0lzUTBGQlppeERRVUZRTzBGQlFTdERMRXRCUVRWaExFVkJRVFpoUXl4UFFVRk5MR2xDUVVGVk8wRkJRVU1zWVVGQlR5eExRVUZMUXl4RlFVRk1MRU5CUVZFc1EwRkJVaXhEUVVGUU8wRkJRV3RDTEV0QlFXaGtMRVZCUVdsa1F5eE5RVUZMTEdkQ1FVRlZPMEZCUVVNc1lVRkJUeXhMUVVGTFJDeEZRVUZNTEVOQlFWRXNRMEZCUXl4RFFVRlVMRU5CUVZBN1FVRkJiVUlzUzBGQmNHWXNSVUZCY1daQkxFbEJRVWNzV1VGQlV6TkVMRU5CUVZRc1JVRkJWenRCUVVGRExGVkJRVWxETEVsQlFVVXNTMEZCU3l0RExFMUJRVmc3UVVGQlFTeFZRVUZyUW5wRExFbEJRVVVzUTBGQlExQXNRMEZCUkN4SlFVRkpRU3hKUVVGRkxFTkJRVVlzUjBGQlNVTXNRMEZCU2l4SFFVRk5MRU5CUVZZc1EwRkJjRUlzUTBGQmFVTXNUMEZCVHl4TFFVRkxhMFFzVTBGQlRDeERRVUZsTlVNc1MwRkJSeXhEUVVGSUxFbEJRVTFCTEVsQlFVVk9MRU5CUVZJc1IwRkJWU3hEUVVGRExFdEJRVXROTEVOQlFVd3NRMEZCUkN4RFFVRldMRWRCUVc5Q0xFVkJRVzVETEVOQlFWQTdRVUZCT0VNc1MwRkJibXhDTEVWQlFXOXNRbk5FTEV0QlFVa3NaVUZCVlR0QlFVRkRMR0ZCUVU4c1MwRkJTMUlzVlVGQlRDeEpRVUZwUWl4TFFVRkxUaXhYUVVGTUxFVkJRWGhDTzBGQlFUSkRMRXRCUVRsdlFpeEZRVUVyYjBJNVFpeE5RVUZMUkN4RFFVRndjRUlzUlVGQmMzQkNPRU1zVFVGQlMzWkVMRVZCUVVWMVJDeEpRVUUzY0VJc1JVRkJhM0ZDUXl4UlFVRlBlRVFzUlVGQlJYZEVMRTFCUVROeFFpeEZRVUZxUWl4RlFVRnZjMEl4UWl4RlFVRkZNa0lzVFVGQlJpeEhRVUZUTTBJc1JVRkJSVU1zUlVGQlJpeERRVUZMTUVJc1RVRkJUQ3hIUVVGWkxGbEJRVlU3UVVGQlF5eFJRVUZKYUVVc1EwRkJTanRCUVVGQkxGRkJRVTFETEVOQlFVNDdRVUZCUVN4UlFVRlJUU3hEUVVGU08wRkJRVUVzVVVGQlZVTXNRMEZCVmp0QlFVRkJMRkZCUVZsRExFTkJRVm83UVVGQlFTeFJRVUZqUnl4RFFVRmtPMEZCUVVFc1VVRkJaMEpGTEVsQlFVVXlReXhWUVVGVkxFTkJRVllzUzBGQll5eEZRVUZvUXp0QlFVRkJMRkZCUVcxRGVrTXNTVUZCUlN4RFFVRnlRenRCUVVGQkxGRkJRWFZEUlN4SlFVRkZkVU1zVlVGQlZWUXNUVUZCYmtRN1FVRkJRU3hSUVVFd1JEVkNMRWxCUVVVc1EwRkJReXhEUVVFM1JDeERRVUVyUkN4TFFVRkpMR0ZCUVZjc1QwRkJUMDRzUTBGQmJFSXNTMEZCYzBKTkxFbEJRVVZPTEVOQlFVWXNSVUZCU1VFc1NVRkJSVEpETEZWQlFWVjZReXhEUVVGV0xFdEJRV01zUlVGQmNFSXNSVUZCZFVKQkxFZEJRVGRETEVkQlFXdEVMRzlDUVVGcFFrWXNRMEZCYWtJc2VVTkJRV2xDUVN4RFFVRnFRaXhOUVVGdlFuVkNMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRnVSQ3hEUVVGaUxFTkJRWEJDTEV0QlFYTkRRU3hKUVVGRkxFVkJRWGhETEVOQlFXeEVMRVZCUVRoR1JTeE5RVUZKUlN4RFFVRktMRXRCUVZGS0xFbEJRVVVzU1VGQlJpeEZRVUZQUlN4SFFVRm1MRU5CUVd4SExFVkJRWE5JUVN4SlFVRkZSU3hEUVVGNFNDeEZRVUV3U0VZc1IwRkJNVWc3UVVGQk9FZ3NWVUZCUnl4VFFVRlBhRUlzU1VGQlJYbEVMRlZCUVZWNlF5eERRVUZXTEVOQlFWUXNRMEZCU0N4RlFVRXdRaXhMUVVGSlppeERRVUZLTEVsQlFWTkVMRU5CUVZRN1FVRkJWMDhzV1VGQlJVOHNSVUZCUldJc1EwRkJSaXhEUVVGR0xFVkJRVTlQTEVsQlFVVlNMRVZCUVVWRExFTkJRVVlzUTBGQlZDeEZRVUZqWVN4TlFVRkpUaXhEUVVGS0xFdEJRVkZaTEV0QlFVZGFMRU5CUVVnc1MwRkJUelpDTEVWQlFVVTJRaXhoUVVGR0xFTkJRV2RDTVVRc1EwRkJhRUlzVFVGQmNVSkRMRWxCUVVVd1JDeE5RVUZOUXl4UFFVRk9MRU5CUVdNMVJDeERRVUZrTEVOQlFYWkNMRU5CUVZBc1MwRkJhMFJETEV0QlFVZEJMRWxCUVVVc1EwRkJReXhEUVVGSUxFVkJRVXRITEVsQlFVVk1MRXRCUVVjMFJDeE5RVUZOUXl4UFFVRk9MRU5CUVdNM1JDeERRVUZrTEVOQlFVZ3NSMEZCYjBKQkxFTkJRWEJDTEVkQlFYTkNMRVZCUVdoRExFbEJRVzlEU3l4SlFVRkZUQ3hMUVVGSE9FSXNSVUZCUlRaQ0xHRkJRVVlzUTBGQlowSXpSQ3hEUVVGb1FpeERRVUZJTEVkQlFYTkNRU3hEUVVGMFFpeEhRVUYzUWl4RlFVRTVSQ3hGUVVGcFJVOHNSVUZCUldJc1EwRkJSaXhKUVVGTGIwTXNSVUZCUlRKQ0xFMUJRVVlzUTBGQlV6VkRMRU5CUVZRc1JVRkJWMUlzUTBGQldDeEZRVUZoU2l4RFFVRmlMRU5CUVhoSUxFbEJRWGxKTEV0QlFVc3NRMEZCVEN4TFFVRlRRU3hEUVVGVUxFdEJRV0ZOTEVWQlFVVmlMRU5CUVVZc1NVRkJTMDhzUTBGQmJFSXNRMEZCYWtvc1EwRkJaRHRCUVVGWU8wRkJRWGhLTEV0QlFYZFdMRTlCUVU5TkxFTkJRVkE3UVVGQlV5eEhRVUZ3YjBNc1JVRkJjVzlEZFVJc1JVRkJSVEpDTEUxQlFVWXNRMEZCVXl4RlFVRkRTeXhUUVVGUkxGZEJRVk1zUTBGQlEycERMRWxCUVVWclF5eExRVUZMUXl4TlFVRk1MRVZCUVVnc1JVRkJhMEpETEU5QlFXeENMRU5CUVRCQ0xFdEJRVEZDTEVWQlFXZERMRVZCUVdoRExFTkJRV3hDTEVWQlFYTkVReXhUUVVGUkxFTkJRVU1zUTBGQkwwUXNSVUZCYVVWRExFOUJRVTBzWlVGQlV6RkZMRU5CUVZRc1JVRkJWenRCUVVGRExGbEJRVTBzU1VGQlNVc3NTMEZCU2l4RFFVRlZUQ3hEUVVGV0xFTkJRVTQ3UVVGQmJVSXNTMEZCZEVjc1JVRkJkVWN5UlN4TlFVRkxMR2RDUVVGVkxFTkJRVVVzUTBGQmVFZ3NSVUZCZVVoV0xGbEJRVmNzYjBKQlFWTnFSU3hEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZOTEdWQlFXRnhReXhGUVVGRmRVTXNTVUZCUml4RFFVRlBOVVVzUTBGQlVDeERRVUZ1UWp0QlFVRTJRaXhMUVVFM1N5eEZRVUU0U3paRkxGVkJRVk1zYTBKQlFWTTNSU3hEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQTEZGQlFVMUJMRU5CUVU0c1NVRkJVMEVzVFVGQlNVRXNSVUZCUlUwc1RVRkJkRUk3UVVGQk5rSXNTMEZCYUU4c1JVRkJhVTkzUlN4WFFVRlZMRzFDUVVGVE9VVXNRMEZCVkN4RlFVRlhPMEZCUVVNc1ZVRkJTVU1zU1VGQlJXOURMRVZCUVVWMVF5eEpRVUZHTEVOQlFVODFSU3hEUVVGUUxFTkJRVTRzUTBGQlowSXNUMEZCVFN4RFFVRkRMR0ZCUVZkRExFTkJRVmdzU1VGQll5eGhRVUZYUVN4RFFVRXhRaXhMUVVFNFFpeERRVUZET0VVc1RVRkJUUzlGTEVsQlFVVm5SaXhYUVVGWGFFWXNRMEZCV0N4RFFVRlNMRU5CUVhKRE8wRkJRVFJFTEV0QlFXNVZMRVZCUVc5VmEwVXNaVUZCWXl4MVFrRkJVMnhGTEVOQlFWUXNSVUZCVnp0QlFVRkRMRlZCUVVsRExFTkJRVW9zUlVGQlRVMHNRMEZCVGl4RFFVRlJMRTlCUVUwc1JVRkJSU3hEUVVGRFVDeERRVUZFTEVsQlFVa3NjMEpCUVc5Q2NVSXNSVUZCUlUwc1NVRkJSaXhEUVVGUE0wSXNRMEZCVUN4RFFVRXhRaXhOUVVGMVF5eEZRVUZGUXl4SlFVRkZVU3hGUVVGRlZDeERRVUZHTEVOQlFVb3NUVUZCV1U4c1NVRkJSV2RDTEVWQlFVVkpMRWxCUVVZc1EwRkJUekZDTEVOQlFWQXNSVUZCVXl4aFFVRlVMRXRCUVhsQ1FTeEZRVUZGT0VNc1YwRkJOMElzUlVGQmVVTXNZMEZCV1N4UFFVRlBlRU1zUTBGQmJrSXNTVUZCYzBKclFpeEZRVUZGUlN4SlFVRkdMRU5CUVU5d1FpeERRVUZRTEUxQlFWbHRRaXhEUVVGMlJpeERRVUYyUXl4RFFVRk9PMEZCUVhkSkxFdEJRVGxsTEVWQlFTdGxkVVFzWlVGQll5eDFRa0ZCVTJwR0xFTkJRVlFzUlVGQlZ6dEJRVUZETEZWQlFVbERMRU5CUVVvc1EwRkJUU3hMUVVGSlFTeERRVUZLTEVsQlFWTkVMRU5CUVZRN1FVRkJWeXhsUVVGTkxFTkJRVU1zUTBGQlVEdEJRVUZZTEU5QlFXOUNMRTlCUVUwc1EwRkJReXhEUVVGUU8wRkJRVk1zUzBGQk5XbENMRVZCUVRacFFqUkZMRTFCUVVzc1kwRkJVelZGTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU4c1VVRkJUVUVzUTBGQlRpeEhRVUZSUVN4SlFVRkZMRVZCUVZZc1IwRkJZU3h2UWtGQmFVSkJMRU5CUVdwQ0xIbERRVUZwUWtFc1EwRkJha0lzVFVGQmIwSXNZMEZCV1N4UFFVRlBRU3hEUVVGMlF5eEhRVUY1UTI5Q0xFVkJRVVZETEVWQlFVVk5MRWxCUVVZc1EwRkJUek5DTEVOQlFWQXNRMEZCUml4TFFVRmpMRkZCUVhaRUxGVkJRWFZGUVN4RFFVRjJSU3g1UTBGQmRVVkJMRU5CUVhaRkxFTkJRWEJDTzBGQlFUWkdMRXRCUVROd1FpeEZRVUUwY0VKclJpeFpRVUZYTEc5Q1FVRlRiRVlzUTBGQlZDeEZRVUZYTzBGQlFVTTJRaXhSUVVGRk4wSXNRMEZCUmp0QlFVRkxMRXRCUVhoeVFpeEZRVUY1Y2tKdFJpeFhRVUZWTEcxQ1FVRlRia1lzUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCVDBFc1JVRkJSWGRGTEU5QlFVWXNRMEZCVlM5Q0xFTkJRVllzUlVGQldTeExRVUZhTEVWQlFXMUNLMElzVDBGQmJrSXNRMEZCTWtJNVFpeERRVUV6UWl4RlFVRTJRa01zUTBGQk4wSXNRMEZCVUR0QlFVRjFReXhMUVVGMGRrSXNSVUZCZFhaQ1Z5eE5RVUZMTEdOQlFWTjBSQ3hEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMRlZCUVVsTkxFTkJRVW83UVVGQlFTeFZRVUZOUXl4SlFVRkZMRU5CUVZJc1EwRkJWU3hKUVVGSE5FVXNSVUZCUlhCR0xFTkJRVVlzUTBGQlNDeEZRVUZSTzBGQlFVTXNZVUZCU1U4c1NVRkJSVkFzUlVGQlJXZEVMRTFCUVZJc1JVRkJaWGhETEVsQlFVVkVMRU5CUVdwQ0xFVkJRVzFDUXl4SFFVRnVRanRCUVVGMVFpeGpRVUZIVUN4RlFVRkZNRUlzU1VGQlJpeERRVUZQTTBJc1JVRkJSVkVzUTBGQlJpeERRVUZRTEVWQlFWbEJMRU5CUVZvc1JVRkJZMUlzUlVGQlJWRXNRMEZCUml4RFFVRmtMRTFCUVhOQ0xFTkJRVU1zUTBGQk1VSXNSVUZCTkVJN1FVRkJia1E3UVVGQmVVUXNUMEZCYkVVc1RVRkJkVVVzUzBGQlNVRXNRMEZCU2l4SlFVRlRVaXhEUVVGVU8wRkJRVmNzV1VGQlIwTXNSVUZCUlRCQ0xFbEJRVVlzUTBGQlR6TkNMRVZCUVVWUkxFTkJRVVlzUTBGQlVDeEZRVUZaUVN4RFFVRmFMRVZCUVdOU0xFVkJRVVZSTEVOQlFVWXNRMEZCWkN4TlFVRnpRaXhEUVVGRExFTkJRVEZDTEVWQlFUUkNPMEZCUVhaRExFOUJRVFpETEU5QlFVOVNMRU5CUVZBN1FVRkJVeXhMUVVGcU5VSXNSVUZCYXpWQ2NVWXNUVUZCU3l4alFVRlRja1lzUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCVHl4UlFVRk5RU3hEUVVGT0xFZEJRVkVzUlVGQlVpeEhRVUZYTEVOQlFVTkJMRWxCUVVVc1JVRkJTQ3hGUVVGUGQwVXNUMEZCVUN4RFFVRmxhRU1zUTBGQlppeEZRVUZwUWl4RlFVRnFRaXhEUVVGc1FqdEJRVUYxUXl4TFFVRXhPRUlzUlVGQk1qaENPRU1zVjBGQlZTeHRRa0ZCVTNSR0xFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVNc1ZVRkJTVTBzU1VGQlJVNHNTMEZCUnl4RlFVRlVMRU5CUVZrc1QwRkJUeXhSUVVGTlJDeERRVUZPTEV0QlFWVnZSaXhGUVVGRk1VVXNUMEZCVDFZc1EwRkJVQ3hEUVVGR0xFbEJRV0Z4UXl4RlFVRkZaU3hMUVVGR0xFTkJRVkUzUXl4RFFVRlNMRVZCUVZVc1dVRkJWU3hQUVVGUFVDeERRVUZxUWl4SFFVRnRRaXhEUVVGRFFTeERRVUZFTEVOQlFXNUNMRWRCUVhWQ1FTeERRVUZxUXl4RFFVRmlMRWRCUVdsRVowSXNSVUZCUlZjc1NVRkJSaXhEUVVGUGNFSXNRMEZCVUN4RlFVRlRVQ3hEUVVGVUxFTkJRVE5FTEVkQlFYZEZUeXhEUVVFdlJUdEJRVUZwUml4TFFVRm9hME1zUlVGQmFXdERaMFlzVTBGQlVTeHBRa0ZCVTNaR0xFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1U3UVVGQlF5eGhRVUZQTEZGQlFVMU9MRU5CUVU0c1IwRkJVU3hEUVVGRExFTkJRVlFzUjBGQlYybENMRVZCUVVWVExFbEJRVVlzUTBGQlR6RkNMRU5CUVZBc1JVRkJVMFFzUTBGQlZDeEZRVUZYVHl4RFFVRllMRU5CUVd4Q08wRkJRV2RETEV0QlFYcHVReXhGUVVFd2JrTTJReXhQUVVGTkxHVkJRVk53UkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEZkQlFVa3NTVUZCU1Uwc1NVRkJSU3hEUVVGRFRpeEZRVUZGSzBNc1RVRkJWQ3hGUVVGblFuaERMRWxCUVVVc1EwRkJiRUlzUlVGQmIwSkRMRWxCUVVWVUxFVkJRVVZuUkN4TlFVRTFRaXhGUVVGdFEzaERMRWxCUVVWRUxFTkJRWEpETEVWQlFYVkRReXhIUVVGMlF6dEJRVUV5UTFJc1ZVRkJSVk1zUjBGQlJpeEpRVUZQVWl4RlFVRkZUeXhEUVVGR0xFTkJRVkE3UVVGQk0wTXNUMEZCZFVRc1QwRkJUMUlzUlVGQlJXZEVMRTFCUVVZc1IwRkJVM1pETEVOQlFWUXNSVUZCVjFRc1EwRkJiRUk3UVVGQmIwSXNTMEZCZW5SRExFVkJRVEIwUTNkR0xFMUJRVXNzWTBGQlUzaEdMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdVN1FVRkJReXhYUVVGSkxFbEJRVWxETEVOQlFVb3NSVUZCVFVNc1NVRkJSU3hGUVVGU0xFVkJRVmRITEVsQlFVVXNRMEZCWWl4RlFVRmxSU3hKUVVGRlpDeEZRVUZGWjBRc1RVRkJia0lzUlVGQk1FSm9ReXhKUVVGRkxFTkJRVU5VTEVOQlFXcERMRVZCUVcxRFN5eEpRVUZGUlN4RFFVRnlReXhGUVVGMVEwWXNSMEZCZGtNN1FVRkJNa05LTEZsQlFVVXNRMEZCUTFBc1JVRkJSVVFzUlVGQlJWa3NRMEZCUml4RFFVRkdMRVZCUVU5QkxFTkJRVkFzUTBGQlNDeEZRVUZoU2l4TlFVRkpVU3hEUVVGS0xFbEJRVTlRTEVWQlFVVlJMRWxCUVVZc1EwRkJUMnBDTEVWQlFVVlpMRU5CUVVZc1EwRkJVQ3hEUVVGd1FqdEJRVUV6UXl4UFFVRTBSU3hQUVVGUFNDeERRVUZRTzBGQlFWTXNTMEZCY0RCRExFVkJRWEV3UXpoRExFdEJRVWtzWVVGQlUzWkVMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdVN1FVRkJReXhWUVVGSlF5eERRVUZLTzBGQlFVRXNWVUZCVFVNc1EwRkJUanRCUVVGQkxGVkJRVkZITEVsQlFVVXNRMEZCVmp0QlFVRkJMRlZCUVZsSkxFbEJRVVVzUlVGQlpDeERRVUZwUWl4SlFVRkhiMFVzUlVGQlJYQkdMRU5CUVVZc1EwRkJTQ3hGUVVGUkxFdEJRVWxSTEVsQlFVVlNMRVZCUVVWblJDeE5RVUZTTEVWQlFXVndReXhKUVVGRlNpeERRVUZxUWl4RlFVRnRRa2tzUjBGQmJrSTdRVUZCZFVKSUxGbEJRVVZTTEVWQlFVVkVMRVZCUVVWWkxFTkJRVVlzUTBGQlJpeEZRVUZQUVN4RFFVRlFMRVZCUVZOTUxFTkJRVlFzUTBGQlJpeEZRVUZqTEZGQlFVMUZMRU5CUVU0c1NVRkJVMDhzUlVGQlJVTXNTVUZCUml4RFFVRlBVaXhEUVVGUUxFTkJRWFpDTzBGQlFYWkNMRTlCUVZJc1RVRkJjVVVzUzBGQlNVY3NRMEZCU2l4SlFVRlRXaXhEUVVGVU8wRkJRVmRUTEZsQlFVVlNMRVZCUVVWRUxFVkJRVVZaTEVOQlFVWXNRMEZCUml4RlFVRlBRU3hEUVVGUUxFVkJRVk5NTEVOQlFWUXNRMEZCUml4RlFVRmpMRkZCUVUxRkxFTkJRVTRzU1VGQlUwOHNSVUZCUlVNc1NVRkJSaXhEUVVGUFVpeERRVUZRTEVOQlFYWkNPMEZCUVZnc1QwRkJORU1zVDBGQlQwc3NSVUZCUlRCRExFdEJRVVlzUTBGQlVTeEZRVUZTTEVWQlFWZDRReXhEUVVGWUxFTkJRVkE3UVVGQmNVSXNTMEZCYUM5RExFVkJRV2t2UTNsRkxFMUJRVXNzUTBGQmRDOURMRVZCUVhjdlEwTXNUMEZCVFN4bFFVRlRNVVlzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhWUVVGSlRTeERRVUZLTEVWQlFVMURMRU5CUVU0c1JVRkJVVU1zUTBGQlVpeERRVUZWTEVsQlFVY3NXVUZCVlN4UFFVRlBVaXhEUVVGcVFpeExRVUZ4UWswc1NVRkJSVkFzUlVGQlJVTXNRMEZCUml4RFFVRkdMRVZCUVU5QkxFbEJRVVZFTEVOQlFWUXNSVUZCVjBFc1NVRkJSVThzUTBGQmJFTXNSMEZCY1VNNFFpeEZRVUZGTkVJc1ZVRkJSaXhEUVVGaGFrVXNRMEZCWWl4RFFVRjRReXhGUVVGM1JDeFBRVUZQVVN4SlFVRkZTU3hGUVVGRlpTeEpRVUZHTEVOQlFVODRRaXhUUVVGUUxFVkJRV2xDTEVOQlFXcENMRU5CUVVZc1JVRkJjMEpvUkN4SlFVRkZMR0ZCUVZVN1FVRkJReXhsUVVGUFZDeEZRVUZGZDBRc1MwRkJSaXhEUVVGUmRrUXNTMEZCUnl4SlFVRllMRVZCUVdkQ1R5eEZRVUZGVHl4TlFVRkdMRU5CUVZOSUxFVkJRVVZsTEVsQlFVWXNRMEZCVHpoQ0xGTkJRVkFzUTBGQlZDeERRVUZvUWl4RFFVRlFPMEZCUVc5RUxFOUJRWFpHTEVWQlFYZEdhRVFzUlVGQlJXZEdMRWxCUVVZc1IwRkJUM3BHTEVWQlFVVjVSaXhKUVVGR0xFZEJRVTk2Uml4RlFVRkZlVVlzU1VGQlJpeEpRVUZSY0VRc1JVRkJSVzlFTEVsQlFVWXNSVUZCT1Vjc1JVRkJkVWhvUml4RFFVRTVTRHRCUVVGblNTeExRVUU1YzBRc1JVRkJLM05FYTBZc1MwRkJTVU1zUzBGQlMwUXNSMEZCZUhSRUxFVkJRVFIwUkVVc1UwRkJVV3BGTEVOQlFYQjFSQ3hGUVVGVUxFTkJRWEp2UXl4RlFVRnpNMFlzWTBGQldTeFBRVUZQYTBVc1RVRkJia0lzUzBGQk5FSjZSQ3hGUVVGRlF5eEZRVUZHTEVOQlFVdDNSQ3hQUVVGUFF5eFJRVUZhTEVsQlFYTkNlRVlzUlVGQlJYVkdMRTlCUVU5RExGRkJRVlFzUTBGQmJFUXNRMEZCZEROR0xFVkJRVFEzUmpGRUxFVkJRVVZwUWl4SlFVRkdMRU5CUVU4c2RVVkJRWFZGTUVNc1MwRkJka1VzUTBGQk5rVXNSMEZCTjBVc1EwRkJVQ3hGUVVGNVJpeFZRVUZUYUVjc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUTIxQ0xFMUJRVVVzWVVGQlYyNUNMRU5CUVZnc1IwRkJZU3hIUVVGbUxFbEJRVzlDUVN4RlFVRkZaMGNzVjBGQlJpeEZRVUZ3UWp0QlFVRnZReXhIUVVFelNTeERRVUUxTjBZc1EwRkJlV3RITEZOQlFWTmlMRU5CUVZRc1EwRkJWM0JHTEVOQlFWZ3NSVUZCWVR0QlFVRkRMRkZCUVVsRExFbEJRVVVzUTBGQlF5eERRVUZEUkN4RFFVRkdMRWxCUVVzc1dVRkJWMEVzUTBGQmFFSXNTVUZCYlVKQkxFVkJRVVZuUkN4TlFVRXpRanRCUVVGQkxGRkJRV3REZWtNc1NVRkJSVGhDTEVWQlFVVjFReXhKUVVGR0xFTkJRVTgxUlN4RFFVRlFMRU5CUVhCRExFTkJRVGhETEU5QlFVMHNaVUZCWVU4c1EwRkJZaXhKUVVGblFpeERRVUZET0VJc1JVRkJSWGRETEZGQlFVWXNRMEZCVnpkRkxFTkJRVmdzUTBGQmFrSXNTMEZCYVVNc1dVRkJWVThzUTBGQlZpeEpRVUZoTEUxQlFVbE9MRU5CUVdwQ0xFbEJRVzlDTEZsQlFWVXNUMEZCVDBFc1EwRkJha0lzU1VGQmIwSkJMRWxCUVVVc1EwRkJkRUlzU1VGQmVVSkJMRWxCUVVVc1EwRkJSaXhKUVVGUFJDeERRVUZ5Uml4RFFVRk9PMEZCUVRoR0xFOUJRVWxyUnl4SlFVRkZMRlZCUVZOc1J5eERRVUZVTEVWQlFWYzdRVUZCUXl4UlFVRkpReXhEUVVGS08wRkJRVUVzVVVGQlRVMHNRMEZCVGp0QlFVRkJMRkZCUVZGRExFTkJRVkk3UVVGQlFTeFJRVUZWUXl4RFFVRldPMEZCUVVFc1VVRkJXVWNzUTBGQldqdEJRVUZCTEZGQlFXTkZMRU5CUVdRN1FVRkJRU3hSUVVGblFrVXNRMEZCYUVJN1FVRkJRU3hSUVVGclFrVXNRMEZCYkVJN1FVRkJRU3hSUVVGdlFrVXNRMEZCY0VJN1FVRkJRU3hSUVVGelFrTXNRMEZCZEVJN1FVRkJRU3hSUVVGM1FrVXNRMEZCZUVJN1FVRkJRU3hSUVVFd1FrVXNRMEZCTVVJN1FVRkJRU3hSUVVFMFFrTXNRMEZCTlVJN1FVRkJRU3hSUVVFNFFrVXNRMEZCT1VJN1FVRkJRU3hSUVVGblEwTXNRMEZCYUVNN1FVRkJRU3hSUVVGclEwOHNRMEZCYkVNN1FVRkJRU3hSUVVGdlEwTXNRMEZCY0VNN1FVRkJRU3hSUVVGelEwY3NRMEZCZEVNN1FVRkJRU3hSUVVGM1EwTXNRMEZCZUVNN1FVRkJRU3hSUVVFd1EwTXNTVUZCUlN4WFFVRlRMRWxCUVVVc1NVRkJTV3RFTEVsQlFVb3NSVUZCZGtRN1FVRkJRU3hSUVVGblJXcEVMRWxCUVVVelF5eEZRVUZGU1N4UlFVRndSVHRCUVVGQkxGRkJRVFpGWjBZc1NVRkJSU3hEUVVFdlJUdEJRVUZCTEZGQlFXbEdZeXhKUVVGRkxFTkJRVzVHTzBGQlFVRXNVVUZCY1VaRExFbEJRVVZETEVsQlFYWkdPMEZCUVVFc1VVRkJORVpETEVsQlFVVkVMRWxCUVRsR08wRkJRVUVzVVVGQmJVZEZMRWxCUVVWR0xFbEJRWEpITzBGQlFVRXNVVUZCTUVkSExFbEJRVVVzVjBGQlUzWkhMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNZVUZCVDBRc1RVRkJTVU1zUTBGQlNpeExRVUZSYzBJc1NVRkJSU3hEUVVGRExFTkJRVmdzUjBGQll5eERRVUZ5UWp0QlFVRjFRaXhMUVVGcVNqdEJRVUZCTEZGQlFXdEthVVlzU1VGQlJTeEhRVUZIYUVZc1kwRkJka283UVVGQlFTeFJRVUZ6UzJsR0xFbEJRVVVzUlVGQmVFczdRVUZCUVN4UlFVRXlTME1zU1VGQlJVUXNSVUZCUlVVc1IwRkJMMHM3UVVGQlFTeFJRVUZ0VEVNc1NVRkJSVWdzUlVGQlJYaEdMRWxCUVhaTU8wRkJRVUVzVVVGQk5FdzBSaXhKUVVGRlNpeEZRVUZGZUVZc1NVRkJhRTA3UVVGQlFTeFJRVUZ4VFRaR0xFbEJRVVZNTEVWQlFVVTFSaXhMUVVGNlRUdEJRVUZCTEZGQlFTdE5hMGNzU1VGQlJTeFRRVUZHUVN4RFFVRkZMRU5CUVZNdlJ5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExGZEJRVWtzU1VGQlNVMHNTVUZCUlN4RFFVRk9MRVZCUVZGRExFbEJRVVZTTEVWQlFVVm5SQ3hOUVVGb1FpeEZRVUYxUW5wRExFbEJRVVZETEVOQlFYcENMRVZCUVRKQ1JDeEhRVUV6UWp0QlFVRXJRaXhaUVVGSFVDeEZRVUZGVHl4RFFVRkdMRTFCUVU5T0xFTkJRVllzUlVGQldTeFBRVUZQVFN4RFFVRlFPMEZCUVRORExFOUJRVzlFTEU5QlFVMHNRMEZCUXl4RFFVRlFPMEZCUVZNc1MwRkJOVkk3UVVGQlFTeFJRVUUyVW5sSExFbEJRVVVzTkVoQlFTOVNPMEZCUVVFc1VVRkJORnBETEVsQlFVVXNjVUpCUVRsYU8wRkJRVUVzVVVGQmIySkRMRWxCUVVVc0swSkJRWFJpTzBGQlFVRXNVVUZCYzJSRExFbEJRVVVzVVVGQlRVWXNRMEZCVGl4SFFVRlJMRWxCUVZJc1IwRkJZVU1zUTBGQllpeEhRVUZsTEUxQlFXWXNSMEZCYzBKRUxFTkJRWFJDTEVkQlFYZENMR1ZCUVhoQ0xFZEJRWGREUVN4RFFVRjRReXhIUVVFd1F5d3dSRUZCTVVNc1IwRkJjVWRETEVOQlFYSkhMRWRCUVhWSExFMUJRWFpITEVkQlFUaEhSQ3hEUVVFNVJ5eEhRVUZuU0N4TlFVRjRhMEk3UVVGQlFTeFJRVUVyYTBKSExFbEJRVVVzVDBGQlMwWXNRMEZCVEN4SFFVRlBMSFZHUVVGUUxFZEJRU3RHUXl4RFFVRXZSaXhIUVVGcFJ5eGpRVUZzY2tJN1FVRkJRU3hSUVVGcGMwSkZMRWxCUVVVc1NVRkJTVU1zVFVGQlNpeERRVUZYVEN4SlFVRkZMRWRCUVdJc1JVRkJhVUlzUjBGQmFrSXNRMEZCYm5OQ08wRkJRVUVzVVVGQmVYUkNUU3hKUVVGRkxFbEJRVWxFTEUxQlFVb3NRMEZCVnl4TlFVRkpUQ3hEUVVGS0xFZEJRVTBzTmtKQlFVNHNSMEZCYjBOQkxFTkJRWEJETEVkQlFYTkRMRWxCUVdwRUxFVkJRWE5FTEVkQlFYUkVMRU5CUVROMFFqdEJRVUZCTEZGQlFYTjRRazhzU1VGQlJTeEpRVUZKUml4TlFVRktMRU5CUVZjc1RVRkJTVXdzUTBGQlNpeEhRVUZOTEVsQlFVNHNSMEZCVjBFc1EwRkJXQ3hIUVVGaExFZEJRWGhDTEVOQlFYaDRRanRCUVVGQkxGRkJRWEY2UWxFc1NVRkJSU3hKUVVGSlNDeE5RVUZLTEVOQlFWY3NUVUZCU1V3c1EwRkJTaXhIUVVGTkxGVkJRVTRzUjBGQmFVSkJMRU5CUVdwQ0xFZEJRVzFDTEVkQlFXNUNMRWRCUVhWQ1FTeERRVUYyUWl4SFFVRjVRaXhIUVVGd1F5eERRVUYyZWtJN1FVRkJRU3hSUVVGbk1rSlRMRWxCUVVVc1NVRkJTVW9zVFVGQlNpeERRVUZYTEUxQlFVbE1MRU5CUVVvc1IwRkJUU3huUWtGQlRpeEhRVUYxUWtFc1EwRkJka0lzUjBGQmVVSXNUVUZCY0VNc1JVRkJNa01zUjBGQk0wTXNRMEZCYkRKQ08wRkJRVUVzVVVGQmF6VkNWU3hKUVVGRkxFbEJRVWxNTEUxQlFVb3NRMEZCVjBZc1EwRkJXQ3hEUVVGd05VSTdRVUZCUVN4UlFVRnJOa0pSTEVsQlFVVXNTVUZCU1U0c1RVRkJTaXhEUVVGWExFMUJRVWxLTEVOQlFVb3NSMEZCVFN4SFFVRnFRaXhEUVVGd05rSTdRVUZCUVN4UlFVRXdOMEpYTEVsQlFVVXNSVUZCUTBNc1NVRkJSeXhKUVVGSlVpeE5RVUZLTEVOQlFWY3NVVUZCVFVvc1EwRkJUaXhIUVVGUkxFZEJRVzVDTEVOQlFVb3NSVUZCTkVKaExFOUJRVTBzU1VGQlNWUXNUVUZCU2l4RFFVRlhMRlZCUVZGS0xFTkJRVklzUjBGQlZTeEhRVUZ5UWl4RFFVRnNReXhGUVVFMFJHTXNTMEZCU1N4SlFVRkpWaXhOUVVGS0xFTkJRVmNzVDBGQlMwb3NRMEZCVEN4SFFVRlBMRTlCUVd4Q0xFTkJRV2hGTEVWQlFUSkdaU3hOUVVGTExFbEJRVWxZTEUxQlFVb3NRMEZCVnl4TlFVRkpTQ3hEUVVGbUxFTkJRV2hITEVWQlFXdElaU3hSUVVGUExFbEJRVWxhTEUxQlFVb3NRMEZCVnl4TlFVRkpSaXhEUVVGbUxFTkJRWHBJTEVWQlFUSkpaU3hQUVVGTkxFbEJRVWxpTEUxQlFVb3NRMEZCVnl3eVJFRkJlVVJNTEVOQlFYcEVMRWRCUVRKRUxEaENRVUV6UkN4SFFVRXdSa0VzUTBGQk1VWXNSMEZCTkVZc1lVRkJOVVlzUjBGQk1FZEJMRU5CUVRGSExFZEJRVFJITEZsQlFUVkhMRWRCUVhsSVFTeERRVUY2U0N4SFFVRXlTQ3hSUVVGMFNTeEZRVUVyU1N4SFFVRXZTU3hEUVVGcVNpeEZRVUZ4VTIxQ0xFMUJRVXNzU1VGQlNXUXNUVUZCU2l4RFFVRlhMRk5CUVU5T0xFTkJRVkFzUjBGQlV5eEpRVUZ3UWl4RlFVRjVRaXhIUVVGNlFpeERRVUV4VXl4RlFVRjNWWEZDTEdOQlFXRXNTVUZCU1dZc1RVRkJTaXhEUVVGWExFMUJRVWxNTEVOQlFVb3NSMEZCVFN4clJFRkJUaXhIUVVGNVJFRXNRMEZCZWtRc1IwRkJNa1FzYTBKQlFUTkVMRWRCUVRoRlFTeERRVUU1UlN4SFFVRm5SaXhyUWtGQk0wWXNSVUZCT0Vjc1IwRkJPVWNzUTBGQmNsWXNSVUZCTlRkQ08wRkJRVUVzVVVGQmNUUkRjVUlzU1VGQlJTeHhRMEZCZGpSRE8wRkJRVUVzVVVGQk5qWkRReXhKUVVGRkxGRkJRUzgyUXp0QlFVRkJMRkZCUVhjM1EwTXNTVUZCUlN4M1FrRkJNVGRETzBGQlFVRXNVVUZCYlRsRFF5eEpRVUZGTEd0RFFVRnlPVU03UVVGQlFTeFJRVUYzTDBORExFbEJRVVVzVFVGQk1TOURPMEZCUVVFc1VVRkJhV2RFUXl4SlFVRkZMRWxCUVVseVFpeE5RVUZLTEVOQlFWY3NkVUpCUVhGQ1RDeERRVUZ5UWl4SFFVRjFRaXhMUVVGMlFpeEhRVUUyUWtFc1EwRkJOMElzUjBGQkswSXNUVUZCTVVNc1JVRkJhVVFzU1VGQmFrUXNRMEZCYm1kRU8wRkJRVUVzVVVGQk1HcEVNa0lzUzBGQlJ5eFRRVUZJUVN4RlFVRkhMRU5CUVZNMVNTeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVTBzUTBGQllpeEZRVUZsTzBGQlFVTXNWVUZCU1VNc1NVRkJSU3hQUVVGTFVDeERRVUZNTEVkQlFVOHNTMEZCWWl4RFFVRnRRaXhQUVVGUFR5eE5RVUZKUVN4RFFVRktMRWxCUVU5RUxFTkJRVkFzUjBGQlUwNHNRMEZCVkN4SFFVRlhUeXhKUVVGRkxFTkJRVVlzUjBGQlNYRkpMRTlCUVU5RExGbEJRVkFzUTBGQmIwSjBTU3hKUVVGRkxFdEJRWFJDTEVOQlFVb3NSMEZCYVVOeFNTeFBRVUZQUXl4WlFVRlFMRU5CUVc5Q2RFa3NTMEZCUnl4RlFVRklMRWRCUVUwc1MwRkJNVUlzUlVGQlowTXNUMEZCUzBFc1EwRkJUQ3hIUVVGUExFdEJRWFpETEVOQlFXNUVPMEZCUVdsSExFdEJRV3B6UkR0QlFVRkJMRkZCUVd0elJIVkpMRXRCUVVjc2NVUkJRWEp6UkR0QlFVRkJMRkZCUVRKMlJFTXNTMEZCUnl4VFFVRklRU3hGUVVGSExFTkJRVk5vU2l4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEdGQlFVOUJMRWxCUVVVc1UwRkJUMFFzUTBGQlVDeEhRVUZUTEZGQlFWUXNSMEZCYTBKQkxFVkJRVVZoTEV0QlFVWXNRMEZCVVN4RFFVRlNMRVZCUVZVc1EwRkJReXhEUVVGWUxFbEJRV01zU1VGQlpDeEhRVUZ0UW1Jc1JVRkJSV2xLTEZWQlFVWXNRMEZCWVdwS0xFVkJRVVZuUkN4TlFVRkdMRWRCUVZNc1EwRkJkRUlzUlVGQmVVSXhRaXhSUVVGNlFpeERRVUZyUXl4RlFVRnNReXhEUVVGdVFpeEhRVUY1UkN4SFFVRTNSU3hIUVVGcFJpeFBRVUZMZEVJc1EwRkJOMFk3UVVGQkswWXNTMEZCTXpKRU8wRkJRVUVzVVVGQk5ESkVhMG9zUzBGQlJ5eFRRVUZJUVN4RlFVRkhMRWRCUVZVN1FVRkJRM3BJTzBGQlFVa3NTMEZCT1RORU8wRkJRVUVzVVVGQkt6TkVNRWdzUzBGQlIwTXNSMEZCUnl4VlFVRlRjRW9zUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCVDBFc1JVRkJSWEZLTEZGQlFVWXNTMEZCWVN4RFFVRkRMRU5CUVdRc1MwRkJhMElzVlVGQlUzSktMRU5CUVZRc1NVRkJXU3hYUVVGVlFTeERRVUY0UXl4RFFVRlFPMEZCUVd0RUxFdEJRV3BGTEVWQlFXdEZMRVZCUVVOelNpeExRVUZKTEZsQlFVd3NSVUZCYTBKRExFMUJRVXNzVVVGQmRrSXNSVUZCYkVVc1EwRkJiRFJFTEVOQlFYTXJSQ3hKUVVGSE8wRkJRVU14UXl4UlFVRkZja1FzUzBGQlJpeERRVUZSYVVRc1NVRkJSVXNzUlVGQlJXNUdMRWxCUVVZc1EwRkJUMmRDTEVWQlFVVTJSeXhWUVVGVUxFTkJRVllzUlVGQkswSTNSeXhGUVVGRk5rY3NWVUZCYWtNc1IwRkJOa012UXl4RlFVRkZPVVFzUlVGQlJUWkhMRlZCUVVZc1EwRkJZWGhITEUxQlFXWXNSVUZCZFVKNVJ5eFJRVUZ3UlR0QlFVRTJSU3hMUVVGcVJpeERRVUZwUml4UFFVRk5ReXhGUVVGT0xFVkJRVk03UVVGQlF6ZERMRlZCUVVVc1JVRkJRM0pFTEU5QlFVMXBSQ3hGUVVGRmVrUXNUVUZCUml4SFFVRlRMRlZCUVZOb1JDeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRE1rY3NXVUZCUlhCRUxFdEJRVVlzUTBGQlVYaEVMRU5CUVZJc1JVRkJWVGhITEVWQlFVVnVSaXhKUVVGR0xFTkJRVTh4UWl4RFFVRlFMRU5CUVZZN1FVRkJjVUlzVTBGQk5VTXNSMEZCTmtNc1ZVRkJVMFFzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhqUVVGSlRTeEpRVUZGVUN4RlFVRkZaMFFzVFVGQlVqdEJRVUZCTEdOQlFXVjRReXhKUVVGRkxFTkJRV3BDTEVOQlFXMUNMRTlCUVUxU0xFVkJRVVZQTEVkQlFVWXNTVUZCVDA0c1JVRkJSVThzUjBGQlJpeERRVUZpTEVsQlFYRkNVaXhGUVVGRlowUXNUVUZCUml4SFFVRlRla01zU1VGQlJTeERRVUZZTzBGQlFXRXNVMEZCZGtnc1JVRkJSanRCUVVFeVNDeGpRVUZUYjBvc1JVRkJWQ3hEUVVGWk0wb3NRMEZCV2l4RlFVRmpReXhEUVVGa0xFVkJRV2RDVHl4RFFVRm9RaXhGUVVGclFrTXNRMEZCYkVJc1JVRkJiMEk3UVVGQlF5eFZRVUZKUnl4RFFVRktPMEZCUVVFc1ZVRkJUVWtzUTBGQlRqdEJRVUZCTEZWQlFWRkpMRU5CUVZJN1FVRkJRU3hWUVVGVlF5eERRVUZXTzBGQlFVRXNWVUZCV1VVc1EwRkJXanRCUVVGQkxGVkJRV05MTEVOQlFXUTdRVUZCUVN4VlFVRm5RbE1zUTBGQmFFSTdRVUZCUVN4VlFVRnJRa2NzU1VGQlJYWkRMRXRCUVVkQkxFVkJRVVV5U2l4aFFVRjZRanRCUVVGQkxGVkJRWFZEZUVVc1NVRkJSVzVHTEVsQlFVVkJMRVZCUVVWM1NpeFJRVUZLTEVkQlFXRXNRMEZCZEVRc1EwRkJkMFFzU1VGQlIycEtMRWxCUVVWQkxFdEJRVWNzUlVGQlRDeEZRVUZSTEZsQlFWVXNUMEZCVDFJc1EwRkJha0lzU1VGQmIwSXNRMEZCUTBFc1EwRkJja0lzU1VGQmQwSXNUVUZCU1c5R0xFTkJRVW9zU1VGQlR5eE5RVUZKUVN4RFFVRllMRWxCUVdNc1QwRkJTMEVzUTBGQmRFUXNSVUZCZDBRc1QwRkJUelZGTEVOQlFWQXNRMEZCVXl4SlFVRkhMRU5CUVVORExFTkJRVVFzUzBGQlN5eERRVUZEVWl4SlFVRkZRU3hGUVVGRk1rb3NZVUZCUml4SlFVRnBRak5LTEVOQlFXNUNMRWRCUVhGQ01FTXNRMEZCZEVJc1RVRkJNa0pxUWl4RFFVRXpRaXhKUVVFNFFrUXNSVUZCUlhoQ0xFTkJRVVlzUTBGQk9VSXNSVUZCYlVOQkxFbEJRVVZCTEV0QlFVZDVRaXhEUVVGNFF5eEZRVUV3UTBjc1EwRkJMME1zUTBGQlNDeEZRVUZ4UkR0QlFVRkRMRmxCUVVjc1QwRkJTM1ZFTEVOQlFVd3NTMEZCVXpkRUxFbEJRVVZyU0N4RlFVRkZiMElzU1VGQlJpeERRVUZQTjBvc1EwRkJVQ3hEUVVGWUxFTkJRVWdzUlVGQmVVSXNTVUZCUjFrc1NVRkJSVmNzUlVGQlJTeERRVUZHTEVOQlFVd3NSVUZCVlR0QlFVRkRMR05CUVVjc1RVRkJTVFpFTEVOQlFWQXNSVUZCVXp0QlFVRkRMR2RDUVVGSExFVkJRVVZvUlN4SlFVRkZia0lzUlVGQlJUWktMR05CUVVZc1EwRkJhVUpzU2l4RFFVRnFRaXhEUVVGS0xFTkJRVWdzUlVGQk5FSXNUMEZCVDBvc1EwRkJVQ3hEUVVGVExFbEJRVWRaTEVWQlFVVXlTU3hGUVVGR0xFdEJRVTl1U2l4RFFVRldMRVZCUVZrc1QwRkJUMG9zUlVGQlJWTXNTVUZCUml4RFFVRlBSeXhEUVVGUUxFZEJRVlZhTEVOQlFXcENPMEZCUVcxQ0xGZEJRVGxGTEUxQlFXMUdMRWxCUVVkblF5eE5RVUZKY0VJc1NVRkJSVzlDTEVWQlFVVnpTQ3hqUVVGR0xFTkJRV2xDYkVvc1EwRkJha0lzUTBGQlRpeExRVUUwUWpaQ0xFVkJRVVY0UXl4RFFVRkdMRVZCUVVsdFFpeERRVUZLTEVOQlFUVkNMRWxCUVc5RFFTeEZRVUZGTWtrc1JVRkJSaXhMUVVGUGJrb3NRMEZCT1VNc1JVRkJaMFFzVDBGQlQwb3NSVUZCUlZNc1NVRkJSaXhEUVVGUFJ5eERRVUZRTEVkQlFWVmFMRU5CUVdwQ08wRkJRVzFDTEZOQlFXcExMRTFCUVhGTE8wRkJRVU1zWTBGQlIyVXNSVUZCUlN4RFFVRkdMRU5CUVVnc1JVRkJVU3hQUVVGUGMwWXNSVUZCUlhKRUxFdEJRVVlzUTBGQlVXaEVMRU5CUVZJc1JVRkJWVkFzUlVGQlJTdEtMRzlDUVVGR0xFTkJRWFZDYUVzc1EwRkJka0lzUTBGQlZpeEhRVUZ4UTFFc1EwRkJOVU1zUTBGQk9FTXNTVUZCUnl4RFFVRkRTU3hKUVVGRlZ5eEZRVUZGTEVOQlFVWXNRMEZCU0N4TFFVRlZhRUlzUlVGQlJUQktMSE5DUVVGYUxFbEJRVzlEYUVzc1JVRkJSV2RMTEhOQ1FVRjZReXhGUVVGblJTeFBRVUZQY0VRc1JVRkJSWEpFTEV0QlFVWXNRMEZCVVdoRUxFTkJRVklzUlVGQlZWQXNSVUZCUldkTExITkNRVUZHTEVOQlFYbENja29zUTBGQmVrSXNRMEZCVml4SFFVRjFRMG9zUTBGQk9VTTdRVUZCWjBRc1lVRkJSMFFzUlVGQlJUSktMRWRCUVVZc1NVRkJUeXhEUVVGRE5VUXNSVUZCUlhSSExFbEJRVVVzUjBGQlNpeERRVUZTTEV0QlFXMUNMRU5CUVVOdlF5eERRVUZFTEVsQlFVa3NRMEZCUTBFc1JVRkJSU3RJTEVsQlFVWXNRMEZCVDI1TExFTkJRVkFzUTBGQmVFSXNRMEZCU0N4RlFVRnpRenRCUVVGRExHTkJRVWNzVFVGQlNXOUdMRU5CUVZBc1JVRkJVelZETEVsQlFVVjJReXhEUVVGR0xFVkJRVWx2UXl4SlFVRkZja01zUTBGQlRpeERRVUZVTEV0QlFYTkNMRWxCUVVjc1lVRkJWME1zUlVGQlJXMUxMRkZCUVVZc1EwRkJWMjVGTEZkQlFWZ3NSVUZCWkN4RlFVRjFRenRCUVVGRExHRkJRVU0xUlN4SlFVRkZjRUlzUlVGQlJXOUxMRmxCUVVZc1EwRkJaU3hKUVVGbUxFTkJRVWdzU1VGQmVVSm9TaXhKUVVGRlFTeEZRVUZGYlVRc1QwRkJSaXhEUVVGVmRVVXNSVUZCVml4RlFVRmhReXhGUVVGaUxFTkJRVE5DTEVkQlFUUkRMMGtzUlVGQlJYRkxMRmxCUVVZc1EwRkJaU3hKUVVGbUxFVkJRVzlDYWtvc1NVRkJSWEZDTEVOQlFYUkNMRU5CUVRWRExFVkJRWEZGWkN4SlFVRkZaQ3hGUVVGRlpDeERRVUZHTEVOQlFYWkZMRVZCUVRSRlowSXNTVUZCUlZrc1JVRkJSVzlDTEUxQlFXaEdMRU5CUVhWR0xFOUJRVTFvUXl4SFFVRk9PMEZCUVZWWkxHZENRVUZGV2l4RFFVRkdMRWxCUVVzc1RVRkJTVXNzUTBGQlNpeEhRVUZOTEVkQlFVNHNSMEZCVld0S0xFZEJRVWN6U1N4RlFVRkZXaXhEUVVGR0xFTkJRVWdzUTBGQlpqdEJRVUZXTEdGQlFXdERjVUlzU1VGQlJWUXNSVUZCUlRSSkxFbEJRVVlzUTBGQlR5eEhRVUZRTEVOQlFVWXNSVUZCWTJoSkxFbEJRVVZyUnl4RlFVRkZlVUlzU1VGQlJpeERRVUZQYmtzc1EwRkJVQ3hMUVVGWGVVc3NSMEZCUjNoTExFVkJRVVZwUXl4VlFVRk1MRU5CUVZnc1NVRkJOa0pxUXl4RFFVRTNRenRCUVVFclF5eGxRVUZIYjBNc1EwRkJTQ3hGUVVGTExFbEJRVWM3UVVGQlF5eHRRa0ZCVDNkRkxFVkJRVVZ5UkN4TFFVRkdMRU5CUVZGb1JDeERRVUZTTEVWQlFWVm5ReXhGUVVGRmEwa3NaMEpCUVVZc1EwRkJiVUp5U1N4RFFVRnVRaXhEUVVGV0xFZEJRV2xETjBJc1EwRkJlRU03UVVGQk1FTXNWMEZCT1VNc1EwRkJPRU1zVDBGQlRUQkdMRU5CUVU0c1JVRkJVU3hEUVVGRkxFTkJRWGhFTEZOQlFTdEVPMEZCUVVNM1JTeHJRa0ZCU1hGQ0xFTkJRVW9zU1VGQlQzcERMRVZCUVVVd1N5eGxRVUZHTEVOQlFXdENMRWxCUVd4Q0xFTkJRVkE3UVVGQkswSTdRVUZCUXp0QlFVRkRMR05CUVU5NlNpeEZRVUZGYkVJc1JVRkJSWGRGTEU5QlFVWXNRMEZCVlN0RExFTkJRVllzUlVGQldTeEpRVUZhTEVOQlFVWXNSVUZCYjBKMFNDeERRVUZ3UWl4RlFVRnpRazhzUTBGQmRFSXNSVUZCZDBKRExFTkJRWGhDTEVOQlFWQTdRVUZCYTBNc1kwRkJVekpHTEVWQlFWUXNSMEZCWVR0QlFVRkRMRlZCUVVsd1J5eEpRVUZGTEVWQlFVNHNRMEZCVXl4VFFVRlRReXhEUVVGVUxFTkJRVmROTEVOQlFWZ3NSVUZCWVVVc1EwRkJZaXhGUVVGbE8wRkJRVU1zWlVGQlQxUXNSVUZCUldsQ0xFbEJRVVlzUTBGQlQxWXNTVUZCUlN4SFFVRlVMRWxCUVdORExFVkJRVVZ2U3l4WFFVRm9RaXhKUVVFMlFpeFBRVUZQTTBzc1JVRkJSVVFzUlVGQlJUWkxMRXRCUVVZc1JVRkJSaXhEUVVGd1F5eEZRVUZwUkRWTExFVkJRVVZOTEVsQlFVVXNSMEZCU2l4SlFVRlRSU3hEUVVGcVJUdEJRVUZ0UlN4alFVRlBVaXhEUVVGUU8wRkJRVk1zWTBGQlV6WkxMRVZCUVZRc1EwRkJXVGxMTEVOQlFWb3NSVUZCWXp0QlFVRkRMR0ZCUVU5QkxFVkJRVVV3UXl4RFFVRkdMRWxCUVVzc1EwRkJReXhEUVVGT0xFVkJRVkV4UXl4RFFVRm1PMEZCUVdsQ0xHTkJRVk1yU3l4RlFVRlVMRU5CUVZrdlN5eERRVUZhTEVWQlFXTTdRVUZCUXl4VlFVRkpReXhKUVVGRmVVSXNSVUZCUlVrc1lVRkJSaXhEUVVGblFpeFZRVUZvUWl4RFFVRk9MRU5CUVd0RExFbEJRVWM3UVVGQlF5eGxRVUZOTEVOQlFVTXNRMEZCUXpsQ0xFVkJRVVZETEVOQlFVWXNRMEZCVWp0QlFVRmhMRTlCUVdwQ0xFTkJRV2xDTEU5QlFVMU5MRU5CUVU0c1JVRkJVVHRCUVVGRExHVkJRVTBzUTBGQlF5eERRVUZRTzBGQlFWTXNUMEZCYmtNc1UwRkJNRU03UVVGQlEwNHNWVUZCUldsRExGVkJRVVlzU1VGQlkycERMRVZCUVVWcFF5eFZRVUZHTEVOQlFXRkRMRmRCUVdJc1EwRkJlVUpzUXl4RFFVRjZRaXhEUVVGa0xFVkJRVEJEUVN4SlFVRkZMRWxCUVRWRE8wRkJRV2xFTzBGQlFVTXNZMEZCVXl0TExFVkJRVlFzUTBGQldXaE1MRU5CUVZvc1JVRkJZME1zUTBGQlpDeEZRVUZuUWp0QlFVRkRMRlZCUVVsTkxFbEJRVVZRTEVWQlFVVm5SeXhMUVVGR0xFTkJRVkVzUjBGQlVpeERRVUZPTzBGQlFVRXNWVUZCYlVKMlJpeEpRVUZGUml4RlFVRkZlVU1zVFVGQmRrSXNRMEZCT0VJc1QwRkJUWFpETEVkQlFVNDdRVUZCVlVRc1ZVRkJSWGxMTEZWQlFVWXNRMEZCWVRGTExFVkJRVVZGTEVOQlFVWXNRMEZCWWl4SlFVRnRRbElzUTBGQmJrSTdRVUZCVmp0QlFVRXJRaXhqUVVGVGFVd3NSVUZCVkN4RFFVRlpiRXdzUTBGQldpeEZRVUZqUXl4RFFVRmtMRVZCUVdkQ08wRkJRVU1zVlVGQlNVMHNTVUZCUlU0c1MwRkJSMFFzUTBGQlZEdEJRVUZCTEZWQlFWZFJMRWxCUVVWRUxFdEJRVWNzVFVGQlNWQXNSVUZCUlhsS0xGRkJRVlFzU1VGQmJVSXNUVUZCU1hoS0xFVkJRVVYzU2l4UlFVRjZRaXhKUVVGdFEzcEtMRVZCUVVWdFRDeFhRVUZHTEVkQlFXTnNUQ3hGUVVGRmEwd3NWMEZCYUVVc1EwRkJORVVzU1VGQlJ6TkxMRU5CUVVnc1JVRkJTeXhQUVVGUFFTeERRVUZRTEVOQlFWTXNTVUZCUjBRc1EwRkJTQ3hGUVVGTExFOUJRVTFCTEVsQlFVVkJMRVZCUVVVMlN5eFhRVUZXTzBGQlFYTkNMRmxCUVVjM1N5eE5RVUZKVGl4RFFVRlFMRVZCUVZNc1QwRkJUU3hEUVVGRExFTkJRVkE3UVVGQkwwSXNUMEZCZDBNc1QwRkJUMFFzU1VGQlJTeERRVUZHTEVkQlFVa3NRMEZCUXl4RFFVRmFPMEZCUVdNc1kwRkJVM0ZNTEVWQlFWUXNRMEZCV1hKTUxFTkJRVm9zUlVGQll6dEJRVUZETEdGQlFVOHNWVUZCVTBNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zV1VGQlNVMHNTVUZCUlU0c1JVRkJSVzFMTEZGQlFVWXNRMEZCVjI1RkxGZEJRVmdzUlVGQlRpeERRVUVyUWl4UFFVRk5MRmxCUVZVeFJpeERRVUZXTEVsQlFXRk9MRVZCUVVVeVJTeEpRVUZHTEV0QlFWTTFSU3hEUVVFMVFqdEJRVUU0UWl4UFFVRm9SanRCUVVGcFJpeGpRVUZUYzB3c1JVRkJWQ3hEUVVGWmRFd3NRMEZCV2l4RlFVRmpPMEZCUVVNc1lVRkJUeXhWUVVGVFF5eERRVUZVTEVWQlFWYzdRVUZCUXl4WlFVRkpUU3hKUVVGRlRpeEZRVUZGYlVzc1VVRkJSaXhEUVVGWGJrVXNWMEZCV0N4RlFVRk9MRU5CUVN0Q0xFOUJRVTBzUTBGQlF5eFpRVUZWTVVZc1EwRkJWaXhKUVVGaExHRkJRVmRCTEVOQlFYcENMRXRCUVRaQ1RpeEZRVUZGTWtVc1NVRkJSaXhMUVVGVE5VVXNRMEZCTlVNN1FVRkJPRU1zVDBGQmFFYzdRVUZCYVVjc1kwRkJVM1ZNTEVWQlFWUXNRMEZCV1haTUxFTkJRVm9zUlVGQll6dEJRVUZETEdGQlFVOHNWVUZCVTBNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWlVGQlRTeFZRVUZUUVN4RFFVRlVMRWRCUVZkQkxFVkJRVVZwUXl4VlFVRkdMRWxCUVdOcVF5eEZRVUZGYjBvc1VVRkJSaXhMUVVGaExFTkJRVU1zUTBGQk5VSXNSMEZCT0VJc1YwRkJWWEJLTEVOQlFWWXNSMEZCV1N4WFFVRlZRU3hGUVVGRmFVTXNWVUZCV2l4SFFVRjFRbXBETEVWQlFVVnBReXhWUVVGR0xFTkJRV0Z0U0N4UlFVRmlMRXRCUVhkQ2Nrb3NRMEZCTDBNc1IwRkJhVVJETEVWQlFVVnZTaXhSUVVGR0xFdEJRV0Z5U2l4RFFVRXhSU3hIUVVFMFJVTXNSVUZCUlhWTUxGVkJRVVlzUzBGQlpYaE1MRU5CUVdZc1NVRkJhMEpETEVWQlFVVjFUQ3hWUVVGR0xFdEJRV1VzUTBGQlEzaE1MRU5CUVdoQ0xFbEJRVzFDYlVvc1IwRkJSMnhLTEVOQlFVZ3NUVUZCVVVRc1EwRkJka29zUjBGQmVVcERMRVZCUVVWdlNpeFJRVUZHTEV0QlFXRnlTaXhEUVVGcVRDeEhRVUZ0VEN4WFFVRlZReXhEUVVGV0xFbEJRV0ZCTEVWQlFVVnZTaXhSUVVGR0xFdEJRV0Z5U2l4RFFVRnVUanRCUVVGeFRpeFBRVUY0VHp0QlFVRjVUeXhqUVVGVGVVd3NSVUZCVkN4RFFVRlpla3dzUTBGQldpeEZRVUZqTzBGQlFVTXNZVUZCVHpoTExFZEJRVWNzVlVGQlV6ZExMRU5CUVZRc1JVRkJWenRCUVVGRExHVkJRVTlCTEVsQlFVVXNRMEZCUTBFc1EwRkJTQ3hGUVVGTE5rc3NSMEZCUnl4VlFVRlRka3NzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhqUVVGSlF5eERRVUZLTzBGQlFVRXNZMEZCVFVjc1NVRkJSVm9zUlVGQlJTeEZRVUZHTEVWQlFVdFBMRVZCUVVWNVF5eE5RVUZRTEVWQlFXTXZReXhEUVVGa0xFTkJRVkk3UVVGQlFTeGpRVUY1UW1Fc1NVRkJSVVlzUlVGQlJXOURMRTFCUVRkQ0xFTkJRVzlETEU5QlFVMXNReXhIUVVGT08wRkJRVlZRTEdOQlFVVkZMRWxCUVVWSExFVkJRVVZGTEVOQlFVWXNRMEZCU2l4TlFVRlpVQ3hGUVVGRlJTeERRVUZHTEVsQlFVc3NSVUZCUlVRc1JVRkJSVU1zUTBGQlJpeEpRVUZMUml4RlFVRkZSU3hEUVVGR0xFTkJRVkFzUTBGQmFrSTdRVUZCVmp0QlFVRjVReXhUUVVFNVJpeERRVUZhTzBGQlFUUkhMRTlCUVROSUxFTkJRVkE3UVVGQmIwa3NZMEZCVTJkTExFVkJRVlFzUTBGQldYcExMRU5CUVZvc1JVRkJZenRCUVVGRExHRkJRVTlCTEV0QlFVY3NaVUZCWVN4UFFVRlBRU3hGUVVGRlowc3NiMEpCUVhwQ0xFbEJRU3REYUVzc1EwRkJkRVE3UVVGQmQwUXNVMEZCUlRKS0xFZEJRVWM1UkN4UFFVRklMRWRCUVZjc1JVRkJZaXhGUVVGblFtcEdMRWxCUVVVclNTeEhRVUZISzBJc1MwRkJTQ3hIUVVGVExGVkJRVk14VEN4RFFVRlVMRVZCUVZjN1FVRkJReXhWUVVGSlF5eEpRVUZGUkN4TFFVRkhMRU5CUVVOQkxFVkJRVVUwU2l4aFFVRkdMRWxCUVdsQ05Vb3NRMEZCYkVJc1JVRkJjVUl5VEN4bFFVRTVRaXhEUVVFNFF5eFBRVUZOTEVOQlFVTXNRMEZCUXpGTUxFTkJRVVlzU1VGQlN5eFhRVUZUUVN4RlFVRkZiVXNzVVVGQmRFSTdRVUZCSzBJc1MwRkJjRWdzUlVGQmNVZ3pTU3hKUVVGRmEwa3NSMEZCUjJsRExGZEJRVWdzUjBGQlpTeFZRVUZUTlV3c1EwRkJWQ3hGUVVGWE8wRkJRVU1zVlVGQlNVTXNRMEZCU2p0QlFVRkJMRlZCUVUxUkxFTkJRVTQ3UVVGQlFTeFZRVUZSU3l4SlFVRkZaQ3hKUVVGRlFTeEZRVUZGTkVvc1lVRkJSaXhKUVVGcFFqVktMRU5CUVc1Q0xFZEJRWEZDTWtNc1EwRkJMMElzUTBGQmFVTXNUMEZCVHpkQ0xFMUJRVWxaTEVOQlFVb3NTVUZCVHl4TlFVRkpXaXhGUVVGRk1ra3NVVUZCWWl4SlFVRjFRak5KTEVWQlFVVTJTeXhsUVVGNlFpeEpRVUV3UTJwTExFbEJRVVZhTEVOQlFVWXNSVUZCU1dNc1NVRkJSVVlzUlVGQlJXbExMR1ZCUVZJc1JVRkJkMEk1U2l4SlFVRkZMRU5CUVVOcVFpeEZRVUZGWXl4RFFVRkdMRU5CUVROQ0xFVkJRV2REYVVJc1RVRkJTV3BDTEVOQlFVb3NTMEZCVVdwQ0xFbEJRVVZwUWl4RlFVRkZiVXNzVjBGQldpeExRVUV3UW5CTUxFVkJRVVZ4VEN4SFFVRkdMRXRCUVZGeVRDeERRVUZzUXl4TFFVRnpRMEVzUlVGQlJYTk1MR2RDUVVGR0xFZEJRVzFDZEV3c1JVRkJSWE5NTEdkQ1FVRkdMRU5CUVcxQ0xGRkJRVzVDTEVWQlFUUkNOME1zUlVGQk5VSXNSVUZCSzBJc1EwRkJReXhEUVVGb1F5eERRVUZ1UWl4SFFVRnpSSHBKTEVWQlFVVjFUQ3hYUVVGR0xFbEJRV1YyVEN4RlFVRkZkVXdzVjBGQlJpeERRVUZqTEZWQlFXUXNSVUZCZVVJNVF5eEZRVUY2UWl4RFFVRXpSeXhEUVVGb1F5eEZRVUY1U3pOSkxFVkJRVVV3VEN4VlFVRkdMRWRCUVdGc1FpeEhRVUZITEZWQlFWTXZTeXhEUVVGVUxFVkJRVmM3UVVGQlF5eGxRVUZQUVN4RlFVRkZhMDBzVTBGQlJpeEhRVUZaTEVkQlFWb3NSVUZCWjBJc1EwRkJRMnhOTEVWQlFVVnhTeXhaUVVGR0xFTkJRV1VzVjBGQlppeERRVUY0UWp0QlFVRnZSQ3hQUVVGdVJTeERRVUYwVEN4RlFVRXlVRGxLTEVWQlFVVjVTaXh2UWtGQlJpeEhRVUYxUW1Vc1IwRkJSeXhWUVVGVEwwc3NRMEZCVkN4RlFVRlhPMEZCUVVNc1pVRkJUMEVzUlVGQlJXbERMRmRCUVVZc1EwRkJZMUFzUlVGQlJYbExMR0ZCUVVZc1EwRkJaMElzUlVGQmFFSXNRMEZCWkN4SFFVRnRReXhEUVVGRGJrMHNSVUZCUldkTExHOUNRVUZHTEVOQlFYVkNMRWRCUVhaQ0xFVkJRVFJDYUVnc1RVRkJka1U3UVVGQk9FVXNUMEZCTjBZc1EwRkJiRklzUlVGQmFWaDZReXhGUVVGRk1Fb3NjMEpCUVVZc1IwRkJlVUo2UWl4RlFVRkZNa0lzU1VGQlJpeERRVUZQZWtrc1JVRkJSWFZKTEhOQ1FVRlVMRU5CUVRGWkxFVkJRVEpoTVVvc1JVRkJSVFpNTEU5QlFVWXNSMEZCVlhKQ0xFZEJRVWNzVlVGQlV5OUxMRU5CUVZRc1JVRkJWenRCUVVGRExHVkJRVTgwUWl4RlFVRkZTeXhYUVVGR0xFTkJRV05xUXl4RFFVRmtMRVZCUVdsQ0swb3NSVUZCYWtJc1IwRkJiMEp5U0N4RFFVRndRaXhGUVVGelFpeERRVUZEYUVJc1JVRkJSVEpMTEdsQ1FVRklMRWxCUVhOQ0xFTkJRVU16U3l4RlFVRkZNa3NzYVVKQlFVWXNRMEZCYjBJelNpeERRVUZ3UWl4RlFVRjFRazBzVFVGQk0wVTdRVUZCYTBZc1QwRkJha2NzUTBGQmNtSXNSVUZCZDJoQ2VrTXNSVUZCUlRaTUxFOUJRVVlzU1VGQlZ6Vk1MRVZCUVVVNFRDeE5RVUZHTEVOQlFWTjRSU3hGUVVGVUxFZEJRVmtzVlVGQlV6bElMRU5CUVZRc1JVRkJWenRCUVVGRExGbEJRVWxETEVsQlFVVkVMRVZCUVVWM1JTeFBRVUZHTEVOQlFWVnRSU3hEUVVGV0xFVkJRVmxETEVWQlFWb3NRMEZCVGl4RFFVRnpRaXhQUVVGUExGVkJRVk0xU1N4RFFVRlVMRVZCUVZjN1FVRkJReXhwUWtGQlQwRXNSVUZCUlhGTExGbEJRVVlzUTBGQlpTeEpRVUZtTEUxQlFYVkNjRXNzUTBGQk9VSTdRVUZCWjBNc1UwRkJia1E3UVVGQmIwUXNUMEZCYkVjc1JVRkJiVWRQTEVWQlFVVXJUQ3hKUVVGR0xFTkJRVTk2UlN4RlFVRlFMRWRCUVZVc1ZVRkJVemxJTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zV1VGQlJ5eGxRVUZoTEU5QlFVOUJMRVZCUVVVMlNpeGpRVUYwUWl4SlFVRnpRMnBKTEVOQlFYcERMRVZCUVRKRE8wRkJRVU1zWTBGQlNYUkNMRWxCUVVWT0xFVkJRVVUyU2l4alFVRkdMRU5CUVdsQ09Vb3NRMEZCYWtJc1EwRkJUaXhEUVVFd1FpeFBRVUZQVHl4SlFVRkZMRU5CUVVOQkxFTkJRVVFzUTBGQlJpeEhRVUZOTEVWQlFXSTdRVUZCWjBJN1FVRkJReXhQUVVFM1RpeExRVUZuVDBNc1JVRkJSVGhNTEUxQlFVWXNRMEZCVTNoRkxFVkJRVlFzUjBGQldTeFZRVUZUT1Vnc1EwRkJWQ3hGUVVGWE8wRkJRVU1zV1VGQlNVTXNTVUZCUlVRc1JVRkJSWGRGTEU5QlFVWXNRMEZCVlcxRkxFTkJRVllzUlVGQldVTXNSVUZCV2l4RFFVRk9MRU5CUVhOQ0xFOUJRVThzVlVGQlV6VkpMRU5CUVZRc1JVRkJWenRCUVVGRExHTkJRVWxQTEVsQlFVVXNaVUZCWVN4UFFVRlBVQ3hGUVVGRmQwMHNaMEpCUVhSQ0xFbEJRWGREZUUwc1JVRkJSWGROTEdkQ1FVRkdMRU5CUVcxQ0xFbEJRVzVDTEVOQlFUbERMRU5CUVhWRkxFOUJRVTlxVFN4TFFVRkhRU3hGUVVGRmEwMHNTMEZCUml4TFFVRlZlRTBzUTBGQmNFSTdRVUZCYzBJc1UwRkJhRWc3UVVGQmFVZ3NUMEZCTDBvc1JVRkJaMHRQTEVWQlFVVXJUQ3hKUVVGR0xFTkJRVTk2UlN4RlFVRlFMRWRCUVZVc1ZVRkJVemxJTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zV1VGQlJ5eGxRVUZoTEU5QlFVOUJMRVZCUVVVMlNpeGpRVUYwUWl4SlFVRnpRMnBKTEVOQlFYcERMRVZCUVRKRE8wRkJRVU1zWTBGQlNYUkNMRU5CUVVvN1FVRkJRU3hqUVVGTlF5eERRVUZPTzBGQlFVRXNZMEZCVVVNc1EwRkJVanRCUVVGQkxHTkJRVlZITEVsQlFVVllMRVZCUVVVMlNpeGpRVUZHTEVOQlFXbENPVW9zUTBGQmFrSXNRMEZCV2l4RFFVRm5ReXhKUVVGSFdTeERRVUZJTEVWQlFVczdRVUZCUXl4blFrRkJSMHdzU1VGQlJVc3NSVUZCUlRSTUxHZENRVUZHTEVOQlFXMUNMRWxCUVc1Q0xFTkJRVVlzUlVGQk1rSnFUU3hMUVVGSFFTeEZRVUZGYTAwc1MwRkJSaXhMUVVGVmVrMHNRMEZCTTBNc1JVRkJOa01zVDBGQlRTeERRVUZEV1N4RFFVRkVMRU5CUVU0c1EwRkJWVWdzU1VGQlJWSXNSVUZCUlc5TkxHbENRVUZHTEVOQlFXOUNjazBzUTBGQmNFSXNRMEZCUml4RlFVRjVRbEVzU1VGQlJTeERRVUV6UWl4RFFVRTJRaXhQUVVGTlNTeEpRVUZGU0N4RlFVRkZSQ3hIUVVGR0xFTkJRVkk3UVVGQlpTeHJRa0ZCUjBRc1NVRkJSVXNzUlVGQlJUUk1MR2RDUVVGR0xFTkJRVzFDTEVsQlFXNUNMRU5CUVVZc1JVRkJNa0pxVFN4TFFVRkhRU3hGUVVGRmEwMHNTMEZCUml4TFFVRlZlazBzUTBGQk0wTXNSVUZCTmtNc1QwRkJUU3hEUVVGRFdTeERRVUZFTEVOQlFVNDdRVUZCTlVRN1FVRkJjMFVzYTBKQlFVMHNSVUZCVGp0QlFVRlRPMEZCUVVNc1QwRkJPVzlDTEVOQlFYaG9RaXhGUVVGM2NVTktMRVZCUVVVclRDeEpRVUZHTEVOQlFVOTJSU3hIUVVGUUxFZEJRVmQ2U0N4RlFVRkZlVW9zYjBKQlFVWXNSMEZCZFVJc1ZVRkJVMmhMTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWlVGQlRTeGxRVUZoTEU5QlFVOUJMRVZCUVVVclNpeHZRa0ZCZEVJc1IwRkJNa012U2l4RlFVRkZLMG9zYjBKQlFVWXNRMEZCZFVKb1N5eERRVUYyUWl4RFFVRXpReXhIUVVGeFJVOHNSVUZCUlRKS0xFZEJRVVlzUjBGQlRXcExMRVZCUVVWNVN5eG5Ra0ZCUml4RFFVRnRRakZMTEVOQlFXNUNMRU5CUVU0c1IwRkJORUlzUzBGQlN5eERRVUUxUnp0QlFVRTRSeXhQUVVGdVNpeEhRVUZ2U2l4VlFVRlRRU3hEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMRmxCUVVsTkxFTkJRVW83UVVGQlFTeFpRVUZOUXl4SlFVRkZMRVZCUVZJN1FVRkJRU3haUVVGWFF5eEpRVUZGTEVOQlFXSTdRVUZCUVN4WlFVRmxSeXhKUVVGRldDeEZRVUZGSzBvc2IwSkJRVVlzUTBGQmRVSm9TeXhEUVVGMlFpeERRVUZxUWl4RFFVRXlReXhKUVVGSExGRkJRVTFCTEVOQlFWUXNSVUZCVnp0QlFVRkRMR2xDUVVGTlR5eEpRVUZGU3l4RlFVRkZTQ3hIUVVGR0xFTkJRVkk3UVVGQlpTeHJRa0ZCU1VZc1JVRkJSV3RLTEZGQlFVNHNTVUZCWjBKcVNpeEZRVUZGVXl4SlFVRkdMRU5CUVU5V0xFTkJRVkFzUTBGQmFFSTdRVUZCWml4WFFVRjVReXhQUVVGUFF5eERRVUZRTzBGQlFWTXNaMEpCUVU5SkxFTkJRVkE3UVVGQlV5eFBRVUYyT0VNc1JVRkJkemhEU2l4RlFVRkZLMHdzU1VGQlJpeERRVUZQZUVVc1MwRkJVQ3hIUVVGaGVFZ3NSVUZCUlRCS0xITkNRVUZHTEVsQlFUQkNMRlZCUVZOcVN5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExGbEJRVWNzWlVGQllTeFBRVUZQUVN4RlFVRkZaMHNzYzBKQlFYUkNMRWxCUVRoRGNFa3NRMEZCYWtRc1JVRkJiVVFzVDBGQlR6VkNMRVZCUVVWblN5eHpRa0ZCUml4RFFVRjVRbXBMTEVOQlFYcENMRU5CUVZBN1FVRkJiVU1zVDBGQmJteEVMRVZCUVc5c1JIRkRMRWxCUVVVc1JVRkJkR3hFTEVWQlFYbHNSRVFzU1VGQlJTeEZRVUV6YkVRc1JVRkJPR3hFTEVOQlFVTTNRaXhGUVVGRk1rb3NSMEZCUml4SFFVRk5NVUlzUlVGQlJUSkNMRWxCUVVZc1EwRkJUM3BKTEVWQlFVVm5TaXhuUWtGQlZDeERRVUZRTEUxQlFYRkRTeXhIUVVGSExGVkJRVk12U3l4RFFVRlVMRVZCUVZjN1FVRkJRelJDTEZWQlFVVkxMRmRCUVVZc1EwRkJZMnBETEVOQlFXUXNSVUZCYVVJd1RTeFRRVUZxUWl4SFFVRXlRaXhaUVVGVmFFc3NRMEZCVml4SFFVRlpMRzlDUVVGYUxFZEJRV2xEUVN4RFFVRnFReXhIUVVGdFF5eHBSVUZCT1VRc1JVRkJaMGt4UXl4RlFVRkZNRXNzWjBKQlFVWXNRMEZCYlVJc2MwSkJRVzVDTEVWQlFUSkRNVWdzVFVGQk0wTXNTVUZCYlVSYUxFVkJRVVZ1UWl4SlFVRkdMRU5CUVU4c1YwRkJVMmRITEVOQlFWUXNSMEZCVnl4alFVRnNRaXhEUVVGdVRDeEZRVUZ4VG1wSUxFVkJRVVV3U3l4blFrRkJSaXhEUVVGdFFpeFpRVUZ1UWl4RlFVRnBRekZJTEUxQlFXcERMRWxCUVhsRFdpeEZRVUZGYmtJc1NVRkJSaXhEUVVGUExGRkJRVTFuUnl4RFFVRk9MRWRCUVZFc1dVRkJVaXhIUVVGeFFrUXNRMEZCY2tJc1IwRkJkVUlzUjBGQk9VSXNRMEZCT1ZBc1JVRkJhVk5vU0N4RlFVRkZNRXNzWjBKQlFVWXNRMEZCYlVJc1ZVRkJVV2hKTEVOQlFWSXNSMEZCVlN4SlFVRTNRaXhGUVVGdFEwMHNUVUZCYmtNc1NVRkJNa05hTEVWQlFVVnVRaXhKUVVGR0xFTkJRVThzU1VGQlVDeERRVUUxVlN4RlFVRjVWbXBDTEVWQlFVVXdTeXhuUWtGQlJpeERRVUZ0UWl4VlFVRnVRaXhGUVVFclFqRklMRTFCUVM5Q0xFbEJRWFZEV2l4RlFVRkZia0lzU1VGQlJpeERRVUZQTEZWQlFWQXNRMEZCYUZrc1JVRkJiVnBxUWl4RlFVRkZNRXNzWjBKQlFVWXNRMEZCYlVJc1QwRkJTMmhKTEVOQlFVd3NSMEZCVHl4SlFVRXhRaXhGUVVGblEwMHNUVUZCYUVNc1NVRkJkME5hTEVWQlFVVnVRaXhKUVVGR0xFTkJRVThzVlVGQlVDeERRVUV6WWp0QlFVRTRZeXhQUVVFM1pDeEhRVUVyWkRoS0xFZEJRVWNzVlVGQlV5OUxMRU5CUVZRc1JVRkJWenRCUVVGRFFTeFZRVUZGTUUwc1UwRkJSaXhIUVVGWkxHMUdRVUZhTEVOQlFXZEhMRWxCUVVsNlRTeEpRVUZGZVVJc1JVRkJSVWtzWVVGQlJpeERRVUZuUWl4UFFVRm9RaXhEUVVGT0xFTkJRU3RDTjBJc1JVRkJSWEZMTEZsQlFVWXNRMEZCWlN4TlFVRm1MRVZCUVhOQ0xGRkJRWFJDTEVkQlFXZERkRXNzUlVGQlJXbERMRmRCUVVZc1EwRkJZMmhETEVOQlFXUXNSVUZCYVVKeFN5eFpRVUZxUWl4RFFVRTRRaXhOUVVFNVFpeEZRVUZ4UXl4SFFVRnlReXhEUVVGb1F5eEZRVUV3UlhSTExFVkJRVVV3U3l4blFrRkJSaXhEUVVGdFFpeFZRVUZ1UWl4RlFVRXJRakZJTEUxQlFTOUNMRWxCUVhWRFdpeEZRVUZGYmtJc1NVRkJSaXhEUVVGUExGTkJRVTluUnl4RFFVRlFMRWRCUVZNc1lVRkJhRUlzUTBGQmFrZ3NSVUZCWjBvc1RVRkJTV3BJTEVWQlFVVXdTeXhuUWtGQlJpeERRVUZ0UWl4VlFVRnVRaXhGUVVFclFqRklMRTFCUVc1RExFbEJRVEpEV2l4RlFVRkZia0lzU1VGQlJpeERRVUZQTEZWQlFWQXNSVUZCYTBJc1YwRkJiRUlzUTBGQk0wd3NSVUZCTUU1WExFVkJRVVZMTEZkQlFVWXNRMEZCWTJwRExFTkJRV1FzUlVGQmFVSnhTaXhSUVVGcVFpeEhRVUV3UWl4RFFVRkRMRU5CUVhKUUxFVkJRWFZRTEUxQlFVbHlTaXhGUVVGRk1Fc3NaMEpCUVVZc1EwRkJiVUlzVjBGQmJrSXNSVUZCWjBNeFNDeE5RVUZ3UXl4SlFVRTBRMW9zUlVGQlJXNUNMRWxCUVVZc1EwRkJUeXhWUVVGUUxFVkJRV3RDTEZkQlFXeENMRU5CUVc1VExFVkJRV3RWYWtJc1JVRkJSVEJMTEdkQ1FVRkdMRU5CUVcxQ0xFMUJRVzVDTEVOQlFXeFZMRVZCUVRaV2RFa3NSVUZCUlc1Q0xFbEJRVVlzUTBGQlR5eE5RVUZRTEVOQlFUZFdPMEZCUVRSWExFOUJRVEZtTEVOQlFYQm5RaXhEUVVFNWJFUXNSVUZCSzJ4R0xFTkJRVU5XTEVWQlFVVnZUU3hsUVVGR0xFZEJRV3RDYmtVc1JVRkJSVEpDTEVsQlFVWXNRMEZCVHpOSUxFbEJRVVZhTEVWQlFVVm5UQ3hQUVVGR0xFbEJRVmRvVEN4RlFVRkZhVXdzY1VKQlFXSXNTVUZCYjBOcVRDeEZRVUZGYTB3c2EwSkJRWFJETEVsQlFUQkViRXdzUlVGQlJXMU1MR2RDUVVFMVJDeEpRVUU0Ulc1TUxFVkJRVVZ2VEN4cFFrRkJla1lzUTBGQmJrSXNTMEZCYVVscVF5eEhRVUZITEZWQlFWTXZTeXhEUVVGVUxFVkJRVmM3UVVGQlEwOHNWVUZCUlRCTkxHbENRVUZHTEVkQlFXOUNla3NzUlVGQlJXSXNTVUZCUml4RFFVRlBNMElzUTBGQlVDeEZRVUZUTEVkQlFWUXNRMEZCY0VJc1JVRkJhME4zUXl4RlFVRkZZaXhKUVVGR0xFTkJRVTh6UWl4RFFVRlFMRVZCUVZNc1YwRkJWQ3hEUVVGc1F5eEZRVUYzUkhGRExFVkJRVVZ3UWl4SlFVRkdMRU5CUVU4c1NVRkJVQ3hGUVVGWmJVY3NRMEZCV2l4RFFVRjRSRHRCUVVGMVJTeFBRVUYwUml4RFFVRm9kVVlzUlVGQmQzcEdhRVlzU1VGQlJVRXNSVUZCUlZrc1RVRkJSaXhKUVVGVkxFbEJRVWx6UlN4TlFVRktMRU5CUVZkc1JpeEZRVUZGYjBrc1NVRkJSaXhEUVVGUExFZEJRVkFzUTBGQldDeERRVUZ3TUVZc1JVRkJOREZHYmtrc1NVRkJSVUVzUlVGQlJWY3NUVUZCUml4SlFVRlZMRWxCUVVselJTeE5RVUZLTEVOQlFWZHFSaXhGUVVGRmJVa3NTVUZCUml4RFFVRlBMRWRCUVZBc1EwRkJXQ3hEUVVGNE1rWXNSVUZCWnpSR2Rrc3NTVUZCUlhWSkxFVkJRVVV5UWl4SlFVRkdMRU5CUVU5MlNTeEZRVUZGYzB3c2RVSkJRVlFzUTBGQmJEUkdMRVZCUVc4MlJucExMRWxCUVVWNFF5eExRVUZIZFVrc1JVRkJSVEpDTEVsQlFVWXNRMEZCVDNaSkxFVkJRVVYxVEN4UlFVRlVMRU5CUVVnc1IwRkJjMElzVlVGQlUyNU9MRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNXVUZCU1Uwc1NVRkJSU3hOUVVGSlVDeEZRVUZGZVVvc1VVRkJUaXhIUVVGbGVrb3NSVUZCUlRKTUxHVkJRV3BDTEVkQlFXbERNMHdzUTBGQmRrTTdRVUZCUVN4WlFVRjVRMUVzU1VGQlJWQXNTMEZCUjBFc1JVRkJSV2xETEZWQlFXaEVMRU5CUVRKRUxFOUJRVTlzUXl4TlFVRkpVU3hEUVVGS0xFbEJRVThzUlVGQlJTeERRVUZEUVN4RFFVRkVMRWxCUVVrc1RVRkJTVUVzUlVGQlJXbEtMRkZCUVZZc1NVRkJiMElzUlVGQlJXeEtMRVZCUVVVMFRTeFJRVUZHTEVkQlFWYzFUU3hGUVVGRk5FMHNVVUZCUml4RFFVRlhNMDBzUTBGQldDeERRVUZZTEVkQlFYbENVaXhGUVVGRmEwNHNkVUpCUVVZc1NVRkJNa0lzUzBGQlIyeE9MRVZCUVVWclRpeDFRa0ZCUml4RFFVRXdRakZOTEVOQlFURkNMRU5CUVhwRUxFTkJRWFJDTEVOQlFXUTdRVUZCTkVnc1QwRkJNMDRzUjBGQk5FNHNWVUZCVTFJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4WlFVRkhRU3hEUVVGSUxFVkJRVXNzVDBGQlRVRXNTVUZCUlVFc1JVRkJSV2xETEZWQlFWWTdRVUZCY1VJc1kwRkJSMnBETEUxQlFVbEVMRU5CUVZBc1JVRkJVeXhQUVVGTkxFTkJRVU1zUTBGQlVEdEJRVUU1UWl4VFFVRjFReXhQUVVGTkxFTkJRVU1zUTBGQlVEdEJRVUZUTEU5QlFYSnpSeXhGUVVGemMwZDFSeXhKUVVGRmRFY3NTVUZCUlN4VlFVRlRSQ3hEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMRmxCUVVkRUxFMUJRVWxETEVOQlFWQXNSVUZCVXl4UFFVRlBjMElzU1VGQlJTeERRVUZETEVOQlFVZ3NSVUZCU3l4RFFVRmFMRU5CUVdNc1NVRkJTV1lzU1VGQlJTeERRVUZEVWl4RlFVRkZhMDRzZFVKQlFVZ3NSMEZCTWtJc1EwRkJRMnBPTEVWQlFVVnBUaXgxUWtGQmNFTXNRMEZCTkVRc1QwRkJUekZOTEVsQlFVVkJMRU5CUVVZc1NVRkJTMEVzU1VGQlJTeERRVUZEVWl4RlFVRkZORW9zWVVGQlJpeEpRVUZwUWpWS0xFTkJRV3hDTEU5QlFYZENReXhGUVVGRk1rb3NZVUZCUml4SlFVRnBRak5LTEVOQlFYcERMRWxCUVRSRFJDeEZRVUZGYTA0c2RVSkJRVVlzUTBGQk1FSnFUaXhEUVVFeFFpeERRVUUxUXl4SFFVRjVSU3hEUVVFelJTeEZRVUUyUlN4SlFVRkZUeXhEUVVGR0xFbEJRVXNzUTBGQlEwUXNSVUZCUlRaTkxGbEJRVWdzU1VGQmFVSnVUaXhGUVVGRmFVNHNkVUpCUVVZc1EwRkJNRUpzVGl4RFFVRXhRaXhOUVVFclFsRXNRMEZCY2tRc1IwRkJkVVJTTEUxQlFVa3dRaXhEUVVGS0xFbEJRVTh4UWl4RlFVRkZORW9zWVVGQlJpeExRVUZyUW1wSUxFTkJRV3hDTEVsQlFYRkNSaXhGUVVGRlJTeERRVUZHTEVWQlFVa3pReXhEUVVGS0xFTkJRVFZDTEVkQlFXMURMRU5CUVVNc1EwRkJjRU1zUjBGQmMwTkRMRTFCUVVsNVFpeERRVUZLTEVsQlFVOTZRaXhGUVVGRk1rb3NZVUZCUml4TFFVRnJRbXBJTEVOQlFXeENMRWxCUVhGQ1JpeEZRVUZGUlN4RFFVRkdMRVZCUVVreFF5eERRVUZLTEVOQlFUVkNMRWRCUVcxRExFTkJRVzVETEVkQlFYRkRiMElzU1VGQlJUQkdMRVZCUVVVeFJpeERRVUZHTEVWQlFVbHlRaXhEUVVGS0xFbEJRVThyUnl4RlFVRkZNVVlzUTBGQlJpeEZRVUZKY0VJc1EwRkJTaXhEUVVGVUxFZEJRV2RDTEVOQlFXeEtMRWRCUVc5S0xFbEJRVVZQTEVOQlFVWXNSMEZCU1N4RFFVRkRMRU5CUVV3c1IwRkJUeXhEUVVFM1R5eERRVUZRTzBGQlFYVlFMRTlCUVRGV0xFZEJRVEpXTEZWQlFWTlNMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNXVUZCUjBRc1RVRkJTVU1zUTBGQlVDeEZRVUZUTEU5QlFVOXpRaXhKUVVGRkxFTkJRVU1zUTBGQlNDeEZRVUZMTEVOQlFWb3NRMEZCWXl4SlFVRkphRUlzUTBGQlNqdEJRVUZCTEZsQlFVMURMRWxCUVVVc1EwRkJVanRCUVVGQkxGbEJRVlZETEVsQlFVVlVMRVZCUVVWclF5eFZRVUZrTzBGQlFVRXNXVUZCZVVKMFFpeEpRVUZGV0N4RlFVRkZhVU1zVlVGQk4wSTdRVUZCUVN4WlFVRjNRM0JDTEVsQlFVVXNRMEZCUTJRc1EwRkJSQ3hEUVVFeFF6dEJRVUZCTEZsQlFUaERaMElzU1VGQlJTeERRVUZEWml4RFFVRkVMRU5CUVdoRUxFTkJRVzlFTEVsQlFVY3NRMEZCUTFFc1EwRkJSQ3hKUVVGSkxFTkJRVU5ITEVOQlFWSXNSVUZCVlN4UFFVRlBXaXhOUVVGSk1FSXNRMEZCU2l4SFFVRk5MRU5CUVVNc1EwRkJVQ3hIUVVGVGVrSXNUVUZCU1hsQ0xFTkJRVW9zUjBGQlRTeERRVUZPTEVkQlFWRnFRaXhKUVVGRkxFTkJRVU1zUTBGQlNDeEhRVUZMUnl4SlFVRkZMRU5CUVVZc1IwRkJTVk1zU1VGQlJUQkdMRVZCUVVVeFJpeERRVUZHTEVWQlFVbHlRaXhEUVVGS0xFbEJRVThyUnl4RlFVRkZNVVlzUTBGQlJpeEZRVUZKY0VJc1EwRkJTaXhEUVVGVUxFZEJRV2RDTEVOQlFXcEVMRU5CUVcxRUxFbEJRVWRSTEUxQlFVbEhMRU5CUVZBc1JVRkJVeXhQUVVGUGMwc3NSMEZCUjJ4TUxFTkJRVWdzUlVGQlMwTXNRMEZCVEN4RFFVRlFMRU5CUVdWTkxFbEJRVVZRTEVOQlFVWXNRMEZCU1N4UFFVRk5UeXhKUVVGRlFTeEZRVUZGTWtJc1ZVRkJWanRCUVVGeFFuQkNMRmxCUVVWMVRTeFBRVUZHTEVOQlFWVTVUU3hEUVVGV08wRkJRWEpDTEZOQlFXdERRU3hKUVVGRlRpeERRVUZHTEVOQlFVa3NUMEZCVFUwc1NVRkJSVUVzUlVGQlJUSkNMRlZCUVZZN1FVRkJjVUpzUWl4WlFVRkZjVTBzVDBGQlJpeERRVUZWT1Uwc1EwRkJWanRCUVVGeVFpeFRRVUZyUXl4UFFVRk5UeXhGUVVGRlRpeERRVUZHTEUxQlFVOVJMRVZCUVVWU0xFTkJRVVlzUTBGQllqdEJRVUZyUWtFN1FVRkJiRUlzVTBGQmMwSXNUMEZCVDBFc1NVRkJSVEJMTEVkQlFVZHdTeXhGUVVGRlRpeERRVUZHTEVOQlFVZ3NSVUZCVVZFc1JVRkJSVklzUTBGQlJpeERRVUZTTEVOQlFVWXNSMEZCWjBKTkxFVkJRVVZPTEVOQlFVWXNUVUZCVDIxRExFTkJRVkFzUjBGQlV5eERRVUZETEVOQlFWWXNSMEZCV1ROQ0xFVkJRVVZTTEVOQlFVWXNUVUZCVDIxRExFTkJRVkFzUjBGQlV5eERRVUZVTEVkQlFWY3NRMEZCT1VNN1FVRkJaMFFzVDBGQmJqSklMRVZCUVc4eVNHcENMRU5CUVRrMFNDeEpRVUZwTlVoQkxFTkJRWGcxU0R0QlFVRXdOVWdzUzBGQk4ydEpMRVZCUVRoclNXbEpMRWRCUVVkcFJDeFBRVUZJTEVkQlFWY3NWVUZCVXpWTkxFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVNc1lVRkJUekJLTEVkQlFVY3pTaXhEUVVGSUxFVkJRVXNzU1VGQlRDeEZRVUZWTEVsQlFWWXNSVUZCWlVNc1EwRkJaaXhEUVVGUU8wRkJRWGxDTEV0QlFXaHZTU3hGUVVGcGIwa3dTaXhIUVVGSFowUXNaVUZCU0N4SFFVRnRRaXhWUVVGVE0wMHNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eFZRVUZITEVOQlFVTkVMRVZCUVVVMFNpeGhRVUZHTEVsQlFXbENOVW9zUTBGQmJFSXNUVUZCZFVJd1FpeERRVUYyUWl4SlFVRXdRa1FzUlVGQlJYcENMRU5CUVVZc1EwRkJNVUlzUlVGQkswSkRMRWxCUVVWQkxFVkJRVVYxUlN4UFFVRkdMRU5CUVZWclJDeERRVUZXTEVWQlFWa3NVVUZCV2l4RFFVRnFReXhGUVVGMVJHNUlMRVZCUVVWdlRTeGxRVUZHTEVsQlFXMUNPVXNzUTBGQmJrSXNTVUZCYzBJc1EwRkJRM2xGTEVWQlFVVnlSeXhKUVVGRkxFZEJRVW9zUTBGQmRrSXNTMEZCYTBNc1EwRkJRMjlETEVOQlFVUXNTVUZCU1N4RFFVRkRRU3hGUVVGRk9FZ3NTVUZCUml4RFFVRlBiRXNzUTBGQlVDeERRVUYyUXl4TlFVRnZSQ3hEUVVGRGJVTXNRMEZCUkN4SlFVRkpMRU5CUVVOQkxFVkJRVVVyU0N4SlFVRkdMRU5CUVU5c1N5eERRVUZRTEVOQlFYcEVMRU5CUVRGRUxFVkJRVGhJTEVsQlFVYzdRVUZCUXl4WlFVRkpUeXhKUVVGRlowTXNSVUZCUldJc1NVRkJSaXhEUVVGUE0wSXNRMEZCVUN4RlFVRlRReXhEUVVGVUxFTkJRVTRzUTBGQmEwSXNTVUZCUjA4c1MwRkJSMFFzUlVGQlJUQk5MR2xDUVVGTUxFbEJRWGRDYWs0c1JVRkJSVWtzVVVGQlJpeEpRVUZaTEU5QlFVdEtMRVZCUVVWSkxGRkJRVVlzUTBGQlYzRktMRkZCUVhaRUxFVkJRV2RGTEU5QlFVOXFTaXhEUVVGUU8wRkJRVk1zVDBGQkwwWXNRMEZCSzBZc1QwRkJUVU1zUTBGQlRpeEZRVUZSTEVOQlFVVXNVVUZCVDJ0S0xFZEJRVWN4U2l4RFFVRklMRVZCUVV0NVFpeERRVUZNTEVWQlFVOHNTVUZCVUN4RlFVRlpMRU5CUVVNeFFpeERRVUZFTEVOQlFWb3NSVUZCYVVKblJDeE5RVUZxUWl4SFFVRjNRaXhEUVVFdlFqdEJRVUZwUXl4TFFVRXhOa2tzUlVGQk1qWkpNa2NzUjBGQlIzZEVMRkZCUVVnc1IwRkJXU3hWUVVGVGJrNHNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eGhRVUZOTEVOQlFVTkVMRVZCUVVVMFNpeGhRVUZHTEVsQlFXbENOVW9zUTBGQmJFSXNUVUZCZFVJd1FpeERRVUYyUWl4SlFVRXdRa1FzUlVGQlJYcENMRU5CUVVZc1EwRkJNVUlzUlVGQkswSjVReXhGUVVGRmVrTXNRMEZCUml4RlFVRkpReXhEUVVGS0xFTkJRWEpETzBGQlFUUkRMRXRCUVdvdlNTeEZRVUZyTDBrd1NpeEhRVUZITWtRc1NVRkJTQ3hIUVVGUkxGVkJRVk4wVGl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEU5QlFVTkVMRVZCUVVVMFNpeGhRVUZHTEVsQlFXbENOVW9zUTBGQmJFSXNUVUZCZFVJd1FpeERRVUYyUWl4SlFVRXdRa1FzUlVGQlJYcENMRU5CUVVZc1EwRkJNVUlzUTBGQkswSXNTVUZCU1ZNc1NVRkJSVVFzUlVGQlJYbExMRlZCUVVZc1EwRkJZV2hNTEVWQlFVVm5SeXhYUVVGR0xFVkJRV0lzUTBGQlRqdEJRVUZCTEZWQlFXOURja1lzU1VGQlJVZ3NTMEZCUnl0R0xFVkJRVVUzUlN4SlFVRkdMRU5CUVU5dVFpeEZRVUZGZVVzc1ZVRkJWQ3hGUVVGdlFtaE1MRVZCUVVWblJ5eFhRVUZHTEVWQlFYQkNMRU5CUVVnc1IwRkJkME40Uml4RlFVRkZWQ3hEUVVGR0xFVkJRVWxETEVOQlFVb3NSVUZCVFN4RFFVRkRORUlzUTBGQlVDeERRVUY0UXl4SFFVRnJSQ3hMUVVGTExFTkJRVGRHTEVOQlFTdEdMRTlCUVU4c1MwRkJTeXhEUVVGTUxFdEJRVk5xUWl4RFFVRlVMRWRCUVZkQkxFTkJRVmdzUjBGQllVd3NSVUZCUlRCTUxGVkJRVVlzU1VGQll5eERRVUZEY0Vzc1EwRkJaaXhIUVVGcFFqZENMRVZCUVVWeFN5eFpRVUZHTEVOQlFXVndTeXhEUVVGbUxFTkJRV3BDTEVkQlFXMURMRU5CUVVOWExFbEJRVVZhTEVWQlFVVjNUU3huUWtGQlJpeERRVUZ0UW5aTkxFTkJRVzVDTEVOQlFVZ3NTMEZCTWtKWExFVkJRVVV5VFN4VFFVRTNRaXhIUVVGMVF6Tk5MRVZCUVVVMlRDeExRVUY2UXl4SFFVRXJReXhKUVVGMFJ6dEJRVUV5Unl4TFFVRnFka29zUlVGQmEzWktPVU1zUjBGQlJ6WkVMRTFCUVVnc1IwRkJWU3hWUVVGVGVFNHNRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJUU3hEUVVGRFFTeEpRVUZGTEVWQlFVZ3NSVUZCVDNkRkxFOUJRVkFzUTBGQlpYVkZMRVZCUVdZc1JVRkJhMEpETEVWQlFXeENMRU5CUVU0N1FVRkJORUlzUzBGQmNIbEtMRVZCUVhGNVNsY3NSMEZCUjJwR0xFdEJRVWdzUjBGQlV5eFZRVUZUTVVVc1EwRkJWQ3hGUVVGWE8wRkJRVU1zV1VGQlRTeEpRVUZKU3l4TFFVRktMRU5CUVZVc05FTkJRVEJEVEN4RFFVRndSQ3hEUVVGT08wRkJRVFpFTEV0QlFYWXpTaXhGUVVGM00wb3lTaXhIUVVGSE9FUXNWVUZCU0N4SFFVRmpMRlZCUVZONlRpeERRVUZVTEVWQlFWYzdRVUZCUXl4VlFVRkpReXhEUVVGS08wRkJRVUVzVlVGQlRVOHNTVUZCUlN4RlFVRlNPMEZCUVVFc1ZVRkJWME1zU1VGQlJTeERRVUZpTzBGQlFVRXNWVUZCWlVjc1NVRkJSU3hEUVVGcVFpeERRVUZ0UWl4SlFVRkhWeXhKUVVGRkxFTkJRVU5vUWl4RlFVRkZiVTRzWjBKQlFVd3NSVUZCYzBKeVRTeEpRVUZGTEVOQlFVTmtMRVZCUVVWdlRpeFZRVUZJTEVsQlFXVXpUaXhGUVVGRllTeExRVUZHTEVOQlFWRXNRMEZCVWl4RFFVRjJReXhGUVVGclJHSXNSVUZCUlRoRUxFbEJRVVlzUTBGQlQzbERMRU5CUVZBc1EwRkJiRVFzUlVGQk5FUm9SaXhEUVVFdlJDeEZRVUZwUlR0QlFVRkRMR1ZCUVUxMFFpeEpRVUZGUkN4RlFVRkZXU3hIUVVGR0xFTkJRVkk3UVVGQlpWZ3NaMEpCUVVsRUxFVkJRVVZaTEVOQlFVWXNRMEZCU2l4TFFVRlhTQ3hKUVVGRlJDeEZRVUZGVXl4SlFVRkdMRU5CUVU5TUxFTkJRVkFzUTBGQllqdEJRVUZtTEZOQlFYVkRMRTlCUVUxSUxFZEJRVTQ3UVVGQlZWUXNXVUZCUlN0RUxFMUJRVVlzUTBGQlUzWkVMRVZCUVVWRExFTkJRVVlzUTBGQlZDeEZRVUZqTEVOQlFXUTdRVUZCVmp0QlFVRXlRaXhqUVVGUFdTeEpRVUZGTEVsQlFVWXNSVUZCVDNKQ0xFTkJRV1E3UVVGQlowSXNTMEZCZW1wTExFVkJRVEJxUzFNc1NVRkJSV3RLTEVkQlFVZHBSU3hQUVVGSUxFZEJRVmNzVlVGQlV6Vk9MRU5CUVZRc1JVRkJWenRCUVVGRExGVkJRVWxETEVOQlFVbzdRVUZCUVN4VlFVRk5UU3hKUVVGRkxFVkJRVkk3UVVGQlFTeFZRVUZYUXl4SlFVRkZMRU5CUVdJN1FVRkJRU3hWUVVGbFNTeEpRVUZGV2l4RlFVRkZlVW9zVVVGQmJrSXNRMEZCTkVJc1NVRkJSemRKTEVOQlFVZ3NSVUZCU3p0QlFVRkRMRmxCUVVjc1RVRkJTVUVzUTBGQlNpeEpRVUZQTEUxQlFVbEJMRU5CUVZnc1NVRkJZeXhQUVVGTFFTeERRVUYwUWl4RlFVRjNRanRCUVVGRExHTkJRVWNzV1VGQlZTeFBRVUZQV2l4RlFVRkZOazRzVjBGQmRFSXNSVUZCYTBNc1QwRkJUemRPTEVWQlFVVTJUaXhYUVVGVUxFTkJRWEZDTEV0QlFVazNUaXhKUVVGRlFTeEZRVUZGT0U0c1ZVRkJVaXhGUVVGdFFqbE9MRU5CUVc1Q0xFVkJRWEZDUVN4SlFVRkZRU3hGUVVGRmIwd3NWMEZCZWtJN1FVRkJjVU0zU3l4cFFrRkJSMFVzUlVGQlJWUXNRMEZCUml4RFFVRklPMEZCUVhKRE8wRkJRVFpETEZOQlFUZElMRTFCUVd0SkxFbEJRVWNzVFVGQlNWa3NRMEZCU2l4SlFVRlBMRTFCUVVsQkxFTkJRV1FzUlVGQlowSXNUMEZCVDFvc1JVRkJSU3RPTEZOQlFWUTdRVUZCYlVJc1QwRkJNMHNzVFVGQlowd3NUMEZCVFRsT0xFbEJRVVZFTEVWQlFVVlJMRWRCUVVZc1EwRkJVanRCUVVGbFJDeGhRVUZIUlN4RlFVRkZVaXhEUVVGR0xFTkJRVWc3UVVGQlppeFBRVUYxUWl4UFFVRlBUU3hEUVVGUU8wRkJRVk1zUzBGQkwzcExMRVZCUVdjd1MwTXNTVUZCUlcxS0xFZEJRVWR4UlN4VFFVRklMRWRCUVdFc1JVRkJRM0JFTEdGQlFWa3NSVUZCWWl4RlFVRm5RbkZFTEdOQlFXRnVSQ3hGUVVFM1FpeEZRVUZuUTI5RUxFOUJRVTF5Unl4RFFVRjBReXhGUVVGM1EyOUVMRmxCUVZjc1JVRkJia1FzUlVGQmMwUnpRaXhOUVVGTExFVkJRVE5FTEVWQlFUaEVORUlzVlVGQlV5eEZRVUZETEV0QlFVa3NSVUZCUXpkRkxFdEJRVWtzV1VGQlRDeEZRVUZyUWpWR0xFOUJRVTBzUTBGQlF5eERRVUY2UWl4RlFVRk1MRVZCUVdsRExFdEJRVWtzUlVGQlF6UkdMRXRCUVVrc1dVRkJUQ3hGUVVGeVF5eEZRVUYzUkN4TFFVRkpMRVZCUVVOQkxFdEJRVWtzYVVKQlFVd3NSVUZCZFVJMVJpeFBRVUZOTEVOQlFVTXNRMEZCT1VJc1JVRkJOVVFzUlVGQk5rWXNTMEZCU1N4RlFVRkRORVlzUzBGQlNTeHBRa0ZCVEN4RlFVRnFSeXhGUVVGMlJTeEZRVUZwVFRoRkxGZEJRVlVzUlVGQlEyNUhMRTFCUVVzc1kwRkJVMnBKTEVOQlFWUXNSVUZCVnp0QlFVRkRMR2xDUVVGUFFTeEZRVUZGTEVOQlFVWXNTVUZCUzBFc1JVRkJSU3hEUVVGR0xFVkJRVXQzUlN4UFFVRk1MRU5CUVdGdFJTeERRVUZpTEVWQlFXVkRMRVZCUVdZc1EwRkJUQ3hGUVVGM1FqVkpMRVZCUVVVc1EwRkJSaXhKUVVGTExFTkJRVU5CTEVWQlFVVXNRMEZCUml4TFFVRk5RU3hGUVVGRkxFTkJRVVlzUTBGQlRpeEpRVUZaUVN4RlFVRkZMRU5CUVVZc1EwRkJXaXhKUVVGclFpeEZRVUZ1UWl4RlFVRjFRbmRGTEU5QlFYWkNMRU5CUVN0Q2JVVXNRMEZCTDBJc1JVRkJhVU5ETEVWQlFXcERMRU5CUVRkQ0xFVkJRV3RGTEZOQlFVODFTU3hGUVVGRkxFTkJRVVlzUTBGQlVDeExRVUZqUVN4RlFVRkZMRU5CUVVZc1NVRkJTeXhOUVVGSlFTeEZRVUZGTEVOQlFVWXNRMEZCU2l4SFFVRlRMRWRCUVRWQ0xFTkJRV3hGTEVWQlFXMUhRU3hGUVVGRllTeExRVUZHTEVOQlFWRXNRMEZCVWl4RlFVRlZMRU5CUVZZc1EwRkJNVWM3UVVGQmRVZ3NVMEZCZWtrc1JVRkJNRWx6U0N4UFFVRk5MR1ZCUVZOdVNTeERRVUZVTEVWQlFWYzdRVUZCUXl4cFFrRkJUMEVzUlVGQlJTeERRVUZHTEVsQlFVdEJMRVZCUVVVc1EwRkJSaXhGUVVGTGFVY3NWMEZCVEN4RlFVRk1MRVZCUVhkQ0xGVkJRVkZxUnl4RlFVRkZMRU5CUVVZc1JVRkJTMkVzUzBGQlRDeERRVUZYTEVOQlFWZ3NSVUZCWVN4RFFVRmlMRU5CUVZJc1NVRkJlVUppTEVWQlFVVXNRMEZCUml4TFFVRk5Na29zUjBGQlIycEdMRXRCUVVnc1EwRkJVekZGTEVWQlFVVXNRMEZCUml4RFFVRlVMRU5CUVU0c1JVRkJjVUpCTEVWQlFVVXNRMEZCUml4SlFVRkxMRVZCUVVWQkxFVkJRVVVzUTBGQlJpeEpRVUZMUVN4RlFVRkZMRU5CUVVZc1MwRkJUVUVzUlVGQlJTeERRVUZHTEV0QlFVMHNRMEZCV2l4RFFVRk1MRWRCUVc5Q0xFdEJRVWNzVjBGQlUwRXNSVUZCUlN4RFFVRkdMRU5CUVZRc1NVRkJaU3hWUVVGUlFTeEZRVUZGTEVOQlFVWXNRMEZCTVVJc1EwRkJkRUlzUTBGQk1VSXNSVUZCYVVaQkxFVkJRVVVzUTBGQlJpeEpRVUZMTEVWQlFVVkJMRVZCUVVVc1EwRkJSaXhKUVVGTFFTeEZRVUZGTEVOQlFVWXNRMEZCVEN4SlFVRlhMRlZCUVZGQkxFVkJRVVVzUTBGQlJpeERRVUZ5UWl4RFFVRXZSeXhKUVVFeVNVRXNSVUZCUlN4RFFVRkdMRXRCUVUweVNpeEhRVUZIYWtZc1MwRkJTQ3hEUVVGVE1VVXNSVUZCUlN4RFFVRkdMRU5CUVZRc1EwRkJla3NzUlVGQmQweEJMRU5CUVM5TU8wRkJRV2xOTEZOQlFUZFdMRVZCUVRoV2Ewa3NVVUZCVHl4blFrRkJVMnhKTEVOQlFWUXNSVUZCVnp0QlFVRkRMR05CUVVsRExFTkJRVW83UVVGQlFTeGpRVUZOVFN4SlFVRkZMRU5CUVVOUUxFVkJRVVVzUTBGQlJpeERRVUZFTEVsQlFVOUJMRVZCUVVVc1EwRkJSaXhEUVVGbUxFTkJRVzlDTEU5QlFVODJTQ3hGUVVGRlRTeExRVUZHTEVOQlFWRm5ReXhKUVVGU0xFTkJRV0Z1U3l4RlFVRkZMRU5CUVVZc1EwRkJZaXhKUVVGdFFpeEpRVUZ1UWl4SlFVRjVRa0VzUlVGQlJTeERRVUZHTEVsQlFVdEJMRVZCUVVVc1EwRkJSaXhKUVVGTFFTeEZRVUZGTEVOQlFVWXNTMEZCVFVFc1JVRkJSU3hEUVVGR0xFTkJRVTRzU1VGQldTeEZRVUYwUWl4SFFVRjVRazhzUzBGQlIyOUlMRVZCUVVWM1F5eEpRVUZHTEVOQlFVODFTaXhEUVVGUUxFTkJRVWdzUzBGQlpVNHNTVUZCUldFc1JVRkJSVkFzUTBGQlJpeEZRVUZKTEVOQlFVTXNRMEZCVEN4RFFVRnFRaXhOUVVFMFFrNHNTVUZCUlUwc1JVRkJSVmtzVDBGQlJpeERRVUZWTEVkQlFWWXNSVUZCWTFvc1JVRkJSWGxETEUxQlFVWXNSMEZCVXk5RExFTkJRWFpDTEVsQlFUQkNUU3hGUVVGRmVVTXNUVUZCTVVRc1RVRkJiMFZvUkN4RlFVRkZMRU5CUVVZc1NVRkJTMEVzUlVGQlJTeERRVUZHTEVWQlFVdGhMRXRCUVV3c1EwRkJWeXhEUVVGWUxFVkJRV0ZhTEVOQlFXSXNRMEZCVEN4RlFVRnhRa1FzUlVGQlJTeERRVUZHTEVsQlFVdFBMRVZCUVVWTkxFdEJRVVlzUTBGQlVTeERRVUZTTEVWQlFWVmFMRU5CUVZZc1EwRkJPVVlzUTBGQmVrSXNSVUZCY1VsRUxFVkJRVVZoTEV0QlFVWXNRMEZCVVN4RFFVRlNMRVZCUVZVc1EwRkJWaXhEUVVFNVNpeERRVUZRTzBGQlFXMU1MRk5CUVhocVFpeEZRVUV6VFN4RlFVRnhkMEo1VEN4UlFVRlBMRVZCUVVOMFJTeExRVUZKTEdGQlFWTm9TU3hEUVVGVUxFVkJRVmM3UVVGQlF5eGpRVUZKUXl4SlFVRkZSQ3hGUVVGRmQwVXNUMEZCUml4RFFVRlZiVVVzUTBGQlZpeEZRVUZaUXl4RlFVRmFMRVZCUVdkQ00wTXNWMEZCYUVJc1JVRkJUaXhEUVVGdlF5eFBRVUZOTEZGQlFVMXFSeXhEUVVGT0xFZEJRVkVzV1VGQlZUdEJRVUZETEcxQ1FVRk5MRU5CUVVNc1EwRkJVRHRCUVVGVExGZEJRVFZDTEVkQlFUWkNMRlZCUVZOQkxFTkJRVlFzUlVGQlZ6dEJRVUZETEcxQ1FVRlBRU3hGUVVGRmIwc3NVVUZCUml4SlFVRlpjRXNzUlVGQlJXOUxMRkZCUVVZc1EwRkJWMjVGTEZkQlFWZ3NUMEZCTWtKb1J5eERRVUU1UXp0QlFVRm5SQ3hYUVVFdlJqdEJRVUZuUnl4VFFVRnlTaXhGUVVGelNqaElMRTlCUVUwc1pVRkJVeTlJTEVOQlFWUXNSVUZCVnp0QlFVRkRMR05CUVVsRExFbEJRVVZyUnl4RlFVRkZia2NzU1VGQlJTeEhRVUZLTEVOQlFVNHNRMEZCWlN4UFFVRlBReXhMUVVGSExFTkJRVU5CTEVsQlFVVXNTVUZCU1hGSUxFMUJRVW9zUTBGQlZ5eFJRVUZOVEN4RFFVRk9MRWRCUVZFc1IwRkJVaXhIUVVGWmFrZ3NRMEZCV2l4SFFVRmpMRWRCUVdRc1IwRkJhMEpwU0N4RFFVRnNRaXhIUVVGdlFpeExRVUV2UWl4RFFVRklMRXRCUVRKRFpDeEZRVUZGYmtjc1EwRkJSaXhGUVVGSkxGVkJRVk5CTEVOQlFWUXNSVUZCVnp0QlFVRkRMRzFDUVVGUFF5eEZRVUZGYTBzc1NVRkJSaXhEUVVGUExGbEJRVlVzVDBGQlQyNUxMRVZCUVVWclRTeFRRVUZ1UWl4SlFVRTRRbXhOTEVWQlFVVnJUU3hUUVVGb1F5eEpRVUV5UXl4bFFVRmhMRTlCUVU5c1RTeEZRVUZGY1Vzc1dVRkJkRUlzU1VGQmIwTnlTeXhGUVVGRmNVc3NXVUZCUml4RFFVRmxMRTlCUVdZc1EwRkJMMFVzU1VGQmQwY3NSVUZCTDBjc1EwRkJVRHRCUVVFd1NDeFhRVUV4U1N4RFFVRnlSRHRCUVVGcFRTeFRRVUY0V0N4RlFVRjVXSEJETEUxQlFVc3NZMEZCVTJwSkxFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1U3UVVGQlF5eHBRa0ZCVHl4VlFVRlRReXhEUVVGVUxFVkJRVmM3UVVGQlF5eG5Ra0ZCU1VNc1NVRkJSV3RLTEVkQlFVY3lSQ3hKUVVGSUxFTkJRVkU1VFN4RFFVRlNMRVZCUVZWU0xFTkJRVllzUTBGQlRpeERRVUZ0UWl4UFFVRlBMRkZCUVUxVExFTkJRVTRzUjBGQlVTeFRRVUZQVWl4RFFVRm1MRWRCUVdsQ0xFTkJRVU5CTEVOQlFVUXNTMEZCUzFFc1MwRkJSeXhGUVVGSUxFVkJRVTBzVVVGQlRWSXNRMEZCVGl4SFFVRlJVU3hOUVVGSlJpeERRVUZhTEVkQlFXTXNVMEZCVDA0c1EwRkJVQ3hIUVVGVFVTeE5RVUZKUml4RFFVRmlMRWRCUVdVc1UwRkJUMDRzUTBGQlVDeEhRVUZUVFN4TFFVRkhMRTFCUVVsRkxFVkJRVVZWTEU5QlFVWXNRMEZCVlZvc1EwRkJWaXhEUVVGb1FpeEhRVUUyUWl4VFFVRlBUaXhEUVVGUUxFZEJRVk5OTEV0QlFVZEZMRVZCUVVWVkxFOUJRVVlzUTBGQlZWb3NRMEZCVml4SlFVRmhMRU5CUVVNc1EwRkJNVUlzUjBGQk5FSXNVMEZCVDA0c1EwRkJVQ3hIUVVGVFRTeExRVUZIUlN4RlFVRkZTU3hMUVVGR0xFTkJRVkVzUTBGQlEwNHNSVUZCUlhsRExFMUJRVmdzVFVGQmNVSjZReXhEUVVGcVF5eEhRVUZ0UXl4VFFVRlBUaXhEUVVGUUxFZEJRVk1zUTBGQlF5eE5RVUZKVVN4RlFVRkZLMFFzVDBGQlJpeERRVUZWTmtNc1EwRkJWaXhGUVVGWkxFZEJRVm9zUTBGQlNpeEhRVUZ4UWl4SFFVRjBRaXhGUVVFeVFteEhMRTlCUVROQ0xFTkJRVzFEV2l4RFFVRnVReXhKUVVGelF5eERRVUZETEVOQlFXaEVMRWRCUVd0RUxGTkJRVTlPTEVOQlFWQXNTMEZCVjFFc1RVRkJTVVlzUTBGQlNpeEpRVUZQUlN4RlFVRkZTU3hMUVVGR0xFTkJRVkVzUTBGQlVpeEZRVUZWVGl4RlFVRkZlVU1zVFVGQlJpeEhRVUZUTEVOQlFXNUNMRTFCUVhkQ2VrTXNTVUZCUlN4SFFVRTFReXhEUVVGMFRDeERRVUY0UWp0QlFVRm5VU3hYUVVGMFV6dEJRVUYxVXl4VFFVRnlja0lzUlVGQmMzSkNORWdzVDBGQlRTeGxRVUZUYmtrc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRk5MRU5CUVdJc1JVRkJaVU1zUTBGQlppeEZRVUZwUWtNc1EwRkJha0lzUlVGQmJVSTdRVUZCUXl4alFVRkpSeXhKUVVGRkxGVkJRVkZhTEVWQlFVVmhMRXRCUVVZc1EwRkJVU3hEUVVGU0xFVkJRVlVzUTBGQlZpeERRVUZrTzBGQlFVRXNZMEZCTWtKRExFbEJRVVVzVjBGQlUyUXNSVUZCUldFc1MwRkJSaXhEUVVGUkxFTkJRVU1zUTBGQlZDeERRVUYwUXp0QlFVRkJMR05CUVd0RVJ5eEpRVUZGTEdOQlFWbG1MRU5CUVdoRkxFTkJRV3RGTEU5QlFVOHNUVUZCU1U4c1EwRkJTaXhKUVVGUExFMUJRVWxETEVOQlFWZ3NSMEZCWVN4VlFVRlRWQ3hEUVVGVUxFVkJRVmM3UVVGQlF5eHRRa0ZCVFN4RFFVRkRMRU5CUVVOQkxFVkJRVVZyUXl4VlFVRldPMEZCUVhGQ0xGZEJRVGxETEVkQlFTdERMRlZCUVZOcVF5eERRVUZVTEVWQlFWZE5MRU5CUVZnc1JVRkJZVmNzUTBGQllpeEZRVUZsTzBGQlFVTXNaMEpCUVVsRkxFTkJRVW83UVVGQlFTeG5Ra0ZCVFVNc1EwRkJUanRCUVVGQkxHZENRVUZSUlN4RFFVRlNPMEZCUVVFc1owSkJRVlZGTEVOQlFWWTdRVUZCUVN4blFrRkJXVU1zUTBGQldqdEJRVUZCTEdkQ1FVRmpSU3hEUVVGa08wRkJRVUVzWjBKQlFXZENReXhKUVVGRmFrSXNUVUZCU1VVc1EwRkJTaXhIUVVGTkxHRkJRVTRzUjBGQmIwSXNhVUpCUVhSRE8wRkJRVUVzWjBKQlFYZEVjMElzU1VGQlJXNURMRVZCUVVWcFF5eFZRVUUxUkR0QlFVRkJMR2RDUVVGMVJVY3NTVUZCUlhKQ0xFdEJRVWRtTEVWQlFVVnRTeXhSUVVGR0xFTkJRVmR1UlN4WFFVRllMRVZCUVRWRk8wRkJRVUVzWjBKQlFYRkhla1FzU1VGQlJTeERRVUZEZEVJc1EwRkJSQ3hKUVVGSkxFTkJRVU5HTEVOQlFUVkhPMEZCUVVFc1owSkJRVGhIZVVJc1NVRkJSU3hEUVVGRExFTkJRV3BJTEVOQlFXMUlMRWxCUVVkTUxFTkJRVWdzUlVGQlN6dEJRVUZETEd0Q1FVRkhlRUlzUTBGQlNDeEZRVUZMTzBGQlFVTXNkVUpCUVUxcFFpeERRVUZPTEVWQlFWRTdRVUZCUTBvc2MwSkJRVVY0UWl4RFFVRkdMRU5CUVVrc1QwRkJUWGRDTEVsQlFVVkJMRVZCUVVWSkxFTkJRVVlzUTBGQlVqdEJRVUZoTEhkQ1FVRkhZaXhKUVVGRlV5eEZRVUZGTWtrc1VVRkJSaXhEUVVGWGJrVXNWMEZCV0N4UFFVRXlRalZFTEVOQlFUZENMRWRCUVN0Q0xFMUJRVWxhTEVWQlFVVm5TU3hSUVVGNFF5eEZRVUZwUkN4UFFVRk5MRU5CUVVNc1EwRkJVRHRCUVVFNVJDeHRRa0ZCZFVVM1NDeEpRVUZGUXl4SlFVRkZMRmRCUVZNM1FpeERRVUZVTEVsQlFWa3NRMEZCUXpSQ0xFTkJRV0lzU1VGQlowSXNZVUZCY0VJN1FVRkJhME1zZDBKQlFVMHNRMEZCUXl4RFFVRlFPMEZCUVZNc2JVSkJRVWRCTEVsQlFVVXNRMEZCUTJRc1NVRkJSWE5DTEVWQlFVVXdUQ3hWUVVGS0xFZEJRV1V4VEN4RlFVRkZhVTBzVTBGQmJFSXNRMEZCUml4RlFVRXJRblpPTEV0QlFVY3dRaXhEUVVGeVF5eEZRVUYxUXp0QlFVRkRaaXh2UWtGQlJWY3NRMEZCUml4RlFVRkpZaXhKUVVGRlJTeEZRVUZGYVVJc1EwRkJSaXhOUVVGUGFrSXNSVUZCUldsQ0xFTkJRVVlzU1VGQlN5eEZRVUZhTEVOQlFVNHNSVUZCYzBKeVFpeEpRVUZGUlN4RlFVRkZSU3hGUVVGRk5rMHNVVUZCU2l4TlFVRm5RaTlOTEVWQlFVVkZMRVZCUVVVMlRTeFJRVUZLTEVsQlFXTXNSVUZCT1VJc1EwRkJlRUlzUlVGQk1FUnNUaXhKUVVGRlF5eEZRVUZGY2tJc1EwRkJSaXhMUVVGTkxFVkJRV3hGTEVWQlFYRkZNRUlzU1VGQlJVNHNSVUZCUlN4RFFVRkdMRTFCUVU5blJTeERRVUZRTEVsQlFWVm9SU3hGUVVGRkxFTkJRVVlzUTBGQmFrWXNSVUZCYzBaeFFpeEpRVUZGWml4TFFVRkhUaXhGUVVGRkxFTkJRVVlzUTBGQk0wWXNSVUZCWjBkTExFbEJRVVZETEV0QlFVZFZMRVZCUVVWdlNDeFZRVUZHTEVOQlFXRTVTQ3hEUVVGaUxFTkJRWEpITEVOQlFYRklMRTlCUVUxRUxFbEJRVVVzUlVGQlJVTXNRMEZCUml4SlFVRkxSQ3hEUVVGTUxFbEJRVkZCTEVWQlFVVkpMRU5CUVVZc1EwRkJVaXhMUVVGbFdTeEpRVUZGWml4SlFVRkZMRU5CUVc1Q0xFdEJRWFZDUlN4RlFVRkZLMFVzUjBGQlJpeEZRVUV2UWp0QlFVRjFReXh6UWtGQlJ5eE5RVUZKYkVZc1JVRkJSV2RKTEZGQlFVNHNTVUZCWjBJc1JVRkJSV2hJTEVOQlFXeENMRWxCUVhGQ2FFSXNUVUZCU1hoQ0xFTkJRVFZDTEVWQlFUaENPMEZCUVVOdlFpeHpRa0ZCUlhKQ0xFTkJRVVlzU1VGQlN5eERRVUZEYjBZc1EwRkJSQ3hGUVVGSE1VUXNRMEZCU0N4RlFVRkxaU3hEUVVGTUxFTkJRVXdzUTBGQllUdEJRVUZOTzBGQlFYcEdPMEZCUVRCR0xHVkJRWFpRTEUxQlFUUlFMRWxCUVVkRUxFMUJRVWxtTEVsQlFVVjRRaXhEUVVGR0xFVkJRVWx6UWl4SlFVRkZSU3hGUVVGRmFVSXNRMEZCUml4TlFVRlBha0lzUlVGQlJXbENMRU5CUVVZc1NVRkJTeXhGUVVGYUxFTkJRVTRzUlVGQmMwSnlRaXhKUVVGRlJTeEZRVUZGUlN4RlFVRkZOazBzVVVGQlNpeE5RVUZuUWk5TkxFVkJRVVZGTEVWQlFVVTJUU3hSUVVGS0xFbEJRV01zUlVGQk9VSXNRMEZCZUVJc1JVRkJNRVJzVGl4SlFVRkZReXhGUVVGRmNrSXNRMEZCUml4TFFVRk5MRVZCUVd4RkxFVkJRWEZGTUVJc1NVRkJSVTRzUlVGQlJTeERRVUZHTEUxQlFVOW5SU3hEUVVGUUxFbEJRVlZvUlN4RlFVRkZMRU5CUVVZc1EwRkJha1lzUlVGQmMwWnhRaXhKUVVGRlppeERRVUUxUml4SFFVRXJSbVVzVFVGQlNTeERRVUZETEVOQlFYWkhMRVZCUVhsSExFOUJRVTFvUWl4SlFVRkZMRVZCUVVWRExFTkJRVVlzU1VGQlMwUXNRMEZCVEN4SlFVRlJRU3hGUVVGRlNTeERRVUZHTEVOQlFWSXNTMEZCWlZrc1NVRkJSV1lzU1VGQlJTeERRVUZ1UWl4TFFVRjFRa1VzUlVGQlJTdEZMRWRCUVVZc1JVRkJMMEk3UVVGQmRVTXNiMEpCUVVjc1EwRkJRek5HTEVsQlFVVlRMRVZCUVVVeVNTeFJRVUZHTEVOQlFWZHVSU3hYUVVGWUxFOUJRVEpDTlVRc1EwRkJOMElzUjBGQkswSXNUVUZCU1Zvc1JVRkJSV2RKTEZGQlFYUkRMRXRCUVdsRUxFVkJRVVZvU0N4RFFVRnVSQ3hMUVVGMVJFUXNUVUZCU1dwQ0xFbEJRVVZGTEVWQlFVVnBRaXhEUVVGR0xFMUJRVTlxUWl4RlFVRkZhVUlzUTBGQlJpeEpRVUZMTEVWQlFWb3NRMEZCUml4RlFVRnJRbkpDTEVsQlFVVkZMRVZCUVVWRkxFVkJRVVUyVFN4UlFVRktMRTFCUVdkQ0wwMHNSVUZCUlVVc1JVRkJSVFpOTEZGQlFVb3NTVUZCWXl4RlFVRTVRaXhEUVVGd1FpeEZRVUZ6UkdwT0xFVkJRVVZ5UWl4RFFVRkdMRWxCUVVzc1EwRkJRMjlHTEVOQlFVUXNSVUZCUnpORExFTkJRVWdzUTBGQkwwUXNSMEZCYzBWb1FpeE5RVUZKZUVJc1EwRkJha2tzUTBGQlNDeEZRVUYxU1R0QlFVRTVTeXhsUVVGdlRDeFBRVUZQZDBNc1MwRkJSMmhETEVOQlFVZ3NSVUZCUzJkRExFMUJRVWxxUXl4RFFVRktMRWxCUVU5cFF5eEpRVUZGYWtNc1EwRkJSaXhMUVVGTkxFTkJRVTRzU1VGQlUybERMRWxCUVVWcVF5eERRVUZHTEVsQlFVc3NRMEZCYWtNN1FVRkJiVU03UVVGQlF5eFhRVUZxTkVJN1FVRkJhelJDTEZOQlFYQndSQ3hGUVVGeGNFUXdTQ3hSUVVGUExHZENRVUZUYkVrc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4alFVRkpUU3hEUVVGS08wRkJRVUVzWTBGQlRVVXNTVUZCUlVRc1JVRkJSU3RPTEU5QlFVWXNRMEZCVlhaUExFTkJRVllzUzBGQlkxRXNSVUZCUldkUExGVkJRVVlzUTBGQllYaFBMRVZCUVVWcFJ5eFhRVUZHTEVWQlFXSXNRMEZCWkN4SlFVRTJRekJFTEVkQlFVZHFSaXhMUVVGSUxFTkJRVk1zZVVKQlFYVkNNVVVzUTBGQmFFTXNRMEZCY2tRc1EwRkJkMFlzVDBGQlQxTXNSVUZCUldsRExFTkJRVVlzU1VGQlMycERMRVZCUVVWU0xFTkJRVVlzUTBGQlRDeEhRVUZWVVN4RlFVRkZkVU1zVFVGQlJpeEhRVUZUTEVOQlFWUXNTVUZCV1hwRExFbEJRVVVzUTBGQlExQXNRMEZCUkN4RlFVRkhRU3hEUVVGSUxFVkJRVXNzUlVGQlRDeEZRVUZSUXl4RFFVRlNMRU5CUVVZc1JVRkJZVThzUlVGQlJXZFBMRlZCUVVZc1EwRkJZV2hPTEdOQlFXSXNRMEZCTkVKNFFpeEZRVUZGYVVjc1YwRkJSaXhGUVVFMVFpeEpRVUUyUXpaRkxFZEJRVWNzVlVGQlV6bExMRU5CUVZRc1JVRkJWMDhzUTBGQldDeEZRVUZoTzBGQlFVTXNaMEpCUVVsRExFTkJRVW83UVVGQlFTeG5Ra0ZCVFVrc1NVRkJSVWdzUlVGQlJWUXNRMEZCUml4RlFVRkpReXhEUVVGS0xFTkJRVkk3UVVGQlFTeG5Ra0ZCWldFc1NVRkJSVVlzUlVGQlJXOURMRTFCUVc1Q0xFTkJRVEJDTEU5QlFVMXNReXhIUVVGT08wRkJRVlZPTEd0Q1FVRkZkVWNzUlVGQlJTOUhMRU5CUVVZc1JVRkJTVmtzUlVGQlJVVXNRMEZCUml4RFFVRktMRU5CUVVZc1JVRkJXV1FzUlVGQlJWRXNRMEZCUml4SlFVRkxMRVZCUVVWRUxFVkJRVVZETEVOQlFVWXNTVUZCUzBrc1JVRkJSVVVzUTBGQlJpeERRVUZRTEVOQlFXcENPMEZCUVZZN1FVRkJkME1zVjBGQmJrWXNRMEZCTjBNc1IwRkJhMGtzVlVGQlUyUXNRMEZCVkN4RlFVRlhPMEZCUVVNc2JVSkJRVTlUTEVWQlFVVlVMRU5CUVVZc1JVRkJTU3hEUVVGS0xFVkJRVTFQTEVOQlFVNHNRMEZCVUR0QlFVRm5RaXhYUVVGMlRDeEpRVUY1VEVVc1EwRkJNVTA3UVVGQk5FMHNVMEZCT1RoRUxFVkJRVFYzUWl4RlFVRTBkRVk0VGl4VFFVRlJMRVZCUVVORkxFdEJRVWt6UkN4SFFVRkhMRlZCUVZNNVN5eERRVUZVTEVWQlFWYzdRVUZCUXl4alFVRkpReXhKUVVGRkxFVkJRVTQ3UVVGQlFTeGpRVUZUVFN4SlFVRkZMRVZCUVZnN1FVRkJRU3hqUVVGalF5eEpRVUZGVVN4RlFVRkZhRUlzUlVGQlJYZEZMRTlCUVVZc1EwRkJWU3RETEVOQlFWWXNSVUZCV1N4SlFVRmFMRU5CUVVZc1EwRkJhRUlzUTBGQmNVTXNUMEZCVHk5SExFVkJRVVZyUXl4RFFVRkdMRWxCUVV0dlNTeEhRVUZITEZWQlFWTTVTeXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVUwc1EwRkJZaXhGUVVGbFJTeERRVUZtTEVWQlFXbENPMEZCUVVNc1owSkJRVWxITEVOQlFVbzdRVUZCUVN4blFrRkJUVVVzU1VGQlJVNHNSVUZCUlZJc1EwRkJSaXhGUVVGSkxFbEJRVW9zUlVGQlUxTXNRMEZCVkN4RlFVRlhMRVZCUVZnc1EwRkJVanRCUVVGQkxHZENRVUYxUWs4c1NVRkJSV2hDTEVWQlFVVm5SQ3hOUVVFelFpeERRVUZyUXl4UFFVRk5hRU1zUjBGQlRqdEJRVUZWTEdWQlFVTktMRWxCUVVWRkxFVkJRVVZGTEVOQlFVWXNRMEZCU0N4TlFVRlhhRUlzUlVGQlJXZENMRU5CUVVZc1NVRkJTeXhGUVVGRlppeEZRVUZGWlN4RFFVRkdMRWxCUVV0S0xFTkJRVkFzUTBGQmFFSTdRVUZCVmp0QlFVRnhReXhYUVVFMVJpeERRVUZNTEVkQlFXMUhMRlZCUVZOYUxFTkJRVlFzUlVGQlYxTXNRMEZCV0N4RlFVRmhSeXhEUVVGaUxFVkJRV1U3UVVGQlF5eHRRa0ZCVDFnc1JVRkJSU3hEUVVGR0xFbEJRVXRFTEVOQlFVd3NSVUZCVDFFc1JVRkJSVkFzUTBGQlJpeEZRVUZKTEVsQlFVb3NSVUZCVTFjc1EwRkJWQ3hGUVVGWFRDeERRVUZZTEVOQlFWQXNSVUZCY1VKT0xFVkJRVVVzUTBGQlJpeEpRVUZMTEVsQlFURkNMRVZCUVN0Q0xFTkJRVU5OTEVWQlFVVnZSeXhIUVVGR0xFVkJRWFpETzBGQlFTdERMRmRCUVhwTE8wRkJRVEJMTEZOQlFUbE9MRU5CUVV3c1JVRkJjVThyU0N4TFFVRkpOVVFzUjBGQlJ5eFZRVUZUT1Vzc1EwRkJWQ3hGUVVGWE8wRkJRVU1zYVVKQlFVOHNWVUZCVTBNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zYlVKQlFVOHdTaXhIUVVGSE0wb3NRMEZCU0N4RlFVRkxReXhEUVVGTUxFVkJRVkVyUXl4TlFVRlNMRWRCUVdVc1EwRkJkRUk3UVVGQmQwSXNWMEZCTTBNN1FVRkJORU1zVTBGQk0wUXNRMEZCZWs4c1JVRkJjMU50U3l4VlFVRlRja01zUjBGQlJ5eFZRVUZUT1Vzc1EwRkJWQ3hGUVVGWE8wRkJRVU1zYVVKQlFVOUJMRWxCUVVWQkxFVkJRVVYzUlN4UFFVRkdMRU5CUVZWdFJTeERRVUZXTEVWQlFWbERMRVZCUVZvc1EwRkJSaXhGUVVGclFpeFZRVUZUTTBrc1EwRkJWQ3hGUVVGWE8wRkJRVU1zYlVKQlFVMHNRMEZCUTBFc1JVRkJSVFJPTEZkQlFVWXNTVUZCWlRWT0xFVkJRVVV3VHl4VFFVRnFRaXhKUVVFMFFteFBMRVZCUVVWU0xFTkJRVVlzUTBGQk4wSXNSVUZCYlVOclFpeFBRVUZ1UXl4RFFVRXlRMjVDTEVOQlFUTkRMRWxCUVRoRExFTkJRVU1zUTBGQmNrUTdRVUZCZFVRc1YwRkJOVVk3UVVGQk5rWXNVMEZCTlVjc1EwRkJMMU1zUlVGQk5sbzBUeXhOUVVGTE9VUXNSMEZCUnl4VlFVRlRPVXNzUTBGQlZDeEZRVUZYTzBGQlFVTXNhVUpCUVU4MFNDeEZRVUZGZFVNc1NVRkJSaXhEUVVGUGJrc3NTMEZCUnl4RlFVRldMRXRCUVdVeVNpeEhRVUZIYWtZc1MwRkJTQ3hEUVVGVExIVkNRVUZ4UWpGRkxFTkJRVGxDTEVOQlFXWXNSVUZCWjBSQkxFbEJRVVZCTEVWQlFVVjNSU3hQUVVGR0xFTkJRVlZ0UlN4RFFVRldMRVZCUVZsRExFVkJRVm9zUlVGQlowSXpReXhYUVVGb1FpeEZRVUZzUkN4RlFVRm5SaXhWUVVGVGFFY3NRMEZCVkN4RlFVRlhPMEZCUVVNc1owSkJRVWxOTEVOQlFVb3NRMEZCVFR0QlFVRkhMR3RDUVVGSFFTeEpRVUZGYzBJc1NVRkJSVFZDTEVWQlFVVXlUeXhKUVVGS0xFZEJRVk16VHl4RlFVRkZiMHNzV1VGQlJpeERRVUZsTEZWQlFXWXNTMEZCTkVKd1N5eEZRVUZGYjBzc1dVRkJSaXhEUVVGbExFMUJRV1lzUTBGQk1VTXNSVUZCYVVVc1QwRkJUemxLTEVsQlFVVkJMRVZCUVVVd1JpeFhRVUZHTEVWQlFVWXNSVUZCYTBJeFJpeE5RVUZKVUN4RFFVRktMRWxCUVU4c1RVRkJTVThzUlVGQlJWa3NUMEZCUml4RFFVRlZia0lzU1VGQlJTeEhRVUZhTEVOQlFYQkRPMEZCUVhCRkxIRkNRVUVyU0N4RFFVRkRReXhKUVVGRlFTeEZRVUZGYVVNc1ZVRkJUQ3hMUVVGclFpeE5RVUZKYWtNc1JVRkJSWGRLTEZGQlFYWktMRVZCUVdsTExFOUJRVTBzUTBGQlF5eERRVUZRTzBGQlFWTXNWMEZCYmxJN1FVRkJiMUlzVTBGQmJsTXNRMEZCYkdFc1JVRkJkWE5DYjBZc1VVRkJUeXhuUWtGQlV6VlBMRU5CUVZRc1JVRkJWenRCUVVGRExHTkJRVWxOTEVsQlFVVlFMRVZCUVVVNFR5eFJRVUZHTEVsQlFWazVUeXhGUVVGRk9FOHNVVUZCUml4RFFVRlhReXhKUVVFM1FpeERRVUZyUXl4UFFVRlBlRThzUzBGQlIwRXNSVUZCUlUwc1MwRkJSaXhEUVVGUkxFTkJRVklzVFVGQllWb3NSVUZCUlRoS0xFVkJRWHBDTzBGQlFUUkNMRk5CUVhoNFFpeEZRVUY1ZUVKcFJpeE5RVUZMTEdOQlFWTm9VQ3hEUVVGVUxFVkJRVmM3UVVGQlF5eHBRa0ZCVDBFc1RVRkJTVFJDTEVOQlFWZzdRVUZCWVN4VFFVRjJla0lzUlVGQmQzcENjVTRzVDBGQlRTeGxRVUZUYWxBc1EwRkJWQ3hGUVVGWE8wRkJRVU1zYVVKQlFVOUJMRTFCUVVrd1FpeEZRVUZGZDA0c1lVRkJUaXhMUVVGelFpeERRVUZEZUU0c1JVRkJSWGxPTEZGQlFVZ3NTVUZCWVhwT0xFVkJRVVY1VGl4UlFVRkdMRVZCUVc1RExFdEJRV3RFTEVOQlFVTXNSVUZCUlc1UUxFVkJRVVUwUlN4SlFVRkdMRWxCUVZFMVJTeEZRVUZGYjFBc1NVRkJWaXhKUVVGblFpeERRVUZEY0ZBc1JVRkJSWEZRTEZGQlFYSkNMRU5CUVRGRU8wRkJRWGxHTEZOQlFXNDJRaXhGUVVGdk5rSkRMRk5CUVZFdlJDeEhRVUZITEVOQlFVTXNRMEZCU2l4RFFVRTFOa0lzUlVGQmJUZENiRU1zVlVGQlUydERMRWRCUVVjc1EwRkJReXhEUVVGS0xFTkJRVFUzUWl4RlFVRnRPRUpuUlN4VFFVRlJMR2xDUVVGVGRsQXNRMEZCVkN4RlFVRlhPMEZCUVVNc1kwRkJTVU1zU1VGQlJVUXNSVUZCUlc5TExGRkJRVVlzUTBGQlYyNUZMRmRCUVZnc1JVRkJUaXhEUVVFclFpeFBRVUZOTEZsQlFWVm9SeXhEUVVGV0xFbEJRV0VzUTBGQlF5eERRVUZEUkN4RlFVRkZkVkFzVDBGQmFrSXNTVUZCTUVJc1lVRkJWM1JRTEVOQlFWZ3NTVUZCWXl4RFFVRkRMRU5CUVVORUxFVkJRVVYzVUN4UlFVRnNSRHRCUVVFeVJDeFRRVUZxYWtNc1JVRkJhMnBEUVN4VlFVRlRMR3RDUVVGVGVGQXNRMEZCVkN4RlFVRlhPMEZCUVVNc2FVSkJRVTlCTEVWQlFVVnJReXhWUVVGR0xFbEJRV05zUXl4RlFVRkZhME1zVlVGQlJpeERRVUZoZFU0c1lVRkJNMElzUlVGQmVVTjZVQ3hGUVVGRmQxQXNVVUZCUml4TFFVRmhMRU5CUVVNc1EwRkJPVVE3UVVGQlowVXNVMEZCZG05RExFVkJRWGR2UTBVc1QwRkJUU3hsUVVGVE1WQXNRMEZCVkN4RlFVRlhPMEZCUVVNc1pVRkJTVUVzU1VGQlJVRXNSVUZCUlRoT0xGVkJRVklzUlVGQmJVSTVUaXhEUVVGdVFpeEZRVUZ4UWtFc1NVRkJSVUVzUlVGQlJXOU1MRmRCUVhwQ08wRkJRWEZETEdkQ1FVRkhjRXdzUlVGQlJYbEtMRkZCUVVZc1IwRkJWeXhEUVVGa0xFVkJRV2RDTEU5QlFVMHNRMEZCUXl4RFFVRlFPMEZCUVhKRUxGZEJRVGhFTEU5QlFVMHNRMEZCUXl4RFFVRlFPMEZCUVZNc1UwRkJhblZETEVWQlFXdDFRMnRITEZGQlFVOHNaMEpCUVZNelVDeERRVUZVTEVWQlFWYzdRVUZCUXl4cFFrRkJUU3hEUVVGRFVTeEZRVUZGSzA0c1QwRkJSaXhEUVVGVmJVSXNTMEZCVml4RFFVRm5RakZRTEVOQlFXaENMRU5CUVZBN1FVRkJNRUlzVTBGQkwzZERMRVZCUVdkNFF6UlFMRkZCUVU4c1owSkJRVk0xVUN4RFFVRlVMRVZCUVZjN1FVRkJReXhwUWtGQlQzVkpMRVZCUVVVMFFpeEpRVUZHTEVOQlFVOXVTeXhGUVVGRmIwc3NVVUZCVkN4RFFVRlFPMEZCUVRCQ0xGTkJRVGQ2UXl4RlFVRTRla041Uml4UFFVRk5MR1ZCUVZNM1VDeERRVUZVTEVWQlFWYzdRVUZCUXl4cFFrRkJUM05KTEVWQlFVVTJRaXhKUVVGR0xFTkJRVTl1U3l4RlFVRkZiMHNzVVVGQlZDeERRVUZRTzBGQlFUQkNMRk5CUVRFeVF5eEZRVUV5TWtNd1JpeFJRVUZQTEdkQ1FVRlRPVkFzUTBGQlZDeEZRVUZYTzBGQlFVTXNZMEZCU1VNc1NVRkJSVVFzUlVGQlJXOUxMRkZCUVVZc1EwRkJWMjVGTEZkQlFWZ3NSVUZCVGl4RFFVRXJRaXhQUVVGTkxGbEJRVlZvUnl4RFFVRldMRWxCUVdFc1lVRkJWMFFzUlVGQlJUUkZMRWxCUVRGQ0xFbEJRV2RETEdGQlFWY3pSU3hEUVVGcVJEdEJRVUZ0UkN4VFFVRm9PVU1zUlVGQmFUbERPRUlzVFVGQlN5eGpRVUZUTDBJc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWTBGQlNVTXNRMEZCU2l4RFFVRk5MRTlCUVUwc1dVRkJWVVFzUlVGQlJXOUxMRkZCUVVZc1EwRkJWMjVGTEZkQlFWZ3NSVUZCVml4SlFVRnZReXhYUVVGVGFrY3NSVUZCUlRSRkxFbEJRUzlETEV0QlFYTkVMRk5CUVU4elJTeEpRVUZGUkN4RlFVRkZjVXNzV1VGQlJpeERRVUZsTEUxQlFXWXNRMEZCVkN4TFFVRnJReXhYUVVGVGNFc3NSVUZCUldkSExGZEJRVVlzUlVGQmFrY3NRMEZCVGp0QlFVRjNTQ3hUUVVGb2JVUXNSVUZCYVcxRWRrTXNUMEZCVFN0SUxFZEJRVWNzV1VGQlZUdEJRVUZETEdsQ1FVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT08wRkJRVlVzVTBGQmVFSXNRMEZCZG0xRUxFVkJRV2x2UkRkSUxFMUJRVXMyU0N4SFFVRkhMRlZCUVZONlRDeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExHbENRVUZOTEVOQlFVTkJMRWxCUVVVc1EwRkJTQ3hEUVVGT08wRkJRVmtzVTBGQk4wSXNRMEZCZEc5RUxFVkJRWEZ4UkRCRUxFbEJRVWM0U0N4SFFVRkhMRlZCUVZONlRDeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVTBzUTBGQllpeEZRVUZsTzBGQlFVTXNhVUpCUVUwc1EwRkJRMEVzU1VGQlJTeERRVUZHTEVkQlFVbEJMRWxCUVVWT0xFTkJRVTRzUjBGQlVVMHNRMEZCVkN4RFFVRk9PMEZCUVd0Q0xGTkJRWEpETEVOQlFYaHhSQ3hGUVVFcmMwUjNVQ3hOUVVGTGRFVXNSMEZCUnl4VlFVRlRla3dzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhsUVVGSkxFbEJRVWxOTEVsQlFVVXNRMEZCVml4RlFVRlpRU3hKUVVGRlRpeERRVUZrTEVWQlFXZENUU3hMUVVGSExFTkJRVzVDTzBGQlFYRkNVQ3hqUVVGRmFVSXNTVUZCUml4RFFVRlBWaXhEUVVGUU8wRkJRWEpDTEZkQlFTdENMRTlCUVU5UUxFTkJRVkE3UVVGQlV5eFRRVUY2UkN4RFFVRndkRVFzUlVGQkszZEVaMUVzUzBGQlNYWkZMRWRCUVVjc1ZVRkJVM3BNTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWlVGQlNTeEpRVUZKVFN4SlFVRkZMRU5CUVZZc1JVRkJXVUVzU1VGQlJVNHNRMEZCWkN4RlFVRm5RazBzUzBGQlJ5eERRVUZ1UWp0QlFVRnhRbEFzWTBGQlJXbENMRWxCUVVZc1EwRkJUMVlzUTBGQlVEdEJRVUZ5UWl4WFFVRXJRaXhQUVVGUFVDeERRVUZRTzBGQlFWTXNVMEZCZWtRc1EwRkJibmhFTEVWQlFUZ3dSR2xSTEVsQlFVZDRSU3hIUVVGSExGVkJRVk42VEN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllVMHNRMEZCWWl4RlFVRmxPMEZCUVVNc1pVRkJTU3hKUVVGSlF5eEpRVUZGUkN4SlFVRkZMRU5CUVVZc1IwRkJTVUVzU1VGQlJVNHNRMEZCVGl4SFFVRlJUU3hEUVVGc1FpeEZRVUZ2UWl4RlFVRkZReXhEUVVGR0xFbEJRVXNzUTBGQmVrSTdRVUZCTkVKU0xHTkJRVVZwUWl4SlFVRkdMRU5CUVU5VUxFTkJRVkE3UVVGQk5VSXNWMEZCYzBNc1QwRkJUMUlzUTBGQlVEdEJRVUZUTEZOQlFXeEZMRU5CUVdveFJDeEZRVUZ4TlVSclVTeEpRVUZIZWtVc1IwRkJSeXhWUVVGVGVrd3NRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZOTEVOQlFXSXNSVUZCWlR0QlFVRkRMR1ZCUVVrc1NVRkJTVU1zU1VGQlJVUXNTVUZCUlN4RFFVRkdMRWRCUVVsQkxFbEJRVVZPTEVOQlFVNHNSMEZCVVUwc1EwRkJiRUlzUlVGQmIwSXNSVUZCUlVNc1EwRkJSaXhIUVVGSlVDeERRVUY0UWp0QlFVRXlRa1FzWTBGQlJXbENMRWxCUVVZc1EwRkJUMVFzUTBGQlVEdEJRVUV6UWl4WFFVRnhReXhQUVVGUFVpeERRVUZRTzBGQlFWTXNVMEZCYWtVc1EwRkJlRFZFTEVWQlFYQjFSaXhGUVVFdk1Fc3NSVUZCWjJoVlVTeEZRVUZGSzA0c1QwRkJSaXhEUVVGVk5FSXNSMEZCVml4SFFVRmpNMUFzUlVGQlJTdE9MRTlCUVVZc1EwRkJWVFZMTEVWQlFYaHBWU3hEUVVFeWFWVXNTMEZCU1RGRUxFTkJRVW9zU1VGQlVTeEZRVUZEYlZFc1QwRkJUU3hEUVVGRExFTkJRVklzUlVGQlZVTXNWVUZCVXl4RFFVRkRMRU5CUVhCQ0xFVkJRWE5DUXl4TlFVRkxMRU5CUVVNc1EwRkJOVUlzUlVGQk9FSkRMRlZCUVZNc1EwRkJReXhEUVVGNFF5eEZRVUV3UTBNc1QwRkJUU3hEUVVGRExFTkJRV3BFTEVWQlFWSTdRVUZCTkVSb1VTeFJRVUZGSzA0c1QwRkJSaXhEUVVGVmRFOHNRMEZCVml4SlFVRmhiMHdzUjBGQlIzQk1MRU5CUVVnc1EwRkJZanRCUVVFMVJDeExRVUVyUlN4TFFVRkpRU3hEUVVGS0xFbEJRVkVzUlVGQlEzZFJMRkZCUVU4c1EwRkJReXhEUVVGVUxFVkJRVmRETEU5QlFVMHNRMEZCUXl4RFFVRnNRaXhGUVVGU08wRkJRVFpDYkZFc1VVRkJSU3RPTEU5QlFVWXNRMEZCVlhSUExFTkJRVllzU1VGQllYRk1MRWRCUVVkeVRDeERRVUZJTEVOQlFXSTdRVUZCTjBJc1MwRkJaMFFzVTBGQlV6QlJMRVZCUVZRc1IwRkJZU3hEUVVGRkxFbEJRVWM1VGl4VFFVRklMRWRCUVdGeVF5eEZRVUZGYjFFc1QwRkJSaXhIUVVGVmNGRXNSVUZCUlN0T0xFOUJRWHBDTEVWQlFXbERMMDRzUlVGQlJXZFBMRlZCUVVZc1IwRkJZU3hKUVVGSmJVTXNSVUZCU2l4RlFVRTVReXhGUVVGeFJEZFFMRWxCUVVVMlNTeEhRVUZIYTBnc1VVRkJTQ3hIUVVGWkxGVkJRVk0zVVN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEZWQlFVbE5MRU5CUVVvN1FVRkJRU3hWUVVGTlJTeERRVUZPTzBGQlFVRXNWVUZCVVVjc1EwRkJVanRCUVVGQkxGVkJRVlZGTEVOQlFWWTdRVUZCUVN4VlFVRlpSU3hEUVVGYU8wRkJRVUVzVlVGQlkwVXNRMEZCWkR0QlFVRkJMRlZCUVdkQ1JTeERRVUZvUWp0QlFVRkJMRlZCUVd0Q1F5eEpRVUZGWjBZc1JVRkJSWEpITEVsQlFVVXNSMEZCU2l4RFFVRndRaXhEUVVFMlFpeEpRVUZIY1VJc1EwRkJTQ3hGUVVGTExFOUJRVTl3UWl4SlFVRkZMRU5CUVVZc1IwRkJTVzlDTEVWQlFVVlNMRXRCUVVZc1EwRkJVU3hEUVVGU0xFTkJRVmdzUTBGQmMwSkhMRWxCUVVWb1FpeERRVUZHTEVWQlFVbHJRaXhKUVVGRkxFVkJRVTRzUlVGQlUwVXNTVUZCUlZvc1JVRkJSVFJPTEZOQlFXSXNRMEZCZFVJc1QwRkJUWEJPTEVOQlFVNHNSVUZCVVR0QlFVRkRWQ3hoUVVGSExFVkJRVVZGTEVsQlFVVXJSeXhGUVVGRmNVTXNTVUZCUml4RFFVRlBOMGtzUTBGQlVDeERRVUZLTEVOQlFVZ3NTMEZCYjBKUUxFMUJRVWxQTEVsQlFVVkJMRVZCUVVWSUxFdEJRVVlzUTBGQlVVb3NSVUZCUlN4RFFVRkdMRVZCUVV0MVF5eE5RVUZpTEV0QlFYTkNhRU1zUTBGQk5VSXNSMEZCSzBKRkxFVkJRVVZFTEVsQlFVWXNRMEZCVDB3c1NVRkJSU3hGUVVGVUxFTkJRVzVFTEVkQlFXbEZUQ3hKUVVGRkxFTkJRVU1zUTBGQmNFVXNSVUZCYzBVc1EwRkJRMFVzU1VGQlJXZElMRVZCUVVWdlF5eEpRVUZHTEVOQlFVODNTU3hEUVVGUUxFTkJRVWdzVFVGQlowSlVMRWxCUVVWRkxFVkJRVVZ2U3l4TFFVRkdMRVZCUVVZc1JVRkJXV3BMTEVWQlFVVkxMRWxCUVVZc1EwRkJUeXhGUVVGRGQwd3NUMEZCVFd4TkxFTkJRVkFzUlVGQlUzRkZMRTFCUVV0dVJTeEZRVUZGTEVOQlFVWXNSVUZCU3l0RUxFOUJRVXdzUTBGQllTdERMRU5CUVdJc1JVRkJaU3hIUVVGbUxFTkJRV1FzUlVGQlVDeERRVUZhTEVWQlFYVkVka2NzU1VGQlJVRXNSVUZCUlVnc1MwRkJSaXhEUVVGUlRpeEZRVUZGZVVNc1RVRkJWaXhEUVVGNlJTeERRVUYwUlN4RFFVRnJTeXhMUVVGSmJFTXNRMEZCU2l4SlFVRlRUaXhGUVVGRk9Fd3NUVUZCV0R0QlFVRnJRaXhaUVVGRk4wd3NTVUZCUlc5SUxFVkJRVVV2Unl4RFFVRkdMRVZCUVVzclNTeEpRVUZNTEVOQlFWVTNTU3hEUVVGV0xFTkJRVW9zUzBGQmJVSkpMRVZCUVVWT0xFTkJRVVlzUzBGQlRTeEZRVUZGVEN4SlFVRkZWeXhGUVVGRlRpeERRVUZHTEVWQlFVdE1MRU5CUVV3c1EwRkJTaXhEUVVGNlFpeExRVUYzUTBZc1NVRkJSVVVzUlVGQlJXOUxMRXRCUVVZc1JVRkJSaXhGUVVGWmFrc3NSVUZCUlVzc1NVRkJSaXhEUVVGUExFVkJRVU4zVEN4UFFVRk5iRTBzUTBGQlVDeEZRVUZUY1VVc1RVRkJTemxFTEVOQlFXUXNSVUZCWjBJNFRDeFRRVUZSYmswc1EwRkJlRUlzUlVGQlVDeERRVUZhTEVWQlFTdERUeXhKUVVGRlFTeEZRVUZGU0N4TFFVRkdMRU5CUVZGT0xFVkJRVVY1UXl4TlFVRldMRU5CUVhwR08wRkJRV3hDTEZOQlFUaElMRWxCUVVjc1EwRkJRM3BETEVOQlFVb3NSVUZCVFR0QlFVRk5MR05CUVU5T0xFbEJRVVZsTEVWQlFVVm5ReXhOUVVGS0xFZEJRVmRvUXl4SlFVRkZNa2tzUjBGQlIycEdMRXRCUVVnc1EwRkJVekZGTEVOQlFWUXNRMEZCUml4SFFVRmpjVWNzUlVGQlJYSkhMRU5CUVVZc1JVRkJTV3RDTEVOQlFVb3NSVUZCVDB3c1MwRkJVQ3hEUVVGaExFTkJRV0lzUTBGQmFFTTdRVUZCWjBRc1MwRkJjbWRDTEVOQlFYTm5RaXhUUVVGVE1Fb3NSVUZCVkN4RFFVRlpka3NzUTBGQldpeEZRVUZqTzBGQlFVTXNWMEZCU1N4SlFVRkpReXhKUVVGRkxFTkJRVTRzUlVGQlVVMHNTVUZCUlZBc1JVRkJSV2RFTEUxQlFWb3NSVUZCYlVKNFF5eEpRVUZGTEVWQlFYcENMRVZCUVRSQ1VDeEpRVUZGVFN4RFFVRTVRaXhGUVVGblEwNHNSMEZCYUVNN1FVRkJiME5QTEdGQlFVZFNMRVZCUVVWRExFTkJRVVlzUlVGQlMzZE5MRXRCUVZJN1FVRkJjRU1zVDBGQmEwUXNUMEZCVDJwTkxFTkJRVkE3UVVGQlV5eGpRVUZUTkVrc1JVRkJWQ3hEUVVGWmNFb3NRMEZCV2l4RlFVRmpReXhEUVVGa0xFVkJRV2RDVFN4RFFVRm9RaXhGUVVGclFqdEJRVUZETEZWQlFVbERMRWxCUVVWUUxFVkJRVVZ4U2l4SFFVRlNPMEZCUVVFc1ZVRkJXVGRKTEVsQlFVVlNMRVZCUVVWelNpeEpRVUZvUWp0QlFVRkJMRlZCUVhGQ00wa3NTVUZCUlVnc1MwRkJSMFFzUTBGQk1VSTdRVUZCUVN4VlFVRTBRazBzU1VGQlJWQXNTMEZCUnl4cFFrRkJaVXNzUTBGQmFFUTdRVUZCUVN4VlFVRnJSRWtzU1VGQlJXdEdMRWRCUVhCRUxFTkJRWGRFTEU5QlFVOXFSeXhGUVVGRmVVUXNTMEZCUml4SFFVRlJMRlZCUVZONlJDeERRVUZVTEVWQlFWZE5MRU5CUVZnc1JVRkJZVVVzUTBGQllpeEZRVUZsTzBGQlFVTXNaVUZCVFZJc1NVRkJSVUVzUlVGQlJVOHNRMEZCUml4RFFVRlNPMEZCUVdFc1kwRkJSeXhOUVVGSlVDeEZRVUZGZDBvc1VVRkJUaXhKUVVGblFqTkpMRU5CUVc1Q0xFVkJRWEZDTEU5QlFVOWtMRVZCUVVWRExFTkJRVVlzUlVGQlNVMHNRMEZCU2l4RlFVRk5SU3hEUVVGT0xFTkJRVkE3UVVGQmJFTXNVMEZCYTBRc1QwRkJUU3hEUVVGRExFTkJRVkE3UVVGQlV5eFBRVUZ1Uml4SFFVRnZSaXhWUVVGVFVpeERRVUZVTEVWQlFWZE5MRU5CUVZnc1JVRkJZVmNzUTBGQllpeEZRVUZsTzBGQlFVTXNXVUZCU1VVc1EwRkJTanRCUVVGQkxGbEJRVTFETEVOQlFVNDdRVUZCUVN4WlFVRlJSU3hEUVVGU08wRkJRVUVzV1VGQlZVVXNTVUZCUlN4RFFVRkRNa1FzUTBGQlJDeEZRVUZIY0VVc1EwRkJTQ3hEUVVGYUxFTkJRV3RDTEVsQlFVZEZMRU5CUVVnc1JVRkJTenRCUVVGRExHbENRVUZOYWtJc1NVRkJSVUVzUlVGQlJVOHNRMEZCUml4RFFVRlNPMEZCUVdFc1owSkJRVWNzUTBGQlF5eE5RVUZKVUN4RlFVRkZkMG9zVVVGQlRpeEpRVUZuUWpOSkxFTkJRV3BDTEV0QlFYRkNaQ3hGUVVGRlF5eERRVUZHTEVWQlFVbE5MRU5CUVVvc1JVRkJUVmNzUTBGQlRpeERRVUY0UWl4RlFVRnBReXhQUVVGTkxFTkJRVU1zUTBGQlVEdEJRVUU1UXp0QlFVRjFSQ3hUUVVFM1JDeE5RVUZyUlN4UFFVRk5ha0lzU1VGQlJVRXNSVUZCUlU4c1EwRkJSaXhEUVVGU08wRkJRV0VzWTBGQlJ5eE5RVUZKVUN4RlFVRkZkMG9zVVVGQlRpeEpRVUZuUWpOSkxFTkJRVzVDTEVWQlFYRkNMRWxCUVVkVExFbEJRVVYwUWl4RlFVRkZlVU1zUTBGQlJpeE5RVUZQZWtNc1JVRkJSWGxETEVOQlFVWXNTVUZCU3l4RlFVRmFMRU5CUVVZc1JVRkJhMEp5UWl4SlFVRkZSU3hGUVVGRmRFSXNSVUZCUlhGUExGRkJRVW9zVFVGQlowSXZUU3hGUVVGRmRFSXNSVUZCUlhGUExGRkJRVW9zU1VGQll5eEZRVUU1UWl4RFFVRndRaXhGUVVGelJEZE9MRXRCUVVkQkxFMUJRVWxTTEVWQlFVVnRTeXhSUVVGR0xFTkJRVmR1UlN4WFFVRllMRVZCUVdoRkxFVkJRWGxHYUVjc1NVRkJSVUVzUlVGQlJVOHNRMEZCUml4TFFVRk5VQ3hEUVVGU0xFTkJRWHBHTEV0QlFYVkhPMEZCUVVNc1owSkJRVWNzUTBGQlEyMUNMRWxCUVVWRExFVkJRVVZVTEVOQlFVWXNRMEZCU0N4TFFVRlZVU3hGUVVGRkxFTkJRVVlzVFVGQlQyZEZMRU5CUVdwQ0xFbEJRVzlDYUVVc1JVRkJSU3hEUVVGR0xFMUJRVTlLTEVOQlFUbENMRVZCUVdkRExFOUJRVTlUTEVWQlFVVXNRMEZCUml4SlFVRkxUQ3hGUVVGRkxFTkJRVVlzUTBGQldpeERRVUZwUWl4SlFVRkhReXhGUVVGRlZDeERRVUZHTEVsQlFVdGhMRU5CUVV3c1JVRkJUMEVzUlVGQlJTeERRVUZHTEVsQlFVdDZRaXhGUVVGRlF5eERRVUZHTEVWQlFVbE5MRU5CUVVvc1JVRkJUVmNzUTBGQlRpeERRVUZtTEVWQlFYZENMRTlCUVUwc1EwRkJReXhEUVVGUU8wRkJRVk03UVVGQk5VNHNVMEZCTkU0c1QwRkJUU3hEUVVGRExFTkJRVkE3UVVGQlV5eFBRVUZ3WVR0QlFVRnhZU3hqUVVGVE5GQXNSVUZCVkN4RFFVRlpPVkVzUTBGQldpeEZRVUZqTzBGQlFVTXNZVUZCVDBFc1JVRkJSV2RFTEUxQlFVWXNSMEZCVXl4RFFVRlVMRWRCUVZjc1ZVRkJVeTlETEVOQlFWUXNSVUZCVjAwc1EwRkJXQ3hGUVVGaFF5eERRVUZpTEVWQlFXVTdRVUZCUXl4WlFVRkpReXhKUVVGRlZDeEZRVUZGWjBRc1RVRkJVaXhEUVVGbExFOUJRVTEyUXl4SFFVRk9PMEZCUVZVc1kwRkJSeXhEUVVGRFZDeEZRVUZGVXl4RFFVRkdMRVZCUVV0U0xFTkJRVXdzUlVGQlQwMHNRMEZCVUN4RlFVRlRReXhEUVVGVUxFTkJRVW9zUlVGQlowSXNUMEZCVFN4RFFVRkRMRU5CUVZBN1FVRkJNVUlzVTBGQmJVTXNUMEZCVFN4RFFVRkRMRU5CUVZBN1FVRkJVeXhQUVVGMFJpeEhRVUYxUmxJc1JVRkJSU3hEUVVGR0xFTkJRVGxHTzBGQlFXMUhMR05CUVZNclVTeEZRVUZVTEVOQlFWa3ZVU3hEUVVGYUxFVkJRV05ETEVOQlFXUXNSVUZCWjBKTkxFTkJRV2hDTEVWQlFXdENPMEZCUVVNc1YwRkJTU3hKUVVGSlF5eEpRVUZGTEVOQlFVNHNSVUZCVVVNc1NVRkJSVklzUlVGQlJTdERMRTFCUVdoQ0xFVkJRWFZDZUVNc1NVRkJSVU1zUTBGQmVrSXNSVUZCTWtKRUxFZEJRVE5DTzBGQlFTdENiVW9zVjBGQlJ6TktMRU5CUVVnc1JVRkJTME1zUlVGQlJVOHNRMEZCUml4RFFVRk1MRVZCUVZWRUxFTkJRVlk3UVVGQkwwSXNUMEZCTkVNc1QwRkJUMEVzUTBGQlVEdEJRVUZUTEdOQlFWTjVVU3hGUVVGVUxFTkJRVmxvVWl4RFFVRmFMRVZCUVdORExFTkJRV1FzUlVGQlowSk5MRU5CUVdoQ0xFVkJRV3RDUXl4RFFVRnNRaXhGUVVGdlFrTXNRMEZCY0VJc1JVRkJjMEk3UVVGQlF5eFhRVUZKTEVsQlFVbEhMRU5CUVVvc1JVRkJUVVVzU1VGQlJTeEZRVUZTTEVWQlFWZEZMRWxCUVVVc1EwRkJZaXhGUVVGbFJTeEpRVUZGYkVJc1JVRkJSV2RFTEUxQlFXNUNMRVZCUVRCQ05VSXNTVUZCUlN4UlFVRk5ia0lzUTBGQmRFTXNSVUZCZDBObExFbEJRVVZGTEVOQlFURkRMRVZCUVRSRFJpeEhRVUUxUXp0QlFVRm5SQ3hUUVVGRFNpeEpRVUZGV2l4RlFVRkZaMElzUTBGQlJpeERRVUZJTEUxQlFWZFVMRXRCUVVjc1EwRkJRMEVzUlVGQlJVc3NRMEZCUml4RlFVRkpTaXhEUVVGS0xFVkJRVTFETEVOQlFVNHNRMEZCU2l4TFFVRmxTeXhGUVVGRlJ5eEpRVUZHTEVOQlFVOU1MRU5CUVZBc1IwRkJWVkVzUzBGQlIyNUNMRVZCUVVWblFpeEpRVUZHTEVOQlFVOUVMRU5CUVZBc1EwRkJOVUlzUTBGQldEdEJRVUZvUkN4UFFVRnRSeXhQUVVGUFJpeERRVUZRTzBGQlFWTXNZMEZCVTIxUkxFVkJRVlFzUTBGQldXcFNMRU5CUVZvc1JVRkJZME1zUTBGQlpDeEZRVUZuUWswc1EwRkJhRUlzUlVGQmEwSkRMRU5CUVd4Q0xFVkJRVzlDUXl4RFFVRndRaXhGUVVGelFrY3NRMEZCZEVJc1JVRkJkMEk3UVVGQlF5eGhRVUZQU2l4TFFVRkhMRU5CUVVOQkxFVkJRVVZyUXl4RFFVRkdMRU5CUVVvc1MwRkJWMnhETEVsQlFVVjVVU3hIUVVGSGVsRXNRMEZCU0N4RFFVRmlMRWRCUVc5Q1F5eExRVUZITEVOQlFVTkJMRVZCUVVWcFF5eERRVUZHTEVOQlFVb3NTMEZCVjJwRExFbEJRVVYzVVN4SFFVRkhlRkVzUTBGQlNDeEZRVUZMUnl4RFFVRk1MRU5CUVdJc1EwRkJjRUlzUlVGQk1FTnJTeXhIUVVGSExGVkJRVk5zU3l4RFFVRlVMRVZCUVZkRkxFTkJRVmdzUlVGQllVVXNRMEZCWWl4RlFVRmxSU3hEUVVGbUxFVkJRV2xDTzBGQlFVTXNXVUZCU1VVc1EwRkJTanRCUVVGQkxGbEJRVTFETEVOQlFVNDdRVUZCUVN4WlFVRlJSU3hEUVVGU08wRkJRVUVzV1VGQlZVVXNTVUZCUlN4RlFVRmFPMEZCUVVFc1dVRkJaVU1zU1VGQlJTeEZRVUZxUWp0QlFVRkJMRmxCUVc5Q1JTeEpRVUZGWkN4RlFVRkZhME1zVFVGQmVFSTdRVUZCUVN4WlFVRXJRbTVDTEVsQlFVVnFRaXhMUVVGSGJWRXNSMEZCUnpsUkxFdEJRVWNzUjBGQlRpeEZRVUZWWlN4RlFVRkZlVWtzVVVGQlJpeEhRVUZYTEVOQlFVTjZTU3hEUVVGRUxFTkJRVmdzUjBGQlpVRXNRMEZCZWtJc1JVRkJNa0lzUlVGQk0wSXNRMEZCY0VNN1FVRkJRU3haUVVGdFJXOUNMRWxCUVVVc1EwRkJRM0JETEVOQlFVUXNTVUZCU1N4RFFVRkRXU3hEUVVGRUxFbEJRVWxZTEVOQlFWSXNSMEZCVlRSQ0xFTkJRVllzUjBGQldXMVFMRWRCUVVkdVVDeERRVUZJTEVWQlFVdEtMRU5CUVV3c1JVRkJUM3BDTEVOQlFWQXNSVUZCVTJkQ0xFTkJRVlFzUlVGQlYwVXNRMEZCV0N4RFFVRnFSanRCUVVGQkxGbEJRU3RHYlVJc1NVRkJSVGxDTEVsQlFVVkZMRTFCUVVsSExFbEJRVVZhTEVOQlFVWXNSMEZCU1RSQ0xFdEJRVWR3UWl4RFFVRllMRWxCUVdNc1JVRkJaQ3hIUVVGcFFrMHNRMEZCYmtJc1IwRkJjVUp6UWl4RFFVRjBTQ3hEUVVGM1NDeEpRVUZITjBJc1MwRkJSMEVzUlVGQlJUWkNMRU5CUVVZc1JVRkJTVU1zUTBGQlNpeEZRVUZOY2tJc1EwRkJUaXhGUVVGUlJTeERRVUZTTEVOQlFVZ3NSVUZCWTFZc1EwRkJha0lzUlVGQmJVSTdRVUZCUTFrc1kwRkJSVFJRTEVkQlFVY3pUeXhEUVVGSUxFVkJRVXRZTEVOQlFVd3NRMEZCUml4RlFVRlZiRUlzUlVGQlJWa3NRMEZCUml4RlFVRkpMRVZCUVVvc1JVRkJUMG9zUTBGQlVDeEZRVUZUUlN4RFFVRlVMRU5CUVZZc1JVRkJjMEpITEVsQlFVVkVMRVZCUVVVMFFpeE5RVUV4UWl4RFFVRnBReXhQUVVGTk0wSXNSMEZCVGp0QlFVRlZMR0ZCUVVORkxFbEJRVVZJTEVWQlFVVkRMRU5CUVVZc1EwRkJTQ3hOUVVGWFowSXNSVUZCUlZnc1JVRkJSVXdzUTBGQlJpeERRVUZHTEVsQlFWRXNSVUZCUldVc1JVRkJSVllzUlVGQlJVd3NRMEZCUml4RFFVRkdMRWxCUVZGRkxFTkJRVllzUTBGQmJrSTdRVUZCVmp0QlFVRXlReXhoUVVGSFdDeERRVUZJTEVWQlFVczdRVUZCUXl4alFVRkhTQ3hMUVVGSFZDeERRVUZPTEVWQlFWRTdRVUZCUXl4blFrRkJSMU1zUTBGQlNDeEZRVUZMTzBGQlFVTlhMR3RDUVVGRkxFVkJRVVlzUlVGQlMwTXNTVUZCUldkQ0xFVkJRVVZYTEUxQlFWUXNRMEZCWjBJc1QwRkJUVE5DTEVkQlFVNDdRVUZCVlN4cFFrRkJRMFVzU1VGQlJXTXNSVUZCUldoQ0xFTkJRVVlzUTBGQlNDeExRVUZWUkN4RlFVRkZTQ3hKUVVGR0xFTkJRVTl0UWl4RlFVRkZaaXhEUVVGR0xFbEJRVXRGTEVOQlFWb3NRMEZCVmp0QlFVRldMR1ZCUVcxRFpDeEZRVUZGTEVsQlFVWXNSVUZCVHpSQ0xFbEJRVVVzUlVGQlZDeEZRVUZaYWtJc1EwRkJXaXhGUVVGalJpeERRVUZrTzBGQlFXbENMR2xDUVVGRmJVSXNSVUZCUlZjc1RVRkJTaXhEUVVGWExFOUJRVTB6UWl4SFFVRk9PMEZCUVZVc1pVRkJRMFVzU1VGQlJXTXNSVUZCUldoQ0xFTkJRVVlzUTBGQlNDeExRVUZWTEVOQlFVTkVMRWxCUVVWWUxFbEJRVVZ6Unl4RlFVRkZia2NzUTBGQlJpeEZRVUZKVnl4RFFVRktMRU5CUVVZc1IwRkJVMFVzUlVGQlJVb3NRMEZCUml4RFFVRmFMRWxCUVd0Q0xFTkJRVU1zUTBGQk4wSXNTMEZCYVVOVUxFVkJRVVZSTEVOQlFVWXNTVUZCU3l4RlFVRkZUaXhGUVVGRlRTeERRVUZHTEVsQlFVdEhMRU5CUVZBc1EwRkJkRU03UVVGQlZqdEJRVUV5UkR0QlFVRkRMRk5CUVdoTExFMUJRWEZMWXl4SlFVRkZNazhzUjBGQlJ6TlBMRTFCUVVsMlFpeERRVUZLTEVkQlFVMTFRaXhGUVVGRk1FSXNUVUZCUml4RFFVRlRia01zUTBGQlZDeEZRVUZYVXl4RlFVRkZWeXhOUVVGaUxFTkJRVTRzUjBGQk1rSllMRU5CUVRsQ0xFTkJRVVlzUlVGQmJVTTFRaXhKUVVGRlFTeEZRVUZGTEVsQlFVWXNSVUZCVDBzc1EwRkJVQ3hGUVVGVGRVSXNRMEZCVkN4RlFVRlhia0lzUTBGQldDeERRVUZHTEVkQlFXZENNa1lzUlVGQlJYSkVMRXRCUVVZc1EwRkJVVEZETEVOQlFWSXNSVUZCVlhWQ0xFTkJRVllzUTBGQmJrUTdRVUZCWjBVc1QwRkJiR1FzUTBGQmFrUTdRVUZCY1dkQ0xHTkJRVk0yVHl4RlFVRlVMRU5CUVZsc1VpeERRVUZhTEVWQlFXTTdRVUZCUXl4WFFVRkpMRWxCUVVsRExFTkJRVW9zUlVGQlRVMHNRMEZCVGl4RlFVRlJSU3hEUVVGU0xFVkJRVlZITEVsQlFVVmFMRVZCUVVWblJDeE5RVUZrTEVWQlFYRkNiRU1zU1VGQlJVNHNSVUZCUlRKT0xGRkJRVVlzUTBGQlYyNVBMRVZCUVVVc1EwRkJSaXhGUVVGTE5FVXNTVUZCYUVJc1EwRkJka0lzUlVGQk5rTTFSQ3hKUVVGRlJpeExRVUZIVGl4RlFVRkZNazRzVVVGQlJpeERRVUZYTEVkQlFWZ3NRMEZCYkVRc1JVRkJhMFZxVGl4SlFVRkZTaXhKUVVGRkxFTkJRVVlzUjBGQlNTeERRVUY0UlN4RlFVRXdSVThzU1VGQlJTdElMRWRCUVVjc1ZVRkJVM0JLTEVOQlFWUXNSVUZCVnp0QlFVRkRMR1ZCUVU5QkxFMUJRVWxETEVOQlFWZzdRVUZCWVN4UFFVRTFRaXhGUVVFMlFtVXNRMEZCTjBJc1JVRkJLMElzUTBGQlF5eERRVUZvUXl4RFFVRTFSU3hGUVVFclIwOHNTVUZCUlRaSUxFZEJRVWNzVlVGQlUzQktMRU5CUVZRc1JVRkJWenRCUVVGRExHVkJRVThyUnl4RlFVRkZPVWNzUTBGQlJpeEZRVUZKUkN4RFFVRktMRWxCUVU4c1EwRkJReXhEUVVGbU8wRkJRV2xDTEU5QlFXaERMRVZCUVdsRFowSXNRMEZCYWtNc1JVRkJiVU1zUTBGQlF5eERRVUZ3UXl4RFFVRnFTQ3hGUVVGM1NsTXNTVUZCUlN4RFFVRkRMRlZCUVZONlFpeERRVUZVTEVWQlFWZFBMRU5CUVZnc1JVRkJZVU1zUTBGQllpeEZRVUZsTzBGQlFVTXNXVUZCU1VNc1NVRkJSU3hEUVVGRFN5eERRVUZFTEV0QlFVdE9MRXRCUVVkRUxFMUJRVWxoTEVOQlFWb3NUVUZCYVVJc1EwRkJRMjVDTEVsQlFVVk5MRU5CUVVnc1JVRkJUV3RLTEZGQlFVNHNSMEZCWlhCSkxFVkJRVVZ5UWl4RFFVRkdMRVZCUVVsUExFTkJRVW9zUlVGQlRVTXNRMEZCVGl4RFFVRm1MRWRCUVhkQ1pTeEZRVUZGZGtJc1EwRkJSaXhGUVVGSlR5eERRVUZLTEVWQlFVMURMRU5CUVU0c1EwRkJla01zUTBGQlRpeERRVUY1UkN4UFFVRlBVQ3hKUVVGRkxFbEJRVVlzUlVGQlQxRXNRMEZCWkR0QlFVRm5RaXhQUVVFeFJpeERRVUU1U2l4RlFVRXdVRk1zU1VGQlJVNHNRMEZCTlZBc1JVRkJPRkJOTEVkQlFUbFFPMEZCUVd0UkxGbEJRVWRZTEVsQlFVVkRMRVZCUVVVeVRpeFJRVUZHTEVOQlFWZHVUeXhGUVVGRmEwSXNRMEZCUml4RlFVRkxNRVFzU1VGQmFFSXNRMEZCVEN4RlFVRXlRbTVFTEVsQlFVVXNRMEZCUXpKSUxFZEJRVWN3U0N4SFFVRkhjbEFzUTBGQlNDeERRVUZJTEVWQlFWTnNRaXhEUVVGVUxFTkJRVVFzUTBGQlJpeERRVUV6UWl4TFFVRXJRenRCUVVGRExHTkJRVWRCTEVsQlFVVkRMRVZCUVVVNFRDeE5RVUZHTEVOQlFWTjBUU3hGUVVGRmEwSXNRMEZCUml4RlFVRkxNRVFzU1VGQlpDeEZRVUZ2UW5CQ0xFdEJRWEJDTEVOQlFUQkNMRWxCUVRGQ0xFVkJRU3RDZUVRc1JVRkJSV3RDTEVOQlFVWXNSVUZCU3pCTUxFOUJRWEJETEVOQlFVWXNSVUZCSzBOeVRTeEZRVUZGYlVNc1EwRkJSaXhEUVVGc1JDeEZRVUYxUkR0QlFVRkRMR2xDUVVGSmFrTXNTVUZCUlN4RlFVRkZVeXhEUVVGU0xFVkJRVlZVTEVsQlFVVkhMRU5CUVZvc1JVRkJZMGdzUjBGQlpEdEJRVUZyUWl4clFrRkJSMFFzUlVGQlJUSk9MRkZCUVVZc1EwRkJWMjVQTEVWQlFVVlRMRU5CUVVZc1JVRkJTMjFGTEVsQlFXaENMRU5CUVVnc1JVRkJlVUk3UVVGQk0wTXNZVUZCYVVRc1QwRkJUM0ZOTEVkQlFVY3ZVQ3hKUVVGRkxFTkJRVVlzU1VGQlN6UlFMRWRCUVVkeVVDeERRVUZJTEVOQlFWSXNSVUZCWTFBc1NVRkJSU3hEUVVGR0xFbEJRVXR4U2l4SFFVRkhka3NzUlVGQlJXRXNTMEZCUml4RFFVRlJMRU5CUVZJc1JVRkJWVXNzU1VGQlJTeERRVUZhTEVWQlFXVklMRTFCUVdZc1EwRkJjMElzUlVGQlF6Qk1MRTlCUVUwc1VVRkJUWHBOTEVWQlFVVnJRaXhKUVVGRkxFTkJRVW9zUlVGQlR6QkVMRWxCUVdJc1IwRkJhMElzUjBGQmJFSXNSMEZCYzBJc1JVRkJOMElzUlVGQmRFSXNRMEZCU0N4RlFVRTBSRW9zVDBGQk5VUXNRMEZCYjBVclF5eERRVUZ3UlN4RlFVRnpSU3hKUVVGMFJTeERRVUZ1UWl4RlFVRXJSbWhJTEVOQlFTOUdMRVZCUVdsSFZ5eEpRVUZGVkN4RFFVRkdMRWxCUVV0NVVTeEhRVUZIYkZJc1JVRkJSV0VzUzBGQlJpeERRVUZSU3l4RFFVRlNMRVZCUVZWVUxFTkJRVllzUTBGQlNDeERRVUYwUnl4RlFVRjFTRUVzU1VGQlJVY3NRMEZCUml4SlFVRkxjMUVzUjBGQlIyeFNMRWxCUVVWQkxFVkJRVVZoTEV0QlFVWXNRMEZCVVVvc1EwRkJVaXhEUVVGTUxFTkJRVFZJTEVWQlFUWkpRU3hKUVVGRlJ5eERRVUZHTEVsQlFVc3lTaXhIUVVGSGRrc3NRMEZCU0N4RFFVRnNTaXhEUVVGUU8wRkJRV2RMTEdGQlFVVnBRaXhKUVVGR0xFTkJRVTlXTEVOQlFWQTdRVUZCVlR0QlFVRnlhMElzVDBGQmNXdENMRTlCUVU5MVVTeEhRVUZIY2xBc1EwRkJTQ3hEUVVGUU8wRkJRV0VzWTBGQlV6QlFMRVZCUVZRc1EwRkJXVzVTTEVOQlFWb3NSVUZCWTBNc1EwRkJaQ3hGUVVGblFqdEJRVUZETEZWQlFVbE5MRWxCUVVWT0xFVkJRVVVyUXl4TlFVRkdMRWRCUVZNc1EwRkJaanRCUVVGQkxGVkJRV2xDZGtNc1NVRkJSVlFzUlVGQlJXZEVMRTFCUVVZc1IwRkJVeXhEUVVFMVFqdEJRVUZCTEZWQlFUaENjRU1zU1VGQlJTeFhRVUZUUVN4RlFVRlVMRVZCUVZkRkxFTkJRVmdzUlVGQllVVXNRMEZCWWl4RlFVRmxSU3hEUVVGbUxFVkJRV2xDUnl4RFFVRnFRaXhGUVVGdFFqdEJRVUZETEZsQlFVbEZMRU5CUVVvN1FVRkJRU3haUVVGTlN5eERRVUZPTzBGQlFVRXNXVUZCVVZFc1EwRkJVanRCUVVGQkxGbEJRVlZETEVsQlFVVXNRMEZCV2p0QlFVRkJMRmxCUVdOSExFbEJRVVVzUjBGQmFFSTdRVUZCUVN4WlFVRnZRa01zU1VGQlJUZENMRTFCUVVjc1JVRkJla0k3UVVGQlFTeFpRVUUwUWpoQ0xFbEJRVVVzUlVGQk9VSTdRVUZCUVN4WlFVRnBRME1zU1VGQlJYWkNMRU5CUVc1RE8wRkJRVUVzV1VGQmNVTTRSU3hKUVVGRmRFWXNUVUZCUjBnc1MwRkJSMFFzUlVGQlJTdE1MRWxCUVVZc1EwRkJUM1pGTEVkQlFWQXNRMEZCVnl4SFFVRllMRVZCUVdVelJ5eERRVUZtTEVOQlFUZERPMEZCUVVFc1dVRkJLMFE0UlN4SlFVRkZaaXhMUVVGSExGRkJRVTE2UXl4RFFVRk9MRWRCUVZFc1EwRkJVaXhIUVVGVk1rSXNTMEZCUzBNc1RVRkJUQ3hOUVVGbExFVkJRVGRHTzBGQlFVRXNXVUZCWjBjNFFpeEpRVUZGU0N4RlFVRkZiRVFzVFVGQmNFY3NRMEZCTWtjc1MwRkJTVE5DTEUxQlFVbEVMRWxCUVVWT0xFMUJRVWxaTEVOQlFVb3NTVUZCVDFvc1EwRkJVQ3hKUVVGVlR5eERRVUZvUWl4RFFVRktMRVZCUVhWQ2JVSXNUVUZCU1RaRUxFTkJRVW9zU1VGQlR5eFRRVUZQT1VVc1NVRkJSVEpGTEVWQlFVVXhSQ3hEUVVGR0xFTkJRVlFzUTBGQk9VSXNSVUZCTmtOQkxFZEJRVGRETEVWQlFXbEVPMEZCUVVNc1kwRkJSeTlDTEV0QlFVZGpMRU5CUVU0c1JVRkJVVHRCUVVGRFN5eG5Ra0ZCUlN4RFFVRkdMRVZCUVVsa0xFdEJRVWRUTEVWQlFVVnhTU3hoUVVGR0xFdEJRV3RDYkVrc1EwRkJja0lzUzBGQmVVSkVMRVZCUVVWR0xFTkJRVVlzUjBGQlMxQXNTVUZCUlN4RFFVRkRZU3hEUVVGcVF5eERRVUZLTEVOQlFYZERMRTlCUVUxUExFbEJRVVZ3UXl4RlFVRkZORUlzUjBGQlJpeERRVUZTTzBGQlFXVXNhMEpCUVVkUkxFVkJRVVZpTEVOQlFVWXNSVUZCU1ZRc1MwRkJSMWtzUTBGQlVDeEZRVUZUVml4RFFVRlVMRU5CUVVnc1JVRkJaVHRCUVVGRFJTeHJRa0ZCUlVRc1NVRkJSaXhEUVVGUFRTeERRVUZRTEVWQlFWVTdRVUZCVFR0QlFVRXZReXhoUVVFclEwWXNUVUZCU1N0RUxFbEJRVVZsTEVOQlFVNDdRVUZCVXl4cFFrRkJTU3hEUVVGRE5VVXNTVUZCUlN4RFFVRkRZU3hEUVVGRUxFbEJRVWxpTEVOQlFWQXNTMEZCVjJNc1IwRkJXQ3hGUVVGbGVrSXNUVUZCUnpaQ0xFVkJRVVY0UWl4SlFVRkdMRU5CUVU5TkxFTkJRVkFzUTBGQmRFSTdRVUZCYVVNc1lVRkJSMk1zUzBGQlIwY3NRMEZCU0N4RlFVRkxha01zUzBGQlIybERMRTFCUVVsSUxFTkJRV1lzUlVGQmFVSTdRVUZCUTFRc1kwRkJSU3hEUVVGR0xFTkJRVWtzVDBGQlRWRXNTVUZCUlc1RExFVkJRVVV5UWl4SFFVRkdMRU5CUVZJN1FVRkJaVkVzWTBGQlJVc3NRMEZCUml4RlFVRkpReXhEUVVGS0xFVkJRVTAxUWl4RFFVRk9MRVZCUVZGRkxFTkJRVkk3UVVGQlppeFhRVUV3UWl4SlFVRkhTaXhGUVVGSUxFVkJRVXM3UVVGQlF5eG5Ra0ZCUjNsQ0xFbEJRVVVzUTBGQlRDeEZRVUZQTEU5QlFVMUhMRWRCUVU0N1FVRkJWVU1zWjBKQlFVVkVMRU5CUVVZc1MwRkJUVVVzUlVGQlJVWXNRMEZCUml4RFFVRk9MRXRCUVdGRkxFVkJRVVZHTEVOQlFVWXNTVUZCUzJ0RkxFVkJRVVV2UlN4SlFVRkdMRU5CUVU5VUxFTkJRVkFzUTBGQmJFSTdRVUZCVml4aFFVRjFRM2RDTEVsQlFVVnpUeXhIUVVGSGRFOHNRMEZCU0N4RFFVRkdPMEZCUVZFc1lVRkJSV01zUzBGQlJpeERRVUZSZEVNc1EwRkJVaXhGUVVGVmQwSXNRMEZCVml4SFFVRmhja0lzUzBGQlJ5eERRVUZEVkN4RlFVRktMRWxCUVU4NFFpeEZRVUZGVFN4TlFVRkdMRWRCUVZNc1EwRkJhRUlzU1VGQmJVSllMRWxCUVVWd1F5eEZRVUZGSzBNc1RVRkJTaXhIUVVGWExFTkJRVGxDTEVsQlFXbERNa2NzUjBGQlJ6aEVMRlZCUVVnc1EwRkJZM1pOTEVOQlFXUXNRMEZCT1VNN1FVRkJLMFFzWjBKQlFVOUhMRTFCUVVrclJDeEpRVUZGWlN4RFFVRkdMRVZCUVVrdlJTeEpRVUZGZFVJc1EwRkJWaXhIUVVGaFJpeERRVUZ3UWp0QlFVRnpRaXhQUVVFMWFFSXNRMEZCTm1oQ0xFOUJRVTlzUXl4SlFVRkZkVXNzUjBGQlIyeExMRU5CUVVnc1EwRkJSaXhIUVVGUlFTeERRVUZtTzBGQlFXbENMRmxCUVU5SkxFbEJRVVV5U1N4SFFVRkhlVWdzVDBGQlNDeEhRVUZYTEZWQlFWTndVaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMRlZCUVVsTkxFTkJRVW83UVVGQlFTeFZRVUZOUXl4SlFVRkZMRVZCUVZJN1FVRkJRU3hWUVVGWFF5eEpRVUZGTEVWQlFXSTdRVUZCUVN4VlFVRm5Ra2NzU1VGQlJUQkdMRVZCUVVWMFJ5eEpRVUZGTEVkQlFVb3NRMEZCYkVJc1EwRkJNa0lzU1VGQlJ5eERRVUZEV1N4RFFVRktMRVZCUVUwN1FVRkJRMWdzWTBGQlNVRXNTVUZCUldFc1JVRkJSV1FzUTBGQlJpeERRVUZPTEVkQlFWbFBMRWxCUVVWT0xFVkJRVVVyUXl4TlFVRm9RaXhEUVVGMVFpeFBRVUZOZWtNc1IwRkJUanRCUVVGVlN5eGpRVUZGYzFFc1IwRkJSMnBTTEVWQlFVVk5MRU5CUVVZc1EwRkJTQ3hEUVVGR0xFVkJRVmRMTEVWQlFVVTRRaXhEUVVGR0xFbEJRVXRzUXl4RlFVRkZVeXhKUVVGR0xFTkJRVTlNTEVOQlFWQXNRMEZCVEN4SFFVRmxTQ3hGUVVGRlVTeEpRVUZHTEVOQlFVOU1MRU5CUVZBc1EwRkJNVUk3UVVGQlZpeFRRVUU0UTBFc1NVRkJSVEJHTEVWQlFVVjBSeXhEUVVGR0xFVkJRVWx0VWl4SFFVRkhNVkVzUTBGQlNDeEZRVUZMUkN4RFFVRk1MRU5CUVVvc1EwRkJSaXhGUVVGbFNTeEZRVUZGZVZFc1VVRkJSaXhIUVVGWGNsSXNRMEZCTVVJN1FVRkJORUlzWTBGQlQxa3NRMEZCVUR0QlFVRlRMRXRCUVhaTExFVkJRWGRMVFN4SlFVRkZlVWtzUjBGQlJ6SklMRTFCUVVnc1IwRkJWU3hWUVVGVGRGSXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZOTEVOQlFXSXNSVUZCWlVVc1EwRkJaaXhGUVVGcFFqdEJRVUZETEZWQlFVbEhMRU5CUVVvN1FVRkJRU3hWUVVGTlRTeERRVUZPTzBGQlFVRXNWVUZCVVVVc1EwRkJVanRCUVVGQkxGVkJRVlZETEVOQlFWWTdRVUZCUVN4VlFVRlpSU3hEUVVGYU8wRkJRVUVzVlVGQlkwVXNTVUZCUlN4alFVRlpMRTlCUVU5NlFpeERRVUZ1UWl4SlFVRnpRa0VzUTBGQmRFTTdRVUZCUVN4VlFVRjNRekJDTEVsQlFVVXNRMEZCUTJwQ0xFTkJRVVFzU1VGQlNVc3NSVUZCUldRc1NVRkJSWGxDTEVWQlFVVTBVQ3hSUVVGR0xFbEJRVmx5VWl4RFFVRm9RaXhEUVVFNVF5eERRVUZwUlN4SlFVRkhUeXhKUVVGRlFTeExRVUZITEVWQlFVd3NSVUZCVVN4TlFVRkpiVUlzUlVGQlJYTkNMRTFCUVdwQ0xFVkJRWGRDTzBGQlFVTXNXVUZCUnpsQ0xFbEJRVVZSTEVWQlFVVXNRMEZCUml4SlFVRkxRU3hGUVVGRkxFTkJRVVlzUlVGQlMySXNTMEZCVEN4RFFVRlhMRU5CUVZnc1EwRkJVQ3hGUVVGeFFrc3NSVUZCUlRoQ0xFMUJRVVlzUjBGQlV5eERRVUZVTEVsQlFWa3NVMEZCVHl4RFFVRkROVUlzU1VGQlJVWXNSVUZCUlN4RFFVRkdMRU5CUVVnc1JVRkJVekJFTEVsQlFUVkNMRWxCUVd0RExFMUJRVWt6UlN4RlFVRkZkMG9zVVVGQmVFTXNTVUZCYTBRMVNDeERRVUZzUkN4SlFVRnhSSEpDTEVWQlFVVXlUaXhSUVVGR0xFTkJRVmRxVGl4RlFVRkZMRU5CUVVZc1JVRkJTekJFTEVsQlFXaENMRU5CUVRkRkxFVkJRVzFITzBGQlFVTXNZMEZCUnpORkxFbEJRVVVzUTBGQlEwOHNSVUZCUlN0TUxFbEJRVVlzUTBGQlQzcEZMRVZCUVZBc1EwRkJWVEZITEVWQlFVVjNUQ3hQUVVGR0xFTkJRVlVzUTBGQlZpeEZRVUZoY0Vrc1QwRkJZaXhEUVVGeFFtMUZMRU5CUVhKQ0xFVkJRWFZDUXl4RlFVRjJRaXhEUVVGV0xFVkJRWEZETTBrc1EwRkJja01zUzBGQmVVTXNSVUZCTVVNc1JVRkJPRU1zUTBGQk9VTXNRMEZCUml4RlFVRnRSQ3hEUVVGRFFTeERRVUYyUkN4RlFVRjVSQ3hQUVVGUFRTeERRVUZRTEVOQlFWTnJRaXhOUVVGSmVFSXNTVUZCUlVFc1JVRkJSV2xETEZWQlFWSXNSMEZCYjBKc1F5eEpRVUZGUVN4RlFVRkZZU3hMUVVGR0xFTkJRVkZMTEVWQlFVVXlTaXhMUVVGR0xFZEJRVlUwUWl4TFFVRldMRU5CUVdkQ2Vrb3NUVUZCZUVJc1EwRkJkRUk3UVVGQmMwUXNZVUZCUlRaRkxFVkJRVVZSTEZsQlFVWXNRMEZCWlRoQ0xFbEJRV1lzUTBGQmIwSnVTeXhEUVVGd1FpeEpRVUYxUWl4RFFVRjJRaXhIUVVGNVFtdENMRVZCUVVVNFFpeE5RVUUzUWl4RFFVRnZReXhQUVVGTmNFTXNSMEZCVGl4RlFVRlZPMEZCUVVNc1kwRkJSMUVzU1VGQlJVWXNSVUZCUlU0c1EwRkJSaXhEUVVGR0xFVkJRVTlLTEVWQlFVVXlUaXhSUVVGR0xFTkJRVmM1VFN4SlFVRkZSQ3hGUVVGRmQwUXNTVUZCWml4RFFVRldMRVZCUVN0Q0xFMUJRVTBzU1VGQlJ5eERRVUZEY2tRc1NVRkJSV1lzUlVGQlJTdE1MRWxCUVVZc1EwRkJUMnhNTEVOQlFWQXNRMEZCU0N4TlFVRm5RbG9zU1VGQlJXTXNSVUZCUlVnc1JVRkJSWGRNTEU5QlFVWXNRMEZCVlN4RFFVRldMRVZCUVdGd1NTeFBRVUZpTEVOQlFYRkNiVVVzUTBGQmNrSXNSVUZCZFVKRExFVkJRWFpDTEVOQlFVWXNSVUZCTmtKR0xFVkJRVVY1UWl4SlFVRkdMRU5CUVU5cVNpeEZRVUZGTEVOQlFVWXNSVUZCU3pCRUxFbEJRVm9zUzBGQmJVSTJSaXhIUVVGSGVFc3NSVUZCUldsRExGVkJRVXdzUTBGQmJrSXNTVUZCY1VOcVF5eERRVUZzUlN4RFFVRnNRaXhEUVVGSUxFVkJRVEpHTzBGQlFVTXNaMEpCUVVkcFFpeEZRVUZGTmtNc1RVRkJSaXhEUVVGVGJrUXNRMEZCVkN4RlFVRlhMRU5CUVZnc1IwRkJZMW9zU1VGQlJWTXNSVUZCUlhWRExFMUJRVVlzU1VGQlZYVklMRWRCUVVkeVNpeERRVUZJTEVOQlFURkNMRVZCUVdkRExFTkJRVU5zUWl4RFFVRndReXhGUVVGelF5eFBRVUZQTmtjc1JVRkJSWEpFTEV0QlFVWXNRMEZCVVdwRUxFTkJRVklzUlVGQlZVVXNRMEZCVml4SFFVRmhSaXhEUVVGd1FpeERRVUZ6UWp0QlFVRk5PMEZCUVVNN1FVRkJReXhqUVVGTkxFTkJRVU5yUWl4TFFVRkhWQ3hGUVVGRmFFSXNRMEZCUml4RlFVRkpNRUlzUTBGQlNpeERRVUZLTEVWQlFWbHFRaXhEUVVGYUxFVkJRV05TTEVOQlFXUXNSVUZCWjBJc1EwRkJRelJDTEVOQlFXcENMRVZCUVcxQ2RFSXNRMEZCYmtJc1JVRkJjVUlzUTBGQlEwNHNRMEZCUkN4SlFVRkplVWtzUlVGQlJYbENMRWxCUVVZc1EwRkJUMjVMTEVOQlFWQXNTMEZCVjNsTExFZEJRVWQ0U3l4RlFVRkZhVU1zVlVGQlRDeERRVUZtTEVsQlFXbERha01zUTBGQmRFUXNSMEZCZVVSTkxFTkJRUzlFTzBGQlFXbEZMRXRCUVdwNlFpeEZRVUZyZWtKQkxFVkJRVVZ2VGl4VlFVRkdMRWRCUVdGcVRDeEZRVUZGYzBRc1MwRkJSaXhEUVVGUkxFVkJRVklzUlVGQldXeERMRWxCUVZvc1EwRkJhVUo1UXl4RFFVRnFRaXhGUVVGdlFtbEZMRWxCUVhCQ0xFTkJRWGxDTEVWQlFYcENMRTFCUVN0Q09VZ3NRMEZCT1RGQ0xFVkJRV2N5UW01RExFVkJRVVZ0VGl4blFrRkJSaXhIUVVGdFFpeERRVUZETEVOQlFVTnVUU3hEUVVGeU0wSXNSVUZCZFROQ1JTeEhRVUYyTTBJc1JVRkJNak5DYkVJc1JVRkJSVFpOTEZsQlFVWXNSMEZCWlhKRExFZEJRVWNzVlVGQlV5OUxMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVThzU1VGQlJVRXNSVUZCUld0T0xIVkNRVUZHTEVOQlFUQkNlRXdzUlVGQlJVa3NZVUZCUml4RFFVRm5RaXhWUVVGb1FpeERRVUV4UWl4RFFVRlVPMEZCUVdkRkxFdEJRUzlGTEVOQlFURTBRaXhGUVVFeU9VSnBTaXhIUVVGSExGVkJRVk12U3l4RFFVRlVMRVZCUVZjN1FVRkJReXhoUVVGUFFTeEZRVUZGTUUwc1UwRkJSaXhIUVVGWkxHdENRVUZhTEVWQlFTdENMRkZCUVUweFRTeEZRVUZGT0U0c1ZVRkJSaXhEUVVGaGVrUXNXVUZCWWl4RFFVRXdRaXhOUVVFeFFpeERRVUUxUXp0QlFVRTRSU3hMUVVFM1JpeExRVUZuUjFjc1IwRkJSeXgzUWtGQlNDeEZRVUUwUWl4VlFVRlRhRXdzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpUdEJRVUZETEZWQlFVY3NRMEZCUTBFc1EwRkJTaXhGUVVGTkxFOUJRVTlRTEVWQlFVVnhTeXhaUVVGR0xFTkJRV1Z3U3l4RFFVRm1MRVZCUVdsQ0xGZEJRVk5CTEVWQlFVVm5SeXhYUVVGR0xFVkJRVlFzUjBGQmVVSXNRMEZCZWtJc1IwRkJNa0lzUTBGQk5VTXNRMEZCVUR0QlFVRnpSQ3hMUVVGNFJ5eERRVUV6YWtNc1JVRkJjWEZETVVZc1JVRkJSVEJNTEZWQlFVWXNTVUZCWTJ4Q0xFZEJRVWNzVlVGQlV5OUxMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVTlCTEVWQlFVVXdUU3hUUVVGR0xFZEJRVmtzVlVGQldpeEZRVUYxUWpGTkxFVkJRVVU0VGl4VlFVRkdMRU5CUVdGNFJDeFpRVUZpTEVOQlFUQkNMRTlCUVRGQ0xFVkJRV3RETEVWQlFXeERMRU5CUVhaQ0xFVkJRVFpFTEU5QlFVdDBTeXhGUVVGRk9FNHNWVUZCUml4RFFVRmhla1FzV1VGQllpeERRVUV3UWl4UFFVRXhRaXhEUVVGNlJUdEJRVUUwUnl4TFFVRXpTQ3hEUVVGa0xFbEJRVFJKVnl4SFFVRkhMRTlCUVVnc1JVRkJWeXhWUVVGVGFFd3NRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZOTEVOQlFXSXNSVUZCWlR0QlFVRkRMRlZCUVVjc1EwRkJRMEVzUTBGQlJDeEpRVUZKTEZsQlFWVlFMRVZCUVVWdlN5eFJRVUZHTEVOQlFWZHVSU3hYUVVGWUxFVkJRV3BDTEVWQlFUQkRMRTlCUVU5cVJ5eEZRVUZGZFZJc1dVRkJWRHRCUVVGelFpeExRVUV6Uml4RFFVRnFla01zUlVGQk9EUkRlRWNzUjBGQlJ5eFZRVUZUTDBzc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWVVGQlR5eFJRVUZOUVN4RlFVRkZjVXNzV1VGQlJpeERRVUZsTEZWQlFXWXNRMEZCWWp0QlFVRjNReXhMUVVGMlJDeExRVUV3UkZjc1IwRkJSMmhGTEVOQlFVZ3NSVUZCU3l4VlFVRlRhRWdzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpUdEJRVUZETEZWQlFVbERMRU5CUVVvc1EwRkJUU3hKUVVGSExFTkJRVU5FTEVOQlFVb3NSVUZCVFN4UFFVRlBVQ3hGUVVGRlF5eERRVUZHTEUxQlFVOHNRMEZCUXl4RFFVRlNMRWRCUVZWQkxFVkJRVVZuUnl4WFFVRkdMRVZCUVZZc1IwRkJNRUlzUTBGQlEzcEdMRWxCUVVWU0xFVkJRVVYzVFN4blFrRkJSaXhEUVVGdFFuWk5MRU5CUVc1Q0xFTkJRVWdzUzBGQk1rSlBMRVZCUVVVclRTeFRRVUUzUWl4SFFVRjFReTlOTEVWQlFVVnBUU3hMUVVGNlF5eEhRVUVyUXl4SlFVRm9SanRCUVVGeFJpeExRVUYwU0N4RFFVRjRPRU1zUlVGQloydEVPVU1zUlVGQmRtdEVPMEZCUVRCclJDeEhRVUV6Ym0xQ0xFTkJRVFJ1YlVJelNpeERRVUUxYm0xQ0xFTkJRVTRzUTBGQmNXOXRRbkZETEVWQlFVVnJTeXhKUVVGR0xFZEJRVTl5Unl4RFFVRlFMRVZCUVZNM1JDeEZRVUZGYlZBc1NVRkJSaXhIUVVGUGRFd3NSVUZCUlRoSUxGTkJRV3hDTEVWQlFUUkNNMHdzUlVGQlJXMVFMRWxCUVVZc1EwRkJUeXhIUVVGUUxFbEJRVmx1VUN4RlFVRkZiVkFzU1VGQlJpeERRVUZQYWtRc1QwRkJMME1zUlVGQmRVUnNUU3hGUVVGRmIwd3NWVUZCUml4SFFVRmhjRXdzUlVGQlJXOVFMRTFCUVVZc1IwRkJVM1pNTEVWQlFVVjFTQ3hWUVVFdlJTeEZRVUV3Um5CTUxFVkJRVVZPTEVsQlFVWXNSMEZCVDIxRkxFVkJRVVV3U0N4UFFVRnVSeXhGUVVFeVIzWk1MRVZCUVVWeFVDeFJRVUZHTEVkQlFWZDRUQ3hGUVVGRmQwWXNTMEZCZUVnc1JVRkJPRWh5U2l4RlFVRkZPRXNzVVVGQlJpeEhRVUZYYWtnc1JVRkJSV2xJTEZGQlFUTkpMRVZCUVc5S09Vc3NSVUZCUlhOUUxHTkJRVVlzUjBGQmFVSjZUQ3hGUVVGRmMwZ3NUVUZCZGtzc1EwRkJPRXNzU1VGQlNYSklMRWxCUVVVc1UwRkJSa0VzUTBGQlJTeERRVUZUYmtjc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRk5MRU5CUVdJc1JVRkJaVHRCUVVGRExGRkJRVWxETEVsQlFVVXNSVUZCVGp0QlFVRkJMRkZCUVZORExFbEJRVVVzUzBGQlN5eERRVUZNTEV0QlFWTkdMRU5CUVhCQ0xFTkJRWE5DTEU5QlFVMHNRMEZCUTFBc1NVRkJSVUVzUlVGQlJVTXNRMEZCUml4RFFVRklMRXRCUVZVc1RVRkJTVVFzUlVGQlJYbEtMRkZCUVhSQ08wRkJRU3RDTEZWQlFVY3NUVUZCU1hwS0xFVkJRVVY1U2l4UlFVRlVMRVZCUVd0Q08wRkJRVU1zV1VGQlIyaEtMRXRCUVVjMFFpeEZRVUZGY2tNc1EwRkJSaXhGUVVGTE5GSXNSVUZCVEN4RFFVRlJjbElzUTBGQlVpeERRVUZPTEVWQlFXbENMRTFCUVUxRExFVkJRVVZUTEVsQlFVWXNRMEZCVDJwQ0xFTkJRVkE3UVVGQlZUdEJRVUZ1Uml4TFFVRnRSaXhQUVVGUFVTeERRVUZRTzBGQlFWTXNSMEZCZUVrN1FVRkJRU3hOUVVGNVNUWkdMRWxCUVVVc1UwRkJSa0VzUTBGQlJTeERRVUZUY2tjc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4VFFVRkpMRWxCUVVsTkxFbEJRVVVzUlVGQlZpeEZRVUZoVUN4RFFVRmlMRVZCUVdWQkxFbEJRVVZCTEVWQlFVVnZUQ3hYUVVGdVFqdEJRVUVyUWl4WlFVRkpjRXdzUlVGQlJYbEtMRkZCUVU0c1NVRkJaMEo2U2l4TlFVRkpReXhEUVVGd1FpeEpRVUYxUWswc1JVRkJSVlVzU1VGQlJpeERRVUZQYWtJc1EwRkJVQ3hEUVVGMlFqdEJRVUV2UWl4TFFVRm5SU3hQUVVGUFR5eERRVUZRTzBGQlFWTXNSMEZCYkU4N1FVRkJRU3hOUVVGdFR5dEdMRWxCUVVWcVJTeEZRVUZGYlZBc1NVRkJSaXhEUVVGUGRFUXNTMEZCVUN4RFFVRmhOMFlzV1VGQmJGQXNRMEZCSzFBc1UwRkJVemxDTEVOQlFWUXNRMEZCVjNaSExFTkJRVmdzUlVGQllVTXNRMEZCWWl4RlFVRmxPMEZCUVVNc1YwRkJUMFFzUlVGQlJXOUxMRkZCUVVZc1NVRkJXWEJMTEVWQlFVVnZTeXhSUVVGR0xFTkJRVmR1UlN4WFFVRllMRTlCUVRKQ2FFY3NSVUZCUldkSExGZEJRVVlzUlVGQk9VTTdRVUZCT0VRc1QwRkJTVThzU1VGQlJTeHBSVUZCVGp0QlFVRkJMRTFCUVhkRlF5eEpRVUZGTEdkQ1FVRXhSU3hEUVVFeVJpeFRRVUZUUXl4RFFVRlVMRU5CUVZjeFJ5eERRVUZZTEVWQlFXRkRMRU5CUVdJc1JVRkJaVTBzUTBGQlppeEZRVUZwUWp0QlFVRkRMRmRCUVU4NFFpeEZRVUZGTkVJc1ZVRkJSaXhEUVVGaGFFVXNRMEZCWWl4SlFVRm5RbTlETEVWQlFVVnRSQ3hKUVVGR0xFTkJRVTk0Uml4RFFVRlFMRVZCUVZNc1ZVRkJVMEVzUTBGQlZDeEZRVUZYVVN4RFFVRllMRVZCUVdFN1FVRkJReXhoUVVGTkxFTkJRVU1zUTBGQlExQXNSVUZCUlRCQ0xFbEJRVVlzUTBGQlR6TkNMRU5CUVZBc1JVRkJVMUVzUTBGQlZDeEZRVUZYVWl4RFFVRllMRU5CUVVZc1MwRkJhMEpQTEVOQlFYaENPMEZCUVRCQ0xFdEJRV3BFTEVOQlFXaENMRWRCUVcxRlRpeEZRVUZGZDBvc1VVRkJSaXhIUVVGWGNFZ3NSVUZCUlcxRUxFbEJRVVlzUTBGQlQzaEdMRU5CUVZBc1JVRkJVeXhWUVVGVFFTeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRlBRU3hOUVVGSlF5eERRVUZLTEV0QlFWRk5MRU5CUVdZN1FVRkJhVUlzUzBGQmRFTXNRMEZCV0N4SFFVRnRSQ3haUVVGVkxFOUJRVTlPTEVOQlFXcENMRWRCUVcxQ2IwTXNSVUZCUlcxRUxFbEJRVVlzUTBGQlQzaEdMRU5CUVZBc1JVRkJVeXhWUVVGVFFTeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRlBhMElzUlVGQlJWTXNTVUZCUml4RFFVRlBNVUlzUTBGQlVDeEZRVUZUUkN4RFFVRlVMRWxCUVZrc1EwRkJReXhEUVVGaUxFdEJRV2xDVHl4RFFVRjRRanRCUVVFd1FpeExRVUV2UXl4RFFVRnVRaXhIUVVGdlJXdEhMRVZCUVVVd1JDeEpRVUZHTEVOQlFVOXNTeXhEUVVGUUxFbEJRVlZ2UXl4RlFVRkZhVXNzVFVGQlJpeERRVUZUY2swc1EwRkJWQ3hGUVVGWFJDeERRVUZZTEVWQlFXRlBMRU5CUVdJc1EwRkJWaXhKUVVFeVFrNHNTVUZCUlc5RExFVkJRVVZwU3l4TlFVRkdMRU5CUVZOeVRTeERRVUZVTEVWQlFWZEVMRU5CUVZnc1EwRkJSaXhGUVVGblFuRkRMRVZCUVVWdFJDeEpRVUZHTEVOQlFVOTRSaXhEUVVGUUxFVkJRVk1zVlVGQlUwRXNRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJUMnRDTEVWQlFVVlRMRWxCUVVZc1EwRkJUekZDTEVOQlFWQXNSVUZCVTBRc1EwRkJWQ3hKUVVGWkxFTkJRVU1zUTBGQllpeExRVUZwUWs4c1EwRkJha0lzU1VGQmIwSXNUVUZCU1ZBc1JVRkJSWGxLTEZGQlFXcERPMEZCUVRCRExFdEJRUzlFTEVOQlFUTkRMRU5CUVdwTk8wRkJRVGhUTEV0QlFVVTJReXhOUVVGR0xFZEJRVk1zVlVGQlUzUk5MRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdVN1FVRkJReXhSUVVGSlF5eEpRVUZGVUN4RlFVRkZMRU5CUVVZc1EwRkJUaXhEUVVGWExFOUJRVTlOTEUxQlFVbFFMRWxCUVVVc1ZVRkJVVUVzUTBGQlVpeEhRVUZWTEVkQlFXaENMRWRCUVhGQ0xFMUJRVWxETEVWQlFVVXJReXhOUVVGT0xFbEJRV01zVFVGQlNYaERMRVZCUVVWcFNpeFJRVUZ3UWl4SFFVRTJRbkJJTEVWQlFVVnJTeXhKUVVGR0xFTkJRVTlKTEdWQlFWQXNRMEZCZFVKdVRTeERRVUYyUWl4RlFVRjVRbElzUTBGQmVrSXNTVUZCTkVJc1EwRkJRMUVzUTBGQlJDeERRVUUxUWl4SFFVRm5ReXhGUVVFM1JDeEhRVUZuUlRaQ0xFVkJRVVZyU3l4SlFVRkdMRU5CUVU5TExFOUJRVkFzUTBGQlpUVk5MRU5CUVdZc1JVRkJhVUp4UXl4RlFVRkZiVVFzU1VGQlJpeERRVUZQZGtZc1EwRkJVQ3hGUVVGVExGVkJRVk5FTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU4c1RVRkJTVUVzUlVGQlJYbEtMRkZCUVdJN1FVRkJjMElzUzBGQk0wTXNRMEZCYWtJc1EwRkJOVVk3UVVGQk1rb3NSMEZCTDB3c1JVRkJaMDF3U0N4RlFVRkZReXhGUVVGR0xFTkJRVXN3UWl4TlFVRk1MRU5CUVZrc1JVRkJRM1ZKTEUxQlFVc3NZMEZCVTNaTkxFTkJRVlFzUlVGQlZ6dEJRVUZETEZWQlFVbERMRU5CUVVvN1FVRkJRU3hWUVVGTlRTeERRVUZPTzBGQlFVRXNWVUZCVVVNc1NVRkJSU3hMUVVGTGQwTXNUVUZCWmp0QlFVRkJMRlZCUVhOQ2RrTXNTVUZCUlN4SlFVRjRRaXhEUVVFMlFpeEpRVUZITEZsQlFWVXNUMEZCVDFRc1EwRkJjRUlzUlVGQmMwSXNUMEZCVHl4TFFVRkxiVVFzVTBGQlRDeERRVUZsWkN4RlFVRkZja01zUTBGQlJpeEZRVUZMYzAwc1RVRkJUQ3hEUVVGWkxGbEJRVlU3UVVGQlF5eGhRVUZKY2swc1NVRkJSU3hEUVVGT0xFVkJRVkZCTEVsQlFVVlBMRU5CUVZZc1JVRkJXVkFzUjBGQldqdEJRVUZuUWl4alFVRkhiME1zUlVGQlJUaExMRkZCUVVZc1EwRkJWekZOTEVWQlFVVlNMRU5CUVVZc1EwRkJXQ3hGUVVGblFpeEpRVUZvUWl4RFFVRklMRVZCUVhsQ0xFOUJRVTBzUTBGQlF5eERRVUZRTzBGQlFYcERPMEZCUVd0RUxFOUJRWHBGTEVOQlFXWXNRMEZCVUN4RFFVRnJSeXhMUVVGSlRTeEpRVUZGTEV0QlFVczBReXhUUVVGTUxFTkJRV1VzUlVGQlppeERRVUZHTEVWQlFYRkNiRVFzU1VGQlJTeERRVUV6UWl4RlFVRTJRa0VzU1VGQlJVOHNRMEZCTDBJc1JVRkJhVU5RTEVkQlFXcERPMEZCUVhGRGIwTXNWVUZCUld0TExFbEJRVVlzUTBGQlQzWk5MRU5CUVZBc1JVRkJVMU1zUlVGQlJWSXNRMEZCUml4RFFVRlVMRVZCUVdOTkxFTkJRV1E3UVVGQmNrTXNUMEZCYzBRc1QwRkJUME1zU1VGQlJTeERRVUZHTEVkQlFVazJRaXhGUVVGRmIwd3NWVUZCUml4RFFVRmhiRTRzUTBGQllpeERRVUZLTEVkQlFXOUNRU3hEUVVFelFqdEJRVUUyUWl4TFFVRXhVQ3hGUVVFeVVDdE1MRkZCUVU4c1owSkJRVk4wVFN4RFFVRlVMRVZCUVZjN1FVRkJReXhoUVVGUExFdEJRVXR0UkN4VFFVRk1MRU5CUVdWMVJDeEZRVUZGTEVsQlFVWXNSVUZCVHpGSExFdEJRVWNzUlVGQlZpeEZRVUZoTEVOQlFVTXNRMEZCWkN4RFFVRm1MRU5CUVZBN1FVRkJkME1zUzBGQmRGUXNSVUZCZFZSNVR5eExRVUZKTEdGQlFWTjZUeXhEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQTEV0QlFVdHRSQ3hUUVVGTUxFTkJRV1YxUkN4RlFVRkZMRWxCUVVZc1JVRkJUekZITEV0QlFVY3NSVUZCVml4RlFVRmhMRU5CUVVNc1EwRkJaQ3hEUVVGbUxFTkJRVkE3UVVGQmQwTXNTMEZCTDFjc1JVRkJaMWcwVWl4SlFVRkhMRmxCUVZNMVVpeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRk5MRU5CUVVNc1EwRkJRekJITEVWQlFVVXNTVUZCUml4RlFVRlBMRmxCUVZVc1QwRkJUekZITEVOQlFXcENMRWxCUVc5Q2MwY3NSVUZCUlRaRUxFbEJRVVlzUTBGQlQyNUxMRU5CUVZBc1EwRkJjRUlzUjBGQk9FSnhReXhGUVVGRmNrTXNRMEZCUml4RFFVRTVRaXhIUVVGdFEwRXNTMEZCUnl4RlFVRTNReXhGUVVGblJDeERRVUZETEVOQlFXcEVMRVZCUVc5RVowUXNUVUZCTlVRN1FVRkJiVVVzUzBGQmJHTXNSVUZCV2l4RFFVRm9UU3hEUVVGcGNFSXNTVUZCU1RSRUxFTkJRVW83UVVGQlFTeE5RVUZOUXl4SlFVRkZMSEZEUVVGU08wRkJRVUVzVFVGQk9FTkRMRWxCUVVWNlJTeEZRVUZGUXl4RlFVRkdMRU5CUVV0RExFbEJRVXdzUjBGQlZTeFZRVUZUZGtNc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRk5MRU5CUVdJc1JVRkJaVHRCUVVGRExGRkJRVWxGTEVOQlFVb3NSVUZCVFVjc1EwRkJUaXhEUVVGUkxFbEJRVWNzUTBGQlExb3NRMEZCU2l4RlFVRk5MRTlCUVU4c1NVRkJVQ3hEUVVGWkxFbEJRVWRQTEVsQlFVVkJMRXRCUVVkeFJ5eERRVUZNTEVWQlFVOHNXVUZCVlN4UFFVRlBOVWNzUTBGQk0wSXNSVUZCTmtJN1FVRkJReXhWUVVGSFV5eEpRVUZGTEZGQlFVMVVMRVZCUVVVc1EwRkJSaXhEUVVGT0xFbEJRVmtzVVVGQlRVRXNSVUZCUlVFc1JVRkJSV2RFTEUxQlFVWXNSMEZCVXl4RFFVRllMRU5CUVd4Q0xFbEJRV2xEYUVRc1JVRkJSV2RFTEUxQlFVWXNTVUZCVlN4RFFVRXpReXhIUVVFMlF5eERRVUZETEVsQlFVUXNSVUZCVFdoRUxFTkJRVTRzUlVGQlVTeEpRVUZTTEVOQlFUZERMRWRCUVRKRU5rY3NSVUZCUldkRUxFbEJRVVlzUTBGQlR6ZEtMRU5CUVZBc1EwRkJOMFFzUlVGQmRVVXNRMEZCUTFNc1EwRkJSQ3hKUVVGSkxFTkJRVU5CTEVWQlFVVXNRMEZCUml4RFFVRkVMRWxCUVU5U0xFTkJRWEpHTEVWQlFYVkdMRTlCUVUwc1EwRkJRMEVzUTBGQlJDeEpRVUZKUVN4RlFVRkZOa01zVFVGQlRpeEhRVUZoTEVOQlFVTTNReXhMUVVGSFRTeERRVUZLTEVWQlFVOW5UU3hKUVVGUUxFTkJRVmwyVFN4RFFVRmFMRU5CUVdJc1IwRkJORUlzUzBGQlN5dERMRmRCUVV3c1EwRkJhVUk1UXl4RFFVRnFRaXhGUVVGdlFuTk5MRWxCUVhCQ0xFTkJRWGxDZGswc1EwRkJla0lzUTBGQmJFTXNRMEZCT0VRc1NVRkJSMU1zUlVGQlJTeERRVUZHTEVOQlFVZ3NSVUZCVVR0QlFVRkRMRmxCUVVkU0xFbEJRVVZCTEdGQlFXRnZReXhEUVVGaUxFZEJRV1Z3UXl4RlFVRkZMRU5CUVVZc1EwRkJaaXhIUVVGdlFrRXNRMEZCZEVJc1JVRkJkMEp2UXl4RlFVRkZaU3hMUVVGR0xFTkJRVkVzU1VGQlVpeEZRVUZoWml4RlFVRkZkMUFzVTBGQlJpeERRVUZaY0ZJc1JVRkJSU3hEUVVGR0xFTkJRVm9zUlVGQmFVSlNMRXRCUVVkQkxFVkJRVVYzU2l4UlFVRk1MRWRCUVdONFNpeEZRVUZGTWtvc1lVRkJSaXhKUVVGcFFqTktMRU5CUVM5Q0xFZEJRV2xEVHl4RFFVRnNSQ3hGUVVGdlJDeERRVUZETEVOQlFYSkVMRU5CUVdJc1EwRkJlRUlzUlVGQk9FWm5SeXhGUVVGRk1rUXNTVUZCUml4RFFVRlBNVW9zUlVGQlJTeERRVUZHTEVOQlFWQXNTMEZCWXpSQ0xFVkJRVVUyUWl4aFFVRkdMRU5CUVdkQ2FrVXNRMEZCYUVJc1EwRkJMMGNzUlVGQmEwa3NTMEZCU1ZFc1EwRkJTaXhKUVVGVFVpeERRVUZVTzBGQlFWZHZReXhaUVVGRk5FSXNWVUZCUml4RFFVRmhMRXRCUVV0NFJDeERRVUZNTEVOQlFXSXNTVUZCYzBJc1MwRkJTMEVzUTBGQlRDeEZRVUZSVWl4RlFVRkZVU3hEUVVGR0xFTkJRVklzUTBGQmRFSXNSMEZCYjBNc1MwRkJTelpOTEVsQlFVd3NRMEZCVlRkTkxFTkJRVllzUlVGQldWSXNSVUZCUlZFc1EwRkJSaXhEUVVGYUxFTkJRWEJETzBGQlFWZ3NVMEZCYVVVc1QwRkJUeXhKUVVGUU8wRkJRVmtzWTBGQlQwY3NTVUZCUlVvc1JVRkJSWE5LTEdOQlFVWXNRMEZCYVVKeVNpeEZRVUZGTEVOQlFVWXNRMEZCYWtJc1EwRkJSaXhGUVVGNVFrY3NUVUZCU1N4TFFVRkxMRU5CUVV3c1NVRkJVVUVzUTBGQlVpeEZRVUZWTEV0QlFVdHZReXhOUVVGTUxFZEJRVmtzUTBGQk1VSXNRMEZCZWtJc1JVRkJjMFFzU1VGQk4wUTdRVUZCYTBVc1dVRkJUMmhFTEVWQlFVVjVTaXhSUVVGR0xFbEJRVmtzUzBGQlN5eERRVUZNTEVsQlFWRjZTaXhEUVVGU0xFVkJRVlVzUzBGQlMyZEVMRTFCUVV3c1IwRkJXU3hEUVVGMFFpeEZRVUYzUWl4SlFVRndReXhKUVVFd1ExZ3NSVUZCUlRSQ0xGVkJRVVlzUTBGQllXcEZMRU5CUVdJc1NVRkJaMElzUzBGQlN5eERRVUZNTEV0QlFWTlBMRVZCUVVWMVVpeExRVUZZTEVkQlFXbENkbElzUlVGQlJYVlNMRXRCUVVZc1EwRkJVVGxTTEVOQlFWSXNRMEZCYWtJc1IwRkJORUpCTEVWQlFVVnhReXhEUVVGR0xFTkJRVFZETEVkQlFXbEVRU3hGUVVGRmFVUXNVMEZCUml4RFFVRlpkRVlzUTBGQldpeEZRVUZqTEVsQlFXUXNRMEZCYkVjN1FVRkJjMGdzUjBGQmRuRkNMRU5CUVhkeFFqaEhMRVZCUVVWcVJTeFRRVUZHTEVkQlFWbFNMRVZCUVVWRExFVkJRV1FzUlVGQmFVSnpSU3hKUVVGRmRrVXNSVUZCUlRkQ0xFTkJRVVlzUTBGQmJrSXNRMEZCZDBJc1NVRkJTWFZITEVsQlFVVXNaME5CUVU0N1FVRkJRU3hOUVVGMVEwTXNTVUZCUlN4RlFVRkRLMHNzVlVGQlV5eERRVUZETEVOQlFWZ3NSVUZCWVVNc1ZVRkJVeXhEUVVGRExFTkJRWFpDTEVWQlFYbENla2tzVFVGQlN5eERRVUZETEVOQlFTOUNMRVZCUVdsRE1Fa3NUVUZCU3l4RFFVRkRMRU5CUVhaRExFVkJRWHBETEVOQlFXMUdOVkFzUlVGQlJVTXNSVUZCUml4RFFVRkxNRUlzVFVGQlRDeERRVUZaTEVWQlFVTXdTeXhMUVVGSkxHRkJRVk14VHl4RFFVRlVMRVZCUVZjN1FVRkJReXhWUVVGSlF5eEpRVUZGYjBNc1JVRkJSWEpETEVOQlFVWXNSVUZCU1N4SlFVRktMRU5CUVU0N1FVRkJRU3hWUVVGblFrOHNTVUZCUlU0c1JVRkJSU3RETEUxQlFYQkNMRU5CUVRKQ0xFOUJRVThzUzBGQlMzTktMRTFCUVV3c1EwRkJXU3haUVVGVk8wRkJRVU1zWVVGQlNTeEpRVUZKZEUwc1NVRkJSU3hEUVVGV0xFVkJRVmxCTEVsQlFVVlBMRU5CUVdRc1JVRkJaMEpRTEVkQlFXaENPMEZCUVc5Q0xHTkJRVWR4UXl4RlFVRkZPRXNzVVVGQlJpeERRVUZYTEVsQlFWZ3NSVUZCWjBKc1RpeEZRVUZGUkN4RFFVRkdMRU5CUVdoQ0xFTkJRVWdzUlVGQmVVSXNUMEZCVFN4RFFVRkRMRU5CUVZBN1FVRkJOME03UVVGQmMwUXNUMEZCTjBVc1EwRkJVRHRCUVVGelJpeExRVUZzU1N4RlFVRnRTV3RUTEZOQlFWRXNhVUpCUVZOc1V5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExGVkJRVWxOTEVOQlFVbzdRVUZCUVN4VlFVRk5ReXhKUVVGRkxFTkJRVkk3UVVGQlFTeFZRVUZWUXl4SlFVRkZMRXRCUVV0MVF5eE5RVUZxUWp0QlFVRkJMRlZCUVhkQ2NFTXNTVUZCUlN4RlFVRXhRanRCUVVGQkxGVkJRVFpDUlN4SlFVRkZMRmxCUVZVc1QwRkJUMlFzUTBGQmFrSXNTVUZCYjBKeFF5eEZRVUZGY2tNc1EwRkJSaXhEUVVGdVJDeERRVUYzUkN4SlFVRkhMRU5CUVVOelJ5eEZRVUZGTmtRc1NVRkJSaXhEUVVGUGJrc3NRMEZCVUN4RFFVRktMRVZCUVdNc1QwRkJTMUVzU1VGQlJVTXNRMEZCVUN4RlFVRlRSQ3hIUVVGVU8wRkJRV0VzWVVGQlNVUXNTVUZCUlN4TFFVRkxReXhEUVVGTUxFTkJRVTRzUlVGQlkwUXNTMEZCUjBFc1RVRkJTVTRzUTBGQmNrSXNSVUZCZFVKTkxFbEJRVVZCTEVWQlFVVXlRaXhWUVVFelFqdEJRVUZ6UXl4alFVRkhNMElzUlVGQlJXdEtMRkZCUVVZc1IwRkJWeXhGUVVGWUxFdEJRV2RDTTBrc1NVRkJSVUVzUlVGQlJYRlNMRXRCUVVZc1EwRkJVVFZTTEVOQlFWSXNTVUZCVnl4RFFVRkRMRU5CUVdRc1IwRkJaMElzVFVGQlNVRXNSVUZCUld0S0xGRkJRVTRzU1VGQlowSndTQ3hGUVVGRmEwc3NTVUZCUml4RFFVRlBTU3hsUVVGUUxFTkJRWFZDY0Uwc1EwRkJka0lzUlVGQmVVSlFMRU5CUVhwQ0xFTkJRV2hFTEVOQlFVZ3NSVUZCWjBZN1FVRkJRMWtzWTBGQlJVc3NTVUZCUml4RFFVRlBWaXhEUVVGUUxFVkJRVlU3UVVGQlRUdEJRVUYyU1R0QlFVRmlMRTlCUVc5S0xFOUJRVThzUzBGQlN6UkRMRk5CUVV3c1EwRkJaWFpETEVWQlFVVnZReXhOUVVGR0xFZEJRVk1zUTBGQlZDeEhRVUZYV0N4RlFVRkZiMHdzVlVGQlJpeERRVUZoTjAwc1EwRkJZaXhEUVVGWUxFZEJRVEpDUVN4RFFVRXhReXhEUVVGUU8wRkJRVzlFTEV0QlFYWmhMRVZCUVhkaGRWSXNUMEZCVFN4bFFVRlRibE1zUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCVDBFc1NVRkJSU3haUVVGVkxFOUJRVTlCTEVOQlFXcENMRWRCUVcxQ2EwSXNSVUZCUlZNc1NVRkJSaXhEUVVGUFZTeEZRVUZGY2tNc1EwRkJSaXhEUVVGUUxFVkJRVmtzUzBGQlN5eERRVUZNTEVOQlFWb3NRMEZCYmtJc1IwRkJkME5yUWl4RlFVRkZVeXhKUVVGR0xFTkJRVThzU1VGQlVDeEZRVUZaTTBJc1JVRkJSVGhETEUxQlFVWXNSMEZCVXpsRExFVkJRVVVzUTBGQlJpeERRVUZVTEVkQlFXTkJMRU5CUVRGQ0xFTkJRVEZETEVkQlFYVkZMRXRCUVVzc1EwRkJUQ3hMUVVGVExFdEJRVXNzUTBGQlRDeEZRVUZSYTBNc1ZVRkJha0lzUjBGQk5FSXNTMEZCUzNkQ0xFdEJRVXdzUjBGQllUQlBMRTlCUVdJc1IwRkJkVUp3VUN4TlFVRnVSQ3hIUVVFd1JDeERRVUZETEVOQlFYcEpPMEZCUVRKSkxFdEJRWEpyUWl4RlFVRnphMEp4VUN4TFFVRkpMR0ZCUVZOeVV5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExHRkJRVThzUzBGQlMydEVMRk5CUVV3c1EwRkJaV1FzUlVGQlJXOU1MRlZCUVVZc1EwRkJZWEJNTEVWQlFVVmxMRXRCUVVZc1EwRkJVU3hMUVVGTFJpeEhRVUZNTEVWQlFWSXNSVUZCYlVKaUxFVkJRVVZ5UXl4RFFVRkdMRVZCUVVsRExFTkJRVW9zUTBGQmJrSXNRMEZCWWl4RFFVRm1MRU5CUVZBN1FVRkJaMFVzUzBGQmVIQkNMRVZCUVhsd1FuRlRMRk5CUVZFc2FVSkJRVk4wVXl4RFFVRlVMRVZCUVZjN1FVRkJReXhoUVVGUExFdEJRVXR4VXl4SFFVRk1MRU5CUVZNc1VVRkJUWEpUTEVOQlFVNHNSMEZCVVN4TFFVRkxjVVFzVlVGQllpeEhRVUYzUWl4TFFVRkxRU3hWUVVGTUxFTkJRV2RDYVVvc1RVRkJhRUlzUTBGQmRVSjBUU3hEUVVGMlFpeERRVUZxUXl4RFFVRlFPMEZCUVcxRkxFdEJRV2gyUWl4RlFVRmFMRVZCUVN0MlFpeFRRVUZUYVVnc1EwRkJWQ3hEUVVGWGFrZ3NRMEZCV0N4RlFVRmhReXhEUVVGaUxFVkJRV1U3UVVGQlF5eFhRVUZOTEVOQlFVTkVMRWxCUVVWQkxFVkJRVVZETEVOQlFVWXNRMEZCU0N4TFFVRlZMRTFCUVVsRUxFVkJRVVY1U2l4UlFVRjBRaXhKUVVGblF5eFBRVUZQZWtvc1EwRkJVRHRCUVVGVExFdEJRVVZ6UkN4SlFVRkdMRU5CUVU4c1JVRkJRM0ZOTEZGQlFVOHNaMEpCUVZNelVDeERRVUZVTEVWQlFWYzdRVUZCUXl4VlFVRkpReXhKUVVGRlJDeEZRVUZGYTBNc1ZVRkJVaXhEUVVGdFFpeFBRVUZQYWtNc1MwRkJSeXhQUVVGTFFTeEZRVUZGZDBvc1VVRkJWaXhIUVVGdFFuaEtMRU5CUVc1Q0xFZEJRWEZDTEVsQlFUVkNPMEZCUVdsRExFdEJRWGhGTEVWQlFYbEZjMU1zVTBGQlVTeHBRa0ZCVTNaVExFTkJRVlFzUlVGQlZ6dEJRVUZETEdGQlFVOXRSeXhGUVVGRmJrY3NRMEZCUml4RlFVRkpMRmxCUVVvc1EwRkJVRHRCUVVGNVFpeExRVUYwU0N4RlFVRjFTSGRUTEdOQlFXRXNjMEpCUVZONFV5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVTBzUTBGQllpeEZRVUZsTzBGQlFVTXNZVUZCVHpSR0xFVkJRVVZ1Unl4RFFVRkdMRVZCUVVrc1dVRkJTaXhGUVVGcFFrOHNRMEZCYWtJc1EwRkJVRHRCUVVFeVFpeExRVUV2U3l4RlFVRm5UR2RLTEUxQlFVc3NZMEZCVTNaS0xFTkJRVlFzUlVGQlZ6dEJRVUZETEdGQlFVOXBTQ3hGUVVGRmFrZ3NRMEZCUml4RlFVRkpMR0ZCUVVvc1EwRkJVRHRCUVVFd1FpeExRVUV6VGl4RlFVRTBUbWxUTEUxQlFVc3NZMEZCVTJwVExFTkJRVlFzUlVGQlZ6dEJRVUZETEdGQlFVOXBTQ3hGUVVGRmFrZ3NRMEZCUml4RlFVRkpMR2xDUVVGS0xFTkJRVkE3UVVGQk9FSXNTMEZCTTFFc1JVRkJORkY1VXl4VFFVRlJMR2xDUVVGVGVsTXNRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJUMjFITEVWQlFVVnVSeXhEUVVGR0xFVkJRVWtzWVVGQlNpeERRVUZRTzBGQlFUQkNMRXRCUVRGVUxFVkJRVEpVYjFNc1UwRkJVU3hwUWtGQlUzQlRMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVTl0Unl4RlFVRkZia2NzUTBGQlJpeEZRVUZKTEdsQ1FVRktMRU5CUVZBN1FVRkJPRUlzUzBGQk4xY3NSVUZCT0Zjd1V5eFhRVUZWTEcxQ1FVRlRNVk1zUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpUdEJRVUZETEdGQlFVODBSaXhGUVVGRmJrY3NRMEZCUml4RlFVRkpMR0ZCUVVvc1JVRkJhMEpQTEVOQlFXeENMRU5CUVZBN1FVRkJORUlzUzBGQmNHRXNSVUZCY1dGdlV5eFhRVUZWTEcxQ1FVRlRNMU1zUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpUdEJRVUZETEdGQlFVODBSaXhGUVVGRmJrY3NRMEZCUml4RlFVRkpMR2xDUVVGS0xFVkJRWE5DVHl4RFFVRjBRaXhEUVVGUU8wRkJRV2RETEV0QlFTOWtMRVZCUVdkbGNWTXNWVUZCVXl4clFrRkJVelZUTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU5eFJ5eEZRVUZGTEVOQlFVTnlSeXhGUVVGRmEwTXNWVUZCUml4SlFVRmpMRVZCUVdZc1JVRkJiVUkwVEN4VlFVRnlRaXhGUVVGblF6bE9MRU5CUVdoRExFTkJRVkE3UVVGQk1FTXNTMEZCTDJoQ0xFVkJRV2RwUWl0U0xGVkJRVk1zYTBKQlFWTXZVaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQY1Vjc1JVRkJSWEpITEVWQlFVVTRUaXhWUVVGS0xFTkJRVkE3UVVGQmRVSXNTMEZCTld0Q0xFVkJRVFpyUW10RkxGVkJRVk1zYTBKQlFWTm9VeXhEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQZFVjc1JVRkJSWFpITEVOQlFVWXNSVUZCU1N4UlFVRktMRWxCUVdOQkxFVkJRVVUyVXl4bFFVRm9RaXhKUVVGcFEzUk5MRVZCUVVWMlJ5eERRVUZHTEVWQlFVa3NWVUZCU2l4TlFVRnJRa0VzU1VGQlJVRXNSVUZCUlRoVExFOUJRVVlzU1VGQlZ6bFRMRU5CUVM5Q0xFZEJRV3REY1VNc1JVRkJSV1VzUzBGQlJpeERRVUZSTEVWQlFWSXNSVUZCVjNCRUxFVkJRVVYzU2l4VlFVRmlMRU5CUVc1RkxFTkJRVkE3UVVGQmIwY3NTMEZCZEhOQ0xFVkJRVkFzUlVGQkszTkNMRlZCUVZONFNpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRGIwTXNUVUZCUlVNc1JVRkJSaXhEUVVGTGRFTXNRMEZCVEN4SlFVRlJMRlZCUVZOUExFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVNc1ZVRkJTVU1zU1VGQlJUUkNMRVZCUVVWclFpeEhRVUZHTEVOQlFVMHNTVUZCVGl4RlFVRlhkRVFzUTBGQldDeEZRVUZoVFN4RFFVRmlMRU5CUVU0c1EwRkJjMElzVDBGQlRTeFpRVUZWVUN4RlFVRkZZU3hMUVVGR0xFTkJRVkVzUTBGQlF5eERRVUZVTEVOQlFWWXNTMEZCZDBKTUxFbEJRVVZFTEVOQlFURkNMRWRCUVRaQ1F5eExRVUZITEZsQlFWVXNUMEZCVDBFc1EwRkJjRUlzUzBGQmQwSkRMRWxCUVVVMFFpeEZRVUZGYVVzc1RVRkJSaXhEUVVGVE9Vd3NRMEZCVkN4RlFVRlhReXhEUVVGWUxFTkJRVEZDTEVOQlFUZENMRVZCUVhORkxFdEJRVXQxUXl4TlFVRk1MRWRCUVZrc1EwRkJXaXhMUVVGblFtZEZMRVZCUVVWb1NDeERRVUZHTEV0QlFVMXhReXhGUVVGRmIwd3NWVUZCUml4RFFVRmhhRTRzUTBGQllpeERRVUZPTEVWQlFYTkNjMGNzUlVGQlJXOUVMRWxCUVVZc1EwRkJUMjVMTEVOQlFWQXNTMEZCVjFNc1JVRkJSWE5UTEU5QlFVWXNSVUZCYWtRc1EwRkJkRVVzUlVGQmIwa3NTMEZCU3pWUUxGTkJRVXdzUTBGQlpURkRMRU5CUVdZc1EwRkJNVWs3UVVGQk5Fb3NTMEZCZUUwN1FVRkJlVTBzUjBGQmREWkNMRVZCUVhjMlFpeEpRVUZKZVVjc1NVRkJSU3h0UWtGQlRpeERRVUV3UWl4VFFVRlRReXhEUVVGVUxFTkJRVmR1U0N4RFFVRllMRVZCUVdFN1FVRkJReXhSUVVGSlF5eEpRVUZGTEVWQlFVNHNRMEZCVXl4UFFVRlBiME1zUlVGQlJXbENMRWxCUVVZc1EwRkJUM1JFTEVWQlFVVnJUeXhMUVVGR0xFTkJRVkZvU0N4RFFVRlNMRXRCUVZrc1JVRkJia0lzUlVGQmMwSXNWVUZCVTJ4SUxFTkJRVlFzUlVGQlYwOHNRMEZCV0N4RlFVRmhPMEZCUVVOT0xGRkJRVVZOTEVOQlFVWXNTVUZCU3l4RFFVRkRMRU5CUVU0N1FVRkJVU3hMUVVFMVF5eEhRVUU0UTA0c1EwRkJja1E3UVVGQmRVUXNTMEZCUlN0VExGTkJRVVlzUjBGQldTeFZRVUZUYUZRc1EwRkJWQ3hGUVVGWE8wRkJRVU5CTEZGQlFVVXNXVUZCVlN4UFFVRlBRU3hEUVVGcVFpeEhRVUZ0UW0xSUxFVkJRVVZ1U0N4RFFVRkdMRU5CUVc1Q0xFZEJRWGRDY1VNc1JVRkJSVEpDTEUxQlFVWXNRMEZCVXl4RlFVRlVMRVZCUVZsb1JTeERRVUZhTEVOQlFURkNMRU5CUVhsRExFbEJRVWxETEVOQlFVbzdRVUZCUVN4UlFVRk5UU3hEUVVGT08wRkJRVUVzVVVGQlVVTXNRMEZCVWp0QlFVRkJMRkZCUVZWRExFTkJRVlk3UVVGQlFTeFJRVUZaUnl4SlFVRkZMRVZCUVdRN1FVRkJRU3hSUVVGcFFrVXNTVUZCUlN4RlFVRnVRanRCUVVGQkxGRkJRWE5DUlN4SlFVRkZMRU5CUVVNc1EwRkJla0k3UVVGQlFTeFJRVUV5UWtVc1NVRkJSU3hUUVVGR1FTeERRVUZGTEVkQlFWVTdRVUZCUXl4WFFVRkpWQ3hKUVVGRlFTeExRVUZIVkN4RlFVRkZhVlFzU1VGQlVDeEZRVUZaZWxNc1NVRkJSVkFzU1VGQlJTeERRVUZETEVOQlFYSkNMRVZCUVhWQ1lTeEZRVUZGYTBNc1RVRkJla0lzUlVGQlowTm9ReXhKUVVGRkxFTkJRVU1zUTBGQmJrTXNSVUZCY1VNN1FVRkJRMVFzV1VGQlJVOHNSVUZCUlN0S0xFdEJRVVlzUlVGQlJpeERRVUZaTEU5QlFVMHNSVUZCUlRkS0xFTkJRVVlzUjBGQlNVb3NSVUZCUlc5RExFMUJRVm83UVVGQmJVSndReXhaUVVGRlNTeERRVUZHTEVWQlFVdDNReXhMUVVGTUxFTkJRVmRxUkN4RlFVRkZMRU5CUVVZc1EwRkJXQ3hGUVVGblFrRXNSVUZCUlN4RFFVRkdMRU5CUVdoQ0xFMUJRWGRDTEVOQlFVTXNRMEZCZWtJc1NVRkJORUpRTEVWQlFVVnJWQ3hYUVVFNVFpeExRVUUwUTJ4VExFbEJRVVZLTEVWQlFVVnZReXhOUVVGS0xFVkJRVmQ2UXl4SlFVRkZMRU5CUVVNc1EwRkJNVVE3UVVGQmJrSTdRVUZCWjBZc1UwRkJSVFJUTEUxQlFVWXNTMEZCVnpWVExFbEJRVVVzUTBGQlF5eERRVUZrTEVkQlFXbENUaXhKUVVGRkxFTkJRVU1zUTBGQmNFSXNSVUZCYzBKUkxFMUJRVWxITEVsQlFVVk1MRWxCUVVVc1JVRkJSaXhIUVVGTExFVkJRVmdzUTBGQmRFSTdRVUZCY1VNc1MwRkJMMDA3UVVGQlFTeFJRVUZuVG1Fc1NVRkJSU3hGUVVGRGFWSXNTMEZCU1N4bFFVRlZPMEZCUVVNc1pVRkJUM3BTTEUxQlFVbE1MRXRCUVVjc1EwRkJRMDRzUTBGQlNpeExRVUZSWlN4SlFVRkZTaXhGUVVGRmIwTXNUVUZCUml4SFFVRlRMRU5CUVZnc1JVRkJZV3hETEVWQlFVVkhMRWxCUVVZc1EwRkJUMVlzUTBGQlVDeERRVUZ5UWl4SFFVRm5ReXhUUVVGVFF5eERRVUZVTEVOQlFWZFFMRU5CUVZnc1JVRkJZVHRCUVVGRGIwTXNXVUZCUldsQ0xFbEJRVVlzUTBGQlQzSkVMRU5CUVZBc1JVRkJVeXhWUVVGVFFTeERRVUZVTEVWQlFWZE5MRU5CUVZnc1JVRkJZVHRCUVVGRE9FSXNZMEZCUlRSQ0xGVkJRVVlzUTBGQllURkVMRU5CUVdJc1NVRkJaMEpRTEVWQlFVVjVVaXhOUVVGR0xFbEJRVlZ5VVN4RlFVRkZjMDRzUjBGQlJpeERRVUZOYms4c1EwRkJUaXhEUVVGV0xFbEJRVzlDU3l4RlFVRkZTeXhKUVVGR0xFTkJRVTlXTEVOQlFWQXNRMEZCY0VNc1IwRkJPRU5CTEV0QlFVZEJMRVZCUVVWNVF5eE5RVUZNTEVsQlFXRXNZVUZCVjFnc1JVRkJSWFZETEVsQlFVWXNRMEZCVDNKRkxFTkJRVkFzUTBGQmVFSXNTVUZCYlVORExFVkJRVVZFTEVOQlFVWXNRMEZCYWtZN1FVRkJjMFlzVjBGQk4wYzdRVUZCSzBjc1UwRkJOMGdzUTBGQk9FaHJSQ3hUUVVFNVNDeERRVUZvUXl4RlFVRjVTMnhFTEV0QlFVY3NRMEZCUTA0c1EwRkJTaXhKUVVGUGFVSXNSMEZCY0V3c1IwRkJlVXdzU1VGQmFFMDdRVUZCY1Uwc1QwRkJjazRzUlVGQmMwNXJVeXhSUVVGUExHdENRVUZWTzBGQlFVTXNaVUZCVHk5UkxFVkJRVVZwUWl4SlFVRkdMRU5CUVU5SExGTkJRVkFzUlVGQmFVSXNWVUZCVTNwRUxFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVNc1kwRkJTVTBzUTBGQlNpeERRVUZOTEU5QlFVMHNRMEZCUTBFc1NVRkJSVGhDTEVWQlFVVnJSQ3hQUVVGR0xFTkJRVlYwUml4RFFVRldMRVZCUVZsWExFTkJRVm9zUlVGQlkwd3NRMEZCWkN4RFFVRklMRWxCUVhGQ0xFTkJRVU1zUTBGQk5VSTdRVUZCT0VKTExHTkJRVVZ0UkN4TlFVRkdMRU5CUVZONFJDeERRVUZVTEVWQlFWY3NRMEZCV0N4SFFVRmpRU3hMUVVGSFV5eERRVUZJTEVsQlFVMUJMRWRCUVhCQ08wRkJRVGxDTzBGQlFYTkVMRk5CUVROR0xFZEJRVFpHTEVsQlFYQkhPMEZCUVhsSExFOUJRV3BXTEVWQlFXdFdNRTRzUzBGQlNTeGhRVUZUTVU4c1EwRkJWQ3hGUVVGWE8wRkJRVU1zWlVGQlQwRXNTVUZCUlhGRExFVkJRVVZyUkN4UFFVRkdMRU5CUVZWMlJpeERRVUZXTEVWQlFWbFpMRU5CUVZvc1NVRkJaU3hEUVVGRExFTkJRV3hDTEVkQlFXOUNRU3hGUVVGRmIwTXNUVUZCUml4SFFVRlRMRU5CUVhCRE8wRkJRWE5ETEU5QlFYaFpMRVZCUVhsWk1FMHNUMEZCVFN4cFFrRkJWVHRCUVVGRExHVkJRVTg1VHl4TlFVRkpRU3hKUVVGRkxFVkJRVTRzUjBGQlZTeEpRVUZxUWp0QlFVRnpRaXhQUVVGb1lpeEZRVUZwWW5sVExGTkJRVkVzYlVKQlFWVTdRVUZCUXl4bFFVRlBOVk1zU1VGQlJVc3NTVUZCUlN4RlFVRktMRVZCUVU5R0xFbEJRVVZNTEVsQlFVVXNSVUZCV0N4RlFVRmpMRWxCUVhKQ08wRkJRVEJDTEU5QlFUbGtMRVZCUVN0a09Fa3NWVUZCVXl4dlFrRkJWVHRCUVVGRExHVkJRVTBzUTBGQlEzcEpMRU5CUVZBN1FVRkJVeXhQUVVFMVppeEZRVUUyWmpCVExFMUJRVXNzWjBKQlFWVTdRVUZCUXl4bFFVRlBOMU1zU1VGQlJVc3NTVUZCUlN4RlFVRktMRVZCUVU5UUxFdEJRVWRPTEVOQlFVZ3NTMEZCVDFjc1NVRkJSVXdzU1VGQlJTeEZRVUZZTEVOQlFWQXNSVUZCYzBJc1NVRkJOMEk3UVVGQmEwTXNUMEZCTDJsQ0xFVkJRV2RxUW1kVUxGRkJRVThzYTBKQlFWVTdRVUZCUXl4bFFVRk5MRU5CUVVNc1EwRkJRemxUTEVOQlFWSTdRVUZCVlN4UFFVRTFhMElzUlVGQk5tdENLMU1zVlVGQlV5eHJRa0ZCVTNoVUxFTkJRVlFzUlVGQlYwOHNRMEZCV0N4RlFVRmhPMEZCUVVNc1pVRkJUMFVzVFVGQlNVWXNTVUZCUlVFc1MwRkJSeXhGUVVGTUxFVkJRVkZCTEVsQlFVVXNRMEZCUTFBc1EwRkJSQ3hGUVVGSFR5eEZRVUZGVFN4TFFVRkdMRWRCUVZGT0xFVkJRVVZOTEV0QlFVWXNSVUZCVWl4SFFVRnJRazRzUTBGQmNrSXNRMEZCVml4RlFVRnJRMDhzUlVGQlJVY3NTVUZCUml4RFFVRlBWaXhEUVVGUUxFTkJRV3hETEVWQlFUUkRUaXhMUVVGSGFVSXNSMEZCYmtRc1IwRkJkMFFzU1VGQkwwUTdRVUZCYjBVc1QwRkJlSEZDTEVWQlFYbHhRblZUTEUxQlFVc3NaMEpCUVZVN1FVRkJReXhsUVVGUGNsTXNSVUZCUlc5VExGRkJRVVlzUTBGQlZ5eEpRVUZZTEVWQlFXZENMMUFzVTBGQmFFSXNSMEZCTWtJc1NVRkJiRU03UVVGQmRVTXNUMEZCYUhWQ0xFVkJRV2wxUW1sUkxFOUJRVTBzYVVKQlFWVTdRVUZCUXl4bFFVRk5MRU5CUVVNc1EwRkJRMnhVTEVOQlFWSTdRVUZCVlN4UFFVRTFka0lzUlVGQmJFNHNRMEZCWnpsQ0xFOUJRVTlaTEVOQlFWQTdRVUZCVXl4SFFVRXhhRU1zUTBGQk1taERMRk5CUVZOblJ5eERRVUZVTEVOQlFWZHdTQ3hEUVVGWUxFVkJRV0U3UVVGQlF5eFhRVUZQUVN4RFFVRlFPMEZCUVZNc1dVRkJVM0ZJTEVOQlFWUXNRMEZCVjNKSUxFTkJRVmdzUlVGQllUdEJRVUZETEZWQlFVMUJMRU5CUVU0N1FVRkJVU3haUVVGVGRVZ3NRMEZCVkN4RFFVRlhka2dzUTBGQldDeEZRVUZoUXl4RFFVRmlMRVZCUVdWTkxFTkJRV1lzUlVGQmFVSkRMRU5CUVdwQ0xFVkJRVzFDTzBGQlFVTXNVVUZCU1VNc1EwRkJTaXhEUVVGTkxFbEJRVWM3UVVGQlExUXNWMEZCUjNGRExFVkJRVVUwUWl4VlFVRkdMRU5CUVdGNFJDeEpRVUZGVkN4RlFVRkZNbFFzVDBGQmFrSXNRMEZCU0N4SFFVRTJRbXhVTEVWQlFVVnJRaXhKUVVGR0xFTkJRVTh6UWl4RFFVRlFMRVZCUVZVMFZDeEpRVUZXTEVOQlFXVXpWQ3hEUVVGbUxFVkJRV3RDTkZRc1NVRkJiRUlzUTBGQmRVSjBWQ3hEUVVGMlFpeERRVUUzUWl4SFFVRjFSRkFzUzBGQlIzRkRMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRjRSQ3hKUVVGRlZDeEZRVUZGT0ZRc1NVRkJha0lzUTBGQlNDeEhRVUV3UW5KVUxFVkJRVVZyUWl4SlFVRkdMRU5CUVU4elFpeERRVUZRTEVWQlFWTkRMRU5CUVZRc1JVRkJWMDBzUTBGQldDeERRVUV4UWl4SFFVRjNRMDRzUlVGQlJYVkVMRXRCUVVZc1EwRkJVU3hMUVVGTExFTkJRV0lzUlVGQlpTeERRVUZEZUVRc1EwRkJSQ3hGUVVGSllTeExRVUZLTEVOQlFWVk1MRU5CUVZZc1EwRkJaaXhEUVVFdlJqdEJRVUUwU0N4TFFVRm9TU3hEUVVGblNTeFBRVUZOVWl4RFFVRk9MRVZCUVZFN1FVRkJRMDhzVVVGQlJXbEVMRXRCUVVZc1EwRkJVU3hMUVVGTExFTkJRV0lzUlVGQlpTeERRVUZEZUVRc1EwRkJSQ3hEUVVGbU8wRkJRVzlDTzBGQlFVTXNTMEZCUldkRkxFMUJRVVlzUTBGQlV5eEZRVUZESzFBc1ZVRkJVeXhyUWtGQlV6bFVMRU5CUVZRc1JVRkJWenRCUVVGRExGVkJRVWxOTEVsQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVVRc1JVRkJWU3hWUVVGV0xFVkJRWEZDT0VJc1JVRkJSVEpSTEZOQlFVWXNRMEZCV1N4UlFVRmFMRU5CUVhKQ0xFVkJRVEpETTFFc1JVRkJSVEpSTEZOQlFVWXNRMEZCV1N4UlFVRmFMRU5CUVRORExFVkJRV2xGTEVOQlFXcEZMRU5CUVVRc1JVRkJjVVVzUTBGQlF5eFRRVUZFTEVWQlFWY3NUVUZCV0N4RlFVRnJRak5STEVWQlFVVXlVU3hUUVVGR0xFTkJRVmtzWVVGQldpeERRVUZzUWl4RlFVRTJRek5STEVWQlFVVXlVU3hUUVVGR0xFTkJRVmtzWVVGQldpeERRVUUzUXl4RlFVRjNSU3hEUVVGNFJTeEZRVUV3UlN4VlFVRXhSU3hEUVVGeVJTeEZRVUV5U2l4RFFVRkRMRkZCUVVRc1JVRkJWU3hOUVVGV0xFVkJRV2xDTTFFc1JVRkJSVEpSTEZOQlFVWXNRMEZCV1N4aFFVRmFMRU5CUVdwQ0xFVkJRVFJETTFFc1JVRkJSVEpSTEZOQlFVWXNRMEZCV1N4aFFVRmFMRU5CUVRWRExFVkJRWFZGTEVOQlFYWkZMRVZCUVhsRkxGVkJRWHBGTEVOQlFUTktMRU5CUVU0N1FVRkJRU3hWUVVGMVVIaFRMRWxCUVVVc1UwRkJlbEE3UVVGQlFTeFZRVUZ0VVVNc1NVRkJSU3hGUVVGRGRWUXNUMEZCVFN4cFFrRkJWVHRCUVVGRExHbENRVUZQZUZRc1EwRkJVRHRCUVVGVExGTkJRVE5DTEVWQlFUUkNlVlFzVVVGQlR5eHJRa0ZCVlR0QlFVRkRMR2xDUVVGUGNsUXNSVUZCUldkVUxFbEJRVVlzUTBGQlQyNVJMRk5CUVZBc1JVRkJhMEp2VVN4SlFVRnNRaXhEUVVGMVFuQlJMRk5CUVhaQ0xFZEJRV3RETEVsQlFYcERPMEZCUVRoRExGTkJRVFZHTEVWQlFUWkdMRk5CUVZFc1owSkJRVk42UkN4RFFVRlVMRVZCUVZjN1FVRkJReXhwUWtGQlQxTXNSVUZCUlhGVUxFbEJRVVlzUTBGQlR5eEpRVUZRTEVWQlFWazVWQ3hEUVVGYUxFTkJRVkE3UVVGQmMwSXNVMEZCZGtrc1JVRkJkMGxyVlN4TlFVRkxMR2RDUVVGVk8wRkJRVU1zWTBGQlNXeFZMRWxCUVVWNVJDeFRRVUZPTEVOQlFXZENMRTlCUVU5d1FpeEZRVUZGTUZJc1VVRkJSaXhEUVVGWExGVkJRVk01VkN4RFFVRlVMRVZCUVZjN1FVRkJRMjlETEdOQlFVVnBRaXhKUVVGR0xFTkJRVTh2UXl4RFFVRlFMRVZCUVZNc1ZVRkJVMEVzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhyUWtGQlNVTXNTVUZCUlRSQ0xFVkJRVVUwUWl4VlFVRkdMRU5CUVdGcVJTeEZRVUZGVVN4RlFVRkZMRU5CUVVZc1EwRkJSaXhEUVVGaUxFdEJRWFZDVWl4RlFVRkZVU3hGUVVGRkxFTkJRVVlzUTBGQlJpeERRVUUzUWl4RFFVRnhRMGtzUlVGQlJVb3NSVUZCUlN4RFFVRkdMRU5CUVVZc1JVRkJVU3haUVVGVk8wRkJRVU1zYjBKQlFVbFNMRWxCUVVWVExFdEJRVWRCTEVWQlFVVXJReXhMUVVGR0xFTkJRVkVzU1VGQlVpeEZRVUZoUXl4VFFVRmlMRU5CUVZRc1EwRkJhVU42UkN4TFFVRkhjVU1zUlVGQlJUUkNMRlZCUVVZc1EwRkJZV3BGTEVWQlFVVXlWQ3hQUVVGbUxFTkJRVWdzUjBGQk1rSXpWQ3hGUVVGRk1sUXNUMEZCUml4SFFVRlpVU3hSUVVGYUxFTkJRWEZDYkZVc1JVRkJSVzFWTEUxQlFYWkNMRVZCUVN0Q1VpeEpRVUV2UWl4RFFVRnZRek5VTEVWQlFVVnZWU3hQUVVGMFF5eEZRVUVyUTFJc1NVRkJMME1zUTBGQmIwUTFWQ3hGUVVGRmNWVXNUVUZCZEVRc1EwRkJNMElzUjBGQmVVWnlWU3hGUVVGRlR5eEZRVUZGTEVOQlFVWXNTVUZCU3l4TlFVRlFMRVZCUVdVc1NVRkJaaXhGUVVGdlFrTXNTVUZCUlN4RFFVRkRWQ3hEUVVGRUxFTkJRVVlzUjBGQlRYbEVMRk5CUVRGQ0xFTkJRWHBHTzBGQlFUaElMR1ZCUVd4TU8wRkJRVzlNTEdGQlFXaFFMRWRCUVd0UWVrUXNTVUZCUlN4SlFVRndVRHRCUVVGNVVDeFhRVUZvVWl4RlFVRnJVakpVTEU5QlFXeFNMRVZCUVZBN1FVRkJiVk1zVTBGQk0yTXNSVUZCTkdOSExFMUJRVXNzWTBGQlV6ZFVMRU5CUVZRc1JVRkJWMDhzUTBGQldDeEZRVUZoUXl4RFFVRmlMRVZCUVdVN1FVRkJReXhqUVVGSlJ5eEpRVUZGTEVOQlFVNHNRMEZCVVN4VFFVRlRSU3hEUVVGVUxFTkJRVmRpTEVOQlFWZ3NSVUZCWVUwc1EwRkJZaXhGUVVGbFF5eERRVUZtTEVWQlFXbENReXhEUVVGcVFpeEZRVUZ0UWp0QlFVRkRMRzFDUVVGUExGbEJRVlU3UVVGQlF5eHJRa0ZCU1U4c1NVRkJSU3hKUVVGT08wRkJRVUVzYTBKQlFWZEZMRWxCUVVWMVF5eFRRVUZpTzBGQlFVRXNhMEpCUVhWQ2NrTXNTVUZCUlN4aFFVRlZPMEZCUVVNc2IwSkJRVWx3UWl4RFFVRktMRVZCUVUxdlFpeERRVUZPTEVOQlFWRXNTVUZCUnl4RlFVRkZia0lzU1VGQlJWY3NRMEZCU2l4RFFVRklMRVZCUVZVN1FVRkJReXh6UWtGQlIxb3NTVUZCUlZFc1JVRkJSV2RFTEV0QlFVWXNRMEZCVVhoRExFTkJRVklzUlVGQlZVVXNRMEZCVml4RFFVRkdMRVZCUVdWc1FpeE5RVUZKVHl4RlFVRkZiMVFzVDBGQlJpeEZRVUYwUWl4RlFVRnJReXhOUVVGTkxFbEJRVWxaTEZOQlFVb3NRMEZCWXl3d1FrRkJaQ3hEUVVGT0xFTkJRV2RFYmxRc1NVRkJSWEJDTEUxQlFVa3NiMEpCUVdsQ1FTeERRVUZxUWl4NVEwRkJhVUpCTEVOQlFXcENMRTFCUVc5Q0xHTkJRVmtzVDBGQlQwRXNRMEZCTTBNc1MwRkJLME5CTEVWQlFVVTRWQ3hKUVVGdVJDeEZRVUYzUkhwU0xFVkJRVVUwUWl4VlFVRkdMRU5CUVdFM1F5eERRVUZpTEVsQlFXZENXQ3hKUVVGRlZ5eEZRVUZGVHl4SlFVRkdMRU5CUVU4elFpeERRVUZRTEVWQlFWTmpMRVZCUVVWR0xFTkJRVVlzUlVGQlNVd3NRMEZCU2l4RlFVRk5Oa2NzUTBGQlRpeEZRVUZSTTBjc1EwRkJVaXhEUVVGVUxFVkJRVzlDU3l4RlFVRkZSaXhEUVVGR0xFVkJRVWxNTEVOQlFVb3NSVUZCVFRoSExFTkJRVTRzUlVGQlVUVkhMRU5CUVZJc1EwRkJjRUlzUTBGQlJpeEpRVUZ0UTBjc1MwRkJTVkVzUlVGQlJVOHNTVUZCUml4RFFVRlBNMElzUTBGQlVDeEZRVUZUWXl4RlFVRkZSaXhEUVVGR0xFVkJRVWxNTEVOQlFVb3NSVUZCVFRaSExFTkJRVTRzUlVGQlVUTkhMRU5CUVZJc1EwRkJWQ3hGUVVGdlFrc3NSVUZCUlVZc1EwRkJSaXhGUVVGSlRDeERRVUZLTEVWQlFVMDRSeXhEUVVGT0xFVkJRVkUxUnl4RFFVRlNMRU5CUVhCQ0xFVkJRU3RDU3l4RlFVRkZSaXhEUVVGR0xFVkJRVWxNTEVOQlFVb3NSVUZCVFRaSExFTkJRVTRzUlVGQlVUZEhMRVZCUVVWcFZTeFZRVUZXTEVOQlFTOUNMRU5CUVhaRExFTkJRV2hDTEVsQlFTdEhhRlVzVFVGQlNUUkhMRU5CUVVvc1MwRkJVWEJITEVsQlFVVXNTMEZCU3l4RFFVRlFMRVZCUVZORkxFbEJRVVVzUTBGQlEyeENMRU5CUVVRc1EwRkJia0lzUjBGQmQwSXNRMEZCUTFNc1MwRkJSMFlzUlVGQlJXdFZMRmRCUVU0c1JVRkJiVUo2VkN4RFFVRnVRaXhGUVVGeFFrVXNRMEZCY2tJc1EwRkJka2tzUTBGQmVFUTdRVUZCZDA0N1FVRkJReXhsUVVGc1Z6dEJRVUZCTEd0Q1FVRnRWMGNzU1VGQlJWb3NTVUZCUlZjc1EwRkJSaXhIUVVGSkxGbEJRVlU3UVVGQlF5eHZRa0ZCUnp0QlFVRkRRVHRCUVVGSkxHbENRVUZTTEVOQlFWRXNUMEZCVFhCQ0xFTkJRVTRzUlVGQlVUdEJRVUZEY1VNc2IwSkJRVVV3VWl4UlFVRkdMRU5CUVZkWExHRkJRVmdzU1VGQk1FSnlVeXhGUVVGRk1GSXNVVUZCUml4RFFVRlhWeXhoUVVGWUxFTkJRWGxDTVZVc1EwRkJla0lzUlVGQk1rSnhRaXhGUVVGRmMxUXNWVUZCTjBJc1EwRkJNVUlzUlVGQmJVVXhWU3hKUVVGRkxFTkJRVVlzU1VGQlMxY3NRMEZCVEN4TFFVRlRTaXhOUVVGSk5rY3NRMEZCU2l4TFFVRlJja2NzU1VGQlJTeExRVUZMTEVOQlFWQXNSVUZCVTBVc1NVRkJSU3hEUVVGRGJFSXNRMEZCUkN4RFFVRnVRaXhIUVVGM1FrOHNSVUZCUlhGVkxGVkJRVVlzUTBGQllUVlVMRU5CUVdJc1JVRkJaVVVzUTBGQlppeERRVUZxUXl4RFFVRnVSVHRCUVVGMVNEdEJRVUZETEdWQlFUZG1MRU5CUVRobWFrSXNTVUZCUlc5Q0xFZEJRVVlzU1VGQlQyZENMRVZCUVVVd1VpeFJRVUZHTEVOQlFWZGpMRmxCUVZnc1MwRkJNRUo0VkN4RlFVRkZjMVFzVlVGQlJpeEhRVUZoZEZNc1JVRkJSVEJTTEZGQlFVWXNRMEZCVjJNc1dVRkJXQ3hGUVVGMlF5eEhRVUZyUlRkVkxFVkJRVVU0VlN4VlFVRkdMRU5CUVdGNlZDeERRVUZpTEVOQlFYcEZPMEZCUVRCR0xHRkJRVEZ0UWp0QlFVRXliVUlzYTBKQlFVOW5RaXhGUVVGRk1GSXNVVUZCUml4RFFVRlhMRlZCUVZNdlZDeERRVUZVTEVWQlFWYzdRVUZCUTA4c1kwRkJSU3hEUVVGR0xFVkJRVXNzUTBGQlRDeEZRVUZST0ZJc1IwRkJVaXhEUVVGWmRsSXNSVUZCUlN4RFFVRkdMRVZCUVVsa0xFTkJRVW9zUlVGQlRYRkRMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRjRSQ3hEUVVGaUxFbEJRV2RDUVN4RFFVRm9RaXhIUVVGclFqSkhMRU5CUVhoQ0xFVkJRVEJDY0Vnc1JVRkJSWGRWTEZWQlFUVkNMRU5CUVZvc1IwRkJjVVJxVlN4RlFVRkZMRU5CUVVZc1JVRkJTeXhEUVVGTUxFVkJRVkU0VWl4SFFVRlNMRU5CUVZsMlVpeEZRVUZGTEVOQlFVWXNSVUZCU1dRc1EwRkJTaXhGUVVGTmNVTXNSVUZCUlRSQ0xGVkJRVVlzUTBGQllXaEZMRU5CUVdJc1NVRkJaMEpCTEVOQlFXaENMRWRCUVd0Q2JVZ3NRMEZCZUVJc1EwRkJXaXhEUVVGeVJDeEZRVUUyUmpkSExFVkJRVVVzUTBGQlJpeEZRVUZMTEVOQlFVd3NSVUZCVVRoU0xFZEJRVklzUTBGQldYWlNMRVZCUVVVc1EwRkJSaXhGUVVGSlpDeERRVUZLTEVWQlFVMXhReXhGUVVGRk5FSXNWVUZCUml4RFFVRmhla1FzUTBGQllpeEpRVUZuUWtFc1EwRkJhRUlzUjBGQmEwSTJSeXhEUVVGNFFpeERRVUZhTEVOQlFUZEdPMEZCUVhGSkxGZEJRVFZLTEVWQlFUaEtjMDBzVDBGQk9Vb3NSVUZCVUR0QlFVRXJTeXhUUVVGMmVFTXNSVUZCZDNoRFFTeFRRVUZSTEdsQ1FVRlRNMVFzUTBGQlZDeEZRVUZYTzBGQlFVTXNhVUpCUVU4c1VVRkJUVUVzUTBGQlRpeEhRVUZSY1VNc1JVRkJSVEpDTEUxQlFVWXNRMEZCVTJoRkxFTkJRVlFzUlVGQlYxTXNRMEZCV0N4RFFVRlNMRWRCUVhOQ1FTeERRVUUzUWp0QlFVRXJRaXhUUVVFek1FTXNSVUZCY2xFN1FVRkJRU3hWUVVGcmJFUkhMRWxCUVVVc1JVRkJjR3hFTEVOQlFYVnNSQ3hQUVVGUGVVSXNSVUZCUldsQ0xFbEJRVVlzUTBGQlR5OURMRU5CUVZBc1JVRkJVeXhWUVVGVFVDeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExGbEJRVWxoTEVsQlFVVmlMRVZCUVVVc1EwRkJSaXhEUVVGT08wRkJRVUVzV1VGQlYyVXNTVUZCUldZc1JVRkJSU3hEUVVGR0xFTkJRV0lzUTBGQmEwSlJMRVZCUVVWU0xFVkJRVVVzUTBGQlJpeERRVUZHTEVsQlFWRmhMRVZCUVVWMVVpeEhRVUZXTEVWQlFXTnlVaXhMUVVGSFJpeEZRVUZGZFZJc1IwRkJSaXhEUVVGTkxGbEJRVlU3UVVGQlF6ZFNMR05CUVVWUkxFTkJRVVk3UVVGQlNTeFRRVUZ5UWl4RlFVRnpRbFFzUlVGQlJTeEpRVUZGVUN4RFFVRktMRVZCUVU4c1EwRkJVQ3hGUVVGVmNWUXNUMEZCYUVNc1JVRkJkME01VXl4RlFVRkZMRU5CUVVZc1JVRkJTeXhEUVVGTUxFVkJRVkVyVXl4SlFVRm9SQ3hEUVVGcVFpeEZRVUYxUlhoVExFVkJRVVYxVWl4SFFVRkdMRU5CUVUxd1V5eEZRVUZGTEVOQlFVWXNSVUZCUzNkVUxFbEJRVmdzUTBGQmRrVXNSVUZCZDBZM1V5eEZRVUZGV0N4RlFVRkZMRU5CUVVZc1EwRkJSaXhKUVVGUkxGbEJRVlU3UVVGQlF5eHBRa0ZCVDFjc1JVRkJSVmdzUlVGQlJTeERRVUZHTEVsQlFVc3NUVUZCVUN4RlFVRmxMRk5CUVU5WExFTkJRVkFzUjBGQlV5eExRVUZMTEVOQlFXUXNSMEZCWjBJc1NVRkJMMElzUlVGQmIwTTJReXhUUVVGd1F5eEhRVUVyUXl4SlFVRjBSRHRCUVVFeVJDeFRRVUYwU3l4RlFVRjFTemRETEVWQlFVVllMRVZCUVVVc1EwRkJSaXhKUVVGTExFMUJRVkFzU1VGQlpXRXNSVUZCUlRCVExGRkJRWGhNTzBGQlFXbE5MRTlCUVRGUExFZEJRVFJQTDFNc1JVRkJSV3RVTEU5QlFVWXNRMEZCVlM5VExFTkJRVllzUTBGQk5VOHNSVUZCZVZCWUxFdEJRVWRCTEVWQlFVVXdRaXhKUVVGR0xFTkJRVTltTEVOQlFWQXNSVUZCVTBFc1EwRkJWQ3hEUVVFMVVDeEZRVUYzVVVFc1EwRkJMMUU3UVVGQmFWSXNTMEZCT1RORUxFVkJRU3N6UkcxVkxFMUJRVXNzWTBGQlV5OVZMRU5CUVZRc1JVRkJWenRCUVVGRExGVkJRVWxETEVsQlFVVjNSQ3hWUVVGVlZDeE5RVUZvUWp0QlFVRkJMRlZCUVhWQ2VrTXNTVUZCUlU0c1EwRkJla0k3UVVGQlFTeFZRVUV5UWs4c1NVRkJSVEpFTEUxQlFVMDFSQ3hEUVVGT0xFTkJRVGRDTzBGQlFVRXNWVUZCYzBORkxFbEJRVVZITEVWQlFVVmxMRWxCUVVZc1EwRkJUemhDTEZOQlFWQXNRMEZCZUVNN1FVRkJRU3hWUVVFd1JETkRMRWxCUVVWMVFpeEZRVUZGTUZJc1VVRkJSaXhGUVVFMVJEdEJRVUZCTEZWQlFYbEZMMU1zU1VGQlJTeFRRVUZHUVN4RFFVRkZMRU5CUVZOb1FpeERRVUZVTEVWQlFWYzdRVUZCUXl4bFFVRlBMRlZCUVZOUExFTkJRVlFzUlVGQlZ6dEJRVUZEUXl4WlFVRkZVaXhEUVVGR0xFbEJRVXNzU1VGQlRDeEZRVUZWVXl4RlFVRkZWQ3hEUVVGR0xFbEJRVXQ1UkN4VlFVRlZWQ3hOUVVGV0xFZEJRV2xDTEVOQlFXcENMRWRCUVcxQ2NFTXNSVUZCUldVc1NVRkJSaXhEUVVGUE9FSXNVMEZCVUN4RFFVRnVRaXhIUVVGeFEyeEVMRU5CUVhCRUxFVkJRWE5FTEVWQlFVVk9MRU5CUVVZc1NVRkJTMkVzUlVGQlJUSlVMRmRCUVVZc1EwRkJZMnBWTEVOQlFXUXNSVUZCWjBKRExFTkJRV2hDTEVOQlFUTkVPMEZCUVRoRkxGTkJRV3BITzBGQlFXdEhMRTlCUVhwTUxFTkJRVEJNTEVsQlFVZFNMRXRCUVVjc1EwRkJTQ3hMUVVGUGMwZ3NSVUZCUlhaSUxFTkJRVVlzUlVGQlNXTXNSVUZCUlRoVExFbEJRVVlzUTBGQlR6VlRMRVZCUVVWVUxFTkJRVVlzUTBGQlVDeEZRVUZoT0ZRc1QwRkJha0lzUlVGQmVVSjJWQ3hGUVVGRmQxUXNUVUZCTTBJc1JVRkJhME1zUTBGQlEzSlZMRU5CUVc1RExFZEJRWE5ETEdOQlFWbGhMRVZCUVVWclZDeExRVUZHTEVWQlFWb3NTVUZCZFVJelVpeEZRVUZGTkVJc1ZVRkJSaXhEUVVGaGVFUXNSVUZCUlVZc1EwRkJSaXhMUVVGTlJTeEZRVUZGUml4RFFVRkdMRVZCUVV0MVZDeEpRVUY0UWl4RFFVRndSU3hEUVVGSUxFVkJRWE5ITEU5QlFVOW9WQ3hGUVVGRloxUXNTVUZCUml4RlFVRlFMRU5CUVdkQ0xFOUJRVTEyVkN4SFFVRk9PMEZCUVZWblNDeFZRVUZGT1Vjc1JVRkJSVVlzUTBGQlJpeERRVUZHTEVWQlFVOVRMRVZCUVVWVUxFTkJRVVlzUTBGQlVDeEZRVUZaVHl4RlFVRkZkMVFzVFVGQlpEdEJRVUZXTEU5QlFXZERMRTlCUVU5NFZDeEZRVUZGTmxNc1QwRkJSaXhGUVVGUU8wRkJRVzFDTEV0QlFXNTJSU3hGUVVGVUxFVkJRU3QyUlN4SlFVRkpiazBzU1VGQlJTeDNSRUZCVGl4RFFVRXJSRzVHTEVWQlFVVXdVaXhSUVVGR0xFTkJRVmRYTEdGQlFWZ3NSMEZCZVVJc1ZVRkJVM3BWTEVOQlFWUXNSVUZCVjAwc1EwRkJXQ3hGUVVGaE8wRkJRVU5RTEUxQlFVVm5WaXhQUVVGR0xFbEJRVmRvVml4RlFVRkZaMVlzVDBGQlJpeERRVUZWUXl4SlFVRnlRaXhKUVVFeVFtaFdMRU5CUVROQ0xFbEJRVGhDZFVnc1JVRkJSVEpETEVsQlFVWXNRMEZCVDJ4TExFVkJRVVZwVml4SlFVRlVMRU5CUVRsQ0xFbEJRVGhEYkZZc1JVRkJSV2RXTEU5QlFVWXNRMEZCVlVNc1NVRkJWaXhEUVVGbExHZERRVUU0UW1oV0xFVkJRVVZyVml4UFFVRXZReXhGUVVGMVJHeFdMRVZCUVVWdFZpeExRVUY2UkN4RlFVRXJSRGRWTEVOQlFTOUVMRU5CUVRsRE8wRkJRV2RJTEVkQlFYWktMRVZCUVhkS09FSXNSVUZCUldkVUxHTkJRVVlzUjBGQmFVSXNWVUZCVTNCV0xFTkJRVlFzUlVGQlZ6dEJRVUZEUkN4TlFVRkZPRlVzVlVGQlJpeERRVUZoTEZsQlFWVTdRVUZCUXl4WlFVRk5OMVVzUTBGQlRqdEJRVUZSTEV0QlFXaERPMEZCUVd0RExFZEJRWFpPTEVOQlFYZE9MRWxCUVVsM1NDeEpRVUZGY0VZc1JVRkJSVEJTTEZGQlFVWXNSVUZCVGl4RFFVRnRRakZTTEVWQlFVVkRMRVZCUVVZc1EwRkJTM2RRTEV0QlFVd3NSMEZCVnl4VlFVRlRPVklzUTBGQlZDeEZRVUZYTzBGQlFVTXNWMEZCVDNsSUxFVkJRVVZ4VFN4SlFVRkdMRU5CUVU4NVZDeERRVUZRTEVWQlFWVXNUMEZCVml4RlFVRnRRaXhWUVVGVFFTeERRVUZVTEVWQlFWYzdRVUZCUTNGRExGRkJRVVZuVkN4alFVRkdMRU5CUVdsQ2NsWXNRMEZCYWtJN1FVRkJiMElzUzBGQmJrUXNSMEZCY1VRc1NVRkJOVVE3UVVGQmFVVXNSMEZCZUVZc1JVRkJlVVp4UXl4RlFVRkZNa0lzVFVGQlJpeERRVUZUTEVWQlFVTlRMRk5CUVZFc1EwRkJReXhEUVVGV0xFVkJRVmsyVVN4WFFVRlZMRU5CUVhSQ0xFVkJRWGRDZUVRc1QwRkJUU3hsUVVGVE9WSXNRMEZCVkN4RlFVRlhPMEZCUVVNc1QwRkJRMEVzVFVGQlNTeERRVUZETEVOQlFVd3NSMEZCVHl4RlFVRkZjVU1zUlVGQlJXbFVMRk5CUVZnc1IwRkJjVUpxVkN4RlFVRkZiME1zVDBGQmVFSXNUVUZCYlVOd1F5eEZRVUZGYjBNc1QwRkJSaXhIUVVGVkxFTkJRVU1zUTBGQldDeEZRVUZoZWtVc1RVRkJTU3hEUVVGRExFTkJRVXdzU1VGQlVTeEZRVUZGY1VNc1JVRkJSV2xVTEZOQlFVb3NSMEZCWXl4RFFVRjBRaXhKUVVGNVFqZE9MRVZCUVVWblRpeFhRVUZHTEVOQlFXTnFWU3hEUVVGa0xFVkJRV2RDTEVOQlFVTTJRaXhEUVVGRUxFTkJRV2hDTEVOQlFYcEZPMEZCUVN0R0xFdEJRWHBKTEVWQlFWUXNRMEZCZWtZc1JVRkJPRTlCTEVWQlFVVjVVQ3hMUVVGR0xFTkJRVkZuUXl4SlFVRlNMRWRCUVdGeVRTeEZRVUZGY1Uwc1NVRkJOMUFzUTBGQmExRXNVMEZCVTNCTkxFTkJRVlFzUjBGQldUdEJRVUZEYkVnc1RVRkJSU3RWTEcxQ1FVRkdMRU5CUVhOQ0xHdENRVUYwUWl4RlFVRjVRemRPTEVOQlFYcERMRWRCUTNKMkswSXhTQ3hGUVVGRmRWWXNiVUpCUVVZc1EwRkJjMElzVFVGQmRFSXNSVUZCTmtJM1RpeERRVUUzUWl4RFFVUnhkaXRDTEVWQlEzSjBLMEp5Uml4RlFVRkZlVkFzUzBGQlJpeEZRVVJ4ZEN0Q08wRkJRek56SzBJc2EwSkJRV0YwVWl4RlFVRkZaMVlzVlVGQlppeEpRVUV5UWl4alFVRlphRllzUlVGQlJXZFdMRlZCUVdRc1NVRkJNRUlzUTBGQlEyaFdMRVZCUVVWdFRDeGxRVUZHTEVOQlFXdENPRW9zVVVGQmVFVXNSMEZCYVVaNlZpeEZRVUZGT0ZVc1ZVRkJSaXhEUVVGaGVsTXNSVUZCUlhsUUxFdEJRV1lzUTBGQmFrWXNTVUZCZDBkMFVpeEZRVUZGZFV3c1owSkJRVVlzUTBGQmJVSXNhMEpCUVc1Q0xFVkJRWE5EY2tVc1EwRkJkRU1zUjBGQmVVTXhTQ3hGUVVGRkswd3NaMEpCUVVZc1EwRkJiVUlzVFVGQmJrSXNSVUZCTUVKeVJTeERRVUV4UWl4RFFVRnFTaXhGUVVFclN5eEpRVUZKUXl4SlFVRkZMRk5CUVVaQkxFTkJRVVVzUTBGQlV6TklMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdWRExFTkJRV1lzUlVGQmFVSkRMRU5CUVdwQ0xFVkJRVzFDUnl4RFFVRnVRaXhGUVVGeFFrVXNRMEZCY2tJc1JVRkJkVUk3UVVGQlF5eFJRVUZKUlN4SlFVRkZMRU5CUVU0N1FVRkJRU3hSUVVGUlJTeEpRVUZGYkVJc1JVRkJSV2RFTEUxQlFWbzdRVUZCUVN4UlFVRnRRalZDTEVsQlFVVXNVVUZCVFdJc1EwRkJNMElzUTBGQk5rSXNTVUZCUnl4aFFVRlhPRUlzUlVGQlJYVkRMRWxCUVVZc1EwRkJUM0pGTEVOQlFWQXNRMEZCWkN4RlFVRjNRanRCUVVGRFJTeFZRVUZGTEVOQlFVTXNRMEZCU0N4RFFVRkxMRXRCUVVsUExFTkJRVW9zU1VGQlUxUXNRMEZCVkR0QlFVRlhiMGdzVlVGQlJUTklMRU5CUVVZc1JVRkJTVU1zUTBGQlNpeEZRVUZOWlN4RFFVRk9MRVZCUVZGVUxFVkJRVVZUTEVOQlFVWXNRMEZCVWl4RlFVRmhMRU5CUVVNc1EwRkJaQ3hGUVVGblFrb3NRMEZCYUVJc1JVRkJhMEpGTEVOQlFXeENPMEZCUVZnN1FVRkJaME1zUzBGQk9VUXNUVUZCYlVVc1NVRkJSeXhMUVVGTExFTkJRVXdzUzBGQlUwNHNRMEZCVkN4TFFVRmhReXhKUVVGRkxFTkJRVU1zUTBGQlNDeEZRVUZMTkVJc1JVRkJSVFJDTEZWQlFVWXNRMEZCWVhwRUxFTkJRV0lzVFVGQmEwSk5MRWxCUVVVc1EwRkJReXhEUVVGeVFpeERRVUZNTEVWQlFUWkNUU3hOUVVGSlRpeExRVUZIWWl4RlFVRkZNRUlzU1VGQlJpeERRVUZQTTBJc1EwRkJVQ3hGUVVGVFVTeERRVUZVTEVkQlFWbFFMRWxCUVVVc1NVRkJha0lzUzBGQmQwSnRRaXhKUVVGRmJrSXNRMEZCUml4RlFVRkpRU3hKUVVGRkxGZEJRVk5FTEVOQlFWUXNSVUZCVjBNc1JVRkJXQ3hGUVVGaFRTeERRVUZpTEVWQlFXVTdRVUZCUXl4aFFVRlBZU3hGUVVGRlR5eEpRVUZHTEVOQlFVOVZMRVZCUVVWeVF5eERRVUZHTEVOQlFWQXNSVUZCV1U4c1EwRkJXaXhEUVVGUU8wRkJRWE5DTEV0QlFYQkZMRU5CUVVvc1EwRkJOMElzUlVGQmQwZE9MRU5CUVhKSUxFTkJRVWdzUlVGQk1rZ3NUMEZCUzJVc1NVRkJSVVVzUTBGQlVDeEZRVUZUUml4SFFVRlVPMEZCUVdGbUxGRkJRVVZFTEVWQlFVVm5RaXhEUVVGR0xFTkJRVVlzUlVGQlQxUXNRMEZCVUN4RlFVRlRUeXhKUVVGRlRpeERRVUZHTEVkQlFVbEJMRVZCUVVWdFFpeEpRVUZHTEVOQlFVOHpRaXhGUVVGRlowSXNRMEZCUml4RFFVRlFMRVZCUVZsQkxFTkJRVm9zUlVGQlkyWXNSVUZCUlVRc1JVRkJSV2RDTEVOQlFVWXNRMEZCUml4RlFVRlBWQ3hEUVVGUUxFTkJRV1FzUTBGQllqdEJRVUZpTEV0QlFXOUVMRTlCUVU5RkxFbEJRVVZVTEVOQlFVWXNSMEZCU1c5Q0xFbEJRVVZ1UWl4RlFVRkZNRUlzU1VGQlJpeERRVUZQTTBJc1EwRkJVQ3hEUVVGR0xFZEJRVmxyUWl4SlFVRkZha0lzUlVGQlJVUXNSVUZCUlN4RFFVRkdMRU5CUVVZc1JVRkJUMDhzUTBGQlVDeERRVUZHTEVkQlFWbExMRU5CUVc1RE8wRkJRWEZETEVkQlFXeFdPMEZCUVVFc1RVRkJiVlpuU0N4SlFVRkZMRk5CUVVaQkxFTkJRVVVzUTBGQlV6VklMRU5CUVZRc1JVRkJWenRCUVVGRExGZEJRVThzVFVGQlNVRXNSVUZCUlhsS0xGRkJRVTRzU1VGQlowSXNUVUZCU1hwS0xFVkJRVVY1U2l4UlFVRjBRaXhKUVVGblF5eERRVUZETEVOQlFVTjZTaXhGUVVGRmVVb3NVVUZCTTBNN1FVRkJiMFFzUjBGQmNsb3NRMEZCYzFvc1UwRkJVelZDTEVOQlFWUXNSMEZCV1R0QlFVRkRMRk5CUVV0NFJDeFBRVUZNTEVkQlFXRm9ReXhGUVVGRlowTXNUMEZCUml4SFFVRlZkMFFzUlVGQlJUWk9MRWRCUVVZc1JVRkJka0k3UVVGQkswSXNTMEZCUlVFc1IwRkJSaXhIUVVGTkxFTkJRVTRzUlVGQlVUZE9MRVZCUVVWb1JpeFRRVUZHTEVkQlFWa3NSVUZCUXpoVExFOUJRVTBzWlVGQlV6TldMRU5CUVZRc1JVRkJWenRCUVVGRExGVkJRVWxETEVsQlFVVkVMRVZCUVVVc1MwRkJTM0ZGTEU5QlFWQXNRMEZCVGl4RFFVRnpRaXhQUVVGUGNFVXNUVUZCU1VFc1NVRkJSU3hGUVVGR0xFVkJRVXN5U0N4RlFVRkZOVWdzUTBGQlJpeE5RVUZQUVN4RlFVRkZlVW9zVVVGQlJpeEhRVUZYZWtvc1JVRkJSU3hMUVVGTGNVVXNUMEZCVUN4SlFVRm5RbkJGTEVOQlFUTkNMRWRCUVRaQ1V5eFBRVUZQYTFZc1kwRkJVQ3hEUVVGelFqVldMRU5CUVhSQ0xFVkJRWGRDTEV0QlFVdHhSU3hQUVVFM1FpeEZRVUZ4UXl4RlFVRkRiMGtzVDBGQlRYaE5MRU5CUVZBc1JVRkJVelJXTEdOQlFXRXNRMEZCUXl4RFFVRjJRaXhGUVVGeVF5eERRVUZ3UXl4RFFVRlVMRWRCUVN0SE5WWXNRMEZCZEVnN1FVRkJkMGdzUzBGQmFrc3NSVUZCYTBzMlZpeExRVUZKTEdGQlFWTTVWaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVUwc1EwRkJZaXhGUVVGbE8wRkJRVU1zVlVGQlNVTXNRMEZCU2p0QlFVRkJMRlZCUVUxRExFbEJRVVVzUzBGQlMydFdMRXRCUVV3c1EwRkJWek5XTEVOQlFWZ3NRMEZCVWl4RFFVRnpRaXhKUVVGSExGbEJRVlVzVDBGQlQwTXNRMEZCY0VJc1JVRkJjMEpSTEVWQlFVVTBRaXhGUVVGRk9FTXNVMEZCUml4RFFVRlpiRVlzUTBGQldpeERRVUZHTEVsQlFXdENUU3hEUVVGc1FpeERRVUYwUWl4TFFVRXJReXhMUVVGSlF5eERRVUZLTEVsQlFWTlFMRU5CUVZRN1FVRkJWMUVzVlVGQlJUUkNMRVZCUVVVNFF5eFRRVUZHTEVOQlFWa3pSU3hEUVVGYUxFTkJRVVlzU1VGQmEwSlFMRVZCUVVWUExFTkJRVVlzUTBGQmJFSTdRVUZCV0N4UFFVRnJReXhQUVVGUFF5eERRVUZRTzBGQlFWTXNTMEZCZEZNc1JVRkJkVk41UXl4TFFVRkpMR0ZCUVZOc1JDeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExHRkJRVThzUzBGQlN5eERRVUZNTEV0QlFWTkJMRU5CUVZRc1IwRkJWeXhMUVVGTE1GWXNTMEZCVEN4RFFVRlhNMVlzUTBGQldDeERRVUZZTEVkQlFYbENRU3hGUVVGRkxFdEJRVXR4UlN4UFFVRlFMRXRCUVdsQ2NrVXNSVUZCUlN4TFFVRkxjVVVzVDBGQlVDeEZRVUZuUW1oRExFVkJRVVU0UXl4VFFVRkdMRU5CUVZsc1JpeERRVUZhTEVOQlFXaENMRU5CUVdwRU8wRkJRV2xHTEV0QlFURlpMRVZCUVRKWk9GWXNVVUZCVHl4blFrRkJVeTlXTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaFRTeERRVUZpTEVWQlFXVTdRVUZCUXl4aFFVRlBMRXRCUVVzc1EwRkJUQ3hMUVVGVFRpeERRVUZVTEVsQlFWbEJMRXRCUVVjc1dVRkJWU3hQUVVGUFFTeERRVUZ3UWl4SlFVRjFRaXhMUVVGTExFTkJRVXdzUzBGQlUwMHNRMEZCTlVNc1IwRkJPRU1zUzBGQlN6SkRMRWRCUVV3c1EwRkJVMnhFTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hEUVVFNVF5eEpRVUUyUkN4TFFVRkxObFlzUjBGQlRDeERRVUZUT1ZZc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRk5MRU5CUVdJc1IwRkJaMElzUzBGQlN5eERRVUZNTEV0QlFWTkJMRU5CUVZRc1IwRkJWMEVzUTBGQldDeEhRVUZoVGl4RFFVRXhSaXhEUVVGUU8wRkJRVzlITEV0QlFYUm5RaXhGUVVGMVowSnRWQ3hSUVVGUExHZENRVUZUY0ZRc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4VlFVRkpUU3hEUVVGS08wRkJRVUVzVlVGQlRVTXNTVUZCUlZJc1JVRkJSU3hMUVVGTGNVVXNUMEZCVUN4RFFVRlNMRU5CUVhkQ0xFbEJRVWNzUzBGQlN5eERRVUZNTEV0QlFWTTNSQ3hEUVVGYUxFVkJRV003UVVGQlF5eFpRVUZITEV0QlFVc3NRMEZCVEN4TFFVRlRVQ3hEUVVGYUxFVkJRV003UVVGQlEydEZMR2RDUVVGTlF5eFBRVUZPTEVOQlFXTnVSU3hEUVVGa0xFbEJRV2xDUVN4SlFVRkZRU3hGUVVGRmMwUXNSMEZCUml4RFFVRk5iRUlzUlVGQlJUaERMRk5CUVZJc1EwRkJia0lzU1VGQmRVTnNSaXhKUVVGRmIwTXNSVUZCUlRoRExGTkJRVVlzUTBGQldXeEdMRU5CUVZvc1EwRkJSaXhGUVVGcFFrRXNTVUZCUlVFc1MwRkJTMDhzUTBGQlRDeEhRVUZQTEVOQlFVTlFMRU5CUVVRc1EwRkJVQ3hIUVVGWFFTeEZRVUZGYVU4c1MwRkJSaXhEUVVGUmFFZ3NRMEZCVWl4TFFVRlpMRVZCUVdwR0xFZEJRWEZHTTBjc1NVRkJSVTRzUlVGQlJTdERMRTFCUVhwR0xFTkJRV2RITEU5QlFVMTZReXhIUVVGT08wRkJRVlVzYlVKQlFVOURMRVZCUVVWUUxFVkJRVVZOTEVOQlFVWXNRMEZCUml4RFFVRlFPMEZCUVZZN1FVRkJlVUlzVlVGQlF5eExRVUZMTEVOQlFVd3NTMEZCVTA0c1EwRkJWQ3hKUVVGWmIwTXNSVUZCUlRSRExHRkJRVVlzUTBGQlowSjZSU3hEUVVGb1FpeERRVUZpTEUxQlFXMURVaXhGUVVGRmVVb3NVVUZCUml4SFFVRlhla29zUlVGQlJTeExRVUZMY1VVc1QwRkJVQ3hKUVVGblFpeExRVUZMTEVOQlFXaERMRWRCUVd0RExFOUJRVTl5UlN4RlFVRkZMRXRCUVV0eFJTeFBRVUZRTEVOQlFUVkZPMEZCUVRaR08wRkJRVU1zUzBGQmVubENMRVZCUVRCNVFqSlNMRk5CUVZFc2FVSkJRVk5vVnl4RFFVRlVMRVZCUVZjN1FVRkJReXhWUVVGSlF5eEpRVUZGUkN4RlFVRkZMRXRCUVV0eFJTeFBRVUZRTEVOQlFVNHNRMEZCYzBJc1QwRkJUeXhMUVVGTExFTkJRVXdzUzBGQlUzQkZMRU5CUVZRc1NVRkJXU3hEUVVGRGIwTXNSVUZCUlRSRExHRkJRVVlzUTBGQlowSm9SaXhEUVVGb1FpeERRVUZ3UWp0QlFVRjFReXhMUVVFek0wSXNSVUZCY0VJc1EwRkJhVFZDTEVsQlFVbHhTU3hKUVVGRkxFbEJRVWxVTEVOQlFVb3NSVUZCVGp0QlFVRkJMRTFCUVZsVkxFbEJRVVVzU1VGQlNWWXNRMEZCU2l4RlFVRmtPMEZCUVVFc1RVRkJiMEpYTEVsQlFVVXNLMEpCUVhSQ08wRkJRVUVzVFVGQmMwUkRMRWxCUVVVc1VVRkJlRVFzUTBGQmFVVXNVMEZCVTBNc1EwRkJWQ3hEUVVGWE1Va3NRMEZCV0N4RlFVRmhPMEZCUVVNc1YwRkJUU3hYUVVGVFFTeERRVUZVTEVsQlFWa3NXVUZCVlVFc1EwRkJWaXhMUVVGakxGZEJRVk5CTEVOQlFWUXNSMEZCVnl4SlFVRllMRWRCUVdkQ1FTeE5RVUZKTEVOQlFVTkJMRU5CUVVRc1IwRkJSeXhGUVVGUUxFZEJRVlVzUTBGQlEwRXNRMEZCV0N4SFFVRmhkMGtzUlVGQlJUSkNMRWxCUVVZc1EwRkJUMjVMTEVOQlFWQXNTVUZCVldsWExFdEJRVXRETEV0QlFVd3NRMEZCVjJ4WExFTkJRVmdzUTBGQlZpeEhRVUYzUWtFc1EwRkJia1VzUTBGQmJFSTdRVUZCZDBZc1dVRkJVekpKTEVOQlFWUXNRMEZCVnpOSkxFTkJRVmdzUlVGQllVTXNRMEZCWWl4RlFVRmxUU3hEUVVGbUxFVkJRV2xDTzBGQlFVTXNVVUZCU1VNc1EwRkJTaXhEUVVGTkxFbEJRVWNzUzBGQlN5eERRVUZNTEV0QlFWTkVMRU5CUVZRc1NVRkJXU3hOUVVGSlVDeEZRVUZGZVVvc1VVRkJja0lzUlVGQk9FSXNTVUZCUjJwS0xFbEJRVVVzVlVGQlVWQXNSVUZCUlhWRkxFOUJRVVlzUTBGQlZXbEZMRU5CUVZZc1JVRkJXU3hMUVVGYUxFVkJRVzFDZUVNc1YwRkJia0lzUlVGQlZpeEZRVUV5UXpGR0xFbEJRVVZRTEVWQlFVVnhTeXhaUVVGR0xFTkJRV1UzU2l4RFFVRm1MRU5CUVRkRExFVkJRU3RFTEZsQlFWVXNUMEZCVDBRc1EwRkJia1lzUlVGQmNVWTdRVUZCUXl4VlFVRkhPMEZCUVVOQkxGbEJRVVZ0U1N4RlFVRkZia2tzUTBGQlJpeERRVUZHTzBGQlFVOHNUMEZCV0N4RFFVRlhMRTlCUVUxRkxFTkJRVTRzUlVGQlVTeERRVUZGTEVkQlFVVnhWaXhIUVVGR0xFTkJRVTA1Vml4RFFVRk9MRVZCUVZGRExFTkJRVklzUlVGQlZVMHNRMEZCVmp0QlFVRmhMRXRCUVhoSUxFMUJRVFpJUVN4SlFVRkZMRXRCUVVzc1EwRkJVQ3hEUVVGVExFOUJRVTlCTEVOQlFWQTdRVUZCVXl4TFFVRkZlVVFzVFVGQlJpeERRVUZUTEVWQlFVTm5VeXhUUVVGUkxHbENRVUZUYUZjc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWVVGQlQzVkpMRVZCUVVWNVRpeFBRVUZHTEVOQlFWVm9WeXhEUVVGV0xFdEJRV056U1N4RlFVRkZNRTRzVDBGQlJpeERRVUZWYUZjc1EwRkJWaXhEUVVGeVFqdEJRVUZyUXl4TFFVRjJSQ3hGUVVGM1JHMVhMRTFCUVVzc1kwRkJVMjVYTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaFRTeERRVUZpTEVWQlFXVTdRVUZCUXl4aFFVRlBaMGtzUlVGQlJYZE9MRTFCUVVZc1EwRkJVeTlXTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaFRTeERRVUZpTEVOQlFWQTdRVUZCZFVJc1MwRkJjRWNzUlVGQmNVYzJWaXhaUVVGWExHOUNRVUZUY0Zjc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUTNOSkxGRkJRVVUyU3l4TlFVRkdMRU5CUVZOd1ZDeERRVUZVTEVWQlFWZERMRU5CUVZnN1FVRkJZeXhMUVVFMVNTeEZRVUUyU1c5WExFOUJRVTBzWlVGQlUzSlhMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdVN1FVRkJReXhoUVVGUEswZ3NSVUZCUlhsT0xFMUJRVVlzUTBGQlV5OVdMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRU5CUVZBN1FVRkJkVUlzUzBGQk1Vd3NSVUZCTWt3clZpeGhRVUZaTEhGQ1FVRlRkRmNzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJRM0ZKTEZGQlFVVTRTeXhOUVVGR0xFTkJRVk53VkN4RFFVRlVMRVZCUVZkRExFTkJRVmc3UVVGQll5eExRVUZ1VHl4RlFVRlVMRWRCUVN0UGIwTXNSVUZCUlVNc1JVRkJSaXhEUVVGTE1FSXNUVUZCVEN4RFFVRlpMRVZCUVVOdFV5eE5RVUZMTEdOQlFWTnVWeXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMRlZCUVVsTkxFTkJRVW83UVVGQlFTeFZRVUZOUXl4RFFVRk9PMEZCUVVFc1ZVRkJVVU1zUTBGQlVqdEJRVUZCTEZWQlFWVkhMRWxCUVVVc1MwRkJTeXhEUVVGTUxFTkJRVm83UVVGQlFTeFZRVUZ2UWtVc1NVRkJSVVlzUzBGQlIwRXNSVUZCUlhGTUxGVkJRVE5DTEVOQlFYTkRMRWxCUVVjc1MwRkJTeXhEUVVGTUxFdEJRVk5xVFN4RFFVRmFMRVZCUVdNN1FVRkJReXhaUVVGSExFdEJRVXRuUkN4TlFVRk1MRXRCUVdOMlF5eEpRVUZGT0Vnc1JVRkJSWEpHTEVkQlFVWXNRMEZCVFhSRExFTkJRVTRzUTBGQlJpeEZRVUZYTEUxQlFVbEJMRVZCUVVVMlNTeFJRVUZPTEVsQlFXZENMRU5CUVVOdVFpeEZRVUZGY0VZc1IwRkJSaXhEUVVGTmRFTXNRMEZCVGl4RlFVRlJMR05CUVZJc1EwRkJNVU1zUTBGQlNDeEZRVUZ6UlR0QlFVRkRUQ3hqUVVGRlR5eEZRVUZGYTBNc1RVRkJTaXhEUVVGWExFOUJRVTE2UXl4SFFVRk9PMEZCUVZWUExHTkJRVVZRTEVOQlFVWXNUVUZCVDBNc1NVRkJSVTBzUlVGQlJWQXNRMEZCUml4RlFVRkxNbFVzU1VGQlVDeEZRVUZaTEUxQlFVa3hWU3hGUVVGRlZ5eFBRVUZHTEVOQlFWVXNUMEZCVml4RFFVRktMRXRCUVhsQ1dDeEpRVUZGTmtJc1JVRkJSVGhETEZOQlFVWXNRMEZCV1RORkxFVkJRVVZMTEV0QlFVWXNRMEZCVVN4RFFVRlNMRU5CUVZvc1EwRkJSaXhGUVVFd1FqaElMRVZCUVVVdlNDeERRVUZHTEVWQlFVbEtMRU5CUVVvc1JVRkJUVU1zUlVGQlJVUXNRMEZCUml4RFFVRk9MRU5CUVc1RUxFTkJRVzVDTzBGQlFWWXNWMEZCT0VZNFNDeEZRVUZGZDA0c1IwRkJSaXhEUVVGTmJGWXNRMEZCVGl4RlFVRlJMR05CUVZJc1JVRkJkVUlzUTBGQlF5eERRVUY0UWp0QlFVRXlRaXhuUWtGQlQwZ3NRMEZCVUR0QlFVRlRMR05CUVUwc2IwSkJRV2xDVkN4RFFVRnFRaXg1UTBGQmFVSkJMRU5CUVdwQ0xFdEJRVzFDTEV0QlFVdHpSQ3hKUVVGTUxFTkJRVlVzV1VGQlZUdEJRVUZEYVVZc1ZVRkJSWFZPTEVkQlFVWXNRMEZCVFN4SlFVRk9MRVZCUVZjNVZpeERRVUZZTzBGQlFXTXNUMEZCYmtNc1EwRkJia0lzUjBGQmQwUXlTQ3hGUVVGRkxFbEJRVVlzUlVGQlR5eFZRVUZUTVVnc1EwRkJWQ3hGUVVGWE8wRkJRVU1zV1VGQlNVMHNRMEZCU2l4RFFVRk5MRWxCUVVkTExFdEJRVWNzUzBGQlN5eERRVUZNTEV0QlFWTllMRU5CUVdZc1JVRkJhVUk3UVVGQlF5eGpRVUZIVFN4SlFVRkZaMGtzUlVGQlJYSkdMRWRCUVVZc1EwRkJUWFJETEVOQlFVNHNSVUZCVVZvc1EwRkJVaXhEUVVGR0xFVkJRV0VzUzBGQlN5eERRVUZNTEV0QlFWTlBMRU5CUVhwQ0xFVkJRVEpDTEU5QlFVOUJMRU5CUVZBc1EwRkJVeXhKUVVGSFFTeEpRVUZGYjBrc1JVRkJSUzlJTEVOQlFVWXNSVUZCU1Zvc1EwRkJTaXhEUVVGR0xFVkJRVk1zUzBGQlN5eERRVUZNTEV0QlFWTlBMRU5CUVhKQ0xFVkJRWFZDTEU5QlFVOUJMRU5CUVZBN1FVRkJVeXhUUVVGMFJpeE5RVUV5Uml4TFFVRkxLME1zU1VGQlRDeERRVUZWTEZsQlFWVTdRVUZCUTJsR0xGbEJRVVYxVGl4SFFVRkdMRU5CUVUwc1NVRkJUaXhGUVVGWE9WWXNRMEZCV0N4RlFVRmhReXhEUVVGaU8wRkJRV2RDTEZOQlFYSkRPMEZCUVhWRExFOUJRVE5LTEVWQlFUUktMRWxCUVRWS0xFVkJRV2xMUVN4RFFVRnFTeXhGUVVGdFMzZEVMRlZCUVZWVUxFMUJRVllzUjBGQmFVSXNRMEZCY0V3c1JVRkJjMHdzU1VGQmRFd3NSVUZCTWt3c1EwRkJReXhEUVVFMVRDeERRVUU1UkR0QlFVRTJVQ3hMUVVFeGFFSXNSVUZCTW1oQ2IxUXNXVUZCVnl4dlFrRkJVM0JYTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU4c1MwRkJTM05FTEVsQlFVd3NRMEZCVlN4WlFVRlZPMEZCUVVOcFJpeFZRVUZGTmtzc1RVRkJSaXhEUVVGVExFbEJRVlFzUlVGQlkzQlVMRU5CUVdRN1FVRkJhVUlzVDBGQmRFTXNRMEZCVUR0QlFVRXJReXhMUVVGcWJVSXNSVUZCV2l4RFFVRXZUeXhGUVVFck1VSnhReXhGUVVGRk1rSXNUVUZCUml4RFFVRlRMRVZCUVVOMVV5eFBRVUZOTEdWQlFWTjJWeXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVUwc1EwRkJZaXhGUVVGbE8wRkJRVU1zVlVGQlNVTXNRMEZCU2l4RFFVRk5MRWxCUVVkU0xFTkJRVWdzUlVGQlN5eFBRVUZQUXl4SlFVRkZMRU5CUVVOQkxFdEJRVWNzU1VGQlNpeEpRVUZWTEU5QlFWb3NSVUZCYjBKUExFbEJRVVU0U0N4RlFVRkZjRVlzUjBGQlJpeERRVUZOYkVRc1EwRkJUaXhGUVVGUlF5eERRVUZTTEVOQlFYUkNMRVZCUVdsRFRTeE5RVUZKTEVOQlFVTkRMRU5CUVVRc1NVRkJTVEpFTEUxQlFVMURMRTlCUVU0c1EwRkJZemRFTEVOQlFXUXNRMEZCU2l4SFFVRnhRa01zU1VGQlJUaElMRVZCUVVWNVRpeE5RVUZHTEVOQlFWTXZWaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVc5RExFVkJRVVZwUkN4VFFVRkdMRU5CUVZrdlJTeERRVUZhTEVOQlFXSXNRMEZCZGtJc1IwRkJiMFJETEVWQlFVVlRMRWxCUVVZc1EwRkJUMVlzUTBGQlVDeERRVUY0UkN4RFFVRnFReXhGUVVGdlIwTXNTMEZCUnl4RlFVRTVSenRCUVVGcFNDeExRVUZ1U2l4RlFVRnZTbWRYTEZOQlFWRXNhVUpCUVZONFZ5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRFFTeFZRVUZGUVN4TFFVRkhMRWxCUVV3c1EwRkJWU3hKUVVGSlRTeEpRVUZGT0VJc1JVRkJSV3RWTEV0QlFVWXNRMEZCVVhaWExFTkJRVklzUlVGQlZVTXNRMEZCVml4RFFVRk9PMEZCUVVFc1ZVRkJiVUpQTEVsQlFVVkVMRVZCUVVWNVF5eE5RVUYyUWp0QlFVRkJMRlZCUVRoQ2RrTXNTVUZCUlVZc1JVRkJSWE5MTEV0QlFVWXNSVUZCYUVNN1FVRkJRU3hWUVVFd1EycExMRWxCUVVWNVFpeEZRVUZGYjFVc1YwRkJSaXhEUVVGamVsY3NRMEZCWkN4RlFVRm5Ra01zUTBGQmFFSXNRMEZCTlVNN1FVRkJRU3hWUVVFclJHRXNTVUZCUlN4VFFVRkdRU3hEUVVGRkxFZEJRVlU3UVVGQlEzVkNMRlZCUVVWdFZTeFBRVUZHTEVOQlFWVjRWeXhEUVVGV0xFVkJRVmxETEVOQlFWbzdRVUZCWlN4UFFVRXpSaXhEUVVFMFJpeHBRa0ZCWlZFc1EwRkJaaXhMUVVGdFFrRXNTVUZCUlVZc1JVRkJSWE5MTEV0QlFVWXNSVUZCUml4RlFVRlpja3NzUjBGQkwwSXNSMEZCYjBORExFMUJRVWtzVTBGQlQxSXNRMEZCVUN4SlFVRlZUU3hGUVVGRk9FMHNUMEZCUml4RFFVRlZMRmxCUVZZc1EwRkJWaXhGUVVGclF5eFBRVUZQZWswc1JVRkJSVGhXTEVsQlFUTkRMRVZCUVdkRWFsY3NSVUZCUld0Q0xFbEJRVVlzUTBGQlR6TkNMRU5CUVZBc1JVRkJVMk1zUTBGQlZDeEZRVUZYUml4RFFVRllMRU5CUVhCRUxFTkJRWEJETEVWQlFYVkhMRU5CUVVOS0xFTkJRVVFzU1VGQlNVa3NRMEZCU2l4SlFVRlBRU3hGUVVGRk9FOHNTMEZCUml4RFFVRlJLMFFzU1VGQlVpeEZRVUU1Unp0QlFVRTJTQ3hMUVVFM1dTeEZRVUU0V1dkRUxHRkJRVmtzY1VKQlFWTjZWeXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMRlZCUVVsTkxFbEJRVVZPTEVsQlFVVXNXVUZCVWl4RFFVRnhRaXhQUVVGUGNVa3NSVUZCUlhCR0xFZEJRVVlzUTBGQlRXeEVMRU5CUVU0c1JVRkJVVThzUTBGQlVpeExRVUZaSzBnc1JVRkJSWGxPTEUxQlFVWXNRMEZCVXk5V0xFTkJRVlFzUlVGQlYwOHNRMEZCV0N4RlFVRmhMRVZCUVVOdFVDeFBRVUZOY2s0c1JVRkJSVEpSTEZOQlFVWXNRMEZCV1N4aFFVRmFMRVZCUVRKQ1dDeEhRVUV6UWl4RFFVRXJRaXhaUVVGVk8wRkJRVU12U2l4WlFVRkZPRXNzVFVGQlJpeERRVUZUY0ZRc1EwRkJWQ3hGUVVGWExFTkJRVU5ETEVsQlFVVXNUMEZCU0N4RlFVRlhUU3hEUVVGWUxFTkJRVmc3UVVGQk1FSXNVMEZCY0VVc1EwRkJVQ3hGUVVGaUxFTkJRVzVDTzBGQlFTdEhMRXRCUVRWcFFpeEZRVUZVTEVOQlFTOHhRaXhGUVVGMU5VTTRRaXhGUVVGRlF5eEZRVUZHTEVOQlFVc3dRaXhOUVVGTUxFTkJRVmtzUlVGQlEzVlRMRTlCUVUwc1pVRkJVM1pYTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zVlVGQlNVMHNTVUZCUlN4RFFVRk9MRU5CUVZFc1QwRkJUU3haUVVGVkxFOUJRVTlRTEVOQlFXcENMRXRCUVhGQ1F5eEpRVUZGUkN4RFFVRkdMRVZCUVVsQkxFbEJRVVVzU1VGQlRpeEZRVUZYVHl4SFFVRm9ReXhIUVVGeFEydEVMRlZCUVZWVUxFMUJRVllzUjBGQmFVSjZReXhEUVVGcVFpeEhRVUZ0UWpoQ0xFVkJRVVZyVlN4TFFVRkdMRU5CUVZFc1MwRkJTeXhEUVVGTUxFTkJRVklzUlVGQlowSjJWeXhEUVVGb1FpeERRVUZ1UWl4SFFVRnpReXhMUVVGTExFTkJRVXdzUzBGQlUwTXNRMEZCVkN4SFFVRlhMRWxCUVZnc1IwRkJaMElzUzBGQlMzRkVMRWxCUVV3c1EwRkJWU3haUVVGVk8wRkJRVU1zV1VGQlNTOURMRWxCUVVVNFFpeEZRVUZGYTFVc1MwRkJSaXhEUVVGUkxFbEJRVklzUlVGQllYWlhMRU5CUVdJc1JVRkJaVU1zUTBGQlppeERRVUZPTEVOQlFYZENiME1zUlVGQlJXOVZMRmRCUVVZc1EwRkJZeXhKUVVGa0xFVkJRVzFDZWxjc1EwRkJia0lzUjBGQmMwSXNVMEZCVDBFc1EwRkJVQ3hKUVVGVkxHbENRVUZsVHl4RlFVRkZMRU5CUVVZc1EwRkJla0lzU1VGQkswSTRRaXhGUVVGRmJWVXNUMEZCUml4RFFVRlZMRWxCUVZZc1JVRkJaWGhYTEVOQlFXWXNRMEZCY2tRN1FVRkJkVVVzVDBGQmNFZ3NRMEZCYWtjN1FVRkJkVTRzUzBGQmNGQXNSVUZCY1ZCM1Z5eFRRVUZSTEdsQ1FVRlRlRmNzUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCVHl4TFFVRkxjMFFzU1VGQlRDeERRVUZWTEZsQlFWVTdRVUZCUTJwQ0xGVkJRVVZ0VlN4UFFVRkdMRU5CUVZVc1NVRkJWaXhGUVVGbGVGY3NRMEZCWmp0QlFVRnJRaXhQUVVGMlF5eERRVUZRTzBGQlFXZEVMRXRCUVhwVUxFVkJRVEJVTWxjc1dVRkJWeXh2UWtGQlV6TlhMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVThzUzBGQlMzVlhMRXRCUVV3c1EwRkJWM1pYTEV0QlFVY3NTVUZCWkN4RlFVRnRRaXhGUVVGdVFpeERRVUZRTzBGQlFUaENMRXRCUVM5WExFVkJRV2RZTWxRc1UwRkJVU3hwUWtGQlV6TlVMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNWVUZCU1Uwc1EwRkJTanRCUVVGQkxGVkJRVTFETEVsQlFVVXNRMEZCVWp0QlFVRkJMRlZCUVZWRExFbEJRVVUwUWl4RlFVRkZNRklzVVVGQlJpeEZRVUZhTzBGQlFVRXNWVUZCZVVKdVZDeEpRVUZGTEVsQlFUTkNPMEZCUVVFc1ZVRkJaME5GTEVsQlFVVXNTMEZCUzJ0RExFMUJRWFpETzBGQlFVRXNWVUZCT0VOb1F5eEpRVUZGTEZOQlFVWkJMRU5CUVVVc1IwRkJWVHRCUVVGRExGVkJRVVZTTEVOQlFVWXNTVUZCUzBNc1JVRkJSV2RWTEZkQlFVWXNRMEZCWXpkVUxFTkJRV1FzUlVGQlowSXNRMEZCUTBFc1EwRkJSQ3hEUVVGb1FpeERRVUZNTzBGQlFUQkNMRTlCUVhKR0xFTkJRWE5HTEZsQlFWVXNUMEZCVDFvc1EwRkJha0lzUzBGQmNVSkRMRWxCUVVWRUxFTkJRVVlzUlVGQlNVRXNTVUZCUlN4TFFVRkxMRU5CUVdoRExFZEJRVzFEUVN4SlFVRkZRU3hMUVVGSExFbEJRWGhETEVOQlFUWkRMRTlCUVUxakxFZEJRVTQ3UVVGQlZWQXNXVUZCUlN0SUxFVkJRVVZ3Uml4SFFVRkdMRU5CUVUxMFF5eEZRVUZGUlN4RFFVRkdMRU5CUVU0c1JVRkJWMlFzU1VGQlJTeFpRVUZpTEVOQlFVWXNSVUZCTmtKUExFdEJRVWRCTEVWQlFVVnRVQ3hMUVVGTUxFdEJRV0ZzVUN4TFFVRkpSQ3hGUVVGRmJWQXNTMEZCUml4RFFVRlJNa01zUjBGQlVpeERRVUZaY2xJc1EwRkJXaXhEUVVGcVFpeERRVUUzUWp0QlFVRldMRTlCUVhkRkxFOUJRVTlCTEV0QlFVbFFMRVZCUVVWclZDeFBRVUZHTEVOQlFWVXhWQ3hEUVVGV0xFTkJRVmc3UVVGQmQwSXNTMEZCZW0xQ0xFVkJRVm9zUTBGQmRqVkRMRU5CUVN0blJTeEpRVUZKTWtrc1MwRkJSeXh6UTBGQmMwTm5UeXhOUVVFM1F6dEJRVUZCTEUxQlFXOUVOMDRzUzBGQlJ5eEpRVUZKZWtJc1RVRkJTaXhEUVVGWExHMUNRVUZwUW5OQ0xFVkJRV3BDTEVkQlFXOUNMR0ZCUVM5Q0xFVkJRVFpETEVkQlFUZERMRU5CUVhaRU8wRkJRVUVzVFVGQmVVZEpMRXRCUVVjc1EwRkJReXhMUVVGRUxFVkJRVThzVDBGQlVDeEZRVUZsTEZGQlFXWXNSVUZCZDBJc1RVRkJlRUlzUTBGQk5VYzdRVUZCUVN4TlFVRTBTVVVzUzBGQlJ5eFRRVUZJUVN4RlFVRkhMRU5CUVZOc1NpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExGZEJRVTlFTEVsQlFVVkRMRXRCUVVkRUxFTkJRVXdzUlVGQlR5eFhRVUZUUVN4RlFVRkZObGNzUzBGQlJpeERRVUZSUXl4UFFVRnFRaXhKUVVFd1FpeFBRVUZMT1Zjc1JVRkJSVFpYTEV0QlFVWXNRMEZCVVVNc1QwRkJZaXhKUVVGelFucFZMRVZCUVVVNFN5eFJRVUZHTEVOQlFWZHVUaXhGUVVGRk5Fb3NZVUZCWWl4RlFVRXlRalZLTEVOQlFUTkNMRU5CUVhSQ0xFbEJRWEZFTEZkQlFWTnhReXhGUVVGRk1GVXNSMEZCUml4RFFVRk5MMWNzUTBGQlRpeEZRVUZSTEZOQlFWSXNRMEZCZEVjN1FVRkJlVWdzUjBGQmRGSTdRVUZCUVN4TlFVRjFVbTFLTEV0QlFVY3NVMEZCU0VFc1JVRkJSeXhEUVVGVGJrb3NRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZOTEVOQlFXSXNSVUZCWlVNc1EwRkJaaXhGUVVGcFFqdEJRVUZETEZGQlFVbERMRU5CUVVvN1FVRkJRU3hSUVVGTlJ5eERRVUZPTzBGQlFVRXNVVUZCVVVVc1NVRkJSU3hGUVVGV0xFTkJRV0VzUzBGQlNVWXNRMEZCU2l4SlFVRlRXQ3hEUVVGVU8wRkJRVmRoTEZGQlFVVkdMRU5CUVVZc1NVRkJTMW9zUlVGQlJUWlhMRXRCUVVZc1EwRkJVV3BYTEVOQlFWSXNRMEZCVEN4RlFVRm5RbG9zUlVGQlJUWlhMRXRCUVVZc1EwRkJVV3BYTEVOQlFWSXNTVUZCVjFnc1JVRkJSVmNzUTBGQlJpeERRVUV6UWp0QlFVRllMRXRCUVRKRFNDeEpRVUZGUml4RlFVRkZhVVFzUzBGQlJpeERRVUZSZUVRc1EwRkJVaXhGUVVGVlVTeExRVUZITEVWQlFXSXNRMEZCUml4RFFVRnRRaXhMUVVGSlNTeERRVUZLTEVsQlFWTllMRU5CUVZRN1FVRkJWMFFzVVVGQlJUWlhMRXRCUVVZc1EwRkJVV3BYTEVOQlFWSXNTVUZCVjBVc1JVRkJSVVlzUTBGQlJpeERRVUZZTzBGQlFWZ3NTMEZCTWtJc1QwRkJUMGdzUTBGQlVEdEJRVUZUTEVkQlFUTmFMRU5CUVRSYUxGTkJRVk5wU2l4RlFVRlVMRU5CUVZreFNpeERRVUZhTEVWQlFXTkRMRU5CUVdRc1JVRkJaMEpOTEVOQlFXaENMRVZCUVd0Q1F5eERRVUZzUWl4RlFVRnZRanRCUVVGRExGRkJRVWxETEVOQlFVbzdRVUZCUVN4UlFVRk5SeXhKUVVGRkxFTkJRVkk3UVVGQlFTeFJRVUZWUlN4SlFVRkZMRVZCUVZvN1FVRkJRU3hSUVVGbFJTeEpRVUZGVWl4SlFVRkZMRmxCUVZVN1FVRkJReXhoUVVGUFFTeEZRVUZGZDFjc1IwRkJSaXhGUVVGUU8wRkJRV1VzUzBGQk5VSXNSMEZCTmtJc1dVRkJWVHRCUVVGRExHRkJRVTh6VlN4RlFVRkZNRlVzUjBGQlJpeERRVUZOTDFjc1EwRkJUaXhGUVVGUlF5eERRVUZTTEVWQlFWVXNSVUZCVml4RFFVRlFPMEZCUVhGQ0xFdEJRVGxGTzBGQlFVRXNVVUZCSzBWcFFpeEpRVUZGUml4SFFVRnFSanRCUVVGQkxGRkJRWEZHU1N4SlFVRkZZaXhMUVVGSFFTeEZRVUZGTEVOQlFVWXNRMEZCU0N4TFFVRlZPRUlzUlVGQlJUUlZMRk5CUVVZc1EwRkJXV2hZTEVOQlFWb3NTVUZCWlN4RlFVRm1MRWRCUVd0Q0xFbEJRVFZDTEVOQlFYWkdPMEZCUVVFc1VVRkJlVWh2UWl4SlFVRkZMRU5CUVVOblFpeEZRVUZGTkZVc1UwRkJSaXhEUVVGWmFGZ3NRMEZCV2l4TFFVRm5RaXhUUVVGUGJVSXNRMEZCVUN4SlFVRlZMRU5CUVVOR0xFTkJRVFZDTEV0QlFXZEROa2dzUjBGQlIyTXNTVUZCU0N4RFFVRlJlRWdzUlVGQlJUQlZMRWRCUVVZc1EwRkJUUzlYTEVOQlFVNHNSVUZCVVVNc1EwRkJVaXhEUVVGU0xFTkJRVE5LTEVOQlFTdExMRWxCUVVkdlFpeExRVUZIUVN4RlFVRkZMRU5CUVVZc1RVRkJUMFFzUTBGQllpeEZRVUZsTzBGQlFVTkJMRlZCUVVWQkxFdEJRVWRETEVWQlFVVXNRMEZCUml4RFFVRk1MRVZCUVZWa0xFbEJRVVZCTEV0QlFVY3NSVUZCWml4RlFVRnJRbU1zU1VGQlJTeERRVUZEU0N4RFFVRkVMRWxCUVVrc1EwRkJlRUlzUTBGQk1FSTdRVUZCUjA0c1dVRkJSVUVzUzBGQlJ5eEpRVUZNTEVWQlFWVlRMRXRCUVVkVUxFTkJRV0lzUlVGQlpYbENMRVZCUVVWM1ZTeExRVUZHTEVOQlFWRTNWeXhEUVVGU0xFVkJRVlZETEVOQlFWWXNSVUZCV1c5Q0xFbEJRVVZFTEVOQlFXUXNRMEZCWmp0QlFVRklMR1ZCUVhsRFVpeFBRVUZMUVN4SlFVRkZTU3hOUVVGSlJTeERRVUZZTEV0QlFXVXNUVUZCU1U0c1EwRkJia0lzU1VGQmMwSXNSVUZCUlVVc1EwRkJha1U3UVVGQmIwVXNXVUZCVDFBc1RVRkJTV01zU1VGQlJTeERRVUZEUVN4RFFVRkVMRWxCUVVrc1EwRkJRMGdzUTBGQlRDeEpRVUZSTEVOQlFWWXNSVUZCV1ZRc1NVRkJSVVlzUlVGQlJTeERRVUZHTEVsQlFVdGpMRWxCUVVVc1EwRkJRMlFzUlVGQlJTeERRVUZHTEVsQlFVc3NRMEZCVGl4SlFVRlRRU3hGUVVGRkxFTkJRVVlzUTBGQmFFSXNSMEZCY1VJc1EwRkJRMEVzUlVGQlJTeERRVUZHTEVOQlFYQkRMRVZCUVhsRFF5eE5RVUZKUVN4RlFVRkZNRmNzU1VGQlJpeEhRVUZQT1ZZc1EwRkJVQ3hGUVVGVFdpeEZRVUZGTWxjc1MwRkJSaXhIUVVGUk9WWXNRMEZCYWtJc1JVRkJiVUppTEVWQlFVVnhSQ3hIUVVGR0xFZEJRVTF3UkN4RFFVRTNRaXhEUVVFM1F5eEhRVUU0UlVFc1EwRkJja1k3UVVGQmRVWXNUMEZCU1d0S0xFdEJRVWNzUlVGQlVDeERRVUZWTEZOQlFWTjJSQ3hGUVVGVUxFTkJRVmx3Unl4RFFVRmFMRVZCUVdNN1FVRkJReXhSUVVGSlF5eERRVUZLTzBGQlFVRXNVVUZCVFUwc1NVRkJSVkFzUlVGQlJUUktMR0ZCUVZZN1FVRkJRU3hSUVVGM1FuQktMRWxCUVVWU0xFVkJRVVZ2U3l4UlFVRTFRanRCUVVGQkxGRkJRWEZETTBvc1NVRkJSV3RLTEVkQlFVZHVTaXhEUVVGSUxFTkJRWFpETEVOQlFUWkRMRTlCUVU5RExFbEJRVVZCTEVOQlFVWXNTVUZCUzFJc1NVRkJSVTBzUlVGQlJUWlhMRWxCUVVZc1EwRkJUMjVXTEZkQlFWQXNRMEZCYlVJeFFpeEZRVUZGZFVJc1lVRkJSaXhEUVVGblFuUkNMRU5CUVdoQ0xFTkJRVzVDTEVOQlFVWXNSVUZCZVVORExFbEJRVVUwUWl4RlFVRkZNRlVzUjBGQlJpeERRVUZOT1Zjc1EwRkJUaXhGUVVGUkxGTkJRVklzUTBGQk0wTXNSVUZCT0VSQkxFVkJRVVZwUXl4VlFVRkdMRU5CUVdGRExGZEJRV0lzUTBGQmVVSnNReXhEUVVGNlFpeERRVUU1UkN4RlFVRXdSaXhYUVVGVFVTeERRVUZVTEV0QlFXRkJMRWxCUVVVc1QwRkJaaXhEUVVFeFJpeEZRVUZyU0d0S0xFZEJRVWR1U2l4RFFVRklMRWxCUVUxRExFTkJRWGhJTEVWQlFUQklRU3hEUVVFdlNDeERRVUZRTzBGQlFYbEpMRmxCUVZOeFN5eEZRVUZVTEVOQlFWazVTeXhEUVVGYUxFVkJRV05ETEVOQlFXUXNSVUZCWjBJN1FVRkJReXhUUVVGSkxFbEJRVWxOTEVOQlFVb3NSVUZCVFVNc1EwRkJUaXhGUVVGUlF5eEpRVUZGTEVWQlFWWXNSVUZCWVVjc1NVRkJSU3hEUVVGbUxFVkJRV2xDUlN4SlFVRkZaQ3hGUVVGRlowUXNUVUZCZWtJc1JVRkJaME53UXl4SlFVRkZSU3hEUVVGc1F5eEZRVUZ2UTBZc1IwRkJjRU03UVVGQmQwTktMRlZCUVVWU0xFVkJRVVZaTEVOQlFVWXNRMEZCUml4RlFVRlBTaXhGUVVGRmNWY3NTMEZCUml4TFFVRlZkRmNzU1VGQlJVTXNSVUZCUlhGWExFdEJRVVlzUTBGQlVVTXNUMEZCVml4RlFVRnJRamRYTEV0QlFVY3NWMEZCVTAwc1EwRkJWQ3hMUVVGaFJTeEZRVUZGUnl4RFFVRkdMRWxCUVVzd1NDeEZRVUZGY0VZc1IwRkJSaXhEUVVGTk1VTXNRMEZCVGl4RlFVRlJMRk5CUVZJc1MwRkJiMElzU1VGQmVrSXNSVUZCT0VKRExFVkJRVVZITEVOQlFVWXNUVUZCVDBvc1JVRkJSWEZYTEV0QlFVWXNRMEZCVVVNc1QwRkJVaXhIUVVGblFpeEZRVUYyUWl4RFFVRXpReXhIUVVGMVJTeFBRVUZMZEZjc1JVRkJSWEZYTEV0QlFVWXNRMEZCVVVNc1QwRkJZaXhKUVVGelFqVk9MRWRCUVVjeFNTeERRVUZJTEVOQlFYUkNMRXRCUVRoQ1F5eEZRVUZGUnl4RFFVRkdMRWxCUVV0M1JpeEhRVUZITlVZc1EwRkJTQ3hEUVVGdVF5eERRVUV4UlN4SlFVRnhTQ3hYUVVGVFJDeERRVUZVTEV0QlFXRkZMRVZCUVVWSExFTkJRVVlzU1VGQlN5eE5RVUZNTEVWQlFWa3dTQ3hGUVVGRmQwNHNSMEZCUml4RFFVRk5kRllzUTBGQlRpeEZRVUZSTEZOQlFWSXNSVUZCYTBKRUxFTkJRV3hDTEVOQlFYcENMRU5CUVdwS0xFTkJRVkE3UVVGQmVFTXNTMEZCWjFBc1MwRkJTVXNzU1VGQlJTeERRVUZPTEVWQlFWRkJMRWxCUVVWRkxFTkJRVllzUlVGQldVWXNSMEZCV2p0QlFVRm5RaXhqUVVGTlNDeEZRVUZGUnl4RFFVRkdMRU5CUVU0c1MwRkJZVm9zUlVGQlJWa3NRMEZCUml4RlFVRkxhVmNzUzBGQlRDeERRVUZYUXl4UFFVRllMRWRCUVcxQ2NsY3NSVUZCUlVjc1EwRkJSaXhEUVVGb1F6dEJRVUZvUWl4TFFVRnpSQ3hQUVVGUFdpeERRVUZRTzBGQlFWTXNTMEZCUlhORExFVkJRVVlzUTBGQlN6QkNMRTFCUVV3c1EwRkJXU3hGUVVGRGNWUXNUVUZCU3l4blFrRkJWVHRCUVVGRExHRkJRVTkyVFN4SFFVRkhMRWxCUVVnc1JVRkJVU3hEUVVGRExFTkJRVlFzUTBGQlVEdEJRVUZ0UWl4TFFVRndReXhGUVVGeFEzZE5MRTFCUVVzc1owSkJRVlU3UVVGQlF5eGhRVUZQZUUwc1IwRkJSeXhKUVVGSUxFTkJRVkE3UVVGQlowSXNTMEZCY2tVc1JVRkJjMFY1VFN4UlFVRlBMR2RDUVVGVGRsZ3NRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJUU3hoUVVGWExFOUJRVTlCTEVOQlFXeENMRWRCUVc5Q1FTeEpRVUZGTEV0QlFVdHhXQ3hKUVVGTUxFVkJRVVlzUjBGQll5eExRVUZMUXl4SlFVRk1MRVZCUVd4RExFZEJRVGhETEV0QlFVdG9WU3hKUVVGTUxFTkJRVlVzV1VGQlZUdEJRVUZETkVZc1YwRkJSeXhKUVVGSUxFbEJRVk0zUnl4RlFVRkZMRWxCUVVZc1JVRkJVV2RXTEVsQlFWSXNSVUZCVkN4SFFVRjNRbWhXTEVWQlFVVXNTVUZCUml4RlFVRlJhVllzU1VGQlVpeEZRVUY0UWp0QlFVRjFReXhQUVVFMVJDeERRVUZ3UkR0QlFVRnJTQ3hMUVVFelRTeEZRVUZhTEVWQlFUQk9MRWxCUVVsMlRTeExRVUZITEhWQ1FVRlFPMEZCUVVFc1RVRkJLMEpETEV0QlFVY3NaME5CUVd4RE8wRkJRVUVzVFVGQmJVVkZMRXRCUVVjc01rSkJRWFJGTzBGQlFVRXNUVUZCYTBkSExFdEJRVWNzUlVGQlEyMU5MRkZCUVU4c1EwRkJReXhEUVVGRUxFVkJRVWNzT0VKQlFVZ3NSVUZCYTBNc1YwRkJiRU1zUTBGQlVpeEZRVUYxUkVNc1QwRkJUU3hEUVVGRExFTkJRVVFzUlVGQlJ5eFRRVUZJTEVWQlFXRXNWVUZCWWl4RFFVRTNSQ3hGUVVGelJrTXNTMEZCU1N4RFFVRkRMRU5CUVVRc1JVRkJSeXh0UWtGQlNDeEZRVUYxUWl4eFFrRkJka0lzUTBGQk1VWXNSVUZCZDBsRExFbEJRVWNzUTBGQlF5eERRVUZFTEVWQlFVY3NaMEpCUVVnc1JVRkJiMElzYTBKQlFYQkNMRU5CUVROSkxFVkJRVzFNUXl4SlFVRkhMRU5CUVVNc1EwRkJSQ3hGUVVGSExHOUNRVUZJTEVWQlFYZENMSFZDUVVGNFFpeERRVUYwVEN4RlFVRjFUME1zVlVGQlV5eERRVUZETEVOQlFVUXNSVUZCUnl4RlFVRklMRVZCUVUwc1JVRkJUaXhEUVVGb1VDeEZRVUZ5Unl4RFFVRm5WM2hOTEVkQlFVZDVUU3hSUVVGSUxFZEJRVmw2VFN4SFFVRkhiVTBzVFVGQlppeEZRVUZ6UW01TkxFZEJRVWN3VFN4TFFVRklMRWRCUVZNeFRTeEhRVUZITWswc1MwRkJTQ3hIUVVGVE0wMHNSMEZCUnpSTkxGRkJRVWdzUjBGQldUVk5MRWRCUVVjMlRTeFBRVUZJTEVkQlFWYzNUU3hIUVVGSGIwMHNTMEZCYkVVc1JVRkJkMFZ3VFN4SFFVRkhPRTBzUlVGQlNDeEhRVUZOT1Uwc1IwRkJSM1ZOTEVWQlFXcEdMRU5CUVc5R0xGTkJRVk4wVFN4RlFVRlVMRU5CUVZsMFRDeERRVUZhTEVWQlFXTkRMRU5CUVdRc1JVRkJaMEk3UVVGQlF5eFJRVUZKVFN4RFFVRktMRU5CUVUwc1QwRkJUMEVzU1VGQlJTeGxRVUZoTEU5QlFVOVFMRVZCUVVWblN5eHZRa0ZCZEVJc1IwRkJNa05vU3l4RlFVRkZaMHNzYjBKQlFVWXNRMEZCZFVJdlNpeExRVUZITEVkQlFURkNMRU5CUVRORExFZEJRVEJGTEdWQlFXRXNUMEZCVDBRc1JVRkJSVEJMTEdkQ1FVRjBRaXhIUVVGMVF6RkxMRVZCUVVVd1N5eG5Ra0ZCUml4RFFVRnRRbnBMTEV0QlFVY3NSMEZCZEVJc1EwRkJka01zUjBGQmEwVXNSVUZCT1Vrc1JVRkJhVW9zUzBGQlN5eERRVUZNTEV0QlFWTkJMRU5CUVZRc1NVRkJXVUVzUzBGQlIzTkhMRVZCUVVWMlJ5eERRVUZHTEVWQlFVbERMRU5CUVVvc1EwRkJaaXhIUVVGelFtOURMRVZCUVVWbExFdEJRVVlzUTBGQlVTeERRVUZEY0VRc1EwRkJSQ3hEUVVGU0xFVkJRVmxQTEVOQlFWb3NRMEZCZEVJc1IwRkJjVU5CTEVOQlFUZE1PMEZCUVN0TUxGbEJRVk5uVEN4RlFVRlVMRU5CUVZsMlRDeERRVUZhTEVWQlFXTkRMRU5CUVdRc1JVRkJaMEk3UVVGQlF5eFRRVUZKTEVsQlFVbE5MRWxCUVVVc1EwRkJUaXhGUVVGUlF5eEpRVUZGVWl4RlFVRkZaMFFzVFVGQmFFSXNSVUZCZFVKNlF5eEpRVUZGUXl4RFFVRjZRaXhGUVVFeVFrUXNSMEZCTTBJN1FVRkJLMElyU0N4UlFVRkZkMDRzUjBGQlJpeERRVUZOT1ZZc1JVRkJSVThzUTBGQlJpeERRVUZPTEVWQlFWY3NXVUZCV0N4RlFVRjNRaXhEUVVGRFRpeERRVUZFTEVsQlFVbHhTU3hGUVVGRmNFWXNSMEZCUml4RFFVRk5ha1FzUlVGQlJVMHNRMEZCUml4RFFVRk9MRVZCUVZjc1dVRkJXQ3hEUVVFMVFqdEJRVUV2UWp0QlFVRnhSaXhQUVVGSmEwd3NTMEZCUnl4WFFVRlFMRU5CUVcxQ0xGTkJRVk5vUWl4RlFVRlVMRU5CUVZsNlN5eERRVUZhTEVWQlFXTkRMRU5CUVdRc1JVRkJaMEpOTEVOQlFXaENMRVZCUVd0Q1F5eERRVUZzUWl4RlFVRnZRa01zUTBGQmNFSXNSVUZCYzBJN1FVRkJReXhUUVVGSkxFbEJRVWxITEVOQlFVb3NSVUZCVFVVc1EwRkJUaXhGUVVGUlJTeERRVUZTTEVWQlFWVkZMRU5CUVZZc1JVRkJXVVVzUTBGQldpeEZRVUZqUXl4RFFVRmtMRVZCUVdkQ1JTeEpRVUZGZEVJc1JVRkJSVzFaTEhOQ1FVRkdMRVZCUVd4Q0xFVkJRVFpETTFjc1NVRkJSU3hGUVVFdlF5eEZRVUZyUkVNc1NVRkJSU3hEUVVGd1JDeEZRVUZ6UkVVc1NVRkJSVFZDTEVWQlFVVm5SQ3hOUVVFNVJDeEZRVUZ4UlhSQ0xFbEJRVVZGTEVOQlFYWkZMRVZCUVhsRlJpeEhRVUY2UlR0QlFVRTJSU3hWUVVGSFpDeEpRVUZGV2l4RlFVRkZNRUlzUTBGQlJpeERRVUZHTEVWQlFVOWtMRXRCUVVjc1RVRkJTVUVzUTBGQmFrSXNSVUZCYlVJc1NVRkJSeXhoUVVGWGVVSXNSVUZCUlhWRExFbEJRVVlzUTBGQlQyaEZMRU5CUVZBc1EwRkJaQ3hGUVVGM1FubENMRVZCUVVWbExFdEJRVVlzUTBGQlVUTkNMRU5CUVZJc1JVRkJWV0lzUlVGQlJUWkpMRkZCUVVZc1IwRkJWeXhEUVVGRE4wa3NRMEZCUkN4RFFVRllMRWRCUVdWQkxFTkJRWHBDTEVWQlFYaENMRXRCUVhsRUxFbEJRVWMyU3l4SFFVRkhkRUlzU1VGQlNDeERRVUZSZGtvc1EwRkJVaXhEUVVGSUxFVkJRV003UVVGQlEwVXNXVUZCUlVFc1MwRkJSMU1zUlVGQlJWVXNWMEZCUml4RFFVRmphRU1zUlVGQlJUWkNMR0ZCUVVZc1EwRkJaMElzUzBGQmFFSXNRMEZCWkN4RFFVRk1MRVZCUVRKRFpDeEpRVUZGTEVOQlFVTm5TeXhIUVVGSGJrSXNTVUZCU0N4RFFVRlJha29zUTBGQlVpeExRVUZaTEVOQlFVTXNSVUZCUkN4RlFVRkpMRVZCUVVvc1EwRkJZaXhGUVVGelFpeERRVUYwUWl4RlFVRjVRbkZHTEZkQlFYcENMRVZCUVRkRExFVkJRVzlHTDBVc1NVRkJSVzFMTEVkQlFVZHlTeXhEUVVGSUxFdEJRVTl4U3l4SFFVRkhkMDBzVVVGQmFFY3NSVUZCZVVjdlZ5eEZRVUZGTkV3c1UwRkJSaXhIUVVGWmVFd3NSVUZCUlN4RFFVRkdMRWxCUVV0dFFpeEZRVUZGWjFjc1lVRkJSaXhEUVVGblFucFlMRU5CUVdoQ0xFTkJRVXdzUjBGQmQwSk5MRVZCUVVVc1EwRkJSaXhEUVVFM1NTeEZRVUZyU2tjc1NVRkJSVWdzUlVGQlJTeERRVUZHTEVOQlFYQktMRU5CUVhsS0xFOUJRVTFITEVkQlFVNDdRVUZCVlZBc1kwRkJSVUVzUlVGQlJYVk9MRk5CUVVvN1FVRkJWaXhUUVVGM1FtaE5MRVZCUVVWbExFdEJRVVlzUTBGQlVUTkNMRU5CUVZJc1JVRkJWVmdzUlVGQlJUQkpMRlZCUVZvc1IwRkJkMEl4U1N4SlFVRkZVeXhGUVVGRmRVMHNWVUZCTlVJc1JVRkJkVU5vVGl4RlFVRkZLMDBzVjBGQlJpeEhRVUZqTEVWQlFYSkVPMEZCUVhkRUxFOUJRWGhRTEUxQlFUWlFjRTBzUlVGQlJWSXNTVUZCUml4RFFVRlBhRUlzUlVGQlJYRlpMR05CUVVZc1EwRkJhVUl4V0N4RFFVRnFRaXhEUVVGUU8wRkJRWFJhTEV0QlFXdGlWeXhGUVVGRmMwMHNWMEZCUml4SFFVRmpMRVZCUVdRc1JVRkJhVUp1VFN4SlFVRkZMRU5CUVc1Q0xFTkJRWEZDTEU5QlFVMWtMRWxCUVVWaExFVkJRVVZETEVkQlFVWXNRMEZCVWp0QlFVRmxMRlZCUVVkc1FpeExRVUZITmtJc1JVRkJSV3RFTEU5QlFVWXNRMEZCVlRORkxFTkJRVllzUlVGQldVb3NRMEZCV2l4SlFVRmxMRU5CUVVNc1EwRkJkRUlzUlVGQmQwSkRMRXRCUVVkQkxFVkJRVVZSTEVsQlFVWXNRMEZCVDB3c1EwRkJVQ3hEUVVGSUxFTkJRWGhDTEV0QlFUQkRMRWxCUVVkUkxFbEJRVVZwUWl4RlFVRkZPRXNzVVVGQlJpeERRVUZYZGswc1JVRkJSV2RLTEdGQlFXSXNSVUZCTWtKb1NpeERRVUV6UWl4RFFVRkdMRVZCUVdkRFJTeEpRVUZGZDBzc1IwRkJSeTlLTEVWQlFVVlZMRmRCUVVZc1EwRkJZM0pDTEVOQlFXUXNRMEZCU0N4RlFVRnZRaXhSUVVGd1FpeERRVUZzUXl4RlFVRm5SVkVzUzBGQlIyMUxMRWRCUVVkNlN5eERRVUZJTEVOQlFXNUZMRVZCUVhsRlVDeERRVUUxUlN4RlFVRTRSVHRCUVVGRFl5eFpRVUZGTEVOQlFVWXNRMEZCU1N4UFFVRk5WQ3hKUVVGRlJTeEZRVUZGVHl4SFFVRkdMRU5CUVZJN1FVRkJaVFpLTEdGQlFVZG1MRWxCUVVnc1EwRkJVWFpLTEVWQlFVVm5SU3hKUVVGR0xFbEJRVkVzUlVGQmFFSXNTMEZCY1VKeVJTeEZRVUZGVlN4SlFVRkdMRU5CUVU5TUxFTkJRVkFzUTBGQmNrSTdRVUZCWmp0QlFVRTRRenRCUVVFeFRDeExRVUV3VEN4UFFVRlBWeXhEUVVGUU8wRkJRVk1zU1VGQlF5eFpRVUZWTzBGQlFVTXNVVUZCU1haQ0xFbEJRVVZSTEVWQlFVVTBXQ3h6UWtGQlJpeEZRVUZPTzBGQlFVRXNVVUZCYVVOdVdTeEpRVUZGUkN4RlFVRkZhVU1zVjBGQlJpeERRVUZqZWtJc1JVRkJSWE5DTEdGQlFVWXNRMEZCWjBJc1MwRkJhRUlzUTBGQlpDeERRVUZ1UXp0QlFVRkJMRkZCUVhsRmRrSXNTVUZCUlVNc1JVRkJSWE5DTEdGQlFVWXNRMEZCWjBJc1QwRkJhRUlzUTBGQk0wVXNRMEZCYjBkMlFpeEZRVUZGSzBvc1dVRkJSaXhEUVVGbExFMUJRV1lzUlVGQmMwSXNUMEZCZEVJc1IwRkJLMEl2U2l4RlFVRkZLMG9zV1VGQlJpeERRVUZsTEZOQlFXWXNSVUZCZVVJc1UwRkJla0lzUTBGQkwwSXNSVUZCYlVVdlNpeEZRVUZGSzBvc1dVRkJSaXhEUVVGbExFMUJRV1lzUlVGQmMwSXNSMEZCZEVJc1EwRkJia1VzUlVGQk9FWnlTeXhGUVVGRlowTXNWMEZCUml4RFFVRmpNVUlzUTBGQlpDeERRVUU1Uml4RlFVRXJSM0ZDTEVWQlFVVXlWeXhWUVVGR0xFZEJRV0YwV1N4RlFVRkZkVmtzVTBGQlJpeERRVUZaTEVOQlFVTXNRMEZCWWl4RlFVRm5Ra0VzVTBGQmFFSXNRMEZCTUVJc1EwRkJReXhEUVVFelFpeEZRVUU0UW01TExGTkJRVGxDTEVOQlFYZERhMElzVDBGQmNFc3NSVUZCTkV0MFVDeEZRVUZGZVUwc1UwRkJSaXhIUVVGWkxIZENRVUY0VEN4RlFVRnBUamxMTEVWQlFVVTJWeXhqUVVGR0xFZEJRV2xDTEVOQlFVTXNRMEZCUTNoWkxFVkJRVVYxV1N4VFFVRkdMRU5CUVZrc1EwRkJReXhEUVVGaUxFVkJRV2RDYmtzc1UwRkJhRUlzUTBGQk1FSnJSQ3haUVVFNVVEdEJRVUV5VVN4SFFVRXhXQ3hGUVVGRUxFTkJRVGhZTEVsQlFVbGFMRXRCUVVkdVVTeEZRVUZGYlV3c1pVRkJWRHRCUVVGQkxFMUJRWGxDY0VJc1MwRkJSeXhOUVVFMVFqdEJRVUZCTEUxQlFXMURia0lzUzBGQlJ5eG5SRUZCZEVNN1FVRkJRU3hOUVVGMVJqQklMRXRCUVVjc2NVSkJRVEZHTEVOQlFXZElMRk5CUVZORExFVkJRVlFzUjBGQllUdEJRVUZETEZkQlFVMHNRMEZCUXl4RFFVRlFPMEZCUVZNc1dVRkJVME1zUlVGQlZDeEhRVUZoTzBGQlFVTXNWMEZCVFN4RFFVRkRMRU5CUVZBN1FVRkJVeXhaUVVGVFF5eEZRVUZVTEVkQlFXRTdRVUZCUXl4UlFVRkhPMEZCUVVNc1lVRkJUM3BSTEVWQlFVVXdUeXhoUVVGVU8wRkJRWFZDTEV0QlFUTkNMRU5CUVRKQ0xFOUJRVTFzVUN4RFFVRk9MRVZCUVZFc1EwRkJSVHRCUVVGRExGbEJRVk5yVWl4RlFVRlVMRU5CUVZsc1VpeERRVUZhTEVWQlFXTkRMRU5CUVdRc1JVRkJaMEpOTEVOQlFXaENMRVZCUVd0Q1F5eERRVUZzUWl4RlFVRnZRa01zUTBGQmNFSXNSVUZCYzBKSExFTkJRWFJDTEVWQlFYZENPMEZCUVVNc1VVRkJTVVVzUTBGQlNpeEZRVUZOUlN4RFFVRk9MRU5CUVZFc1NVRkJSeXh2UWtGQmFVSm1MRU5CUVdwQ0xIbERRVUZwUWtFc1EwRkJha0lzUlVGQlNDeEZRVUZ6UWp0QlFVRkRMR3RDUVVGVkxFOUJRVTlOTEVOQlFXcENMRXRCUVhGQ1F5eEpRVUZGUVN4TFFVRkhSQ3hEUVVGTUxFVkJRVTlCTEVsQlFVVXNTMEZCU3l4RFFVRnVReXhGUVVGelF5eExRVUZKVXl4RFFVRktMRWxCUVZObUxFTkJRVlE3UVVGQlYybFNMRmRCUVVkc1VpeERRVUZJTEVWQlFVdG5RaXhEUVVGTUxFVkJRVTlVTEVOQlFWQXNSVUZCVTBNc1EwRkJWQ3hGUVVGWFVDeEZRVUZGWlN4RFFVRkdMRU5CUVZnc1JVRkJaMEpLTEVOQlFXaENPMEZCUVZnc1QwRkJPRUlzVDBGQlQxb3NRMEZCVUR0QlFVRlRMRk5CUVVjc1VVRkJUVkVzUTBGQlRpeEpRVUZUTEZGQlFVMURMRU5CUVdZc1NVRkJhMEpCTEVsQlFVVkdMRU5CUVVZc1JVRkJTVU1zU1VGQlJVUXNTVUZCUlN4TFFVRkxMRU5CUVM5Q0xFbEJRV3RETEZGQlFVMUZMRU5CUVU0c1MwRkJWU3haUVVGVkxFOUJRVTlHTEVOQlFXcENMRWxCUVc5Q1JTeEpRVUZGUkN4RFFVRkdMRVZCUVVsQkxFbEJRVVVzUzBGQlN5eERRVUV2UWl4TFFVRnRRME1zU1VGQlJVUXNRMEZCUml4RlFVRkpRU3hKUVVGRlJDeERRVUZPTEVWQlFWRkJMRWxCUVVVc1MwRkJTeXhEUVVGc1JDeERRVUZXTEVOQlFXeERMRVZCUVd0SFJTeE5RVUZKTEVOQlFVTXNRMEZCTVVjc1JVRkJORWRCTEVsQlFVVjFVU3hGUVVGR0xFTkJRVFZITEV0QlFYTklMRWxCUVVjc1EwRkJRM1pSTEVOQlFVb3NSVUZCVFN4UFFVRlBWQ3hEUVVGUUxFTkJRVk1zVDBGQlR5eE5RVUZKV1N4RFFVRktMRXRCUVZGRkxFbEJRVVZNTEVOQlFVWXNSVUZCU1VFc1NVRkJSU3hYUVVGVFZDeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRlBjVU1zU1VGQlNYRlhMRWRCUVVvc1EwRkJVVEZaTEVOQlFWSXNSMEZCVjJNc1JVRkJSVEJETEV0QlFVWXNRMEZCVVN4SlFVRlNMRVZCUVdGRExGTkJRV0lzUTBGQmJFSTdRVUZCTUVNc1MwRkJOVVFzUlVGQk5rUm9SQ3hGUVVGRlowWXNTVUZCUml4SFFVRlBNMFVzUlVGQlJUSkZMRWxCUVVZc1MwRkJVek5GTEVWQlFVVXlSU3hKUVVGR0xFZEJRVTl3UkN4RlFVRkZiMFFzU1VGQlJpeEZRVUZvUWl4RFFVRTFSU3hIUVVGMVIzcEdMRVZCUVVWelJDeEpRVUZHTEVOQlFVOHNXVUZCVlR0QlFVRkRha0lzVVVGQlJYTlhMRXRCUVVZc1EwRkJVWFJITEVkQlFWSXNRMEZCV1N4SlFVRmFMRVZCUVdsQ2NGTXNRMEZCYWtJc1JVRkJiVUpSTEVOQlFXNUNMRVZCUVhGQ1JDeERRVUZ5UWl4RlFVRjFRa1FzUTBGQmRrSTdRVUZCTUVJc1MwRkJOVU1zUTBGQk9VYzdRVUZCTkVvc1MwRkJSVzlaTEV0QlFVWXNSMEZCVVN4RlFVRkRReXhSUVVGUExFVkJRVklzUlVGQlYzWkhMRXRCUVVrc1lVRkJVM0pUTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaFRTeERRVUZpTEVWQlFXVkRMRU5CUVdZc1JVRkJhVUpETEVOQlFXcENMRVZCUVcxQ08wRkJRVU1zVlVGQlNVY3NRMEZCU2p0QlFVRkJMRlZCUVUxRkxFTkJRVTQ3UVVGQlFTeFZRVUZSUlN4RFFVRlNPMEZCUVVFc1ZVRkJWVVVzUTBGQlZqdEJRVUZCTEZWQlFWbEZMRU5CUVZvN1FVRkJRU3hWUVVGalF5eERRVUZrTzBGQlFVRXNWVUZCWjBKRkxFTkJRV2hDTzBGQlFVRXNWVUZCYTBKRkxFTkJRV3hDTzBGQlFVRXNWVUZCYjBKRExFTkJRWEJDTzBGQlFVRXNWVUZCYzBKRkxFTkJRWFJDTzBGQlFVRXNWVUZCZDBKRExFTkJRWGhDTzBGQlFVRXNWVUZCTUVKUExFbEJRVVZyUnl4RlFVRkZjRVlzUjBGQlJpeERRVUZOYkVRc1EwRkJUaXhEUVVFMVFpeERRVUZ4UXl4SlFVRkhiME1zUTBGQlNDeEZRVUZMTzBGQlFVTTNRaXhWUVVGRmMxa3NUMEZCUml4TFFVRlphbGtzU1VGQlJVd3NRMEZCUml4RlFVRkpRU3hKUVVGRlN5eEZRVUZGYVZrc1QwRkJVaXhGUVVGblFuQlpMRWxCUVVWSExFVkJRVVY1VVN4UlFVRm9ReXhIUVVFd1F6VlJMRXRCUVVjMFFpeEZRVUZGYTBzc1NVRkJSaXhEUVVGUFNTeGxRVUZRTEVOQlFYVkNaMFVzUlVGQmRrSXNSVUZCTUVKc1VTeERRVUV4UWl4RFFVRTNReXhGUVVFd1JVWXNSVUZCUld0R0xFbEJRVVlzUzBGQlUyeEdMRVZCUVVWclJpeEpRVUZHTEVkQlFVOXdSQ3hGUVVGRmIwUXNTVUZCUml4RlFVRm9RaXhEUVVFeFJTeEZRVUZ2Unl4RFFVRkRka1VzU1VGQlJXdENMRVZCUVVVd1Z5eE5RVUZNTEUxQlFXVTFXQ3hKUVVGRmEwSXNSVUZCUlRCWExFMUJRVVlzUjBGQlV5eEZRVUV4UWl4RFFVRndSeXhGUVVGclNTeERRVUZEYUZrc1NVRkJSWE5DTEVWQlFVVXlWeXhOUVVGTUxFMUJRV1ZxV1N4SlFVRkZjMElzUlVGQlJUSlhMRTFCUVVZc1IwRkJVeXhWUVVGVE9Wa3NRMEZCVkN4RlFVRlhPMEZCUVVNc2FVSkJRVTBzWlVGQllTeFBRVUZQYjBNc1EwRkJjRUlzU1VGQmRVSkJMRVZCUVVWelZ5eExRVUZHTEVOQlFWRkxMRk5CUVZJc1MwRkJiMEl2V1N4RlFVRkZNa1VzU1VGQk4wTXNSMEZCYTBSMlF5eEZRVUZGYzFjc1MwRkJSaXhEUVVGUlRTeFJRVUZTTEVOQlFXbENlbFlzUzBGQmFrSXNRMEZCZFVKNFJDeERRVUYyUWl4RlFVRjVRbmxFTEZOQlFYcENMRU5CUVd4RUxFZEJRWE5HTEV0QlFVc3NRMEZCYWtjN1FVRkJiVWNzVTBGQmVra3NRMEZCYkVrc1JVRkJObEY0UkN4SlFVRkZMRU5CUVVOQkxFdEJRVWNzUlVGQlNpeEZRVUZSYVU4c1MwRkJVaXhEUVVGamFFZ3NRMEZCWkN4TFFVRnJRaXhEUVVGRExFVkJRVVFzUTBGQmFsTXNSVUZCYzFNNVJpeEpRVUZGYmtJc1JVRkJSU3RETEUxQlFURlRMRU5CUVdsVUxFOUJRVTAxUWl4SFFVRk9PMEZCUVZWS0xHTkJRVVU0VUN4SFFVRkhha2dzU1VGQlNDeERRVUZSTlVvc1JVRkJSVzFDTEVOQlFVWXNRMEZCVWl4TFFVRmxMRVZCUVdwQ0xFVkJRVzlDVFN4SlFVRkZSeXhKUVVGRllpeEZRVUZGTEVOQlFVWXNRMEZCZUVJc1JVRkJOa0paTEVsQlFVVXNRMEZCUTFvc1JVRkJSU3hEUVVGR0xFdEJRVTBzUlVGQlVDeEZRVUZYWjBZc1MwRkJXQ3hEUVVGcFFpeEhRVUZxUWl4RlFVRnpRbXhETEVsQlFYUkNMRVZCUVM5Q0xFVkJRVFJFY0VNc1RVRkJTVWdzU1VGQlJXTXNSVUZCUlhOWExFdEJRVVlzUTBGQlVVOHNUMEZCVWl4RFFVRm5RbmhZTEVOQlFXaENMRXRCUVc5Q0xFVkJRWFJDTEVWQlFYbENRU3hKUVVGRkxFTkJRVU5xUWl4SlFVRkZZeXhGUVVGRk5GZ3NXVUZCU2l4SFFVRnBRalZZTEVWQlFVVTJXQ3hSUVVGd1FpeExRVUVyUWpGWUxFTkJRVEZFTEVWQlFUUkVTQ3hKUVVGRll5eEZRVUZGYzFjc1MwRkJSaXhEUVVGUlR5eFBRVUZTTEVOQlFXZENlRmdzUTBGQmFFSXNTMEZCYjBJc1JVRkJiRVlzUlVGQmNVWk1MRWxCUVVWblFpeEZRVUZGTWtJc1RVRkJSaXhEUVVGVExFVkJRVU5aTEUxQlFVdHNSQ3hEUVVGT0xFVkJRVkV5V0N4VlFVRlRlRmdzUTBGQmFrSXNSVUZCYlVKelZTeE5RVUZMTTFZc1EwRkJlRUlzUlVGQk1FSnhXU3hUUVVGUmRGa3NRMEZCYkVNc1JVRkJiME5yUml4TlFVRkxiRVlzUlVGQlJXdEdMRWxCUVRORExFVkJRV2RFTkV3c1ZVRkJVelZSTEVOQlFYcEVMRVZCUVRKRU5FZ3NZMEZCWVRWSUxFdEJRVWMwUWl4RlFVRkZiVkFzU1VGQlJpeERRVUZQZEVRc1MwRkJVQ3hEUVVGaE4wWXNXVUZCWWl4RFFVRXdRamhDTEVsQlFURkNMRU5CUVN0Q01Vb3NRMEZCTDBJc1EwRkJNMFVzUlVGQk5rYzJXU3hYUVVGVk1WZ3NSVUZCUlRSSkxFbEJRVVlzUTBGQlR5eEhRVUZRTEVOQlFYWklMRVZCUVZRc1JVRkJOa2sxU2l4RFFVRTNTU3hEUVVGMlJpeEZRVUYxVHl4RFFVRkRZU3hKUVVGRlVDeEZRVUZGVVN4RFFVRkdMRU5CUVVnc1RVRkJWMFFzU1VGQlJWQXNSVUZCUlZFc1EwRkJSaXhKUVVGTExFVkJRVkFzUlVGQlZVUXNSVUZCUlRoWUxHRkJRVVlzUjBGQlowSXNRMEZCTVVJc1JVRkJORUpvV1N4RlFVRkZhVmtzUzBGQlJpeEpRVUZUYWxrc1JVRkJSV2xaTEV0QlFVWXNRMEZCVVRkWUxFbEJRVklzUTBGQllUTkNMRU5CUVdJc1JVRkJaVkVzUTBGQlppeEZRVUZwUW05Q0xFTkJRV3BDTEVWQlFXMUNaQ3hEUVVGdVFpeE5RVUYzUWl4RFFVRkRMRU5CUVd4RExFbEJRWEZEWkN4RlFVRkZLMHdzWjBKQlFVWXNTVUZCYjBJdlRDeEZRVUZGSzB3c1owSkJRVVlzUTBGQmJVSnlTeXhEUVVGdVFpeEZRVUZ4UWxvc1EwRkJja0lzUTBGQmFFY3NRMEZCZGs4c1JVRkJaMWRUTEVWQlFVVTRVU3hIUVVGR0xFdEJRVkU1VVN4RlFVRkZPRkVzUjBGQlJpeERRVUZOTVZFc1NVRkJUaXhEUVVGWE0wSXNRMEZCV0N4RlFVRmhjVUlzUTBGQllpeEhRVUZuUWtFc1JVRkJSWGRZTEU5QlFVWXNRMEZCVlhCVUxFbEJRVllzUzBGQmFVSndSU3hGUVVGRmQxZ3NUMEZCUml4RFFVRlZjRlFzU1VGQlZpeEhRVUZsYkVZc1JVRkJSV3RHTEVsQlFXeERMRU5CUVhoQ0xFTkJRV2hYTEVWQlFXbGhhRVlzU1VGQlJXZENMRVZCUVVWelF5eE5RVUZHTEVOQlFWTjBReXhGUVVGRk9GZ3NZVUZCUml4RlFVRlVMRVZCUVRKQ0xFTkJRVE5DTEVWQlFUWkNiRmtzUTBGQk4wSXNRMEZCUml4SFFVRnJRMGtzUlVGQlJWSXNTVUZCUml4RFFVRlBTU3hEUVVGUUxFTkJRVzVqTEVWQlFUWmpaMElzUlVGQlJYTlhMRXRCUVVZc1EwRkJVVU1zVFVGQlVpeERRVUZsYkZnc1EwRkJaaXhKUVVGclFpeERRVUZETEVOQlFYQmxMRU5CUVRWRU8wRkJRVlk3UVVGQk5tbENPMEZCUVVNc1MwRkJOelpDTEVWQlFUZzJRakJTTEZGQlFVOHNaMEpCUVZOd1ZDeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVTBzUTBGQllpeEZRVUZsUXl4RFFVRm1MRVZCUVdsQ1F5eERRVUZxUWl4RlFVRnRRanRCUVVGRExGVkJRVWxITEVOQlFVbzdRVUZCUVN4VlFVRk5SU3hEUVVGT08wRkJRVUVzVlVGQlVVVXNRMEZCVWp0QlFVRkJMRlZCUVZWRkxFTkJRVlk3UVVGQlFTeFZRVUZaUlN4RFFVRmFPMEZCUVVFc1ZVRkJZME1zUTBGQlpEdEJRVUZCTEZWQlFXZENSU3hEUVVGb1FqdEJRVUZCTEZWQlFXdENSU3hEUVVGc1FqdEJRVUZCTEZWQlFXOUNReXhEUVVGd1FqdEJRVUZCTEZWQlFYTkNSU3hEUVVGMFFqdEJRVUZCTEZWQlFYZENReXhEUVVGNFFqdEJRVUZCTEZWQlFUQkNUeXhKUVVGRmEwY3NSVUZCUlRCT0xFOUJRVVlzUTBGQlZXaFhMRU5CUVZZc1MwRkJZM05KTEVWQlFVVndSaXhIUVVGR0xFTkJRVTFzUkN4RFFVRk9MRU5CUVRGRExFTkJRVzFFTEVsQlFVZHZReXhOUVVGSmJFSXNTVUZCUld0Q0xFVkJRVVV3Vnl4TlFVRlNMRU5CUVVnc1JVRkJiVUk3UVVGQlF6ZFpMRmxCUVVVc1EwRkJRMEVzUzBGQlJ5eEZRVUZLTEVWQlFWRnBUeXhMUVVGU0xFTkJRV05vU0N4RFFVRmtMRXRCUVd0Q0xFTkJRVU1zUlVGQlJDeERRVUZ3UWl4RlFVRjVRamxHTEVsQlFVVnVRaXhGUVVGRkswTXNUVUZCTjBJc1EwRkJiME1zVDBGQlRUVkNMRWRCUVU0N1FVRkJWU3hqUVVGSFNpeEpRVUZGT0ZBc1IwRkJSMnBJTEVsQlFVZ3NRMEZCVVRWS0xFVkJRVVZ0UWl4RFFVRkdMRU5CUVZJc1MwRkJaU3hGUVVGcVFpeEZRVUZ2UWswc1NVRkJSVWNzU1VGQlJXSXNSVUZCUlN4RFFVRkdMRU5CUVhoQ0xFVkJRVFpDV1N4SlFVRkZMRU5CUVVOYUxFVkJRVVVzUTBGQlJpeExRVUZOTEVWQlFWQXNSVUZCVjJkR0xFdEJRVmdzUTBGQmFVSXNSMEZCYWtJc1JVRkJjMEpzUXl4SlFVRjBRaXhGUVVFdlFpeEZRVUUwUkhCRExFTkJRUzlFTEVWQlFXbEZPMEZCUVVOSUxHZENRVUZGWXl4RlFVRkZjMWNzUzBGQlJpeERRVUZSVHl4UFFVRlNMRU5CUVdkQ2VGZ3NRMEZCYUVJc1MwRkJiMElzUlVGQmRFSXNSVUZCZVVKQkxFbEJRVVVzUTBGQlEyeENMRWxCUVVWbExFVkJRVVUwV0N4WlFVRktMRWRCUVdsQ05WZ3NSVUZCUlRaWUxGRkJRWEJDTEV0QlFTdENNVmdzUTBGQk1VUXNSVUZCTkVSRUxFbEJRVVZRTEVWQlFVVlJMRU5CUVVZc1MwRkJUU3hGUVVGd1JTeEZRVUYxUlZZc1NVRkJSVUVzUlVGQlJTeERRVUZHTEV0QlFVMHNTVUZCU1hOSExFMUJRVW9zUTBGQlZ5eFpRVUZWTVVZc1JVRkJSVFJKTEVsQlFVWXNRMEZCVHl4bFFVRlFMRU5CUVZZc1IwRkJhME1zVTBGQk4wTXNRMEZCTDBVc1JVRkJkVWt4U2l4SlFVRkZSaXhKUVVGRllTeEZRVUZGZFVJc1RVRkJOMGtzUTBGQmIwb3NUMEZCVFhCRExFZEJRVTQ3UVVGQlZWTXNhMEpCUVVWSkxFVkJRVVZpTEVOQlFVWXNRMEZCUml4RlFVRlBMRU5CUVVOSUxFTkJRVVFzU1VGQlNXOUNMRTFCUVVsU0xFVkJRVVZuV1N4UlFVRldMRWxCUVc5Q09Wa3NTMEZCUjBFc1JVRkJSV3RHTEVsQlFVWXNTMEZCVTNCRkxFVkJRVVZ2UlN4SlFVRnNReXhKUVVGM1EzcEZMRXRCUVVjc1EwRkJRMEVzUlVGQlJXMUtMRWxCUVVZc1EwRkJUemxKTEVWQlFVVnBXU3hUUVVGVUxFTkJRVFZETEVsQlFXbEZPVmtzUzBGQlIwRXNUVUZCU1dFc1JVRkJSV2RSTEZGQlFWUXNTMEZCYjBJc1UwRkJUemRSTEVOQlFWQXNTVUZCVlN4RFFVRkRZU3hGUVVGRloxRXNVVUZCYWtNc1EwRkJha1VzUzBGQk9FYzFVQ3hGUVVGRmMwTXNUVUZCUml4RFFVRlRia1FzUTBGQlZDeEZRVUZYTEVOQlFWZ3NSMEZCWTFNc1JVRkJSV2RSTEZGQlFVWXNTVUZCV1RWUUxFVkJRVVU0V0N4aFFVRkdMRVZCUVRGQ0xFVkJRVFJEYUZrc1JVRkJSVFpTTEUxQlFVWXNTVUZCVlRkU0xFVkJRVVUyVWl4TlFVRkdMRU5CUVZONlVpeEpRVUZVTEVOQlFXTXpRaXhEUVVGa0xFVkJRV2RDY1VJc1EwRkJhRUlzUTBGQmNFc3NRMEZCVUR0QlFVRldMR0ZCUVhsTlVDeExRVUZITEVOQlFVTlhMRVZCUVVWMVFpeE5RVUZPTEV0QlFXVjZRaXhGUVVGRmExa3NVVUZCUml4SlFVRlpiRmtzUlVGQlJXdFpMRkZCUVVZc1EwRkJWemxZTEVsQlFWZ3NRMEZCWjBJelFpeERRVUZvUWl4RlFVRnJRalJDTEVOQlFXeENMRVZCUVc5Q1VTeEZRVUZGTWxjc1RVRkJkRUlzVFVGQlowTXNRMEZCUXl4RFFVRTNReXhKUVVGblJERlhMRVZCUVVWeFdDeFhRVUZHTEVOQlFXTXhXaXhEUVVGa0xFVkJRV2RDTUVJc1EwRkJhRUlzUlVGQmEwSlZMRVZCUVVVeVZ5eE5RVUZ3UWl4RFFVRm9SQ3hGUVVFMFJTeFBRVUZQTjFnc1JVRkJSVkVzUTBGQlJpeERRVUZzUnp0QlFVRjNSeXhYUVVGMlowSXNUVUZCTkdkQ0xFdEJRVWxCTEVOQlFVb3NTVUZCVTFJc1EwRkJWRHRCUVVGWGJVSXNZMEZCUlhOWExFdEJRVVlzUTBGQlVYWkdMRTFCUVZJc1EwRkJaWEJVTEVOQlFXWXNSVUZCYVVJd1FpeEpRVUZGZWtJc1JVRkJSVzFDTEVOQlFVWXNRMEZCYmtJc1JVRkJkMEppTEVOQlFYaENMRVZCUVRCQ1F5eERRVUV4UWl4RlFVRTBRaXhEUVVGRExFTkJRVGRDTzBGQlFWZzdRVUZCZEdoQ0xGTkJRV2xyUWpaQ0xFVkJRVVUwUXl4aFFVRkdMRU5CUVdkQ0wwUXNRMEZCYUVJc1MwRkJiMEp2U0N4RlFVRkZPRXNzVFVGQlJpeERRVUZUY0ZRc1EwRkJWQ3hGUVVGWExHVkJRVmdzUTBGQmNFSTdRVUZCWjBRN1FVRkJReXhMUVVGMGNVUXNSVUZCZFhGRWFWb3NWVUZCVXl4clFrRkJVMnBhTEVOQlFWUXNSVUZCVnp0QlFVRkRMRlZCUVVsRExFbEJRVVZ2UXl4RlFVRkZjMWNzUzBGQlJpeERRVUZSWjBJc1IwRkJVaXhEUVVGWk0xb3NRMEZCV2l4RFFVRk9PMEZCUVVFc1ZVRkJjVUpQTEVOQlFYSkNPMEZCUVVFc1ZVRkJkVUpETEVOQlFYWkNPMEZCUVVFc1ZVRkJlVUpETEVOQlFYcENPMEZCUVVFc1ZVRkJNa0pITEVOQlFUTkNPMEZCUVVFc1ZVRkJOa0pGTEVOQlFUZENPMEZCUVVFc1ZVRkJLMEpGTEVOQlFTOUNPMEZCUVVFc1ZVRkJhVU5GTEVsQlFVVXNTVUZCU1dsRUxFdEJRVW9zUTBGQlZWWXNWVUZCVlZRc1RVRkJjRUlzUTBGQmJrTTdRVUZCUVN4VlFVRXJSRFZDTEVsQlFVVXNRMEZCUTJ0SUxFVkJRVVZ3Uml4SFFVRkdMRU5CUVUwc1NVRkJUaXhGUVVGWExGRkJRVmdzUzBGQmMwSXNSVUZCZGtJc1JVRkJNa0pxUkN4RlFVRkZNa1VzU1VGQk4wSXNTMEZCYjBNc1JVRkJja2M3UVVGQlFTeFZRVUYzUjNaRUxFbEJRVVZuUWl4RlFVRkZjMWNzUzBGQlJpeERRVUZSVHl4UFFVRlNMRU5CUVdkQ2Fsb3NSVUZCUlRKRkxFbEJRV3hDTEV0QlFYbENMRVZCUVc1SkxFTkJRWE5KTEV0QlFVa3hSQ3hGUVVGRkxFTkJRVVlzU1VGQlMycENMRU5CUVV3c1JVRkJUMDBzU1VGQlJTeERRVUZpTEVWQlFXVkJMRWxCUVVWclJDeFZRVUZWVkN4TlFVRXpRaXhGUVVGclEzcERMRWRCUVd4RE8wRkJRWE5EVnl4VlFVRkZXQ3hEUVVGR0xFbEJRVXRyUkN4VlFVRlZiRVFzUTBGQlZpeERRVUZNTzBGQlFYUkRMRTlCUVhkRUxFbEJRVWRPTEVWQlFVVXlXaXhqUVVGR0xFZEJRV2xDTEVsQlFXcENMRVZCUVhOQ0xFTkJRVU4yV1N4RlFVRkZkMWtzVjBGQlNDeEpRVUZuUW5oWkxFVkJRVVYzV1N4WFFVRkdMRU5CUVdOc1dTeEpRVUZrTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGRDTVVJc1EwRkJlRUlzVFVGQk5rSXNRMEZCUXl4RFFVRjJSU3hGUVVGNVJUdEJRVUZEWlN4WlFVRkZjVUlzUlVGQlJYTlhMRXRCUVVZc1EwRkJVVzFDTEZGQlFWSXNRMEZCYVVKdVdTeEpRVUZxUWl4RFFVRnpRaXhKUVVGMFFpeEZRVUV5UWpGQ0xFTkJRVE5DTEVWQlFUWkNiVUlzUTBGQk4wSXNRMEZCUml4RlFVRnJRMklzU1VGQlJTeERRVUZ3UXl4RFFVRnpReXhQUVVGTkxFTkJRVU5MTEVsQlFVVkpMRVZCUVVWVUxFZEJRVVlzUTBGQlNDeExRVUZaTEVOQlFVTk9MRVZCUVVVNFdpeHZRa0ZCUml4RlFVRnVRaXhGUVVFMFF6dEJRVUZET1Zvc1dVRkJSU3RhTEdGQlFVWXNSMEZCWjBKd1dpeEZRVUZGY1Zvc1NVRkJiRUlzUlVGQmRVSjZXaXhKUVVGRkxFTkJRWHBDTEVOQlFUSkNMRTlCUVUwc1EwRkJRMDBzU1VGQlJVWXNSVUZCUld0YUxGRkJRVVlzUTBGQlYzUmFMRWRCUVZnc1EwRkJTQ3hMUVVGeFFpeERRVUZEVUN4RlFVRkZhV0VzTmtKQlFVWXNSVUZCTlVJN1FVRkJPRVJxWVN4alFVRkZhMkVzVlVGQlJpeEpRVUZqTEVOQlFVTnNZU3hGUVVGRmEyRXNWVUZCUml4RFFVRmhhRkVzU1VGQllpeERRVUZyUW5KS0xFVkJRVVYzV1N4VFFVRndRaXhEUVVGbUxFdEJRV2RFY2xvc1JVRkJSVzFoTEZOQlFVWXNSMEZCV1hSYUxFTkJRVm9zUlVGQlkySXNSVUZCUld0WExFbEJRVVlzUjBGQlQzSldMRVZCUVVWeFZpeEpRVUYyUWl4RlFVRTBRakZXTEVsQlFVVXNRMEZCUXl4RFFVRkRORUlzUlVGQlJYTlhMRXRCUVVZc1EwRkJVVThzVDBGQlVpeERRVUZuUW5CWkxFVkJRVVYxV1N4UlFVRnNRaXhMUVVFMlFpeEZRVUU1UWl4RlFVRnJRMDRzVFVGQmJFTXNTVUZCTUVOcVdTeEZRVUZGSzFnc1QwRkJOME1zUlVGQmMwUnlWaXhMUVVGMFJDeERRVUUwUkRWRExFVkJRVVZ4V2l4SlFVRTVSQ3hGUVVGdFJTOVpMRU5CUVc1RkxFTkJRVGxDTEVWQlFXOUhMRXRCUVVzc1EwRkJUQ3hMUVVGVFZDeERRVUZVTEVsQlFWa3NRMEZCUTFJc1JVRkJSVzloTEUxQlFVWXNSMEZCVXpWYUxFTkJRVllzVFVGQlpTeERRVUZETEVOQlFUVkNMRXRCUVdkRFVpeEZRVUZGY1dFc1kwRkJSaXhKUVVGdFFuSmhMRVZCUVVWellTeGxRVUZHTEVWQlFXNUVMRU5CUVhCS08wRkJRVGxFTzBGQlFUSlNMR2RDUVVGUGJGb3NSVUZCUlcxYUxGbEJRVVlzU1VGQlowSnVXaXhGUVVGRmJWb3NXVUZCUml4RFFVRmxOMWtzU1VGQlppeERRVUZ2UWl4SlFVRndRaXhGUVVGNVFqRkNMRU5CUVhwQ0xFTkJRV2hDTEVWQlFUUkRRU3hGUVVGRmIyRXNUVUZCY2tRN1FVRkJORVE3UVVGQlF5eExRVUV4TkVVc1JVRkJNalJGVUN4VlFVRlRMR3RDUVVGVE9Wb3NRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eFZRVUZKVFN4RFFVRktPMEZCUVVFc1ZVRkJUVU1zUTBGQlRqdEJRVUZCTEZWQlFWRkRMRU5CUVZJN1FVRkJRU3hWUVVGVlJ5eERRVUZXTzBGQlFVRXNWVUZCV1VVc1EwRkJXanRCUVVGQkxGVkJRV05GTEVsQlFVVXNSVUZCYUVJN1FVRkJRU3hWUVVGdFFrVXNTVUZCUldwQ0xFVkJRVVZ6V2l4aFFVRjJRanRCUVVGQkxGVkJRWEZEYmxrc1NVRkJSWEJDTEVWQlFVVTJUeXhOUVVGNlF5eERRVUZuUkN4SlFVRkhNMDRzUzBGQlIwVXNSVUZCUlhGSkxGRkJRVXdzU1VGQlpTeEZRVUZGTEZsQlFWVjZTaXhGUVVGRk5FVXNTVUZCV2l4SlFVRnJRalZGTEVWQlFVVTRVQ3hOUVVGR0xFbEJRVlVzUTBGQk9VSXNRMEZCYkVJc1JVRkJiVVFzVDBGQlN6RlBMRTFCUVVrc1NVRkJWQ3hGUVVGalFTeEpRVUZGUVN4RlFVRkZZeXhWUVVGR0xFbEJRV01zU1VGQk9VSTdRVUZCYlVNc1dVRkJSeXhOUVVGSlpDeEZRVUZGY1Vrc1VVRkJUaXhMUVVGcFFpeFpRVUZWZWtvc1JVRkJSVFJGTEVsQlFWb3NTVUZCYTBKNFJDeEZRVUZGYVVrc1VVRkJSaXhMUVVGaExFTkJRVU1zUTBGQmFrUXNRMEZCU0N4RlFVRjFSRHRCUVVGRExHVkJRVWw2U1N4SlFVRkZMRVZCUVVZc1JVRkJTMFVzU1VGQlJTeEZRVUZRTEVWQlFWVlFMRWxCUVVVc1EwRkJhRUlzUlVGQmEwSkJMRWxCUVVWWExFTkJRWEJDTEVWQlFYTkNXQ3hIUVVGMFFqdEJRVUV3UWtNc1owSkJRVVZRTEVWQlFVVk5MRU5CUVVZc1EwRkJSaXhGUVVGUFJTeEpRVUZGUkN4RlFVRkZObEVzVVVGQlJpeEhRVUZYTEVkQlFYQkNMRVZCUVhkQ0xFdEJRVXNzUTBGQlRDeExRVUZUZGxFc1JVRkJSVXdzUTBGQlJpeERRVUZVTEV0QlFXZENTeXhGUVVGRlRDeERRVUZHTEVsQlFVdEVMRVZCUVVVMlNDeFpRVUZHTEVkQlFXVm9SeXhGUVVGRk5VSXNRMEZCUml4RlFVRkpMRWxCUVVvc1JVRkJWVEJTTEV0QlFWWXNRMEZCWjBJdlVTeERRVUZvUWl4SlFVRnRRaXhEUVVGRExFTkJRVzVETEVkQlFYRkRhVUlzUlVGQlJXdExMRWxCUVVZc1EwRkJUemxNTEVOQlFWQXNSVUZCVXl4SlFVRlVMRVZCUVdNc1NVRkJaQ3hGUVVGdFFpeERRVUZEVnl4RFFVRkVMRU5CUVc1Q0xFVkJRWGRDTkVJc1RVRkJiRVlzUTBGQmVFSXNSVUZCYTBoc1F5eEZRVUZGVEN4RFFVRkdMRXRCUVUxSExFVkJRVVZMTEVsQlFVWXNRMEZCVDFRc1EwRkJVQ3hEUVVGNFNEdEJRVUV4UWl4WFFVRTBTa2tzUlVGQlJXOURMRTFCUVVZc1NVRkJWV2hETEVWQlFVVkRMRWxCUVVZc1EwRkJUeXhGUVVGRFoxb3NUVUZCU3pkWkxFTkJRVTRzUlVGQlVUQlpMRlZCUVZOc1dpeERRVUZxUWl4RlFVRlFMRU5CUVZZN1FVRkJjME03UVVGQk4xSXNUMEZCTmxJc1QwRkJUMUVzU1VGQlJTeEpRVUZHTEVWQlFVOUdMRWxCUVVWcVFpeEZRVUZGSzBNc1RVRkJTaXhKUVVGWmFFTXNSVUZCUlVNc1NVRkJSaXhEUVVGUExFVkJRVU5uV2l4TlFVRkxOMWtzUTBGQlRpeEZRVUZSTUZrc1ZVRkJVemRhTEVWQlFVVlpMRXRCUVVZc1EwRkJVVXNzUTBGQlVpeERRVUZxUWl4RlFVRlFMRU5CUVc1Q0xFVkJRWGRFUml4RFFVRXZSRHRCUVVGcFJTeExRVUZ1TWtZc1JVRkJiekpHZVZvc1UwRkJVU3hwUWtGQlUzcGhMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTlRMR0ZCUVU5clZpeGpRVUZRTEVOQlFYTkNkbFFzUlVGQlJYRlpMRXRCUVVZc1EwRkJVVGRZTEZOQlFUbENMRVZCUVhkRE4wTXNRMEZCZUVNc1JVRkJNRU1zUlVGQlF6SmhMRmxCUVZjc1EwRkJReXhEUVVGaUxFVkJRV1U1UlN4alFVRmhMRU5CUVVNc1EwRkJOMElzUlVGQkswSXpVeXhMUVVGSllpeEZRVUZGTkVJc1ZVRkJSaXhEUVVGaGFFVXNRMEZCWWl4SlFVRm5RaXhaUVVGVk8wRkJRVU1zWTBGQlJ5eExRVUZMTW1Fc1lVRkJVaXhGUVVGelFpeFBRVUZQTTJFc1JVRkJSU3hMUVVGTE1tRXNZVUZCVUN4RFFVRlFPMEZCUVRaQ0xGTkJRVGxGTEVkQlFTdEZMRmxCUVZVN1FVRkJReXhqUVVGSExFdEJRVXRCTEdGQlFWSXNSVUZCYzBJc1QwRkJUeXhMUVVGTFFTeGhRVUZNTEVOQlFXMUNOV0VzUTBGQmJrSXNRMEZCVUR0QlFVRTJRaXhUUVVGb1RDeEZRVUZwVERoV0xFdEJRVWtzWVVGQlV6ZFdMRU5CUVZRc1JVRkJWenRCUVVGRFV5eHBRa0ZCVDJ0V0xHTkJRVkFzUTBGQmMwSXNTVUZCZEVJc1JVRkJNa0kxVml4RFFVRXpRaXhGUVVFMlFpeEZRVUZETW1Fc1dVRkJWeXhEUVVGRExFTkJRV0lzUlVGQlpUbEZMR05CUVdFc1EwRkJReXhEUVVFM1FpeEZRVUVyUW1kR0xGVkJRVk1zUTBGQlF5eERRVUY2UXl4RlFVRXlRM0JQTEU5QlFVMTRUU3hEUVVGcVJDeEZRVUUzUWp0QlFVRnJSaXhUUVVGdVVpeEZRVUV4UXp0QlFVRm5WU3hMUVVFeGNrY3NSVUZCTW5KSE1Gb3NTMEZCU1N4aFFVRlRNMW9zUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCVDBFc1JVRkJSWEZETEVWQlFVVm5ReXhQUVVGS0xFbEJRV0Z5UlN4RFFVRmlMRWRCUVdVc1NVRkJTWEZETEVWQlFVVnhXU3hMUVVGT0xFTkJRVmt4WVN4RFFVRmFMRU5CUVhSQ08wRkJRWEZETEV0QlFXaDJSeXhGUVVGcGRrZHJXaXhUUVVGUkxFVkJRVU0wUWl4TlFVRkxMRVZCUVVORExGVkJRVk1zUTBGQlF5eERRVUZZTEVWQlFVNHNSVUZCYjBJNVRDeFBRVUZOTEVWQlFVTXJUQ3hUUVVGUkxHMUNRVUZWTzBGQlFVTXNZMEZCUnl4VFFVRlBMMG9zU1VGQlVDeEpRVUZoTEV0QlFVdG9ReXhMUVVGeVFpeEZRVUV5UWl4UFFVRlBMRXRCUVV0QkxFdEJRVXdzU1VGQllTeERRVUZETEVOQlFYSkNPMEZCUVhWQ0xGTkJRWFJGTEVWQlFYVkZhMHNzWTBGQllTeFRRVUZ3Uml4RlFVRXhRaXhGUVVGNVNEaENMRTFCUVVzc1JVRkJRMFFzVTBGQlVTeHRRa0ZCVlR0QlFVRkRMR05CUVVjc1UwRkJUeTlLTEVsQlFWQXNTVUZCWVN4TFFVRkxaMHNzU1VGQmNrSXNSVUZCTUVJc1QwRkJUeXhMUVVGTFFTeEpRVUZNTEVsQlFWa3NRMEZCUXl4RFFVRndRanRCUVVGelFpeFRRVUZ3UlN4RlFVRnhSVGxDTEdOQlFXRXNWVUZCYkVZc1JVRkJPVWdzUlVGQk5FNHJRaXhQUVVGTkxFVkJRVU5HTEZOQlFWRXNiVUpCUVZVN1FVRkJReXhqUVVGSExHVkJRV0VzUzBGQlMzQlhMRWxCUVd4Q0xFbEJRWGRDTEV0QlFVdHpWeXhMUVVFM1FpeEpRVUZ2UXpOVkxFVkJRVVVzU1VGQlJpeEZRVUZQTEU5QlFWQXNRMEZCZGtNc1JVRkJkVVFzVDBGQlR5eExRVUZMTWxVc1MwRkJUQ3hKUVVGaExFTkJRVU1zUTBGQmNrSTdRVUZCZFVJc1UwRkJiRWNzUlVGQmJVZHlSQ3hWUVVGVExHdENRVUZUTjFnc1EwRkJWQ3hGUVVGWE8wRkJRVU1zYVVKQlFVOTFSeXhGUVVGRmRrY3NSVUZCUlRaUExFMUJRVW9zUlVGQlZ5eEhRVUZZTEVOQlFWQTdRVUZCZFVJc1UwRkJMMGtzUlVGQmJFOHNSVUZCYlZoelRTeGpRVUZoTEVWQlFVTllMR05CUVdFc2MwSkJRVk40WVN4RFFVRlVMRVZCUVZjN1FVRkJReXhsUVVGTExFTkJRVXdzUzBGQlUwRXNSVUZCUlhGaExFMUJRVmdzU1VGQmJVSnlZU3hGUVVGRk5HRXNZVUZCY2tJc1MwRkJjVU0xWVN4RlFVRkZOR0VzWVVGQlJpeERRVUZuUWxFc1YwRkJhRUlzUjBGQk5FSndZaXhGUVVGRmNXRXNUVUZCYmtVN1FVRkJNa1VzVTBGQmNrY3NSVUZCYUZrc1JVRkJlblpITEVWQlFWSXNSVUZCTUhWSWFGa3NSVUZCUlhGWUxGZEJRVVlzUjBGQll5eFZRVUZUTVZvc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRk5MRU5CUVdJc1JVRkJaVHRCUVVGRFVDeE5RVUZGZFZZc2JVSkJRVVlzU1VGQmRVSjJWaXhGUVVGRmRWWXNiVUpCUVVZc1EwRkJjMEowVml4RFFVRjBRaXhGUVVGM1FrMHNRMEZCZUVJc1EwRkJka0k3UVVGQmEwUXNSMEZCTVhwSUxFVkJRVEo2U0RoQ0xFVkJRVVZ4V1N4TFFVRkdMRWRCUVZFc1ZVRkJVekZoTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zVjBGQlR5eG5Ra0ZCWjBKdlF5eEZRVUZGY1Zrc1MwRkJiRUlzU1VGQmVVSXhZU3hMUVVGSFFTeEZRVUZGTkVVc1NVRkJUQ3hKUVVGWExFdEJRVXRuVnl4aFFVRk1MRWRCUVcxQ05XRXNRMEZCYmtJc1JVRkJjVUlzUzBGQlN6UkZMRWxCUVV3c1IwRkJWVFZGTEVWQlFVVTBSU3hKUVVGcVF5eEZRVUZ6UXl4TFFVRkxlVmNzYTBKQlFVd3NSMEZCZDBKeVlpeEZRVUZGYzJJc1owSkJRVVlzU1VGQmIwSXNTMEZCU3l4RFFVRk1MRXRCUVZOMFlpeEZRVUZGYzJJc1owSkJRVmdzU1VGQk5rSjBZaXhGUVVGRmIySXNWMEZCUml4TFFVRm5RaXhEUVVGRExFTkJRV3hGTEVkQlFXOUZja3NzUlVGQmNFVXNSMEZCZFVWRExFVkJRWEpKTEVWQlFYZEpMRXRCUVV0dVF5eE5RVUZNTEVkQlFWazNUeXhGUVVGRk5rOHNUVUZCUml4SlFVRlZMRTFCUVVrM1R5eEZRVUZGTms4c1RVRkJSaXhEUVVGVGNFWXNVVUZCZGtJc1IwRkJaME42U2l4RlFVRkZOazhzVFVGQlJpeERRVUZUTTAwc1ZVRkJla01zUjBGQmIwUnNReXhGUVVGRk5rOHNUVUZCTVUwc1JVRkJhVTRzUzBGQlMyMU1MR0ZCUVV3c1IwRkJiVUpvWVN4RlFVRkZaMkVzWVVGQmRFOHNSVUZCYjFBc1MwRkJTM1ZDTEdGQlFVd3NSMEZCYlVKMllpeEZRVUZGZFdJc1lVRkJjRklzU1VGQmJWTXNTMEZCU3pOWExFbEJRVXdzUjBGQlZUVkZMRU5CUVRkVExFVkJRU3RUUXl4TFFVRkhiME1zUlVGQlJUSkNMRTFCUVVZc1EwRkJVeXhKUVVGVUxFVkJRV012UkN4RFFVRmtMRU5CUVd4VUxFVkJRVzFWTEV0QlFVdDFZaXhUUVVGTUxFZEJRV1Y0WWl4TFFVRkhRU3hGUVVGRmQySXNVMEZCVEN4SlFVRm5RbTVhTEVWQlFVVnpSQ3hIUVVGR0xFVkJRV3hYTEVWQlFUQlhMRTFCUVVzc1MwRkJTM1JFTEVWQlFVVm5ReXhQUVVGUUxFbEJRV2RDTEVOQlFVTXNRMEZCZEVJc1EwRkJibGtzU1VGQk5sb3NTVUZCU1doRExFVkJRVVZ4V1N4TFFVRk9MRU5CUVZreFlTeERRVUZhTEVWQlFXTkRMRU5CUVdRc1EwRkJjR0U3UVVGQmNXSXNSMEZCZEhkSkxFVkJRWFYzU1c5RExFVkJRVVZ4V1N4TFFVRkdMRU5CUVZFM1dDeFRRVUZTTEVkQlFXdENMRVZCUVVORkxHRkJRVmxXTEVWQlFVVnhXU3hMUVVGbUxFVkJRWEZDVnl4dlFrRkJiVUp5U3l4RlFVRjRReXhGUVVFeVF5dEpMSE5DUVVGeFFpOUpMRVZCUVdoRkxFVkJRVzFGYTBvc0swSkJRVGhDYkVvc1JVRkJha2NzUlVGQmIwZDVTeXhoUVVGWkxFTkJRVU1zUTBGQmFrZ3NSVUZCYlVodVFpeG5Ra0ZCWlN3d1FrRkJWVHRCUVVGRExGVkJRVWwwWVN4SlFVRkZMRXRCUVVzMFlTeGhRVUZZTEVOQlFYbENMRXRCUVV0VExHdENRVUZNTEVkQlFYZENkRXNzUlVGQmVFSXNSVUZCTWtJdlVTeExRVUZITEVOQlFVTXNTMEZCUzNsaUxGZEJRVlFzU1VGQmMwSjZZaXhGUVVGRmMyRXNZMEZCUml4RlFVRnFSRHRCUVVGdlJTeExRVUV4VHl4RlFVRXlUME1zYVVKQlFXZENMREpDUVVGVk8wRkJRVU1zVlVGQlNYWmhMRWxCUVVVc1MwRkJTelJoTEdGQlFWZ3NRMEZCZVVJc1MwRkJTMklzYjBKQlFVd3NSMEZCTUVKb1NpeEZRVUV4UWl4RlFVRTJRaTlSTEV0QlFVY3NRMEZCUXl4TFFVRkxlV0lzVjBGQlZDeEpRVUZ6UW5waUxFVkJRVVYxWVN4bFFVRkdMRVZCUVc1RU8wRkJRWFZGTEV0QlFYUlhMRVZCUVhWWGJVSXNNRUpCUVhsQ0xHOURRVUZWTzBGQlFVTXNWVUZCU1RGaUxFbEJRVVVzUzBGQlN6UmhMR0ZCUVZnc1EwRkJlVUlzUzBGQlMxWXNOa0pCUVV3c1IwRkJiVU51U2l4RlFVRnVReXhGUVVGelF5OVJMRXRCUVVjc1EwRkJReXhMUVVGTGVXSXNWMEZCVkN4SlFVRnpRbnBpTEVWQlFVVXdZaXgzUWtGQlJpeEZRVUUxUkN4RlFVRjVSaXhMUVVGTGJrSXNaVUZCVEN4RlFVRjZSanRCUVVGblNDeExRVUZ3YUVJc1JVRkJlbmhKTEVWQlFTdDVTbXhaTEVWQlFVVnBRaXhKUVVGR0xFTkJRVThzUlVGQlEzRlpMRkZCUVU4c1EwRkJReXhEUVVGVUxFVkJRVmRETEZOQlFWRXNRMEZCUXl4RFFVRndRaXhGUVVGelFrTXNXVUZCVnl4RFFVRkRMRU5CUVd4RExFVkJRVzlEUXl4blFrRkJaU3hEUVVGRExFTkJRWEJFTEVWQlFYTkVReXhUUVVGUkxFTkJRVU1zUTBGQkwwUXNSVUZCYVVWRExGRkJRVThzUTBGQlF5eERRVUY2UlN4RlFVRXlSVU1zV1VGQlZ5eERRVUZETEVOQlFYWkdMRVZCUVhsR1F5eFRRVUZSTEVOQlFVTXNRMEZCYkVjc1JVRkJiMGRETEU5QlFVMHNRMEZCUXl4RFFVRXpSeXhGUVVFMlIwTXNUMEZCVFN4RFFVRkRMRU5CUVhCSUxFVkJRWE5JUXl4VlFVRlRMRU5CUVVNc1EwRkJhRWtzUlVGQmEwbERMRTFCUVVzc1EwRkJReXhEUVVGNFNTeEZRVUV3U1N4UlFVRlBMRU5CUVVNc1EwRkJiRW9zUlVGQmIwcERMRlZCUVZNc1EwRkJReXhEUVVFNVNpeEZRVUZuUzBNc1MwRkJTU3hEUVVGRExFTkJRWEpMTEVWQlFYVkxReXhUUVVGUkxFTkJRVU1zUTBGQmFFd3NSVUZCYTB3elRTeFJRVUZQTEVOQlFVTXNRMEZCTVV3c1JVRkJORXcwVFN4VFFVRlJMRU5CUVVNc1EwRkJjazBzUlVGQmRVMURMRk5CUVZFc1EwRkJReXhEUVVGb1RpeEZRVUZyVGtNc1UwRkJVU3hEUVVGRExFTkJRVE5PTEVWQlFUWk9ReXhUUVVGUkxFTkJRVU1zUTBGQmRFOHNSVUZCZDA5RExGTkJRVkVzUTBGQlF5eERRVUZxVUN4RlFVRnRVRU1zVjBGQlZTeERRVUZETEVOQlFUbFFMRVZCUVdkUlF5eGhRVUZaTEVOQlFVTXNRMEZCTjFFc1JVRkJLMUZETEZOQlFWRXNRMEZCUXl4RFFVRjRVaXhGUVVFd1VrTXNVMEZCVVN4RFFVRkRMRU5CUVc1VExFVkJRWEZUUXl4bFFVRmpMRU5CUVVNc1EwRkJjRlFzUlVGQmMxUkRMRmRCUVZVc1EwRkJReXhEUVVGcVZTeEZRVUZ0VlVNc1UwRkJVU3hEUVVGRExFTkJRVFZWTEVWQlFUaFZReXhQUVVGTkxHVkJRVk4wWkN4RFFVRlVMRVZCUVZjN1FVRkJReXhWUVVGSlF5eEpRVUZGUkN4RlFVRkZPRkFzVFVGQlVpeERRVUZsTEU5QlFVOHNVVUZCVFRsUUxFVkJRVVZ6WkN4TFFVRlNMRWxCUVdVdlV5eEhRVUZIU2l4SlFVRklMRU5CUVZGdVN5eEZRVUZGTkVVc1NVRkJWaXhEUVVGbUxFZEJRU3RDTEZGQlFVMDFSU3hGUVVGRmRXTXNVVUZCVWl4SFFVRnBRblpqTEVWQlFVVjFZeXhSUVVGdVFpeEhRVUUwUW5aakxFVkJRVVY1WXl4UFFVRTNSQ3hIUVVGeFJTeERRVUZEZW1Nc1JVRkJSWE5rTEV0QlFVZ3NTVUZCVlN4TFFVRkxMRU5CUVV3c1MwRkJVM0prTEVOQlFXNUNMRWxCUVhOQ2JVb3NSMEZCUjJVc1NVRkJTQ3hEUVVGUmJrc3NSVUZCUlRSRkxFbEJRVllzUTBGQmRFSXNSMEZCYzBNc1NVRkJSVE5GTEVOQlFVWXNSMEZCU1N4RFFVRktMRWRCUVUwc1NVRkJSVUVzUTBGQlJpeEhRVUZKTEVOQlFVb3NSMEZCVFN4SlFVRkZRU3hEUVVGR0xFZEJRVWtzUTBGQlNpeEhRVUZOTEVOQlFYaEVMRWRCUVRCRVJDeEZRVUZGYzJRc1MwRkJlRWs3UVVGQk9Fa3NTMEZCTjJZc1JVRkJVQ3hGUVVGelowSnFZaXhGUVVGRmMxY3NTMEZCUml4RFFVRlJPRUlzVDBGQk9XZENMRU5CUVM5NVNpeEZRVUZ6TUV0d1dTeEZRVUZGYVVJc1NVRkJSaXhEUVVGUExFVkJRVU5wWVN4WlFVRlhMRmRCUVZvc1JVRkJkMEpETEZsQlFWY3NWVUZCYmtNc1JVRkJPRU5ETEdOQlFXRXNZVUZCTTBRc1JVRkJlVVZETEdOQlFXRXNXVUZCZEVZc1JVRkJVQ3hGUVVFeVJ5eFZRVUZUTVdRc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUTI5RExFMUJRVVZ6Vnl4TFFVRkdMRU5CUVZGUExFOUJRVklzUTBGQlowSnNXaXhEUVVGb1FpeEpRVUZ0UWl4RlFVRkRiVm9zWTBGQllXeGFMRU5CUVdRc1JVRkJaMEp0V2l4VlFVRlRibG9zUTBGQmVrSXNSVUZCTWtJNFdTeFJRVUZQTEdkQ1FVRlRMMWtzUTBGQlZDeEZRVUZYTzBGQlFVTXNXVUZCU1U4c1EwRkJTanRCUVVGQkxGbEJRVTFETEVsQlFVVXNTVUZCVWp0QlFVRkJMRmxCUVdGRExFbEJRVVZVTEVWQlFVVjFZaXhoUVVGcVFqdEJRVUZCTEZsQlFTdENNMkVzU1VGQlJWb3NSVUZCUlc5aExGTkJRVzVETEVOQlFUWkRMRTlCUVU4eldpeE5RVUZKUVN4TlFVRkpSQ3hEUVVGS0xFbEJRVTgyUWl4RlFVRkZPRXNzVVVGQlJpeERRVUZYTTAwc1EwRkJXQ3hGUVVGaFF5eERRVUZpTEVOQlFWZ3NUVUZCT0VKVUxFVkJRVVUwUlN4SlFVRkdMRWRCUVU5b1JTeEZRVUZGZVZrc1VVRkJWQ3hGUVVGclFqbFpMRWxCUVVWTExFVkJRVVZwV1N4UFFVRkdMRU5CUVZWeVZpeExRVUZXTEVOQlFXZENMRWxCUVdoQ0xFVkJRWEZDUXl4VFFVRnlRaXhEUVVGd1FpeEZRVUZ2UkhwRUxFVkJRVVUwUlN4SlFVRkdMRWRCUVU4elJTeERRVUY2Uml4SFFVRTBSazBzUTBGQmJrYzdRVUZCY1Vjc1QwRkJhRTBzUlVGQmJrSTdRVUZCY1U0c1IwRkJPVlVzUTBGQmREQkxMRVZCUVhOd1REaENMRVZCUVVWRExFVkJRVVlzUTBGQlN6QkNMRTFCUVV3c1EwRkJXU3hGUVVGRE1sb3NTVUZCUnl4WlFVRlRNMlFzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpVTXNRMEZCWml4RlFVRnBRanRCUVVGRExHRkJRVTh3VVN4SFFVRkhMRWxCUVVnc1JVRkJVV3hTTEVOQlFWSXNSVUZCVlVNc1EwRkJWaXhGUVVGWlRTeERRVUZhTEVWQlFXTkRMRU5CUVdRc1EwRkJVRHRCUVVGM1FpeExRVUU1UXl4RlFVRXJRMjlrTEV0QlFVa3NZVUZCVXpWa0xFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1ZETEVOQlFXWXNSVUZCYVVJN1FVRkJReXhoUVVGUE1GRXNSMEZCUnl4SlFVRklMRVZCUVZGc1VpeERRVUZTTEVWQlFWVkRMRU5CUVZZc1JVRkJXVTBzUTBGQldpeEZRVUZqUXl4RFFVRmtMRVZCUVdkQ0xFTkJRV2hDTEVOQlFWQTdRVUZCTUVJc1MwRkJMMFlzUlVGQlowZHJXU3hMUVVGSkxHRkJRVk14V1N4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllVMHNRMEZCWWl4RlFVRmxPMEZCUVVNc1ZVRkJTVU1zUTBGQlNpeEZRVUZOUXl4RFFVRk9MRU5CUVZFc1NVRkJSMVFzUzBGQlIwRXNSVUZCUlhOaExHTkJRVXdzU1VGQmNVSjBZU3hGUVVGRmIyRXNVMEZCTVVJc1JVRkJiME1zVDBGQlR6VmFMRWxCUVVWU0xFVkJRVVZ2WVN4VFFVRktMRVZCUVdNdldDeEZRVUZGY2tNc1JVRkJSVFJhTEdOQlFVb3NSVUZCYjBKc1FpeEhRVUZ3UWl4RFFVRjNRbXhaTEVWQlFVVTRXU3hUUVVGR0xFZEJRVms1V1N4RlFVRkZObGtzVVVGQlJpeEhRVUZYTEVkQlFWZ3NSMEZCWlRkWkxFVkJRVVU0V1N4VFFVRTNRaXhIUVVGMVF6bFpMRVZCUVVVMldTeFJRVUZxUlN4RlFVRXdSVGRaTEVWQlFVVTJVU3hSUVVFMVJTeEZRVUZ4UmpkUkxFVkJRVVZ4V1N4UFFVRjJSaXhEUVVGa0xFVkJRVGhITEVsQlFYSklMRU5CUVRCSUxFbEJRVWNzYjBKQlFXbENOMWtzUTBGQmFrSXNlVU5CUVdsQ1FTeERRVUZxUWl4RlFVRklMRVZCUVhOQ08wRkJRVU1zWVVGQlNWTXNRMEZCU2l4SlFVRlRWQ3hEUVVGVU8wRkJRVmNzWlVGQlN6QlpMRWRCUVV3c1EwRkJVMnBaTEVOQlFWUXNSVUZCVjFJc1EwRkJXQ3hGUVVGaFJDeEZRVUZGVXl4RFFVRkdMRU5CUVdJN1FVRkJXQ3hUUVVFNFFpeFBRVUZQTEVsQlFWQTdRVUZCV1N4alFVRlBVaXhOUVVGSkxFTkJRVU1zUTBGQlRDeEpRVUZSTEdOQlFWa3NUMEZCVDBFc1EwRkJNMElzUzBGQkswSk5MRWxCUVVWT0xFTkJRVVlzUlVGQlNVRXNTVUZCUlN4TFFVRkxMRU5CUVRGRExFZEJRVFpEVFN4TlFVRkpMRU5CUVVNc1EwRkJUQ3hMUVVGVFFTeEpRVUZGZVZFc1JVRkJXQ3hEUVVFM1F5eEZRVUUwUkN4TFFVRkxNVTRzU1VGQlRDeERRVUZWTEZsQlFWVTdRVUZCUTJwQ0xGVkJRVVZ6Vnl4TFFVRkdMRU5CUVZGMlJpeE5RVUZTTEVOQlFXVXNTVUZCWml4RlFVRnZRbkJVTEVOQlFYQkNMRVZCUVhOQ1R5eERRVUYwUWl4RlFVRjNRazRzUTBGQmVFSTdRVUZCTWtJc1QwRkJhRVFzUTBGQmJrVTdRVUZCY1Vnc1MwRkJhR1FzUlVGQldpeERRVUYwY0V3c1EwRkJjVzVOTEVsQlFVbHJVaXhMUVVGSExEWkdRVUZRTzBGQlFVRXNUVUZCY1Vjd1RTeExRVUZITEhWQ1FVRjRSenRCUVVGQkxFMUJRV2RKUXl4TFFVRkhMRzFEUVVGdVNUdEJRVUZCTEUxQlFYVkxReXhMUVVGSExHRkJRVEZMTzBGQlFVRXNUVUZCZDB4RExFdEJRVWNzTUVOQlFUTk1MRU5CUVhOUExGTkJRVk5ETEVWQlFWUXNRMEZCV1dwbExFTkJRVm9zUlVGQlkwTXNRMEZCWkN4RlFVRm5RanRCUVVGRExGZEJRVTl6Unl4RlFVRkZka2NzUTBGQlJpeEZRVUZKTEU5QlFVb3NTMEZCWTNWSExFVkJRVVVzVDBGQlMzUkhMRVZCUVVWM1NpeFJRVUZRTEVkQlFXZENlRW9zUTBGQmFFSXNSMEZCYTBKQkxFVkJRVVUyVGl4VlFVRjBRaXhGUVVGcFF5eEpRVUZxUXl4RFFVRmtMRWRCUVhGRWVrd3NSVUZCUlN4UlFVRkdMRVZCUVZkeVF5eERRVUZZTEVWQlFXTXNRMEZCWkN4TFFVRnJRa0VzUTBGQmRrVXNSMEZCZVVWQkxFTkJRV2hHTzBGQlFXdEdMRmxCUVZOclpTeEZRVUZVTEVOQlFWbHNaU3hEUVVGYUxFVkJRV003UVVGQlF5eFhRVUZQUVN4RlFVRkZORVVzU1VGQlJpeEhRVUZQTEVOQlFVTXNVMEZCVHpWRkxFVkJRVVZ4U3l4WlFVRkdMRU5CUVdVc1RVRkJaaXhEUVVGU0xFbEJRV2RETEVkQlFXaERMRWRCUVc5RGNrc3NSVUZCUlRSRkxFbEJRVGRETEVWQlFXdEVOVVVzUTBGQmVrUTdRVUZCTWtRc1dVRkJVMjFsTEVWQlFWUXNRMEZCV1c1bExFTkJRVm9zUlVGQll6dEJRVUZETEZGQlFVbERMRWxCUVVVNFpDeEhRVUZIYkZVc1NVRkJTQ3hEUVVGUk4wb3NSVUZCUlRSRkxFbEJRVllzUTBGQlRpeERRVUZ6UWl4UFFVRlBNMFVzU1VGQlJVUXNSVUZCUlRSRkxFbEJRVVlzUjBGQlR6TkZMRVZCUVVVc1EwRkJSaXhEUVVGVUxFZEJRV05FTEVWQlFVVXlTeXhsUVVGR0xFTkJRV3RDTEUxQlFXeENMRU5CUVdRc1JVRkJkME16U3l4RFFVRXZRenRCUVVGcFJDeFpRVUZUYjJVc1JVRkJWQ3hEUVVGWmNHVXNRMEZCV2l4RlFVRmpReXhEUVVGa0xFVkJRV2RDTzBGQlFVTXNVVUZCU1Uwc1EwRkJTaXhGUVVGTlF5eERRVUZPTEVWQlFWRkRMRU5CUVZJc1JVRkJWVWNzUTBGQlZpeEZRVUZaUlN4RFFVRmFMRVZCUVdORkxFTkJRV1FzUlVGQlowSkZMRU5CUVdoQ0xFVkJRV3RDUlN4RFFVRnNRaXhEUVVGdlFpeEpRVUZITEUxQlFVbHVRaXhGUVVGRmQwb3NVVUZCVkN4RlFVRnJRanRCUVVGRExGVkJRVWR1UWl4RlFVRkZNRTRzVDBGQlJpeERRVUZWYUZjc1EwRkJWaXhOUVVGbFdTeEpRVUZGTUVnc1JVRkJSWGxPTEUxQlFVWXNRMEZCVXk5V0xFTkJRVlFzUTBGQlJpeEZRVUZqWXl4SlFVRkZkMGdzUlVGQlJYZE9MRWRCUVVZc1EwRkJUVGRXTEVOQlFVNHNSVUZCVVZjc1EwRkJVaXhEUVVGb1FpeEZRVUV5UWxFc1NVRkJSVklzUlVGQlJXdFpMRTFCUVRsRExFTkJRVWdzUlVGQmVVUTdRVUZCUXl4bFFVRlBhRmtzUlVGQlJXbFpMRTFCUVZRc1JVRkJaMEpxV1N4RlFVRkZaMWtzVFVGQlJpeEhRVUZUTEVWQlFYcENMRU5CUVRSQ0xFdEJRVWx5V1N4RFFVRktMRWxCUVZOWExFTkJRVlE3UVVGQlZ5eGxRVUZKWWl4SlFVRkZMRU5CUVVZc1JVRkJTVU1zU1VGQlJWa3NSVUZCUlZnc1EwRkJSaXhGUVVGTGRVTXNUVUZCWml4RlFVRnpRbnBETEVsQlFVVkRMRU5CUVhoQ0xFVkJRVEJDUkN4SFFVRXhRanRCUVVFNFFqaENMR05CUVVWelZ5eExRVUZHTEVOQlFWRjBSeXhIUVVGU0xFTkJRVmx3VXl4RFFVRmFMRVZCUVdOUkxFTkJRV1FzUlVGQlowSlhMRVZCUVVWWUxFTkJRVVlzUlVGQlMwWXNRMEZCVEN4RFFVRm9RanRCUVVFNVFqdEJRVUZZTzBGQlFXdEZMRk5CUVVWNVZpeFBRVUZHTEVOQlFWVm9WeXhEUVVGV0xFMUJRV1ZuUWl4SlFVRkZkVWdzUlVGQlJYZE9MRTFCUVVZc1EwRkJVeTlXTEVOQlFWUXNRMEZCUml4RlFVRmphMElzU1VGQlJXMUNMRVZCUVVVeVFpeE5RVUZHTEVOQlFWTXNSVUZCVkN4RlFVRlphRVFzUTBGQldpeERRVUZvUWl4RlFVRXJRblZJTEVWQlFVVjFUaXhIUVVGR0xFTkJRVTAzVml4RFFVRk9MRVZCUVZGcFFpeERRVUZTTEVOQlFUbERPMEZCUVRCRU8wRkJRVU1zV1VGQlUyMWtMRVZCUVZRc1EwRkJXWEpsTEVOQlFWb3NSVUZCWTBNc1EwRkJaQ3hGUVVGblFqdEJRVUZETEZGQlFVbE5MRWxCUVVWT0xFVkJRVVZ0U3l4UlFVRkdMRU5CUVZkdVJTeFhRVUZZTEVWQlFVNHNRMEZCSzBJc1dVRkJWVEZHTEVOQlFWWXNTVUZCWVhkTExFZEJRVWRhTEVsQlFVZ3NRMEZCVVc1TExFVkJRVVUwUlN4SlFVRldMRU5CUVdJc1IwRkJOa0l6UlN4RlFVRkZjMUFzVDBGQlJpeEhRVUZWZGxBc1JVRkJSWFZRTEU5QlFYcERMRWRCUVdsRUxGbEJRVlZvVUN4RFFVRldMRWxCUVdFc1pVRkJZVUVzUTBGQk1VSXNTMEZCT0VKT0xFVkJRVVZ6VWl4WlFVRkdMRWRCUVdWMlVpeEZRVUZGZFZJc1dVRkJMME1zUTBGQmFrUTdRVUZCT0Vjc1dVRkJVeXROTEVWQlFWUXNRMEZCV1hSbExFTkJRVm9zUlVGQlkwTXNRMEZCWkN4RlFVRm5RazBzUTBGQmFFSXNSVUZCYTBKRExFTkJRV3hDTEVWQlFXOUNPMEZCUVVOUUxGRkJRVVZoTEVWQlFVVXdReXhMUVVGR0xFTkJRVkVzUlVGQlVpeEZRVUZYZGtRc1EwRkJXQ3hEUVVGR0xFTkJRV2RDTEVsQlFVbFJMRU5CUVVvN1FVRkJRU3hSUVVGTlJ5eERRVUZPTzBGQlFVRXNVVUZCVVVrc1EwRkJVanRCUVVGQkxGRkJRVlZGTEVOQlFWWTdRVUZCUVN4UlFVRlpSU3hEUVVGYU8wRkJRVUVzVVVGQlkwTXNRMEZCWkR0QlFVRkJMRkZCUVdkQ1JTeEpRVUZGTEVOQlFXeENPMEZCUVVFc1VVRkJiMEpGTEVsQlFVVjZRaXhGUVVGRlowUXNUVUZCZUVJN1FVRkJRU3hSUVVFclFuUkNMRWxCUVVWRUxFbEJRVVVzUTBGQmJrTTdRVUZCUVN4UlFVRnhRMWNzU1VGQlJXNURMRVZCUVVVc1EwRkJSaXhEUVVGMlF6dEJRVUZCTEZGQlFUUkRkVU1zU1VGQlJVZ3NSVUZCUlRSQ0xGVkJRVVlzUTBGQllUZENMRU5CUVdJc1EwRkJPVU1zUTBGQk9FUXNTVUZCUjBrc1MwRkJSMllzU1VGQlJTeERRVUZHTEVsQlFVc3NXVUZCVlN4UFFVRlBWeXhEUVVGMFFpeEpRVUY1UWl4RFFVRkRVaXhGUVVGRk1sY3NWVUZCTlVJc1NVRkJkME4xUml4SFFVRkhNMVFzU1VGQlNDeERRVUZSTDBnc1EwRkJVaXhEUVVFNVF5eEZRVUY1UkN4UFFVRlBjRU1zUlVGQlJYTkVMRWxCUVVZc1EwRkJUeXhWUVVGVE4wTXNRMEZCVkN4RlFVRlhPMEZCUVVNc1ZVRkJTVWNzU1VGQlJWb3NSVUZCUlRKRUxFVkJRVVlzUTBGQlMyeEVMRU5CUVV3c1EwRkJUaXhEUVVGakswSXNUVUZCU1haRExFVkJRVVVzUTBGQlJpeEpRVUZMYlVNc1JVRkJSVlFzU1VGQlJpeERRVUZQTEVsQlFWQXNSVUZCV1d4Q0xFTkJRVm9zUlVGQlkwY3NSVUZCUlRKa0xFbEJRVVlzUlVGQlpDeERRVUZVTEVkQlFXdERSQ3hIUVVGSE1XUXNRMEZCU0N4RlFVRkxXQ3hEUVVGTUxFVkJRVTlOTEVOQlFWQXNSVUZCVTBNc1EwRkJWQ3hEUVVGc1F6dEJRVUU0UXl4TFFVRXZSU3hEUVVGUUxFTkJRWGRHTEVsQlFVZHBRaXhOUVVGSmFFSXNTVUZCUldkTExFZEJRVWQ0U3l4RFFVRklMRVZCUVV0RUxFVkJRVVVzUTBGQlJpeEZRVUZMTkVvc1lVRkJWaXhGUVVGM1FpeERRVUZETEVOQlFYcENMRVZCUVRKQ05Vb3NRMEZCTTBJc1JVRkJOa0pSTEVOQlFUZENMRU5CUVVZc1JVRkJhME5KTEVsQlFVVklMRVZCUVVWeFRpeFZRVUYwUXl4RlFVRnBSQ3hOUVVGSmNrNHNSVUZCUlN0SkxGVkJRVVlzUTBGQllYaEhMRTFCUVdwQ0xFdEJRVEJDZGtNc1NVRkJSVWNzUTBGQk5VSXNRMEZCYWtRc1JVRkJaMFpCTEV0QlFVZEtMRU5CUVhaR0xFTkJRVWdzUlVGQk5rWTdRVUZCUXl4WFFVRkpVU3hKUVVGRmNVSXNSVUZCUld0Q0xFZEJRVVlzUTBGQlRTdElMRWRCUVVjM1N5eERRVUZJTEVWQlFVc3NVVUZCVEN4RFFVRk9MRVZCUVhGQ2VXUXNSVUZCY2tJc1EwRkJSaXhGUVVFeVFtaGtMRWxCUVVWR0xFVkJRVVZuUXl4TlFVRnVReXhGUVVFd1EzcENMRWxCUVVWRkxFTkJRVFZETEVWQlFUaERSaXhIUVVFNVF6dEJRVUZyUkVnc1dVRkJSVmdzUTBGQlJpeEZRVUZKWXl4TlFVRkpSeXhEUVVGS0xFdEJRVkZPTEVsQlFVVnBRaXhGUVVGRmJXTXNTMEZCUml4RFFVRlJjR1FzUTBGQlVpeEZRVUZWTEVOQlFVTXNRMEZCV0N4RlFVRmhMRU5CUVVNc1EwRkJaQ3hEUVVGR0xFVkJRVzFDUml4TFFVRkhiVUlzUlVGQlJXVXNTMEZCUml4RFFVRlJjRU1zUTBGQlVpeEZRVUZWYzBzc1IwRkJSMnhMTEVOQlFVZ3NSVUZCU3l4UlFVRk1MRU5CUVZZc1EwRkJPVUlzUTBGQlNpeEZRVUUyUkdJc1JVRkJSVzlDTEVsQlFVWXNRMEZCVHpOQ0xFVkJRVVYxUWl4RFFVRkdMRU5CUVZBc1JVRkJXVWdzUTBGQldpeEZRVUZqUnl4RFFVRmtMRU5CUVRkRU8wRkJRV3hFTEU5QlFXZEpMRWxCUVVkTUxFTkJRVWdzUlVGQlN5eExRVUZKUnl4SlFVRkZUQ3hGUVVGRlFTeEZRVUZGWjBNc1RVRkJSaXhIUVVGVExFTkJRVmdzUlVGQll6UkhMR0ZCUVdoQ0xFVkJRVGhDZGtnc1JVRkJSV3RDTEVkQlFVWXNRMEZCVFhaRExFTkJRVTRzUlVGQlVXMWtMRVZCUVZJc1EwRkJPVUlzUlVGQk1FTTFZeXhKUVVGRkxFTkJRV2hFTEVWQlFXdEVRU3hKUVVGRlRDeERRVUZ3UkN4RlFVRnpSRXNzUjBGQmRFUTdRVUZCTUVSSUxGbEJRVVZLTEVWQlFVVlBMRU5CUVVZc1EwRkJSaXhGUVVGUE1rb3NSMEZCUjJZc1NVRkJTQ3hEUVVGUkwwa3NSVUZCUlhkRUxFbEJRVVlzU1VGQlVTeEZRVUZvUWl4TFFVRnhRaXhEUVVGRE1FUXNSVUZCUlhsT0xFMUJRVVlzUTBGQlV6TlZMRU5CUVZRc1JVRkJWeXhaUVVGWUxFTkJRWFJDTEVsQlFXZEVhVUlzUlVGQlJUaExMRkZCUVVZc1EwRkJWemxNTEVOQlFWZ3NSVUZCWVVRc1EwRkJZaXhEUVVGb1JDeExRVUZyUlVFc1JVRkJSWEZrTEVkQlFVWXNSMEZCVFhCakxFVkJRVVZ4WXl4UlFVRkdMRWxCUVZseVl5eEZRVUZGY1dNc1VVRkJSaXhEUVVGWGRHUXNSVUZCUlhGa0xFZEJRV0lzUTBGQmJFSXNSMEZCYjBNMVl5eEZRVUZGVkN4RlFVRkZlVTBzVjBGQlJpeERRVUZqY2tvc1QwRkJaQ3hEUVVGelFuZGFMRVZCUVhSQ0xFVkJRWGxDTEVWQlFYcENMRU5CUVVZc1JVRkJLMEl6WXl4RFFVRXZRaXhEUVVGMFJ5eERRVUZRTzBGQlFURkVPMEZCUVRCTkxGbEJRVTl5UWl4RFFVRlFPMEZCUVZNc1dVRkJVekpsTEVWQlFWUXNRMEZCV1RObExFTkJRVm9zUlVGQlkwTXNRMEZCWkN4RlFVRm5RazBzUTBGQmFFSXNSVUZCYTBJN1FVRkJReXhUUVVGSkxFbEJRVWxETEVOQlFVb3NSVUZCVFVNc1NVRkJSVklzU1VGQlJXOURMRVZCUVVWcFN5eE5RVUZHTEVOQlFWTnlUU3hEUVVGVUxFVkJRVmRFTEVOQlFWZ3NRMEZCUml4SFFVRm5Ra0VzUTBGQmVFSXNSVUZCTUVKWkxFbEJRVVVzUTBGQmFFTXNSVUZCYTBNc1UwRkJUMG9zU1VGQlJVTXNSVUZCUlVjc1EwRkJSaXhEUVVGVUxFTkJRV3hETEVWQlFXbEVRU3hIUVVGcVJEdEJRVUZ4UkV3c1YwRkJSeXhOUVVGSlF5eEZRVUZGYVVvc1VVRkJWQ3hKUVVGdFFuQklMRVZCUVVWMVl5eFRRVUZHTEVOQlFWbDBWQ3hIUVVGSE9Vc3NRMEZCU0N4RFFVRmFMRU5CUVc1Q0xFVkJRWE5EUVN4RlFVRkZNRUlzVlVGQlJpeExRVUZsTTBJc1MwRkJSemhDTEVWQlFVVTRTeXhSUVVGR0xFTkJRVmN6VFN4RlFVRkZiMG9zWVVGQllpeEZRVUV5UW5CS0xFTkJRVE5DTEVOQlFVZ3NTVUZCYTBNclN5eEhRVUZIUkN4SFFVRkhPVXNzUTBGQlNDeEZRVUZMTEZGQlFVd3NRMEZCU0N4RFFVRnNReXhGUVVGeFJFRXNSVUZCUlRCQ0xGVkJRVVlzUTBGQllVTXNWMEZCWWl4RFFVRjVRak5DTEVOQlFYcENMRU5CUVhCRkxFTkJRWFJETzBGQlFYSkVMRXRCUVRSTUxFOUJRVTlTTEVOQlFWQTdRVUZCVXl4TFFVRkZaMFVzVFVGQlJpeERRVUZUTEVWQlFVTnhWU3hsUVVGakxIVkNRVUZUY2xrc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWVVGQlQwRXNSVUZCUlhkRkxFOUJRVVlzUTBGQlZUSk5MRVZCUVZZc1JVRkJZU3hYUVVGaUxFTkJRVkE3UVVGQmFVTXNTMEZCTlVRc1JVRkJOa1J4VGl4UFFVRk5MR1ZCUVZONFpTeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVTBzUTBGQllpeEZRVUZsTzBGQlFVTXNWVUZCU1VNc1EwRkJTanRCUVVGQkxGVkJRVTFETEVOQlFVNDdRVUZCUVN4VlFVRlJSeXhEUVVGU08wRkJRVUVzVlVGQlZVVXNRMEZCVmp0QlFVRkJMRlZCUVZsRkxFbEJRVVZvUWl4RlFVRkZkMWtzVTBGQlJpeERRVUZaTEVOQlFVTXNRMEZCWWl4RFFVRmtPMEZCUVVFc1ZVRkJPRUowV0N4SlFVRkZiVUlzUlVGQlJUaExMRkZCUVVZc1EwRkJWMjVPTEVWQlFVVTBTaXhoUVVGaUxFVkJRVEpDTlVvc1EwRkJNMElzUTBGQmFFTXNRMEZCT0VRc1NVRkJSeXhGUVVGRk5FSXNSVUZCUlRaWExHTkJRVVlzU1VGQmEwSXNUVUZCU1hwWkxFVkJRVVY1U2l4UlFVRk9MRWxCUVdkQ0xFOUJRVXQ2U2l4RlFVRkZlVW9zVVVGQmVrTXNTVUZCYlVSd1NDeEZRVUZGY1ZBc1VVRkJSaXhEUVVGWE1WSXNRMEZCV0N4RFFVRnlSQ3hEUVVGSUxFVkJRWFZGTEV0QlFVbGpMRWxCUVVWM1N5eEhRVUZIZEVzc1EwRkJTQ3hEUVVGR0xFVkJRVkZLTEVsQlFVVXdTeXhIUVVGSGRFd3NRMEZCU0N4RFFVRldMRVZCUVdkQ1VTeEpRVUZGTEVOQlFXeENMRVZCUVc5Q1F5eEpRVUZGUnl4RlFVRkZiME1zVFVGQk5VSXNSVUZCYlVONFF5eEpRVUZGUXl4RFFVRnlReXhGUVVGMVEwUXNSMEZCZGtNN1FVRkJNa00yWkN4WFFVRkhlbVFzUlVGQlJVb3NRMEZCUml4RFFVRklMRVZCUVZGTkxFVkJRVVZPTEVOQlFVWXNRMEZCVWp0QlFVRXpReXhQUVVGNVJDeEpRVUZIVUN4RFFVRklMRVZCUVVzc1NVRkJSMDBzUTBGQlNDeEZRVUZMTEV0QlFVbExMRWxCUVVWQkxFdEJRVWN3U3l4SFFVRkhkRXdzUTBGQlNDeERRVUZNTEVWQlFWZGpMRWxCUVVWQkxFdEJRVWQzU3l4SFFVRkhkRXNzUTBGQlNDeERRVUZvUWl4RlFVRnpRbElzU1VGQlJTeERRVUY0UWl4RlFVRXdRa01zU1VGQlJVY3NSVUZCUlc5RExFMUJRV3hETEVWQlFYbERlRU1zU1VGQlJVTXNRMEZCTTBNc1JVRkJOa05FTEVkQlFUZERPMEZCUVdsRU5HUXNWMEZCUjNoa0xFVkJRVVZLTEVOQlFVWXNRMEZCU0N4RlFVRlJUU3hGUVVGRlRpeERRVUZHTEVOQlFWSTdRVUZCYWtRc1QwRkJUQ3hOUVVGNVJUUmtMRWRCUVVkd1pTeERRVUZJTEVWQlFVdG5RaXhEUVVGTUxFVkJRVkVzVDBGQlQwWXNTVUZCUlhkTExFZEJRVWQwU3l4RFFVRklMRVZCUVVzc1VVRkJUQ3hEUVVGR0xFVkJRV2xDUml4RlFVRkZhME1zVFVGQlJpeEhRVUZUTEVOQlFWUXNTVUZCV1hWSkxFZEJRVWQ2U3l4RFFVRklMRVZCUVVzc1EwRkJRMGtzUTBGQlJDeEpRVUZKYjBzc1IwRkJSM1JNTEVOQlFVZ3NSVUZCU3l4UlFVRk1MRU5CUVZRc1EwRkJOMElzUlVGQmMwUm5RaXhEUVVFM1JEdEJRVUVyUkN4TFFVRjBZU3hGUVVGMVlUUmtMRmRCUVZVc2JVSkJRVk0xWlN4RFFVRlVMRVZCUVZjN1FVRkJReXhYUVVGSkxFbEJRVWxETEVOQlFVb3NSVUZCVFUwc1EwRkJUaXhGUVVGUlF5eERRVUZTTEVWQlFWVkRMRWxCUVVVMFFpeEZRVUZGYzFjc1MwRkJSaXhEUVVGUlR5eFBRVUZ3UWl4RlFVRTBRblJaTEVsQlFVVXNRMEZCYkVNc1JVRkJiME1zUzBGQlN5eERRVUZNTEUxQlFWVk1MRWxCUVVWUUxFVkJRVVZaTEVOQlFVWXNRMEZCV2l4RFFVRndReXhGUVVGelJFRXNSMEZCZEVRN1FVRkJNRVFzV1VGQlIyZElMRVZCUVVWeVNDeERRVUZHTEVOQlFVZ3NSVUZCVVR0QlFVRkRMR05CUVVkT0xFbEJRVVZOTEVWQlFVVXJTQ3hGUVVGRmFrVXNUMEZCU2l4RFFVRk1MRVZCUVd0Q08wRkJRVU1zWjBKQlFVZHdSU3hGUVVGRk5sa3NUVUZCVEN4RlFVRlpMRXRCUVVsMFdTeERRVUZLTEVsQlFWTlFMRVZCUVVVMldTeE5RVUZZTzBGQlFXdENjbGtzWjBKQlFVVkVMRU5CUVVZc1NVRkJTelpDTEVWQlFVVnpWeXhMUVVGR0xFTkJRVkYyUml4TlFVRlNMRU5CUVdVM1V5eERRVUZtTEVWQlFXbENReXhEUVVGcVFpeERRVUZNTEVkQlFYbENOa0lzUlVGQlJYRllMRmRCUVVZc1EwRkJZMjVhTEVOQlFXUXNSVUZCWjBKRExFTkJRV2hDTEVWQlFXdENVQ3hGUVVGRk9Ga3NUVUZCY0VJc1EwRkJla0k3UVVGQmJFSXNZVUZCZFVWNFdTeEZRVUZGSzBnc1JVRkJSV3BGTEU5QlFVb3NTVUZCWVN4TFFVRkxMRU5CUVd4Q08wRkJRVzlDTEdGQlFVVnJSU3hGUVVGRmJFVXNUMEZCU2l4TlFVRmxPVVFzUlVGQlJXZEpMRVZCUVVWc1JTeFBRVUZLTEVsQlFXRXNTMEZCU3l4RFFVRnFRenRCUVVGdlF6dEJRVUZxVHp0QlFVRnJUeXhMUVVFdmNFSXNSVUZCVkN4SFFVRXljVUpvUXl4RlFVRkZReXhGUVVGR0xFTkJRVXN3UWl4TlFVRk1MRU5CUVZrc1JVRkJRelpoTEZGQlFVOHNaMEpCUVZNM1pTeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRlBNbVVzUjBGQlJ5eEpRVUZJTEVWQlFWRXpaU3hEUVVGU0xFVkJRVlVzUTBGQlF5eERRVUZZTEVOQlFWQTdRVUZCY1VJc1MwRkJla01zUlVGQk1FTnZWQ3hSUVVGUExHZENRVUZUY0ZRc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWVVGQlR6SmxMRWRCUVVjc1NVRkJTQ3hGUVVGUk0yVXNRMEZCVWl4RFFVRlFPMEZCUVd0Q0xFdEJRUzlGTEVWQlFXZEdLMElzVFVGQlN5eGpRVUZUTDBJc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWVVGQlR6SklMRVZCUVVVc1NVRkJSaXhGUVVGUExGVkJRVk16U0N4RFFVRlVMRVZCUVZjN1FVRkJReXhsUVVGUExFdEJRVXNzUTBGQlRDeExRVUZUUVN4RFFVRlVMRWRCUVZkeFF5eEZRVUZGVGl4SlFVRkdMRU5CUVU4c1NVRkJVQ3hEUVVGWUxFZEJRWGRDTEV0QlFVc3lUaXhMUVVGTUxFZEJRV0Z3VFN4SlFVRmlMRU5CUVd0Q0xGbEJRVlU3UVVGQlF5eG5Ra0ZCU1N4TFFVRkxiVWNzVVVGQlZDeEpRVUZ0UWl4UFFVRkxMRXRCUVV0QkxGRkJRVGRDTEVsQlFYVkRMRTFCUVVrc1MwRkJTMEVzVVVGQmFFUXNTMEZCTWtRc1MwRkJTMjlGTEZkQlFVd3NSMEZCYVVJM1RpeERRVUUxUlR0QlFVRXJSU3hUUVVFMVJ5eERRVUV2UWp0QlFVRTJTU3hQUVVGb1N5eEZRVUZwU3l4SlFVRnFTeXhGUVVGelMwRXNRMEZCZEVzc1JVRkJkMHQ1UkN4VlFVRlZWQ3hOUVVGc1RDeERRVUZRTzBGQlFXbE5MRXRCUVd4VExFVkJRVzFUT0dJc1VVRkJUeXhyUWtGQlZUdEJRVUZETEdGQlFVOVNMRWRCUVVjc1NVRkJTQ3hGUVVGUk4yRXNVMEZCVWl4RlFVRnJRaXhWUVVGVGVrUXNRMEZCVkN4RlFVRlhPMEZCUVVNc1dVRkJSeXhOUVVGSkxFdEJRVXQ1U2l4UlFVRlVMRWxCUVcxQ0xFOUJRVXNzUzBGQlMwRXNVVUZCTjBJc1NVRkJkVU1zVFVGQlNTeExRVUZMUVN4UlFVRnVSQ3hGUVVFMFJEdEJRVUZETEdOQlFVbDRTaXhKUVVGRloyVXNSMEZCUnl4SlFVRklMRVZCUVZGcVpTeERRVUZTTEVOQlFVNHNRMEZCYVVKRExFVkJRVVZuUXl4WFFVRkdMRU5CUVdOcVF5eERRVUZrTzBGQlFXbENPMEZCUVVNc1QwRkJPVWdzUTBGQlVEdEJRVUYxU1N4TFFVRTFZaXhGUVVFMllpdGxMRk5CUVZFc2JVSkJRVlU3UVVGQlF5eGhRVUZQVkN4SFFVRkhMRWxCUVVnc1JVRkJVVGRoTEZOQlFWSXNSVUZCYTBJc1ZVRkJVM3BFTEVOQlFWUXNSVUZCVnp0QlFVRkRMRmxCUVVjc1RVRkJTU3hMUVVGTGVVb3NVVUZCVkN4SlFVRnRRaXhQUVVGTExFdEJRVXRCTEZGQlFUZENMRWxCUVhWRExFMUJRVWtzUzBGQlMwRXNVVUZCYmtRc1JVRkJORVE3UVVGQlF5eGpRVUZKZUVvc1NVRkJSV2RsTEVkQlFVY3NTVUZCU0N4RlFVRlJhbVVzUTBGQlVpeERRVUZPTEVOQlFXbENReXhGUVVGRksyVXNXVUZCUml4RFFVRmxhR1lzUTBGQlppeEZRVUZwUWtNc1JVRkJSVFpPTEZWQlFXNUNPMEZCUVN0Q08wRkJRVU1zVDBGQk5Va3NRMEZCVUR0QlFVRnhTaXhMUVVGeWJVSXNSVUZCYzIxQ2JWSXNVVUZCVHl4clFrRkJWVHRCUVVGRExHRkJRVTlZTEVkQlFVY3NTVUZCU0N4RlFVRlJOMkVzVTBGQlVpeEZRVUZyUWl4VlFVRlRla1FzUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCUzJ0RExGVkJRVXdzU1VGQmFVSXNTMEZCUzBFc1ZVRkJUQ3hEUVVGblFqaGpMRmxCUVdoQ0xFTkJRVFpDYUdZc1EwRkJOMElzUlVGQkswSXNTVUZCTDBJc1EwRkJha0k3UVVGQmMwUXNUMEZCY0VZc1EwRkJVRHRCUVVFMlJpeExRVUZ5ZEVJc1JVRkJjM1JDYTJZc1QwRkJUU3hwUWtGQlZUdEJRVUZETEdGQlFVOWFMRWRCUVVjc1NVRkJTQ3hGUVVGUk4yRXNVMEZCVWl4RlFVRnJRaXhWUVVGVGVrUXNRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJTMnRETEZWQlFVd3NTVUZCYVVJc1MwRkJTMEVzVlVGQlRDeERRVUZuUWpoakxGbEJRV2hDTEVOQlFUWkNhR1lzUTBGQk4wSXNSVUZCSzBJc1MwRkJTMjlNTEZkQlFYQkRMRU5CUVdwQ08wRkJRV3RGTEU5QlFXaEhMRU5CUVZBN1FVRkJlVWNzUzBGQmFERkNMRVZCUVdreFFuTkZMRTlCUVUwc2FVSkJRVlU3UVVGQlF5eFhRVUZKTEVsQlFVa3hVQ3hEUVVGS0xFVkJRVTFETEVsQlFVVXNRMEZCV2l4RlFVRmpMRk5CUVU5RUxFbEJRVVVzUzBGQlMwTXNRMEZCVEN4RFFVRlVMRU5CUVdRc1JVRkJaME5CTEVkQlFXaERPMEZCUVc5RExHTkJRVWxFTEVWQlFVVjVTaXhSUVVGT0xFdEJRV2xDY0Vnc1JVRkJSWFZqTEZOQlFVWXNRMEZCV1hSVUxFZEJRVWQwVEN4RFFVRklMRVZCUVVzc1EwRkJReXhEUVVGT0xFTkJRVm9zUjBGQmMwSkJMRVZCUVVVMlRpeFhRVUZHTEVkQlFXTXNSVUZCY2tRN1FVRkJjRU1zVDBGQk5rWXNUMEZCVHl4SlFVRlFPMEZCUVZrc1MwRkJNemhDTEVWQlFUUTRRakpSTEU5QlFVMHNaVUZCVTNobExFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVNc1lVRkJUMFFzU1VGQlJTeFJRVUZOUVN4RFFVRk9MRWxCUVZOQkxFTkJRVmdzUlVGQllVTXNTVUZCUlN4UlFVRk5RU3hEUVVGT0xFZEJRVkZFTEVOQlFWSXNSMEZCVlVNc1EwRkJla0lzUlVGQk1rSXNTMEZCUzNORUxFZEJRVXdzUTBGQlV5eFpRVUZWTzBGQlFVTXNaVUZCVDJ4Q0xFVkJRVVZ0WXl4TFFVRkdMRU5CUVZFc1NVRkJVaXhGUVVGaGVHVXNRMEZCWWl4RlFVRmxReXhEUVVGbUxFTkJRVkE3UVVGQmVVSXNUMEZCTjBNc1EwRkJiRU03UVVGQmFVWXNTMEZCYW1wRExFVkJRV3RxUTNObExFMUJRVXNzWTBGQlUzWmxMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVTh5U0N4RlFVRkZMRWxCUVVZc1JVRkJUeXhWUVVGVE0wZ3NRMEZCVkN4RlFVRlhPMEZCUVVNc1dVRkJTVU1zU1VGQlJTeExRVUZMTEVOQlFVd3NTMEZCVXl4RlFVRm1PMEZCUVVFc1dVRkJhMEpOTEVsQlFVVXNRMEZCY0VJN1FVRkJRU3haUVVGelFrTXNTVUZCUlN4TFFVRkxkME1zVFVGQk4wSXNRMEZCYjBNc1NVRkJSeXhMUVVGTExFTkJRVXdzUzBGQlUyaEVMRU5CUVZRc1NVRkJXU3hOUVVGSlF5eEZRVUZGZDBvc1VVRkJja0lzUlVGQk9FSXNUMEZCVDNoS0xFVkJRVVY1VFN4VFFVRlVMRU5CUVcxQ0xFbEJRVWNzV1VGQlZTeFBRVUZQTVUwc1EwRkJha0lzU1VGQmIwSXNRMEZCUXpaa0xFZEJRVWN4VkN4SlFVRklMRU5CUVZGdVN5eERRVUZTTEVOQlFYSkNMRWxCUVdsRExFTkJRVU54VEN4SFFVRkhMRU5CUVVOTUxFZEJRVWR1UWl4SlFVRklMRU5CUVZFM1NpeERRVUZTTEV0QlFWa3NRMEZCUXl4RlFVRkVMRVZCUVVrc1JVRkJTaXhEUVVGaUxFVkJRWE5DTEVOQlFYUkNMRVZCUVhsQ2FVY3NWMEZCZWtJc1JVRkJTQ3hEUVVGeVF5eEZRVUZuUmp0QlFVRkRha2NzWTBGQlJYRkRMRVZCUVVWblZ5eGhRVUZHTEVOQlFXZENjbGtzUTBGQmFFSXNRMEZCUml4RFFVRnhRaXhKUVVGSE8wRkJRVU1zYlVKQlFVdFBMRWxCUVVWRExFTkJRVkFzUlVGQlUwUXNSMEZCVkR0QlFVRmhUaXhyUWtGQlJTeExRVUZMVFN4RFFVRk1MRXRCUVZNc1JVRkJXQ3hGUVVGakxFMUJRVWxPTEVWQlFVVjNTaXhSUVVGT0xFdEJRV2xDY0Vnc1JVRkJSWFZqTEZOQlFVWXNRMEZCV1hSVUxFZEJRVWR5VEN4RFFVRklMRVZCUVVzc1EwRkJReXhEUVVGT0xFTkJRVm9zUjBGQmMwSkJMRVZCUVVWNVRTeFRRVUZHTEVkQlFWa3hUU3hEUVVGdVJDeERRVUZrTzBGQlFXSXNZVUZCYVVaRExFbEJRVVVzUTBGQlJqdEJRVUZKTEZkQlFYcEdMRU5CUVhsR0xFOUJRVTFSTEVOQlFVNHNSVUZCVVN4RFFVRkZPMEZCUVVNc1kwRkJSeXhMUVVGTGFWQXNTMEZCVEN4SFFVRmhiMUFzVFVGQllpeERRVUZ2UWpsbExFTkJRWEJDTEVOQlFVZzdRVUZCTUVJc1QwRkJOVlVzUlVGQk5sVXNTVUZCTjFVc1JVRkJhMVpCTEVOQlFXeFdMRVZCUVc5V2VVUXNWVUZCVlZRc1RVRkJPVllzUTBGQlVEdEJRVUUyVnl4TFFVRm9OME1zUlVGQmFUZERiV01zWVVGQldTeDFRa0ZCVlR0QlFVRkRMRlZCUVVsdVppeEpRVUZGTEVWQlFVNHNRMEZCVXl4UFFVRlBjMlVzUjBGQlJ5eEpRVUZJTEVWQlFWRTNZU3hUUVVGU0xFVkJRV3RDTEZWQlFWTjRSQ3hEUVVGVUxFVkJRVmM3UVVGQlF5eFpRVUZKVFN4SlFVRkZMRXRCUVVzeVFpeFZRVUZZTEVOQlFYTkNSeXhGUVVGRmEwUXNUMEZCUml4RFFVRlZMRWxCUVZZc1JVRkJaWFpHTEVOQlFXWXNTVUZCYTBJc1EwRkJiRUlzUzBGQmMwSnhReXhGUVVGRmRXTXNVMEZCUml4RFFVRlpkRlFzUjBGQlJ5eEpRVUZJTEVOQlFWb3NSMEZCYzBJdlN5eExRVUZIUVN4RlFVRkZObVVzV1VGQlJpeERRVUZsYm1Zc1EwRkJaaXhGUVVGcFFpeEpRVUZxUWl4RFFVRXZRenRCUVVGMVJTeFBRVUV6U0N4RlFVRTBTRVFzUTBGQk5VZ3NRMEZCVUR0QlFVRnpTU3hMUVVGMmJFUXNSVUZCV2l4RFFVRXpjVUlzUlVGQmFYaEZjVU1zUlVGQlJXbENMRWxCUVVZc1EwRkJUeXhGUVVGREsySXNWVUZCVXl4UlFVRldMRVZCUVcxQ1F5eFhRVUZWTEZOQlFUZENMRVZCUVhWRFRpeGpRVUZoTEZGQlFYQkVMRVZCUVRaRVR5eGhRVUZaTEU5QlFYcEZMRVZCUVdsR1F5eFpRVUZYTEdGQlFUVkdMRVZCUVZBc1JVRkJhMGdzVlVGQlUzaG1MRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTnZReXhOUVVGRlF5eEZRVUZHTEVOQlFVdDBReXhEUVVGTUxFbEJRVkVzVlVGQlUwRXNRMEZCVkN4RlFVRlhPMEZCUVVNc1YwRkJTU3hKUVVGSlR5eERRVUZLTEVWQlFVMURMRWxCUVVVc1JVRkJVaXhGUVVGWFF5eEpRVUZGTkVJc1JVRkJSWEpETEVOQlFVWXNRMEZCWWl4RlFVRnJRbGtzU1VGQlJVZ3NSVUZCUlhWRExFMUJRVVlzUjBGQlV5eERRVUUzUWl4RlFVRXJRbXhETEVsQlFVVXNRMEZCY2tNc1JVRkJkVU5CTEV0QlFVZEdMRU5CUVRGRExFVkJRVFJEUlN4SFFVRTFRenRCUVVGblJGQXNXVUZCUlU4c1RVRkJTVVlzUTBGQlNpeEhRVUZOTEVsQlFVNHNSMEZCVnl4TFFVRkxOR1FzUzBGQlRDeERRVUZYTEVOQlFVTXNRMEZCV2l4RFFVRmlMRVZCUVRSQ2JtTXNSVUZCUlRWQ0xFVkJRVVZMTEVOQlFVWXNRMEZCUml4RlFVRlJZaXhEUVVGU0xFVkJRVmROTEVOQlFWZ3NRMEZCTlVJc1JVRkJNRU5UTEVWQlFVVjNReXhMUVVGR0xFTkJRVkZvUkN4RFFVRlNMRVZCUVZWRUxFVkJRVVV5UXl4SFFVRkdMRVZCUVZZc1EwRkJNVU03UVVGQmFFUXNUMEZCTmtjc1QwRkJUeXhMUVVGTFF5eFRRVUZNTEVOQlFXVXpReXhEUVVGbUxFTkJRVkE3UVVGQmVVSXNTMEZCTVVvN1FVRkJNa29zUjBGQk0xSXNRMEZCYW5oRkxFTkJRVGhwUml4SlFVRkphV1lzUzBGQlJ5eFRRVUZRTzBGQlFVRXNUVUZCYVVKRExFdEJRVWNzU1VGQlNYQlpMRTFCUVVvc1EwRkJWeXhQUVVGTGMwSXNSVUZCVEN4SFFVRlJMR2xDUVVGdVFpeEZRVUZ4UXl4SFFVRnlReXhEUVVGd1FqdEJRVUZCTEUxQlFUaEVLMWNzUzBGQlJ5eFRRVUZJUVN4RlFVRkhMRU5CUVZNeFppeERRVUZVTEVWQlFWYzdRVUZCUXl4UlFVRkpUU3hKUVVGRlRpeEZRVUZGTWtvc1lVRkJSaXhEUVVGblFtbERMRmRCUVhSQ0xFTkJRV3RETEU5QlFVOTBUQ3hMUVVGSFFTeEZRVUZGY1dZc1RVRkJUQ3hMUVVGamNtWXNTVUZCUlZBc1EwRkJhRUlzUjBGQmJVSlBMRVZCUVVWelppeG5Ra0ZCUml4RFFVRnRRalZtTEVOQlFXNUNMRU5CUVRGQ08wRkJRV2RFTEVkQlFTOUtMRU5CUVdkTExFTkJRVU1zV1VGQlZUdEJRVUZETEdGQlFWTkJMRU5CUVZRc1IwRkJXVHRCUVVGRExGVkJRVWRwUWl4RFFVRklMRVZCUVVzN1FVRkJRMEVzVlVGQlJUSldMRXRCUVVZc1EwRkJVV2xLTEU5QlFWSXNSMEZCWjBJc01rZEJRV2hDTEVWQlFUUklOV1VzUlVGQlJYZE1MRk5CUVVZc1IwRkJXU3hGUVVGNFNTeEZRVUV5U1dsRkxFZEJRVWN4VHl4WFFVRklMRU5CUVdWcVFpeERRVUZtTEVOQlFUTkpMRU5CUVRaS0xFbEJRVWxtTEVsQlFVVkVMRVZCUVVVMlppeG5Ra0ZCUml4RFFVRnRRak5sTEVOQlFXNUNMRU5CUVU0c1EwRkJORUpZTEVsQlFVVXNVMEZCVDA0c1JVRkJSVFpNTEVkQlFWZ3NSVUZCWldoTUxFbEJRVVVzVlVGQlVXSXNSVUZCUlRobUxGVkJRVE5DTEVWQlFYTkRkR1lzU1VGQlJTeFZRVUZSVWl4RlFVRkZLMllzUzBGQmJFUXNSVUZCZDBRNVpTeEZRVUZGTWxZc1MwRkJSaXhEUVVGUmIwb3NWMEZCVWl4SFFVRnZRaXhMUVVFMVJTeEZRVUZyUm5KbUxFbEJRVVVzVlVGQlVWZ3NSVUZCUldkblFpeFhRVUU1Uml4RlFVRXdSM1JRTEVkQlFVZDRUeXhYUVVGSUxFTkJRV1Z1UWl4RFFVRm1MRU5CUVRGSExFVkJRVFJJUlN4SlFVRkZMRWxCUVRsSU8wRkJRVzFKTzBGQlFVTXNVMEZCU1Znc1EwRkJTanRCUVVGQkxGRkJRVTFGTEVOQlFVNDdRVUZCUVN4UlFVRlJSeXhEUVVGU08wRkJRVUVzVVVGQlZVVXNRMEZCVmp0QlFVRkJMRkZCUVZsRkxFbEJRVVZTTEVWQlFVVnpRaXhoUVVGR0xFTkJRV2RDTEV0QlFXaENMRU5CUVdRN1FVRkJRU3hSUVVGeFExb3NTVUZCUlZZc1JVRkJSWE5DTEdGQlFVWXNRMEZCWjBJc1MwRkJhRUlzUTBGQmRrTXNRMEZCT0VSYUxFVkJRVVV5Vml4TFFVRkdMRXRCUVZVelZpeEZRVUZGTWxZc1MwRkJSaXhEUVVGUmNVb3NZMEZCVWl4SFFVRjFRaXhoUVVGMlFpeEZRVUZ4UTJobUxFVkJRVVZ6V0N4VFFVRkdMRU5CUVZrc1EwRkJReXhEUVVGaUxFVkJRV2RDTTBJc1MwRkJhRUlzUTBGQmMwSnhTaXhqUVVGMFFpeEhRVUZ4UXl4RlFVRXhSU3hGUVVFMlJYUmxMRVZCUVVWMVpTeGxRVUZHTEVkQlFXdENMR3RDUVVGblFtcG1MRVZCUVVVeVZpeExRVUZHTEVOQlFWRnhTaXhqUVVGMlNDeEZRVUZ6U1d4bUxFVkJRVVUyVml4TFFVRkdMRU5CUVZGcFNpeFBRVUZTTEVkQlFXZENMREpHUVVGMFNpeEZRVUZyVURsbExFVkJRVVZwUWl4WFFVRkdMRU5CUVdObUxFTkJRV1FzUTBGQmJGQXNSVUZCYlZGdFFpeEZRVUZGTWtJc1RVRkJSaXhEUVVGVGNFTXNRMEZCVkN4RlFVRlhMRVZCUVVOM1pTeGxRVUZqTEhsQ1FVRlZPMEZCUVVNc1pVRkJUMjVuUWl4TFFVRkpUU3hEUVVGWU8wRkJRV0VzVDBGQmRrTXNSVUZCZDBNNFppeHRRa0ZCYTBJc05rSkJRVlU3UVVGQlF5eGxRVUZQY0dkQ0xFdEJRVWxSTEVOQlFWZzdRVUZCWVN4UFFVRnNSaXhGUVVGdFJqWm1MR3RDUVVGcFFpdzBRa0ZCVlR0QlFVRkRMR1ZCUVU5eVowSXNTMEZCU1Zjc1EwRkJXRHRCUVVGaExFOUJRVFZJTEVWQlFUWklNbVlzYjBKQlFXMUNMRGhDUVVGVk8wRkJRVU1zWlVGQlQzUm5RaXhMUVVGSllTeERRVUZZTzBGQlFXRXNUMEZCZUVzc1JVRkJXQ3hEUVVFM1VUdEJRVUZ2WXl4SFFVRTNNVUlzUlVGQlJDeERRVUZwTWtJc1UwRkJVekJtTEVWQlFWUXNRMEZCV1hoblFpeERRVUZhTEVWQlFXTkRMRU5CUVdRc1JVRkJaMEpOTEVOQlFXaENMRVZCUVd0Q08wRkJRVU1zVVVGQlNVTXNRMEZCU2p0QlFVRkJMRkZCUVUxRExFTkJRVTQ3UVVGQlFTeFJRVUZSUnl4RFFVRlNPMEZCUVVFc1VVRkJWVVVzUTBGQlZqdEJRVUZCTEZGQlFWbEZMRWxCUVVWb1FpeEZRVUZGTmxjc1MwRkJhRUlzUTBGQmMwSXNUMEZCVDNSWExFbEJRVVZCTEV0QlFVZHZaaXhIUVVGSE0yWXNRMEZCU0N4RFFVRk1MRVZCUVZkUExFMUJRVWxQTEVsQlFVVlFMRVZCUVVWclowSXNaMEpCUVVZc1EwRkJiVUo0WjBJc1EwRkJia0lzUzBGQmRVSk5MRVZCUVVWT0xFTkJRVVlzUTBGQmVrSXNSVUZCT0VJc1QwRkJTMkVzUTBGQlRDeEpRVUZSZFVJc1JVRkJSVGhMTEZGQlFVWXNRMEZCVjI1T0xFVkJRVVUwU2l4aFFVRmlMRVZCUVRKQ05Vb3NRMEZCTTBJc1EwRkJVaXhMUVVGM1EyTXNTVUZCUlhWQ0xFVkJRVVYzVlN4TFFVRkdMRU5CUVZFM1Z5eERRVUZTTEVWQlFWVkRMRU5CUVZZc1EwRkJNVU1zUTBGQk9VSXNSVUZCYzBZc1EwRkJRekpDTEVWQlFVVXdaU3huUWtGQlJpeEZRVUZFTEVsQlFYVkNXaXhIUVVGSGRsWXNTVUZCU0N4RFFVRlJja29zUTBGQlVpeERRVUYyUWl4SlFVRnRRekpsTEVkQlFVZDBWaXhKUVVGSUxFTkJRVkZzU3l4RFFVRlNMRU5CUVc1RExFdEJRV2RFVHl4SlFVRkZVU3hGUVVGRloyWXNTMEZCU2l4RlFVRlZkbVlzU1VGQlJVOHNSVUZCUlRCbUxGRkJRV1FzUlVGQmRVSTVaaXhKUVVGRlNTeEZRVUZGTW1Zc1VVRkJNMElzUlVGQmIwTXpaaXhGUVVGRk1HWXNVVUZCUml4SFFVRlhNV1lzUlVGQlJUSm1MRkZCUVVZc1IwRkJWek5tTEVWQlFVVm5aaXhMUVVGR0xFZEJRVkZzWml4RFFVRnNSU3hGUVVGdlJVRXNTVUZCUlZBc1JVRkJSWGxtTEV0QlFYaEZMRVZCUVRoRmFHWXNSVUZCUldkbUxFdEJRVVlzUjBGQlVYaG1MRU5CUVhSR0xFVkJRWGRHVVN4RlFVRkZNR1lzVVVGQlJpeEhRVUZYYW1kQ0xFTkJRVzVITEVWQlFYRkhUeXhGUVVGRk1tWXNVVUZCUml4SFFVRlhMMllzUTBGQmFFc3NRMEZCTVVZc1EwRkJXQ3hGUVVGNVVTeExRVUZMTEVOQlFVd3NTMEZCVTBVc1EwRkJWQ3hIUVVGWFFTeEpRVUZGTEVWQlFXSXNSMEZCWjBKQkxFTkJRV2hUTzBGQlFXdFRMRmxCUVZNNFppeEZRVUZVTEVOQlFWazFaMElzUTBGQldpeEZRVUZqUXl4RFFVRmtMRVZCUVdkQ08wRkJRVU1zVjBGQlRTeEZRVUZEYVVRc1MwRkJTU3hsUVVGVk8wRkJRVU1zWlVGQlQyeEVMRTFCUVVrc1MwRkJTeXhQUVVGUExFdEJRVXRyUkN4SFFVRnlRaXhIUVVGNVFpeERRVUZETEV0QlFVdEJMRWRCUVV3c1IwRkJVMnBFTEVOQlFWWXNSVUZCWVhWRUxFdEJRV0lzUTBGQmJVSXNTVUZCYmtJc1JVRkJkMEpETEZOQlFYaENMRU5CUVdoRE8wRkJRVzFGTEU5QlFXNUdMRVZCUVU0N1FVRkJNa1lzVDBGQlNXOWtMRXRCUVVjc01rSkJRVkE3UVVGQlFTeE5RVUZ0UTBNc1MwRkJSeXhMUVVGMFF6dEJRVUZCTEUxQlFUUkRReXhMUVVGSExFVkJRVU5ETEZWQlFWTXNWVUZCVml4RlFVRnhRa01zV1VGQlZ5eFJRVUZvUXl4RlFVRjVRMjVMTEZOQlFWRXNUMEZCYWtRc1JVRkJMME03UVVGQlFTeE5RVUY1UjI5TExFdEJRVWNzUlVGQlEwTXNaVUZCWXl4SFFVRm1MRVZCUVcxQ1F5eFpRVUZYTEV0QlFUbENMRVZCUVRWSE8wRkJRVUVzVFVGQmFVcERMRXRCUVVjc1EwRkJReXhSUVVGRUxFVkJRVlVzUzBGQlZpeEZRVUZuUWl4SlFVRm9RaXhEUVVGd1NqdEJRVUZCTEUxQlFUQkxReXhMUVVGSE9XZENMRVZCUVVWelFpeGhRVUZHTEVOQlFXZENMRXRCUVdoQ0xFVkJRWFZDSzFVc1MwRkJjRTBzUTBGQk1FMHNVMEZCVXpCTExFVkJRVlFzUTBGQldYWm9RaXhEUVVGYUxFVkJRV003UVVGQlF5eFJRVUZIUVN4TFFVRkxjMmhDTEVWQlFWSXNSVUZCVnl4UFFVRlBkR2hDTEVOQlFWQXNRMEZCVXl4SlFVRkpReXhKUVVGRlJDeEZRVUZGTEVOQlFVWXNSVUZCU3pSRExGZEJRVXdzUzBGQmJVSTFReXhGUVVGRllTeExRVUZHTEVOQlFWRXNRMEZCVWl4RFFVRjZRanRCUVVGQkxGRkJRVzlEVGl4SlFVRkZPR2RDTEVkQlFVZHlaU3hOUVVGNlF5eERRVUZuUkN4UFFVRk5la01zUjBGQlRqdEJRVUZWTEZWQlFVZFFMRWxCUVVWeGFFSXNSMEZCUnpsblFpeERRVUZJTEVsQlFVMU9MRU5CUVZJc1JVRkJWVVFzUzBGQlMzTm9RaXhGUVVGc1FpeEZRVUZ4UWl4UFFVRlBkR2hDTEVOQlFWQTdRVUZCTDBJN1FVRkJkME1zV1VGQlUzZG9RaXhGUVVGVUxFTkJRVmw0YUVJc1EwRkJXaXhGUVVGak8wRkJRVU1zVVVGQlNVTXNTVUZCUlc5RExFVkJRVVZ2Wml4UlFVRkdMRU5CUVZkNmFFSXNRMEZCV0N4RFFVRk9MRU5CUVc5Q0xFOUJRVTlETEUxQlFVbEJMRWxCUVVWdlF5eEZRVUZGYjJZc1VVRkJSaXhEUVVGWGVtaENMRU5CUVZnc1NVRkJZM1ZvUWl4SFFVRkhkbWhDTEVOQlFVZ3NTMEZCVDBFc1EwRkJNMElzUjBGQk9FSkRMRU5CUVhKRE8wRkJRWFZETEZsQlFWTjVhRUlzUlVGQlZDeERRVUZaTVdoQ0xFTkJRVm9zUlVGQlkwTXNRMEZCWkN4RlFVRm5RazBzUTBGQmFFSXNSVUZCYTBJN1FVRkJReXhSUVVGSlF5eEpRVUZGZFVrc1IwRkJSMk1zU1VGQlNDeERRVUZSTlVvc1EwRkJVaXhEUVVGT0xFTkJRV2xDTEU5QlFVOVBMRWxCUVVVNFJDeExRVUZMY1dRc1IwRkJUQ3hEUVVGVExFTkJRVlFzUlVGQlYyNW9RaXhGUVVGRkxFTkJRVVlzUzBGQlRVUXNTMEZCUnl4RFFVRlVMRU5CUVZnc1MwRkJlVUpETEVWQlFVVXNRMEZCUml4TFFVRk5MRWxCUVM5Q0xFTkJRVVlzUjBGQmRVTlFMRU5CUVRsRE8wRkJRV2RFTEZsQlFWTXlhRUlzUlVGQlZDeERRVUZaTldoQ0xFTkJRVm9zUlVGQlkwTXNRMEZCWkN4RlFVRm5RazBzUTBGQmFFSXNSVUZCYTBKRExFTkJRV3hDTEVWQlFXOUNReXhEUVVGd1FpeEZRVUZ6UWp0QlFVRkRMRkZCUVVsSExFTkJRVW83UVVGQlFTeFJRVUZOUlN4SlFVRkZMRU5CUVZJc1EwRkJWU3hMUVVGSlJpeEpRVUZGVEN4UFFVRkxReXhKUVVGRkxGRkJRVVlzUjBGQlZ5eFRRVUZvUWl4SlFVRXlRaXhEUVVFelFpeEhRVUUyUWl4WlFVRlZVQ3hEUVVGV0xFZEJRVmtzUTBGQldpeEhRVUZqTEVOQlFXcEVMRVZCUVcxRVZ5eEpRVUZGTEVOQlFYSkVMRVZCUVhWRVFTeExRVUZITEVOQlFURkVPMEZCUVRSRUxHMUNRVUZYVEN4RFFVRllMRXRCUVdWUExFdEJRVWQxUWl4RlFVRkZNRlVzUjBGQlJpeERRVUZOTDFjc1EwRkJUaXhGUVVGUlR5eEpRVUZGZVVrc1IwRkJSM0JKTEVOQlFVZ3NRMEZCVml4RlFVRm5RaXhEUVVGRExFTkJRV3BDTEVWQlFXMUNTQ3hEUVVGdVFpeERRVUZzUWl4SFFVRjVRMFFzUzBGQlJ5eGpRVUZaUkN4RFFVRmFMRXRCUVdkQ1R5eExRVUZIZFVJc1JVRkJSVEJWTEVkQlFVWXNRMEZCVFM5WExFTkJRVTRzUlVGQlVTeFpRVUZWWjBvc1IwRkJSM0JKTEVOQlFVZ3NRMEZCYkVJc1JVRkJkMElzUTBGQlF5eERRVUY2UWl4RlFVRXlRa2dzUTBGQk0wSXNRMEZCYmtJc1IwRkJhMFFzWVVGQlYwWXNRMEZCV0N4TFFVRmxUeXhMUVVGSGRVSXNSVUZCUlRCVkxFZEJRVVlzUTBGQlRTOVhMRU5CUVU0c1JVRkJVU3hYUVVGVFowb3NSMEZCUjNCSkxFTkJRVWdzUTBGQlZDeEhRVUZsTEU5QlFYWkNMRVZCUVN0Q0xFTkJRVU1zUTBGQmFFTXNSVUZCYTBOSUxFTkJRV3hETEVOQlFXeENMRU5CUVhKRUxFdEJRU3RIU3l4TFFVRkhkVUlzUlVGQlJUQlZMRWRCUVVZc1EwRkJUUzlYTEVOQlFVNHNSVUZCVVN4WlFVRlZaMG9zUjBGQlIzQkpMRU5CUVVnc1EwRkJiRUlzUlVGQmQwSXNRMEZCUXl4RFFVRjZRaXhGUVVFeVFrZ3NRMEZCTTBJc1EwRkJTQ3hGUVVGcFF5eGpRVUZaUml4RFFVRmFMRXRCUVdkQ1R5eExRVUZIZFVJc1JVRkJSVEJWTEVkQlFVWXNRMEZCVFM5WExFTkJRVTRzUlVGQlVTeFhRVUZUWjBvc1IwRkJSM0JKTEVOQlFVZ3NRMEZCVkN4SFFVRmxMRTlCUVhaQ0xFVkJRU3RDTEVOQlFVTXNRMEZCYUVNc1JVRkJhME5JTEVOQlFXeERMRU5CUVc1Q0xFTkJRV2hLTEVOQlFYcERPMEZCUVRWRUxFdEJRU3RUTEU5QlFVOUxMRU5CUVZBN1FVRkJVeXhaUVVGVEsyZENMRVZCUVZRc1EwRkJXVGRvUWl4RFFVRmFMRVZCUVdORExFTkJRV1FzUlVGQlowSk5MRU5CUVdoQ0xFVkJRV3RDTzBGQlFVTXNVVUZCU1VNc1EwRkJTanRCUVVGQkxGRkJRVTFETEVsQlFVVnJaaXhIUVVGSE0yWXNRMEZCU0N4RFFVRlNPMEZCUVVFc1VVRkJZMWtzU1VGQlJUUm1MRWRCUVVkNFowSXNRMEZCU0N4RlFVRkxReXhEUVVGTUxFVkJRVTlSTEVOQlFWQXNRMEZCYUVJN1FVRkJRU3hSUVVFd1Frc3NTVUZCUlN4cFFrRkJaWFZDTEVWQlFVVXdWU3hIUVVGR0xFTkJRVTB2Vnl4RFFVRk9MRVZCUVZFc1YwRkJVaXhGUVVGdlFpeERRVUZETEVOQlFYSkNMRVZCUVhWQ1V5eERRVUYyUWl4RFFVRXpReXhEUVVGeFJTeFBRVUZQYVdZc1IwRkJSM1pXTEVsQlFVZ3NRMEZCVVhaS0xFTkJRVklzU1VGQlYwRXNRMEZCV0N4SlFVRmpTaXhKUVVGRlRTeE5RVUZKWXl4RlFVRkZlV1VzYVVKQlFVWXNUVUZCZFVKNlppeE5RVUZKV2l4RlFVRkZObGNzUzBGQlJpeERRVUZSTlZjc1EwRkJVaXhEUVVFdlFpeERRVUZHTEVWQlFUWkRMRmRCUVZOWExFTkJRVlFzUzBGQllVRXNTVUZCUlZvc1JVRkJSU3hYUVVGVFF5eEZRVUZGTEVOQlFVWXNSVUZCU3pKRExGZEJRVXdzUlVGQlZDeEhRVUUwUWpORExFVkJRVVZaTEV0QlFVWXNRMEZCVVN4RFFVRlNMRU5CUVRsQ0xFTkJRV1lzUTBGQk4wTXNSVUZCZFVkRUxFbEJRVVZ2UlN4WFFVRlhjRVVzUTBGQldDeExRVUZsTEVOQlFYaElMRVZCUVRCSVFTeEpRVUZGWjJoQ0xFZEJRVWMxYUVJc1EwRkJTQ3hGUVVGTFF5eERRVUZNTEVWQlFVOU5MRTFCUVVsUExFbEJRVVVzVVVGQlJpeEhRVUZYTEZOQlFXWXNRMEZCVUN4RlFVRnBRMDRzUTBGQmFrTXNSVUZCYlVORExFTkJRVzVETEVOQlFVWXNSMEZCZDBNc1NVRkJhRXdzUTBGQlVEdEJRVUUyVEN4TFFVRkZkVVFzVFVGQlJpeERRVUZUTEVWQlFVTTRaQ3hWUVVGVExFVkJRVU5ETEZOQlFWRXNSVUZCUXpkbExFdEJRVWtzWVVGQlUyeEVMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNZMEZCUjBFc1EwRkJTQ3hGUVVGTE8wRkJRVU1zWjBKQlFVbE5MRWxCUVVWcFowSXNSMEZCUjNoblFpeERRVUZJTEVWQlFVc3NVMEZCVEN4RFFVRk9MRU5CUVhOQ0xFOUJRVTBzVDBGQlMwOHNRMEZCVEN4SFFVRlBMRWRCUVZBc1IwRkJWMEVzUTBGQmFrSTdRVUZCYlVJN1FVRkJReXhUUVVGdVJTeEZRVUZVTEVWQlFWWXNSVUZCZVVZd1Z5eFhRVUZWTEVWQlFVTXJTeXg1UWtGQmQwSXNRMEZCUXl4RFFVRXhRaXhGUVVFMFFrTXNZVUZCV1N4RFFVRkRMRU5CUVhwRExFVkJRVEpEUXl4aFFVRlpMRU5CUVVNc1EwRkJlRVFzUlVGQk1FUkRMRlZCUVZNc1EwRkJReXhEUVVGd1JTeEZRVUZ6UlVNc1dVRkJWeXhEUVVGRExFTkJRV3hHTEVWQlFXOUdhRUlzV1VGQlZ5eERRVUZETEVOQlFXaEhMRVZCUVd0SGFVSXNXVUZCVnl4RFFVRkRMRU5CUVRsSExFVkJRV2RJVGl4VFFVRlJMRU5CUVVNc1EwRkJla2dzUlVGQk1raFBMRTlCUVUwc1EwRkJReXhEUVVGc1NTeEZRVUZ2U1VNc1UwRkJVU3hEUVVGRExFTkJRVGRKTEVWQlFTdEpReXhSUVVGUExFTkJRVU1zUTBGQmRrb3NSVUZCZVVwRExGRkJRVThzUTBGQlF5eERRVUZxU3l4RlFVRnRTME1zVFVGQlN5eERRVUZETEVOQlFYcExMRVZCUVc1SExFVkJRU3RSYWtJc1ZVRkJVeXhGUVVGRExGTkJRVkVzVlVGQlZDeEZRVUY0VWl4RlFVRTJVelZMTEU5QlFVMHNaVUZCVXpkWExFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1ZETEVOQlFXWXNSVUZCYVVJN1FVRkJReXhWUVVGSFVpeExRVUZITEUxQlFVbEJMRVZCUVVWNVNpeFJRVUZVTEVsQlFXMUNMRTFCUVVsNlNpeEZRVUZGZVVvc1VVRkJla0lzU1VGQmJVTjZTaXhGUVVGRk5sY3NTMEZCZUVNc1JVRkJPRU03UVVGQlF5eFpRVUZKY0Zjc1EwRkJTanRCUVVGQkxGbEJRVTFITEVOQlFVNDdRVUZCUVN4WlFVRlJSU3hEUVVGU08wRkJRVUVzV1VGQlZVVXNTVUZCUlhGQ0xFVkJRVVU0UXl4VFFVRkdMRU5CUVZsc1JpeERRVUZhTEVOQlFWbzdRVUZCUVN4WlFVRXlRbWxDTEVsQlFVVTBaaXhIUVVGSE0xY3NTVUZCU0N4RFFVRlJiRXNzUTBGQlVpeERRVUUzUWp0QlFVRkJMRmxCUVhkRGJVSXNTVUZCUlhCQ0xFVkJRVVUyVnl4TFFVRTFReXhEUVVGclJDeFBRVUZQTTFZc1RVRkJTV3BDTEVsQlFVVjFhRUlzUjBGQlIzaG5RaXhEUVVGSUxFTkJRVTRzUjBGQllVWXNTVUZCUlhWQ0xFVkJRVVY1Wml4UlFVRkdMRU5CUVZjM2FFSXNRMEZCV0N4TFFVRmxiME1zUlVGQlJYbG1MRkZCUVVZc1EwRkJWemxuUWl4RFFVRllMRU5CUVRsQ0xFVkJRVFJETEV0QlFVc3NRMEZCVEN4TFFVRlRWQ3hEUVVGVUxFZEJRVmRQTEV0QlFVY3NVMEZCVVVFc1EwRkJXQ3hKUVVGakxFdEJRVXNzUTBGQlRDeE5RVUZWVEN4SlFVRkZTeXhGUVVGRmIwTXNSMEZCUml4RFFVRk5iRVFzUTBGQlRpeEZRVUZSTEVOQlFVTXNRMEZCVkN4RlFVRlhVU3hEUVVGWUxFTkJRVm9zUTBGQlpDeEhRVUY1UTBNc1EwRkJla01zUjBGQk1rTlhMRVZCUVVWdVFpeERRVUZHTEVOQlFYUkVMRWxCUVRSRVZ5eFhRVUZUVEN4RFFVRlVMSGxEUVVGVFFTeERRVUZVTEVkQlFWY3NZVUZCVjBzc1EwRkJXQ3hMUVVGbFNDeEpRVUZGYzBrc1IwRkJSMk1zU1VGQlNDeERRVUZSZEVvc1EwRkJVaXhEUVVGcVFpeExRVUU0UWtVc1JVRkJSU3hEUVVGR0xFTkJRVGxDTEV0QlFYRkRSaXhKUVVGRmJVb3NSMEZCUnpGS0xFTkJRVWdzUlVGQlMwTXNRMEZCVEN4RlFVRlBVU3hEUVVGUUxFTkJRVVlzUlVGQldVY3NTVUZCUlN4UlFVRnVSQ3hEUVVGWUxFVkJRWGRGTEZGQlFVMU1MRU5CUVU0c1NVRkJVMEVzVFVGQlNVRXNRMEZCWWl4TFFVRnBRaXhoUVVGWFN5eERRVUZZTEV0QlFXVk1MRXRCUVVkRkxFdEJRVWRCTEVWQlFVVXNRMEZCUml4RFFVRklMRXRCUVZVMFFpeEZRVUZGTkZVc1UwRkJSaXhEUVVGWmFsY3NRMEZCV2l4SlFVRmxMRVZCUVdZc1IwRkJhMElzU1VGQk5VSXNRMEZCYkVJc1IwRkJjVVJaTEVWQlFVVjFaU3hsUVVGR0xFbEJRVzFDTEU5QlFVczFaaXhEUVVGNFFpeEpRVUV5UWl4TlFVRkpUaXhGUVVGRmEwSXNUMEZCUml4RFFVRlZMRmxCUVZZc1EwRkJMMElzUzBGQmVVUkRMRVZCUVVWdVFpeERRVUZHTEVsQlFVc3NVMEZCT1VRc1EwRkJja1FzUlVGQk9FaGhMRXRCUVVjc1UwRkJVVUVzUTBGQldDeEpRVUZqTEV0QlFVc3NRMEZCVEN4TlFVRlZVQ3hKUVVGRlR5eEZRVUZGWjFZc1IwRkJSaXhEUVVGTk9WWXNRMEZCVGl4RlFVRlJUeXhEUVVGU0xFVkJRVlZETEVOQlFWWXNRMEZCV2l4RFFVRmtMRXRCUVRCRFZTeEpRVUZGUlN4RlFVRkZkV2hDTEZkQlFVWXNRMEZCWXpGcFFpeERRVUZrTEVWQlFXZENUU3hEUVVGb1FpeERRVUZHTEVkQlFYRkNZU3hGUVVGRmJrSXNRMEZCUml4SlFVRkxUU3hEUVVGd1JTeERRVUV2U1N4RFFVRjRSU3hGUVVFclVpeExRVUZMTEVOQlFXaFhMRU5CUVc1RU8wRkJRWE5hTzBGQlFVTXNTMEZCTjNwQ0xFVkJRVGg2UW5kWExFdEJRVWtzWVVGQlV5OVhMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdWRExFTkJRV1lzUlVGQmFVSTdRVUZCUXl4VlFVRkpReXhEUVVGS08wRkJRVUVzVlVGQlRVY3NRMEZCVGp0QlFVRkJMRlZCUVZGRkxFTkJRVkk3UVVGQlFTeFZRVUZWUlN4SlFVRkZjVUlzUlVGQlJUaERMRk5CUVVZc1EwRkJXV3hHTEVOQlFWb3NRMEZCV2p0QlFVRkJMRlZCUVRKQ2FVSXNTVUZCUlRSbUxFZEJRVWN6Vnl4SlFVRklMRU5CUVZGc1N5eERRVUZTTEVOQlFUZENMRU5CUVhkRExFOUJRVTlwUWl4TlFVRkpha0lzU1VGQlJYVm9RaXhIUVVGSGVHZENMRU5CUVVnc1EwRkJUaXhIUVVGaFJpeEpRVUZGZFVJc1JVRkJSWGxtTEZGQlFVWXNRMEZCVnpkb1FpeERRVUZZTEV0QlFXVnZReXhGUVVGRmVXWXNVVUZCUml4RFFVRlhPV2RDTEVOQlFWZ3NRMEZCT1VJc1JVRkJORU5HTEV0QlFVY3NVMEZCVVVFc1EwRkJXQ3hMUVVGbFRDeEpRVUZGU3l4RlFVRkZiME1zUjBGQlJpeERRVUZOYkVRc1EwRkJUaXhGUVVGUkxFTkJRVU1zUTBGQlZDeEZRVUZYVHl4RFFVRllMRU5CUVdwQ0xFTkJRVFZETEVWQlFUUkZMRXRCUVVzc1EwRkJUQ3hMUVVGVFJTeERRVUZVTEV0QlFXRkJMRWxCUVVVclppeEhRVUZIZUdkQ0xFTkJRVWdzUlVGQlMwTXNRMEZCVEN4RlFVRlBUeXhEUVVGUUxFTkJRV1lzUTBGQk5VVXNSVUZCYzBjc1lVRkJWME1zUTBGQldDeEpRVUZqVWl4TFFVRkxhV2hDTEVWQlFXNUNMRXRCUVhkQ2VtZENMRWxCUVVWNVowSXNSMEZCUjJwb1FpeERRVUZJTEVOQlFURkNMRU5CUVhSSExFVkJRWFZKTEU5QlFVdE5MRU5CUVV3c1NVRkJVVUVzUTBGQlVpeEpRVUZYU3l4SlFVRkZiMFVzVjBGQlYzWkZMRU5CUVZnc1EwRkJSaXhGUVVGblFrWXNUVUZCU1N4RFFVRkRMRU5CUVV3c1NVRkJVWEZwUWl4VFFVRlRhR2xDTEVOQlFWUXNRMEZCVWl4SFFVRnZRa0VzUzBGQlJ5eERRVUYyUWl4SFFVRjVRa2dzUTBGQmNFUXNTVUZCZFVSQkxFTkJRWEpOTzBGQlFYVk5MRXRCUVc1clF5eEZRVUZVTEVkQlFTdHJRelJDTEVWQlFVVnBRaXhKUVVGR0xFTkJRVThzUTBGQlF5eFJRVUZFTEVWQlFWVXNUMEZCVml4RFFVRlFMRVZCUVRCQ0xGVkJRVk4wUkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZEYjBNc1RVRkJSWGxtTEZGQlFVWXNRMEZCVnpkb1FpeERRVUZZTEVsQlFXTXNSVUZCUTJsRUxFdEJRVWtzWVVGQlUyeEVMRU5CUVZRc1JVRkJWMDhzUTBGQldDeEZRVUZoUXl4RFFVRmlMRVZCUVdVN1FVRkJReXhaUVVGSFJDeERRVUZJTEVWQlFVc3NUMEZCVFN4RFFVRkRjMmRDTEVkQlFVY3hWeXhKUVVGSUxFTkJRVkU1U0N4RlFVRkZNRlVzUjBGQlJpeERRVUZOTDFjc1EwRkJUaXhGUVVGUkxGTkJRVklzUTBGQlVpeERRVUZFTEVsQlFUaENRU3hGUVVGRk5tbENMR05CUVVZc1IwRkJiVUkzWml4TlFVRnVRaXhKUVVFeVFtaEVMRVZCUVVVNGFVSXNjVUpCUVVZc1IwRkJNRUk1UXl4TFFVRnVSaXhIUVVGNVJqWkNMRWRCUVVjM2FFSXNRMEZCU0N4RlFVRkxReXhEUVVGTUxFVkJRVTlQTEVOQlFWQXNRMEZCZWtZc1IwRkJiVWN5U1N4SFFVRkhia29zUTBGQlNDeEZRVUZMSzJkQ0xFVkJRVXdzUlVGQlVTeFpRVUZWTzBGQlFVTXNhVUpCUVU5akxFZEJRVWMzYUVJc1EwRkJTQ3hGUVVGTFF5eERRVUZNTEVWQlFVOVBMRU5CUVZBc1EwRkJVRHRCUVVGcFFpeFRRVUZ3UXl4RFFVRjZSenRCUVVFclNTeFBRVUY2U3l4RlFVRXdTM05XTEV0QlFVa3NZVUZCVXpsV0xFTkJRVlFzUlVGQlYwOHNRMEZCV0N4RlFVRmhReXhEUVVGaUxFVkJRV1U3UVVGQlF5eFpRVUZKUXl4RFFVRktPMEZCUVVFc1dVRkJUVWNzU1VGQlJVb3NTMEZCUjIxbUxFZEJRVWN6Wml4RFFVRklMRU5CUVZnN1FVRkJRU3haUVVGcFFtTXNTVUZCUlU0c1MwRkJSMjlvUWl4SFFVRkhOV2hDTEVOQlFVZ3NSVUZCUzBNc1EwRkJUQ3hGUVVGUFR5eERRVUZRTEVWQlFWTXNhVUpCUVdVMlFpeEZRVUZGTUZVc1IwRkJSaXhEUVVGTkwxY3NRMEZCVGl4RlFVRlJMRmRCUVZJc1JVRkJiMElzUTBGQlF5eERRVUZ5UWl4RlFVRjFRbGtzUTBGQmRrSXNRMEZCZUVJc1JVRkJhMFJCTEVOQlFXeEVMRU5CUVhSQ0xFTkJRVEpGTEU5QlFVOUZMRTFCUVVsTUxFbEJRVVZ6U1N4SFFVRkhZeXhKUVVGSUxFTkJRVkYwU2l4RFFVRlNMRU5CUVU0c1MwRkJiVUlzVlVGQlVVVXNSVUZCUlN4RFFVRkdMRXRCUVUwc1NVRkJaQ3hEUVVGdVFpeExRVUY1UTFRc1JVRkJSVFpYTEV0QlFVWXNRMEZCVVRWWExFTkJRVklzU1VGQlYwMHNRMEZCV0N4RlFVRmhRU3hKUVVGRk9FSXNSVUZCUlRCVkxFZEJRVVlzUTBGQlRTOVhMRU5CUVU0c1JVRkJVVU1zUTBGQlVpeERRVUY0UkN4SFFVRnZSWGxvUWl4SFFVRkhNV2hDTEVOQlFVZ3NSVUZCUzA4c1EwRkJUQ3hGUVVGUFR5eERRVUZRTEVOQlFUTkZPMEZCUVhGR0xFOUJRVGxXTEVWQlFXUTdRVUZCT0Zjc1IwRkJkRm9zUTBGQkwydERMRVZCUVhVclEzVkNMRVZCUVVWNVppeFJRVUZHTEVOQlFWY3ZRaXhWUVVGWUxFZEJRWE5DWVN4SFFVRkhhR1lzUlVGQlJUSmxMR3RDUVVGTUxFVkJRWGRDTEZWQlFWTjJaMElzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhSUVVGSFFTeERRVUZJTEVWQlFVc3NUMEZCVFN4RFFVRkRLMFVzVjBGQlYzZGlMRWRCUVVkNFowSXNRMEZCU0N4RlFVRkxMRmxCUVV3c1EwRkJXQ3hMUVVGblEwRXNSVUZCUlRocFFpeHhRa0ZCUml4SFFVRXdRa01zU1VGQk1VSXNSMEZCSzBJMVdpeEhRVUZIYmtvc1EwRkJTQ3hGUVVGTExFVkJRVU1yWml4WlFVRlhMRU5CUVZvc1JVRkJUQ3hGUVVGdlFpeFpRVUZWTzBGQlFVTXNZVUZCVHk5bUxFVkJRVVU0YVVJc2NVSkJRVVlzUjBGQk1FSkRMRWxCUVdwRE8wRkJRWE5ETEV0QlFYSkZMRU5CUVdoRkxFbEJRWGRKTEVsQlFUbEpPMEZCUVcxS0xFZEJRVGxNTEVOQlFUY3ZReXhGUVVFMmNrUXhaMElzUlVGQlJXbENMRWxCUVVZc1EwRkJUeXhGUVVGRE1HWXNVVUZCVHl4RlFVRlNMRVZCUVZkRExGTkJRVkVzUlVGQmJrSXNSVUZCYzBKRExGRkJRVThzVDBGQk4wSXNSVUZCVUN4RlFVRTJReXhWUVVGVGJHcENMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTnZReXhOUVVGRmVXWXNVVUZCUml4RFFVRlhPV2hDTEVsQlFVVkRMRU5CUVdJc1NVRkJaMElzUlVGQlEydHFRaXhSUVVGUExHZENRVUZUTldsQ0xFTkJRVlFzUlVGQlZ6dEJRVUZETEdGQlFVa3NTVUZCU1VNc1NVRkJSU3hEUVVGT0xFVkJRVkZETEVsQlFVVXNSVUZCVml4RlFVRmhSeXhKUVVGRkxGbEJRVlVzVDBGQlQwd3NRMEZCYWtJc1IwRkJiVUpCTEVWQlFVVjVSaXhMUVVGR0xFTkJRVkVzUjBGQlVpeERRVUZ1UWl4SFFVRm5ReXhEUVVGRGVrWXNRMEZCUkN4RFFVRnVSQ3hGUVVGMVJFTXNTVUZCUlN4RFFVRjZSQ3hGUVVFeVJFRXNSMEZCTTBRN1FVRkJLMFJETEZsQlFVVlVMRWxCUVVWblNpeEhRVUZIZUVrc1EwRkJTQ3hEUVVGR0xFZEJRVkZRTEVOQlFWWXNTVUZCWVZjc1JVRkJSVW9zUTBGQlJpeExRVUZOU1N4RlFVRkZTaXhKUVVGRkxFTkJRVW9zUTBGQlRpeEpRVUZqU1N4RlFVRkZMRU5CUVVZc1EwRkJNMEk3UVVGQkwwUXNVMEZCSzBZc1QwRkJUMGdzUTBGQlVEdEJRVUZUTEU5QlFUVklMRVZCUVdoQ0xFVkJRVGhKWjJZc1IwRkJSM1JXTEVsQlFVZ3NRMEZCVVc1TExFTkJRVklzVFVGQllYRkRMRVZCUVVWNVppeFJRVUZHTEVOQlFWYzVhRUlzU1VGQlJVTXNRMEZCWWl4RlFVRm5RalpXTEVkQlFXaENMRWRCUVc5Q05Fd3NSVUZCYWtNc1EwRkJPVWs3UVVGQmJVd3NSMEZCT1U4c1EwRkJOM0pFTEVWQlFUWTJSSEptTEVWQlFVVkRMRVZCUVVZc1EwRkJTekJDTEUxQlFVd3NRMEZCV1N4RlFVRkRLMU1zUzBGQlNTeGhRVUZUTDFjc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4aFFVRlBNRWdzUlVGQlJTeEpRVUZHTEVWQlFVOHNWVUZCVXpOSUxFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1U3UVVGQlF5eFpRVUZKUXl4RFFVRktPMEZCUVVFc1dVRkJUVU1zUTBGQlRqdEJRVUZCTEZsQlFWRkhMRWxCUVVVc1JVRkJWanRCUVVGQkxGbEJRV0ZGTEVsQlFVVXNRMEZCWml4RFFVRnBRaXhKUVVGSGNVUXNUVUZCVFVNc1QwRkJUaXhEUVVGamJrVXNRMEZCWkN4RFFVRklMRVZCUVc5Q08wRkJRVU1zWlVGQlNVOHNTVUZCUlcxbUxFZEJRVWN6Wml4RFFVRklMRU5CUVVZc1JVRkJVVk1zU1VGQlJWSXNSVUZCUlN0RExFMUJRV2hDTEVWQlFYVkNiRU1zU1VGQlJVd3NRMEZCZWtJc1JVRkJNa0pMTEVkQlFUTkNPMEZCUVN0Q1JpeGpRVUZGV0N4RlFVRkZZU3hEUVVGR0xFTkJRVVlzU1VGQlVYVkNMRVZCUVVVd1ZTeEhRVUZHTEVOQlFVMHZWeXhEUVVGT0xFVkJRVkZETEVWQlFVVmhMRU5CUVVZc1EwRkJVaXhGUVVGaExFTkJRVU1zUTBGQlpDeEZRVUZuUWs0c1EwRkJhRUlzUTBGQlVqdEJRVUV2UWl4WFFVRXdSQ3hQUVVGUFNTeERRVUZRTzBGQlFWTXNaMEpCUVU4c1MwRkJTeXhEUVVGTUxFdEJRVk5NTEVOQlFWUXNSMEZCVnpoQ0xFVkJRVVYzVlN4TFFVRkdMRU5CUVZFM1Z5eERRVUZTTEVWQlFWVkRMRU5CUVZZc1JVRkJXVTBzUTBGQldpeERRVUZZTEVkQlFUQkNPRUlzUlVGQlJUQlZMRWRCUVVZc1EwRkJUUzlYTEVOQlFVNHNSVUZCVVVNc1EwRkJVaXhEUVVGcVF6dEJRVUUwUXl4UFFVRTFTeXhGUVVFMlMwUXNRMEZCTjBzc1JVRkJLMHRETEVOQlFTOUxMRVZCUVdsTWQwUXNWVUZCVlZRc1RVRkJWaXhIUVVGcFFpeERRVUZzVFN4RFFVRlFPMEZCUVRSTkxFdEJRUzlPTEVWQlFWb3NRMEZCTnpaRUxFTkJRVEp3UlN4VFFVRlRiMmRDTEVWQlFWUXNRMEZCV1hCcVFpeERRVUZhTEVWQlFXTkRMRU5CUVdRc1JVRkJaMEpOTEVOQlFXaENMRVZCUVd0Q1F5eERRVUZzUWl4RlFVRnZRa01zUTBGQmNFSXNSVUZCYzBJN1FVRkJReXhYUVVGUExFbEJRVWt5YVVJc1IwRkJSM1puUWl4VFFVRklMRU5CUVdGT0xFbEJRV3BDTEVOQlFYTkNka01zUTBGQmRFSXNSVUZCZDBKRExFTkJRWGhDTEVWQlFUQkNUU3hEUVVFeFFpeEZRVUUwUWtNc1EwRkJOVUlzUlVGQk9FSkRMRU5CUVRsQ0xFTkJRVkE3UVVGQmQwTXNTMEZCUlRScFFpeExRVUZHTEVkQlFWRkVMRVZCUVZJc1JVRkJWMEVzUjBGQlIzWm5RaXhUUVVGSUxFZEJRV0VzUlVGQlEwVXNZVUZCV1hGblFpeEZRVUZpTEVWQlFXZENOMmRDTEUxQlFVc3NZMEZCVTNaRExFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1ZETEVOQlFXWXNSVUZCYVVKRExFTkJRV3BDTEVWQlFXMUNSeXhEUVVGdVFpeEZRVUZ4UWp0QlFVRkRMRmRCUVV0eFdpeEpRVUZNTEVkQlFWVnFZU3hEUVVGV0xFVkJRVmtzUzBGQlMzTnFRaXhKUVVGTUxFZEJRVlV2YVVJc1EwRkJkRUlzUlVGQmQwSXNTMEZCUzJkcVFpeE5RVUZNTEVkQlFWazVhVUlzUzBGQlJ6UkNMRVZCUVVWcmFFSXNUVUZCUml4RFFVRlRNVXdzVVVGQmFFUXNSVUZCZVVRc1MwRkJTekpNTEU5QlFVd3NSMEZCWVhacVFpeERRVUYwUlN4RlFVRjNSU3hMUVVGTGExZ3NTMEZCVEN4SFFVRlhMRXRCUVV0NFVpeEhRVUZNTEVkQlFWTXNTMEZCUzNGU0xFZEJRVXdzUlVGQk5VWXNSVUZCZFVjc1MwRkJTMjVVTEVkQlFVd3NSMEZCVTNKRUxFTkJRV2hJTEVWQlFXdElMRXRCUVVzd1Z5eEpRVUZNTEVkQlFWVjBWeXhOUVVGSmVVSXNSVUZCUlRSVkxGTkJRVVlzUTBGQldURlhMRU5CUVZvc1NVRkJaU3hGUVVGbUxFZEJRV3RDTEVsQlFYUkNMRU5CUVRWSU8wRkJRWGRLTEV0QlFXNU5MRVZCUVc5TmVWY3NTMEZCU1N4bFFVRlZPMEZCUVVNc1ZVRkJTV2hZTEVsQlFVVnZha0lzUjBGQlIwc3NVMEZCU0N4RFFVRmhMRXRCUVV0SUxFbEJRV3hDTEVOQlFVNHNRMEZCT0VJc1QwRkJUM1JxUWl4TFFVRkhRU3hGUVVGRmEwUXNSMEZCVEN4SFFVRlRiRVFzUlVGQlJXdEVMRWRCUVVZc1EwRkJUU3hKUVVGT0xFTkJRVlFzUjBGQmNVSnJaMElzUjBGQlIwc3NVMEZCU0N4RFFVRmhOVXdzVVVGQllpeERRVUZ6UWpOVkxFZEJRWFJDTEVOQlFUQkNMRWxCUVRGQ0xFTkJRVFZDTzBGQlFUUkVMRXRCUVRkVExFVkJRVGhUZDJkQ0xFdEJRVWtzWVVGQlV6RnFRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eFZRVUZKUXl4RFFVRktPMEZCUVVFc1ZVRkJUVTBzU1VGQlJUWnBRaXhIUVVGSFN5eFRRVUZJTEVOQlFXRXNTMEZCUzBnc1NVRkJiRUlzUTBGQlVpeERRVUZuUXl4UFFVRlBMRXRCUVV0RkxFOUJRVXdzUTBGQllVY3NVVUZCWWl4SFFVRnpRaXhMUVVGTFF5eEhRVUZNTEVkQlFWTXpha0lzU1VGQlJXOURMRVZCUVVWcmFFSXNUVUZCUml4RFFVRlRMRXRCUVV0QkxFMUJRV1FzUlVGQmMwSjJha0lzUTBGQmRFSXNSVUZCZDBJc1MwRkJTM2RxUWl4UFFVRk1MRU5CUVdGSExGRkJRV0lzUjBGQmMwSXpha0lzUTBGQk9VTXNSVUZCWjBRc1EwRkJhRVFzUlVGQmEwUXNRMEZCYkVRc1JVRkJiMFFzUzBGQlMzZHFRaXhQUVVGTUxFTkJRV0ZITEZGQlFXcEZMRU5CUVdwRExFZEJRVFJITEV0QlFVdERMRWRCUVV3c1IwRkJVek5xUWl4SlFVRkZSQ3hEUVVGMlNDeEZRVUY1U0N4TFFVRkxNa1lzUjBGQlRDeEhRVUZUTEVOQlFVTXNTMEZCU3psQ0xFZEJRVXdzUjBGQlV5eExRVUZMYzFRc1MwRkJaaXhKUVVGelFteFlMRU5CUVhSQ0xFZEJRWGRDTEV0QlFVdHJXQ3hMUVVFdlNpeEZRVUZ4U3l4TFFVRkxjVTBzVDBGQlRDeERRVUZoU3l4SlFVRmlMRWxCUVcxQ0xFdEJRVXRNTEU5QlFVd3NRMEZCWVVzc1NVRkJZaXhEUVVGclFteHBRaXhKUVVGc1FpeERRVUYxUWl4TFFVRkxjMWtzU1VGQk5VSXNSVUZCYVVNc1MwRkJTM1JWTEVkQlFYUkRMRVZCUVRCRExFbEJRVEZETEVOQlFYaE1MRVZCUVhkUGNFWXNTMEZCUjBFc1JVRkJSWFZXTEVkQlFVd3NSMEZCVTNaV0xFVkJRVVYxVml4SFFVRkdMRU5CUVUwc1NVRkJUaXhEUVVGVUxFZEJRWEZDYzA0c1IwRkJSMHNzVTBGQlNDeERRVUZoTlV3c1VVRkJZaXhEUVVGelFpOUNMRWRCUVhSQ0xFTkJRVEJDTEVsQlFURkNMRU5CUVRkUUxFVkJRVFpTTEVsQlFYQlRPMEZCUVhsVExFdEJRWFp2UWl4RlFVRjRRaXhGUVVGcGNVSnpUaXhIUVVGSGRtZENMRk5CUVVnc1EwRkJZVTRzU1VGQllpeERRVUZyUWswc1UwRkJiRUlzUjBGQk5FSjFaMElzUjBGQlIzWm5RaXhUUVVGb2MwSXNSVUZCTUhOQ2RXZENMRWRCUVVkTExGTkJRVWdzUjBGQllTeEZRVUZETlV3c1ZVRkJVeXhGUVVGRE0xVXNTMEZCU1N4aFFVRlRiRVFzUTBGQlZDeEZRVUZYTzBGQlFVTXNXVUZCU1VNc1EwRkJTaXhEUVVGTkxFOUJRVThzVFVGQlNVUXNSVUZCUldsaExFbEJRVVlzUTBGQlQzaFJMRkZCUVZnc1NVRkJjVUlzVVVGQlRYcEtMRVZCUVVWcFlTeEpRVUZHTEVOQlFVOXFZU3hGUVVGRmMycENMRWxCUVZRc1EwRkJUaXhKUVVGelFpeFJRVUZOZEdwQ0xFVkJRVVZwWVN4SlFVRkdMRU5CUVU5d1JDeExRVUZRTEVOQlFXRTNWeXhGUVVGRmMycENMRWxCUVdZc1EwRkJha1FzUjBGQmMwVjBha0lzUlVGQlJXbGhMRWxCUVVZc1EwRkJUMnBoTEVWQlFVVnpha0lzU1VGQlZDeERRVUYwUlN4SlFVRnpSbkpxUWl4SlFVRkZiME1zUlVGQlJUQlZMRWRCUVVZc1EwRkJUUzlYTEVWQlFVVnBZU3hKUVVGU0xFVkJRV0ZxWVN4RlFVRkZjMnBDTEVsQlFXWXNSVUZCYjBJc1JVRkJjRUlzUTBGQlJpeEZRVUV3UW5KcVFpeExRVUZITEZkQlFWTkJMRU5CUVZvc1IwRkJZMEVzUTBGQlpDeEhRVUZuUWl4RFFVRm9TU3hEUVVGUU8wRkJRVEJKTEU5QlFXcExMRVZCUVd0TE5sWXNTMEZCU1N4aFFVRlRPVllzUTBGQlZDeEZRVUZYTzBGQlFVTnhReXhWUVVGRmVXaENMRVZCUVVZc1EwRkJTMFFzU1VGQlRDeERRVUZWTjJwQ0xFVkJRVVZ6YWtJc1NVRkJXaXhKUVVGclFtcG9RaXhGUVVGRmVXaENMRVZCUVVZc1EwRkJTMFFzU1VGQlRDeERRVUZWTjJwQ0xFVkJRVVZ6YWtJc1NVRkJXaXhGUVVGclFuUnFRaXhEUVVGc1FpeERRVUZzUWl4SFFVRjFReXhOUVVGSlFTeEZRVUZGYVdFc1NVRkJSaXhEUVVGUGVGRXNVVUZCV0N4SlFVRnhRaXhSUVVGTmVrb3NSVUZCUldsaExFbEJRVVlzUTBGQlQzQkVMRXRCUVZBc1EwRkJZWGhWTEVWQlFVVnZaaXhSUVVGR0xFTkJRVmQ2YUVJc1JVRkJSWE5xUWl4SlFVRmlMRU5CUVdJc1EwRkJUaXhKUVVGM1F5eERRVUZEYW1oQ0xFVkJRVVY1Wml4UlFVRkdMRU5CUVZjNWFFSXNSVUZCUlhOcVFpeEpRVUZpTEVOQlFUbEVMRWRCUVdsR2RHcENMRVZCUVVWcFlTeEpRVUZHTEVOQlFVOXFZU3hGUVVGRmMycENMRWxCUVZRc1NVRkJaWFJxUWl4RlFVRkZNa1lzUjBGQmJFY3NSMEZCYzBkMFJDeEZRVUZGZDFVc1MwRkJSaXhEUVVGUk4xY3NSVUZCUldsaExFbEJRVllzUlVGQlpXcGhMRVZCUVVWemFrSXNTVUZCYWtJc1JVRkJjMEowYWtJc1JVRkJSVEpHTEVkQlFVWXNSMEZCVFROR0xFVkJRVVZyV0N4SlFVRTVRaXhEUVVFM1NUdEJRVUZwVEN4UFFVRnVWeXhGUVVGV0xFVkJRWFowUWl4RlFVRjFhME5yVFN4SFFVRkhTeXhUUVVGSUxFTkJRV0ZOTEZOQlFXSXNSMEZCZFVKWUxFZEJRVWRMTEZOQlFVZ3NRMEZCWVU4c1ZVRkJZaXhIUVVGM1FpeEZRVUZEYkU4c1MwRkJTU3hoUVVGVE9WWXNRMEZCVkN4RlFVRlhPMEZCUVVOQkxGRkJRVVZwWVN4SlFVRkdMRU5CUVU5NFVTeFJRVUZRTEVsQlFXbENla29zUlVGQlJXbGhMRWxCUVVZc1EwRkJUeTlZTEZWQlFYaENMRXRCUVhGRGJFTXNSVUZCUldsaExFbEJRVVlzUTBGQlQycGhMRVZCUVVWemFrSXNTVUZCVkN4SlFVRmxkR3BDTEVWQlFVVXlSaXhIUVVGMFJEdEJRVUV5UkN4TFFVRTFSU3hGUVVGMGJrTXNSVUZCYjNORGRFUXNSVUZCUld0b1FpeE5RVUZHTEVkQlFWTXNSVUZCUTFVc1VVRkJUeXhuUWtGQlUycHJRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQUVN4RFFVRlFPMEZCUVZNc1MwRkJOMElzUlVGQk9FSnJhMElzVDBGQlRTeGxRVUZUYkd0Q0xFTkJRVlFzUlVGQlZ6dEJRVUZETEdGQlFVMHNTMEZCUjNORkxFdEJRVXMyWml4SFFVRk1MRU5CUVZOdWEwSXNTVUZCUlhORkxFdEJRVXM0Wml4RlFVRm9RaXhKUVVGdlFpeERRVUUzUWp0QlFVRXJRaXhMUVVFdlJTeEZRVUZuUm5aTkxGVkJRVk1zVDBGQmVrWXNSVUZCTjNORExFVkJRU3Q1UTNoV0xFVkJRVVY1YUVJc1JVRkJSaXhIUVVGTFZpeEhRVUZIZG1kQ0xGTkJRVWdzUTBGQllVNHNTVUZCYWpCRExFVkJRWE13UTBZc1JVRkJSWGxvUWl4RlFVRkdMRU5CUVV0RUxFbEJRVXdzUjBGQlZTeEZRVUZvTVVNc1EwRkJiVEZETEVsQlFVbFJMRVZCUVVvN1FVRkJRU3hOUVVGUFF5eEZRVUZRTzBGQlFVRXNUVUZCVlVNc1MwRkJSeXgzUWtGQllqdEJRVUZCTEUxQlFYTkRReXhMUVVGSExHRkJRWHBETEVOQlFYVkVMRk5CUVZORExFVkJRVlFzUjBGQllUdEJRVUZEU0N4WFFVRkxPV3BDTEVWQlFVVnJhMElzVFVGQlJpeExRVUZYTEVOQlFVTXNRMEZCV2l4SlFVRmxNV3RDTEVWQlFVVXlhMElzY1VKQlFXcENMRWRCUVhWRE0ydENMRVZCUVVVeWEwSXNjVUpCUVVZc1EwRkJkMEpHTEVWQlFYaENMRU5CUVhaRExFZEJRVzFGZW10Q0xFVkJRVVU0VlN4VlFVRkdMRU5CUVdFeVVDeEZRVUZpTEVWQlFXZENjR2xDTEVWQlFVVjVhRUlzUlVGQlJpeERRVUZMWXl4UlFVRnlRaXhEUVVGdVJTeEZRVUZyUjNacFFpeEZRVUZGZVdoQ0xFVkJRVVlzUTBGQlMyVXNTVUZCVEN4RlFVRjJSenRCUVVGdlNDeFpRVUZUUXl4RlFVRlVMRWRCUVdFN1FVRkJReXhYUVVGUE9XdENMRVZCUVVVNFZTeFZRVUZHTEVOQlFXRXNXVUZCVlR0QlFVRkRkVkFzVjBGQlJ5eExRVUZMTEVOQlFWSTdRVUZCVlN4TFFVRnNReXhIUVVGdlEwRXNTMEZCUjJocFFpeEZRVUZGYzBRc1IwRkJSaXhGUVVFNVF6dEJRVUZ6UkN4WlFVRlRiMllzUlVGQlZDeERRVUZaTDJ0Q0xFTkJRVm9zUlVGQlkwTXNRMEZCWkN4RlFVRm5RanRCUVVGRExGRkJRVWxOTEVOQlFVbzdRVUZCUVN4UlFVRk5ReXhKUVVGRkxFTkJRVkk3UVVGQlFTeFJRVUZWUXl4SlFVRkZMRVZCUVVOMWEwSXNVVUZCVDJoc1FpeERRVUZTTEVWQlFWb3NRMEZCZFVJc1MwRkJTVU1zU1VGQlJVRXNTVUZCUlN4RFFVRkdMRWRCUVVrc1EwRkJWaXhGUVVGWlR5eEpRVUZGTEVOQlFXUXNSVUZCWjBKQkxFdEJRVWNzU1VGQlJWQXNRMEZCY2tJN1FVRkJkVUpOTEZWQlFVVjVTU3hIUVVGSGVFa3NRMEZCU0N4RFFVRkdMRVZCUVZGRExFVkJRVVVzVjBGQlUwWXNRMEZCV0N4SlFVRmpSU3hGUVVGRkxGbEJRVlZHTEVOQlFWb3NTVUZCWlZBc1EwRkJja003UVVGQmRrSXNTMEZCT0VRc1QwRkJUME1zVFVGQlNWRXNSVUZCUlhOb1FpeFBRVUZHTEVkQlFWVjBhRUlzUlVGQlJYVm1MRXRCUVVZc1IwRkJVV2huUWl4RFFVRjBRaXhIUVVGNVFsTXNRMEZCYUVNN1FVRkJhME1zV1VGQlUzZHJRaXhGUVVGVUxFTkJRVmxxYkVJc1EwRkJXaXhGUVVGalF5eERRVUZrTEVWQlFXZENUU3hEUVVGb1FpeEZRVUZyUWp0QlFVRkRMRk5CUVVrc1NVRkJTVU1zUTBGQlNpeEZRVUZOUXl4SlFVRkZMRU5CUVVONWEwSXNSMEZCUjBNc1VVRkJTQ3hEUVVGWmJHeENMRU5CUVZvc1MwRkJaMElzUlVGQmFrSXNSVUZCY1VKakxFMUJRWEpDTEVOQlFUUkNiV3RDTEVkQlFVZERMRkZCUVVnc1EwRkJXU3hIUVVGYUxFTkJRVFZDTEVOQlFWSXNSVUZCYzBSMmEwSXNTVUZCUlN4RFFVRjRSQ3hGUVVFd1JFVXNTVUZCUlV3c1JVRkJSWFZETEUxQlFXeEZMRVZCUVhsRmNFTXNTVUZCUlVVc1EwRkJNMFVzUlVGQk5rVkdMRWRCUVRkRk8wRkJRV2xHTEZWQlFVZEtMRWxCUVVWRExFVkJRVVZITEVOQlFVWXNSVUZCUzJVc1NVRkJUQ3hEUVVGVmNFSXNRMEZCVml4RlFVRlpUaXhEUVVGYUxFVkJRV05FTEVOQlFXUXNRMEZCVEN4RlFVRnpRaXhQUVVGUFVTeERRVUZRTzBGQlFYWkhPMEZCUVdkSUxGbEJRVk0wYTBJc1JVRkJWQ3hEUVVGWmNHeENMRU5CUVZvc1JVRkJZME1zUTBGQlpDeEZRVUZuUWswc1EwRkJhRUlzUlVGQmEwSTdRVUZCUXl4UlFVRkpReXhEUVVGS08wRkJRVUVzVVVGQlRVTXNRMEZCVGp0QlFVRkJMRkZCUVZGSExFTkJRVkk3UVVGQlFTeFJRVUZWUlN4RFFVRldPMEZCUVVFc1VVRkJXVVVzUTBGQldqdEJRVUZCTEZGQlFXTkZMRU5CUVdRN1FVRkJRU3hSUVVGblFrVXNRMEZCYUVJN1FVRkJRU3hSUVVGclFrTXNRMEZCYkVJN1FVRkJRU3hSUVVGdlFrVXNTVUZCUlN4WFFVRlZkRUlzUTBGQlZpeEpRVUZoTEZsQlFWZEJMRU5CUVRsRE8wRkJRVUVzVVVGQlowUjNRaXhKUVVGRkxFbEJRV3hFTzBGQlFVRXNVVUZCZFVSRExFbEJRVVVzUlVGQmVrUTdRVUZCUVN4UlFVRTBSRVVzU1VGQlJUVkNMRVZCUVVVMlZ5eExRVUZvUlR0QlFVRkJMRkZCUVhORmFGWXNTVUZCUlRkQ0xFVkJRVVY1U2l4UlFVRkdMRWxCUVZsUUxFZEJRVWRzU2l4RFFVRklMRU5CUVhCR08wRkJRVUVzVVVGQk1FWnZReXhKUVVGRmEwY3NSVUZCUlhCR0xFZEJRVVlzUTBGQlRXeEVMRU5CUVU0c1JVRkJVU3hSUVVGU0xFTkJRVFZHTEVOQlFUaEhUeXhGUVVGRloxY3NTMEZCUml4TFFVRlZlbFlzU1VGQlJYVkNMRVZCUVVWdlZTeFhRVUZHTEVOQlFXTjZWeXhEUVVGa0xFVkJRV2RDTEVsQlFXaENMRU5CUVVZc1JVRkJkMElzVVVGQlRXTXNSVUZCUlhWclFpeFJRVUZTTEV0QlFXMUNkbXRDTEVWQlFVVjFhMElzVVVGQlJpeEhRVUZYTEVOQlFWZ3NSVUZCWVhKclFpeEpRVUZGUml4RlFVRkZORThzUzBGQlJpeERRVUZSSzBRc1NVRkJka0lzUlVGQk5FSXpVeXhGUVVGRk5FOHNTMEZCUml4RFFVRlJLMFFzU1VGQlVpeEhRVUZoTEZsQlFWVTdRVUZCUXpOVExGRkJRVVYxYTBJc1VVRkJSaXhKUVVGWmNtdENMRWRCUVZvN1FVRkJaMElzUzBGQmRrWXNRMEZCZUVJc1JVRkJhVWhHTEVWQlFVVjFhMElzVVVGQlJpeEZRVUZxU0N4RlFVRTRTRFZxUWl4RlFVRkZkMU1zVFVGQlJpeERRVUZUTEZsQlFWVTdRVUZCUTNoVExGRkJRVVYzVXl4TlFVRkdMRU5CUVZNc1dVRkJWVHRCUVVGRGJsUXNWVUZCUlhWclFpeFJRVUZHTEVsQlFXRm9ha0lzUlVGQlJXdFZMRXRCUVVZc1EwRkJVWFpYTEVOQlFWSXNSVUZCVlN4SlFVRldMRVZCUVdkQ1owUXNUVUZCYUVJc1NVRkJkMEpzUXl4RlFVRkZORThzUzBGQlJpeERRVUZSSzBRc1NVRkJVaXhGUVVGeVF6dEJRVUZ2UkN4UFFVRjRSVHRCUVVFd1JTeExRVUU1Uml4RFFVRjRTU3hGUVVGNVR5eExRVUZKYWxRc1EwRkJTaXhKUVVGVFVDeERRVUZVTzBGQlFWY3NWVUZCUjFFc1NVRkJSVklzUlVGQlJVOHNRMEZCUml4RFFVRkdMRVZCUVU4cmFrSXNSMEZCUjNCaExFbEJRVWdzUTBGQlVURktMRU5CUVZJc1EwRkJWaXhGUVVGeFFqdEJRVUZETEZsQlFVY3NUMEZCVDFJc1JVRkJSVThzUTBGQlJpeERRVUZRTEVWQlFWbEpMRWxCUVVWQkxFdEJRVWNzWVVGQlYwZ3NRMEZCTlVJc1JVRkJPRUpCTEU5QlFVdHZRaXhKUVVGRkxFMUJRVVlzUjBGQlV5eE5RVUZrTEVOQlFXcERMRVZCUVhWRU8wRkJRVU1zWTBGQlJ5eFhRVUZUY0VJc1EwRkJWQ3hKUVVGWkxFTkJRVU15UWl4RFFVRmlMRWxCUVdkQ0xFdEJRVXNzUTBGQlRDeExRVUZUUVN4RlFVRkZOVUlzUTBGQlJpeERRVUUxUWl4RlFVRnBReXhUUVVGVGNVSXNTVUZCUlN4RFFVRkRMRU5CUVVnN1FVRkJTeXhYUVVGRmNrSXNRMEZCUml4SlFVRkxORUlzUzBGQlIwRXNSVUZCUlRWQ0xFTkJRVVlzUTBGQlNDeEpRVUZUTmtJc1JVRkJSWGRWTEV0QlFVWXNRMEZCVVRkWExFTkJRVklzUlVGQlZWRXNRMEZCVml4RFFVRmtPMEZCUVRKQ08wRkJRVzVMTEV0QlFXMUxMRWxCUVVkVkxFbEJRVVVzUTBGQlEyMUNMRVZCUVVVMFF5eGhRVUZHTEVOQlFXZENhRVlzUTBGQmFFSXNRMEZCU0N4RlFVRnpRbWxDTEV0QlFVY3NRMEZCUTIxQ0xFVkJRVVUwUXl4aFFVRkdMRU5CUVdkQ2RrUXNRMEZCYUVJc1EwRkJOMElzUlVGQlowUTdRVUZCUTBnc1YwRkJSeXhOUVVGSmRrSXNSVUZCUlhsS0xGRkJRVlFzUzBGQmIwSnNTaXhGUVVGRksydENMRkZCUVVZc1IwRkJWeXhEUVVGRE1XcENMRVZCUVVVd2FrSXNVVUZCU0N4RlFVRlpNV3BDTEVWQlFVVXlha0lzVTBGQlpDeEZRVUYzUWpOcVFpeEZRVUZGTkdwQ0xGTkJRVEZDTEVOQlFWZ3NSVUZCWjBSd2EwSXNTVUZCUldkQ0xFdEJRVWRCTEVWQlFVVXdWU3hQUVVGMlJDeEZRVUVyUkN4UlFVRk5NVllzUTBGQlRpeExRVUZWUVN4SlFVRkZhMGdzUlVGQlJYQkdMRWRCUVVZc1EwRkJUV3hFTEVOQlFVNHNSVUZCVVN4VFFVRlNMRU5CUVZvc1EwRkJMMFFzUlVGQkswWnhRaXhKUVVGRlowSXNSVUZCUlRCVkxFZEJRVVlzUTBGQlRTOVhMRU5CUVU0c1JVRkJVU3hUUVVGU0xFTkJRV3BITEVWQlFXOUlMRmRCUVZOeFFpeERRVUZVTEV0QlFXRkVMRWxCUVVWRExFbEJRVVZFTEVOQlFVb3NTVUZCVHpCS0xFZEJRVWNzUTBGQlF6bExMRU5CUVVRc1EwRkJTQ3hGUVVGUExFTkJRVU1zUTBGQlVpeEhRVUZYYjBJc1NVRkJSWEJDTEVWQlFVVTJWeXhMUVVGR0xFTkJRVkZETEU5QlFWSXNTVUZCYVVJeFZpeERRVUU1UWl4RlFVRm5RME1zU1VGQlJXZENMRVZCUVVVd1ZTeEhRVUZHTEVOQlFVMHZWeXhEUVVGT0xFVkJRVkVzVTBGQlVpeERRVUZzUXl4RlFVRnhSRGhMTEVkQlFVY3NRMEZCUXpsTExFTkJRVVFzUTBGQlNDeERRVUUxUkN4RFFVRmlMRU5CUVhCSUxFVkJRWFZOTEVOQlFVTXNZVUZCVjNGQ0xFTkJRVmdzU1VGQll5eHRRa0ZCYVVKQkxFTkJRV3BDTEVsQlFXOUNMRkZCUVUxRUxFTkJRWHBETEV0QlFUWkRMRmRCUVZOcFFpeEZRVUZGTUZVc1IwRkJSaXhEUVVGTkwxY3NRMEZCVGl4RlFVRlJMRTlCUVZJc1EwRkJkRVFzUzBGQmVVVnJRaXhOUVVGSlR5eEZRVUZGYlZNc1NVRkJSaXhEUVVGUExGbEJRVlU3UVVGQlEyaFRMRlZCUVVWclZpeFBRVUZHTEVkQlFWVXhWaXhEUVVGV08wRkJRVmtzVDBGQk9VSXNSMEZCWjBNc1VVRkJUVUVzUTBGQlRpeExRVUZWUXl4SlFVRkZUeXhGUVVGRmExWXNUMEZCU2l4RlFVRlpNVllzU1VGQlJTeFhRVUZUUXl4RFFVRlVMRWRCUVZjc1JVRkJXQ3hIUVVGalFTeERRVUYwUXl4RFFVRndReXhIUVVFNFJVOHNSVUZCUld0V0xFOUJRVVlzUjBGQlZTeGpRVUZxU3l4RFFVRXpUaXhIUVVFMldYWlhMRVZCUVVVcmEwSXNVVUZCUml4TFFVRmhNV3BDTEVWQlFVVXdha0lzVVVGQlJpeEhRVUZYTEZGQlFWZ3NSVUZCYjBJM2FrSXNSVUZCUlhkVExFMUJRVVlzUTBGQlV5eFpRVUZWTzBGQlFVTnlVeXhWUVVGRk1HcENMRkZCUVVZc1IwRkJWeTlyUWl4RlFVRkZLMnRDTEZGQlFVWXNRMEZCVnl4RFFVRllMRU5CUVZnc1JVRkJlVUl4YWtJc1JVRkJSVEpxUWl4VFFVRkdMRWRCUVZsb2JFSXNSVUZCUlN0clFpeFJRVUZHTEVOQlFWY3NRMEZCV0N4RFFVRnlReXhGUVVGdFJERnFRaXhGUVVGRk5HcENMRk5CUVVZc1IwRkJXV3BzUWl4RlFVRkZLMnRDTEZGQlFVWXNRMEZCVnl4RFFVRllMRU5CUVM5RU8wRkJRVFpGTEU5QlFXcEhMRU5CUVdwRExFTkJRVGRaTEVWQlFXdG9RbkJyUWl4SlFVRkZMRU5CUVVNc1EwRkJjbWhDTEVOQlFYVm9RaXhMUVVGSlZpeERRVUZLTEVsQlFWTnJRaXhEUVVGVU8wRkJRVmRTTEdOQlFVbHJRaXhKUVVGRkxGbEJRVmRCTEVOQlFWZ3NTMEZCWlZBc1NVRkJSVThzUlVGQlJYTnBRaXhOUVVGdVFpeERRVUZHTEVkQlFUWkNkR2xDTEVsQlFVVnJSeXhGUVVGRmVVNHNUVUZCUml4RFFVRlRMMVlzUTBGQlZDeEZRVUZYTEZGQlFWZ3NSVUZCYjBJc1JVRkJRemhYTEZOQlFWRXhWaXhEUVVGVUxFVkJRWEJDTEVOQlFTOUNMRVZCUVdkRlVpeE5RVUZKZDBJc1JVRkJSWE5wUWl4TlFVRkdMRWRCUVZNc1EwRkJRemRwUWl4RFFVRmtMRU5CUVdoRkxFVkJRV2xHUVN4TFFVRkhhVW9zUjBGQlJ5eERRVUZET1Vzc1EwRkJSQ3hEUVVGSUxFVkJRVThzUTBGQlF5eERRVUZTTEVOQlFYQkdMRVZCUVN0R2VVSXNSVUZCUlcxVExFbEJRVVlzUTBGQlR5eFpRVUZWTzBGQlFVTXZVaXhsUVVGSGFVb3NSMEZCUnl4RFFVRkRPVXNzUTBGQlJDeERRVUZJTEVOQlFVZ3NSVUZCVjNOSkxFVkJRVVU0U3l4TlFVRkdMRU5CUVZOd1ZDeERRVUZVTEVWQlFWY3NVVUZCV0N4RFFVRllMRU5CUVdkRExFdEJRVWxSTEVOQlFVb3NTVUZCVTJ0Q0xFTkJRVlE3UVVGQlYxY3NZMEZCUlhkVkxFdEJRVVlzUTBGQlVUZFhMRU5CUVZJc1JVRkJWVkVzUTBGQlZpeEZRVUZaYTBJc1JVRkJSV3hDTEVOQlFVWXNRMEZCV2p0QlFVRllPMEZCUVRaQ0xGTkJRUzlGTEVOQlFXNUhMRWRCUVhGTVZTeEpRVUZGSzJwQ0xFZEJRVWR3YWtJc1NVRkJSVThzUlVGQlJUVkNMRU5CUVVZc1EwRkJSaXhIUVVGUExFTkJRVllzUlVGQldVRXNRMEZCV2l4RlFVRmphVUlzUTBGQlpDeERRVUYyVEN4RlFVRjNUV3BDTEV0QlFVczBRaXhEUVVGTUxFdEJRVk5CTEVWQlFVVTFRaXhEUVVGR0xFbEJRVXRWTEVWQlFVVnBWeXhMUVVGUUxFVkJRV0YwVml4TlFVRkpXQ3hGUVVGRk1rTXNSMEZCUml4SFFVRk5NME1zUlVGQlJXbFhMRXRCUVZJc1JVRkJZMnBYTEVWQlFVVnBWeXhMUVVGR0xFZEJRVkVzUTBGQk1VSXNRMEZCZEVJc1EwRkJlRTA3UVVGQldEdEJRVUYxVVR0QlFVRkRMRmxCUVZOelR5eEZRVUZVTEVOQlFWbDZiRUlzUTBGQldpeEZRVUZqUXl4RFFVRmtMRVZCUVdkQ08wRkJRVU1zVVVGQlNVMHNRMEZCU2l4RlFVRk5ReXhEUVVGT0xFVkJRVkZETEVOQlFWSXNSVUZCVlVjc1EwRkJWaXhGUVVGWlJTeERRVUZhTEVOQlFXTXNTMEZCU1ZBc1EwRkJTaXhKUVVGVFVDeERRVUZVTzBGQlFWY3NWVUZCUjFFc1NVRkJSVFpDTEVWQlFVVTRReXhUUVVGR0xFTkJRVmsxUlN4RFFVRmFMRU5CUVVZc1JVRkJhVUpGTEVsQlFVVlNMRVZCUVVWUExFTkJRVVlzUTBGQmJrSXNSVUZCZDBKSkxFbEJRVVZhTEVWQlFVVlBMRU5CUVVZc1EwRkJNVUlzUlVGQkswSTBSQ3hOUVVGTlF5eFBRVUZPTEVOQlFXTjRSQ3hEUVVGa0xFMUJRVzFDU0N4SlFVRkZSeXhGUVVGRkxFTkJRVVlzUTBGQlJpeEZRVUZQUVN4SlFVRkZXaXhGUVVGRlR5eERRVUZHTEVsQlFVdExMRVZCUVVVc1EwRkJSaXhEUVVGcVF5eERRVUV2UWl4RlFVRnpSVXdzVFVGQlNVTXNRMEZCU2l4TFFVRlJVaXhGUVVGRlVTeERRVUZHTEVsQlFVdEpMRU5CUVV3c1JVRkJUeXhQUVVGUFdpeEZRVUZGVHl4RFFVRkdMRU5CUVhSQ0xFTkJRWFJGTEVWQlFXdEhUeXhKUVVGRmRVSXNSVUZCUlhsbUxGRkJRVVlzUTBGQlYzUm9RaXhEUVVGWUxFTkJRWEJITEVWQlFXdElUU3hMUVVGSExGbEJRVmRCTEVOQlFXNUpMRVZCUVhGSk8wRkJRVU5HTEZsQlFVVkZMRVZCUVVWeGFVSXNUVUZCUml4RFFVRlRkbWxDTEVOQlFWUXNRMEZCUml4RlFVRmpMRTlCUVU5YUxFVkJRVVZSTEVOQlFVWXNRMEZCY2tJc1EwRkJNRUlzUzBGQlNVUXNRMEZCU2l4SlFVRlRTeXhEUVVGVU8wRkJRVmRNTEdWQlFVdFFMRU5CUVV3c1MwRkJVMEVzUlVGQlJVOHNRMEZCUml4SlFVRkxTeXhGUVVGRlRDeERRVUZHTEVOQlFVd3NSVUZCVlU0c1JVRkJSVTBzUTBGQlJpeEpRVUZMUlN4RFFVRjRRanRCUVVGWU8wRkJRWE5ETEU5QlFYUk5MRTFCUVRKTlVpeEZRVUZGVHl4RFFVRkdMRWxCUVV0RExFTkJRVXc3UVVGQmRFNDdRVUZCTms0c1dVRkJVM2xyUWl4RlFVRlVMRU5CUVZsc2JFSXNRMEZCV2l4RlFVRmpReXhEUVVGa0xFVkJRV2RDVFN4RFFVRm9RaXhGUVVGclFqdEJRVUZETEZGQlFVbERMRU5CUVVvN1FVRkJRU3hSUVVGTlF5eERRVUZPTzBGQlFVRXNVVUZCVVVjc1NVRkJSU3hEUVVGV08wRkJRVUVzVVVGQldVVXNTVUZCUlc5clFpeEhRVUZIVVN4VlFVRklMRU5CUVdNeGFVSXNUVUZCTlVJN1FVRkJRU3hSUVVGdFEyaERMRWxCUVVWeFFpeEZRVUZGTUZJc1VVRkJSaXhIUVVGaFJTeE5RVUZpTEVOQlFXOUNMRmxCUVZVN1FVRkJReXhoUVVGUEwxTXNSVUZCUlN0WkxFbEJRVlE3UVVGQll5eExRVUUzUXl4RFFVRnlRenRCUVVGQkxGRkJRVzlHTDFrc1NVRkJSU3hoUVVGVk8wRkJRVU1zVlVGQlIxUXNRMEZCU0N4RlFVRkxMRTlCUVUwc1EwRkJReXhEUVVGUUxFTkJRVk1zUzBGQlNTeEpRVUZKVWl4SlFVRkZiMnRDTEUxQlFVbFRMRWxCUVZZc1JVRkJaWFpyUWl4SlFVRkZLMFFzUzBGQlMzRmtMRWRCUVV3c1EwRkJVeXhEUVVGVUxFVkJRVmQyWjBJc1JVRkJSWFZyUWl4VFFVRkdMRWRCUVZsMmEwSXNSVUZCUlhWcFFpeFJRVUZrTEVkQlFYVkNNV3BDTEVOQlFXeERMRU5CUVdwQ0xFVkJRWE5FVHl4SlFVRkZSQ3hKUVVGRllTeEZRVUZGZFdsQ0xGRkJRVW9zU1VGQll5eERRVUYwUlN4RlFVRjNSUzlwUWl4SlFVRkZMRWxCUVVWS0xFTkJRVFZGTEVWQlFUaEZUU3hKUVVGRkxFTkJRV2hHTEVWQlFXdEdTU3hKUVVGRlJTeEZRVUZGZDJ0Q0xFMUJRVVlzUTBGQlV6VnBRaXhOUVVGcVJ5eEZRVUYzUjJ4RExFbEJRVVZKTEVOQlFURkhMRVZCUVRSSFNpeEhRVUUxUnp0QlFVRm5TRTBzVlVGQlJYZHJRaXhOUVVGR0xFTkJRVk01YTBJc1EwRkJWQ3hGUVVGWk5HbENMRWRCUVZvc1EwRkJaMEk1YVVJc1EwRkJhRUk3UVVGQmFFZ3NUMEZCYlVrc1QwRkJUMGtzUlVGQlJYZFVMRlZCUVVZc1EwRkJZWGhWTEVOQlFXSXNSVUZCWlN4RFFVRkRiMElzUTBGQlJDeEZRVUZIVWl4RFFVRklMRVZCUVV0TUxFTkJRVXdzUTBGQlppeEhRVUYzUWtzc1NVRkJSU3hEUVVGR0xFbEJRVXROTEVOQlFVd3NSMEZCVDFnc1EwRkJVQ3hKUVVGVlZ5eExRVUZIUml4RlFVRkZkMVFzVlVGQlJpeERRVUZoZUZVc1EwRkJZaXhGUVVGbExFTkJRVU52UWl4RFFVRkVMRVZCUVVjc1EwRkJTQ3hGUVVGTExFTkJRVXdzUTBGQlppeERRVUZJTEVWQlFUSkNTaXhGUVVGRmVWUXNWMEZCUml4RFFVRmplbFVzUTBGQlpDeEZRVUZuUWl4RFFVRkRiMElzUTBGQlJDeERRVUZvUWl4RFFVRXpRaXhGUVVGblJDeERRVUZETEVOQlFUTkVMRU5CUVM5Q08wRkJRVFpHTEV0QlFTOVZPMEZCUVVFc1VVRkJaMVpCTEVsQlFVVktMRVZCUVVVeVV5eFBRVUZHTEVOQlFWVXNSVUZCUTNOSExFMUJRVXRxWVN4RFFVRk9MRVZCUVZFMmJFSXNUMEZCVFhocVFpeEZRVUZGTWtJc1RVRkJSaXhEUVVGVExFVkJRVlFzUlVGQldTOUVMRU5CUVZvc1EwRkJaQ3hGUVVFMlFqWnNRaXhOUVVGTGVtcENMRVZCUVVVeVFpeE5RVUZHTEVOQlFWTXNRMEZCUXl4RFFVRldMRVZCUVZrc1JVRkJReXRvUWl4bFFVRmpMRVZCUVdZc1JVRkJhMEo0UXl4UlFVRlBiR2hDTEVWQlFVVnJhRUlzVFVGQlJpeERRVUZUTVV3c1VVRkJiRU1zUlVGQldpeEZRVUYzUkhSWUxFTkJRWGhFTEVOQlFXeERMRVZCUVRaR2VXeENMRzlDUVVGdFFpOXNRaXhEUVVGb1NDeEZRVUZyU0dkdFFpeHBRa0ZCWjBJeGJFSXNRMEZCYkVrc1JVRkJiMGx2YkVJc1YwRkJWWFJDTEUxQlFVbFRMRWxCUVd4S0xFVkJRWFZLYmtJc1ZVRkJVM0JxUWl4RlFVRkZiMnBDTEZGQlFXeExMRVZCUVRKTGFVTXNVVUZCVHl4RlFVRnNUQ3hGUVVGeFRFMHNZVUZCV1N4eFFrRkJVMnB0UWl4RFFVRlVMRVZCUVZkTkxFTkJRVmdzUlVGQllUdEJRVUZETEZsQlFVbERMRWxCUVVVMlFpeEZRVUZGWjJoQ0xFdEJRVVlzUTBGQlVYSnFRaXhEUVVGU0xFVkJRVlZ2UWl4RlFVRkZNR3RDTEVsQlFWb3NSVUZCYVVJM2JFSXNRMEZCYWtJc1JVRkJiVUpOTEVOQlFXNUNMRVZCUVhGQ1lTeEZRVUZGTUd0Q0xFbEJRVVlzUTBGQlQwTXNZVUZCVUN4RFFVRnhRamxzUWl4RFFVRnlRaXhMUVVGNVFtMUNMRVZCUVVVd2EwSXNTVUZCUml4RFFVRlBka01zVFVGQmNrUXNRMEZCVGl4RFFVRnRSU3hQUVVGUGJtbENMRVZCUVVWM2EwSXNUVUZCUml4RFFVRlRNMnRDTEVsQlFWUXNRMEZCWTFRc1EwRkJaQ3hIUVVGcFFrRXNRMEZCZUVJN1FVRkJNRUlzVDBGQk5WTXNSVUZCTmxOclZ5eE5RVUZMTEdOQlFWTjZWeXhEUVVGVUxFVkJRVmM3UVVGQlF5eFpRVUZKVFN4SlFVRkZMRU5CUVU0N1FVRkJRU3haUVVGUlF5eEpRVUZGVUN4SlFVRkZiVUlzUlVGQlJYZHJRaXhOUVVGR0xFTkJRVk0xYVVJc1RVRkJXQ3hIUVVGclFpeERRVUUxUWl4RFFVRTRRaXhKUVVGSGRrTXNRMEZCU0N4RlFVRkxMRTlCUVU4c1NVRkJVQ3hEUVVGWkxFdEJRVWxCTEVsQlFVVXNRMEZCUXl4RFFVRlFMRVZCUVZOR0xFbEJRVVZETEVOQlFWZ3NSVUZCWVVRc1IwRkJZanRCUVVGcFFtRXNXVUZCUlhkclFpeE5RVUZHTEVOQlFWTnliRUlzUTBGQlZDeEZRVUZaYldwQ0xFZEJRVm9zUTBGQlowSXNRMEZCYUVJN1FVRkJha0lzVTBGQmIwTXNUMEZCVDNwcVFpeExRVUZIWlN4RlFVRkZkMVFzVlVGQlJpeERRVUZoZUZVc1EwRkJZaXhGUVVGbExFTkJRVU52UWl4RFFVRkVMRVZCUVVjc1EwRkJTQ3hGUVVGTExFTkJRVXdzUTBGQlppeEhRVUYzUWtvc1JVRkJSWGxVTEZkQlFVWXNRMEZCWTNwVkxFTkJRV1FzUlVGQlowSXNRMEZCUTI5Q0xFTkJRVVFzUlVGQlIyNUNMRU5CUVVnc1EwRkJhRUlzUTBGQk0wSXNTVUZCYlVSbExFVkJRVVUwVkN4VlFVRkdMRU5CUVdFMVZTeERRVUZpTEVWQlFXVXNRMEZCUTI5Q0xFTkJRVVFzUlVGQlIyNUNMRU5CUVVnc1EwRkJaaXhEUVVGdVJDeEZRVUY1UlN4SlFVRm9SanRCUVVGeFJpeFBRVUYwWlN4RlFVRldMRU5CUVd4V08wRkJRVUVzVVVGQmNUQkNiMElzU1VGQlJVUXNSVUZCUlhsclFpeExRVUY2TUVJc1EwRkJLekJDTEV0QlFVbEtMRWRCUVVkd2EwSXNRMEZCU0N4RlFVRkxSQ3hGUVVGRk1HdENMRWxCUVVZc1EwRkJUME1zWVVGQldpeERRVUZLTEVWQlFTdENibXhDTEVsQlFVVkZMRU5CUVdwRExFVkJRVzFEUml4SFFVRnVRenRCUVVGMVF5eFZRVUZIU2l4SlFVRkZNR3RDTEVkQlFVZFJMRlZCUVVnc1EwRkJZemxyUWl4RFFVRmtMRVZCUVdsQ1pTeEpRVUZxUWl4RFFVRnpRbEFzUTBGQmRFSXNSVUZCZDBKd1FpeERRVUY0UWl4RlFVRXdRbkZDTEVOQlFURkNMRVZCUVRSQ1JDeEZRVUZGTUd0Q0xFbEJRVGxDTEVOQlFVd3NSVUZCZVVNc1QwRkJUM3BxUWl4RlFVRkZORUlzVlVGQlJpeERRVUZoZWtRc1JVRkJSV3RYTEVsQlFXWXNUVUZCZFVKeVZTeEZRVUZGYjFVc1YwRkJSaXhEUVVGamNsWXNSVUZCUlRaWkxFbEJRV2hDTEVWQlFYRkNOMWtzUlVGQlJUQnJRaXhKUVVGR0xFTkJRVTkyVUN4TFFVRTFRaXhGUVVGdFEwY3NTVUZCYmtNc1IwRkJkME55VlN4RlFVRkZjVVFzUzBGQlJpeERRVUZSYkVZc1JVRkJSV3RYTEVsQlFWWXNSVUZCWld4WExFTkJRV1lzUTBGQkwwUXNSMEZCYTBaQkxFTkJRWHBHTzBGQlFXaEdMRXRCUVRKTExFOUJRVTgyUWl4RlFVRkZhMElzUjBGQlJpeERRVUZOYkVNc1EwRkJUaXhGUVVGUk5HcENMRVZCUVZJc1JVRkJWemRxUWl4RFFVRllMRWRCUVdOcFFpeEZRVUZGTkVJc1ZVRkJSaXhEUVVGaE4wTXNSVUZCUlRCclFpeEpRVUZHTEVOQlFVOHpUeXhMUVVGd1FpeExRVUUwUWk5V0xFVkJRVVV3YTBJc1NVRkJSaXhEUVVGUE0wOHNTMEZCVUN4RFFVRmhlRllzU1VGQllpeERRVUZyUWpOQ0xFTkJRV3hDTEVWQlFXOUNiMElzUTBGQmNFSXNRMEZCTVVNc1JVRkJhVVZCTEVWQlFVVXJVeXhSUVVGR0xFTkJRVmN2VXl4RlFVRkZNR3RDTEVsQlFVWXNRMEZCVHpOU0xGRkJRV3hDTEVWQlFUUkNVQ3hKUVVFMVFpeERRVUZwUTNoVExFVkJRVVV3YTBJc1NVRkJSaXhEUVVGUGJGTXNTVUZCZUVNc1JVRkJOa040VXl4RlFVRkZNR3RDTEVsQlFVWXNRMEZCVDBzc1VVRkJjRVFzUlVGQk9FUjBVeXhKUVVFNVJDeERRVUZ0UlhwVExFVkJRVVV3YTBJc1NVRkJSaXhEUVVGUGFsTXNTVUZCTVVVc1JVRkJaMFpKTEUxQlFXaEdMRU5CUVhWR04xTXNSVUZCUlRCclFpeEpRVUZHTEVOQlFVODNVaXhOUVVFNVJpeERRVUZxUlN4RlFVRjFTelZTTEVWQlFVVjVhRUlzUlVGQlJpeERRVUZMYzBNc1MwRkJUQ3hEUVVGWEwycENMRVZCUVVVeVFpeE5RVUZHTEVOQlFWTTVReXhEUVVGVUxFVkJRVmNzUlVGQlF5dFpMRTFCUVV0cVlTeERRVUZPTEVWQlFWRnhiVUlzVFVGQlMycHNRaXhEUVVGaUxFVkJRV1Z0Vml4UFFVRk5ibFlzUlVGQlJUQnJRaXhKUVVGR0xFTkJRVTkyVUN4TFFVRTFRaXhGUVVGWUxFTkJRVmdzUTBGQmRrc3NSVUZCYTA5dVZpeERRVUY2VHp0QlFVRXlUeXhMUVVGRmEyeENMRk5CUVVZc1IwRkJXV3ByUWl4RlFVRkZNa0lzVFVGQlJpeERRVUZUYTJoQ0xFVkJRVlFzUlVGQldTeEZRVUZEUXl4VlFVRlRMRVZCUVVNc1MwRkJTU3hEUVVGRExGVkJRVk51YkVJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4WlFVRkpUU3hKUVVGRkxFdEJRVXN5YkVJc1YwRkJUQ3hEUVVGcFFteHRRaXhEUVVGcVFpeEZRVUZ0UWtNc1EwRkJia0lzUTBGQlRpeERRVUUwUWl4UFFVRlBlVW9zUjBGQlIyNUtMRVZCUVVVd1dpeEpRVUZNTEVWQlFWVnFZU3hEUVVGV0xFVkJRVmtyU1N4SFFVRkhZeXhKUVVGSUxFTkJRVkUxU2l4RFFVRlNMRU5CUVZvc1JVRkJkVUpOTEVOQlFYWkNMRWRCUVRCQ1FTeERRVUZxUXp0QlFVRnRReXhQUVVFNVJTeERRVUZNTEVWQlFWWXNSVUZCWjBkbmJVSXNVMEZCVVN4cFFrRkJVM1p0UWl4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZEYjBNc1VVRkJSVFJDTEZWQlFVWXNRMEZCWVdwRkxFTkJRV0lzUzBGQmFVSkRMRWxCUVVWRUxFTkJRVVlzUlVGQlNVRXNTVUZCUlN4RFFVRkRMRWRCUVVRc1EwRkJka0lzU1VGQk9FSkJMRWxCUVVWQkxFVkJRVVZyVHl4TFFVRkdMRU5CUVZGb1NDeERRVUZTTEVOQlFXaERMRU5CUVRKRExFdEJRVWtzU1VGQlNUTkhMRU5CUVVvc1JVRkJUVU1zU1VGQlJTeERRVUZTTEVWQlFWVkRMRWxCUVVWVUxFVkJRVVZuUkN4TlFVRnNRaXhGUVVGNVFuaERMRWxCUVVWRExFTkJRVE5DTEVWQlFUWkNSQ3hIUVVFM1FqdEJRVUZwUTBRc1dVRkJSVkFzUlVGQlJWRXNRMEZCUml4RFFVRkdMRVZCUVU4d2EwSXNSMEZCUjBNc1VVRkJTQ3hEUVVGWk5XdENMRU5CUVZvc1NVRkJaVEpyUWl4SFFVRkhReXhSUVVGSUxFTkJRVmsxYTBJc1EwRkJXaXhMUVVGblFpeEZRVUYwUXl4RlFVRjVRekpyUWl4SFFVRkhReXhSUVVGSUxFTkJRVmsxYTBJc1EwRkJXaXhGUVVGbE9FMHNUMEZCWml4RFFVRjFRbkJPTEVOQlFYWkNMRU5CUVhwRE8wRkJRV3BETzBGQlFXOUhMRXRCUVhKUkxFVkJRWE5SZVd4Q0xGbEJRVmNzUTBGQlEwNHNSVUZCUkN4RFFVRnFVaXhGUVVGelVtOUNMRmRCUVZVc2JVSkJRVk40YlVJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUTBFc1ZVRkJSV2xzUWl4SFFVRkhVU3hWUVVGSUxFTkJRV055V1N4UFFVRmtMRU5CUVhOQ2NrNHNRMEZCZEVJc1EwRkJSaXhIUVVFeVFtdHNRaXhIUVVGSFVTeFZRVUZJTEVOQlFXTjZhMElzU1VGQlpDeERRVUZ0UW1wQ0xFTkJRVzVDTEVOQlFUTkNPMEZCUVdsRUxFdEJRUzlXTEVWQlFWb3NRMEZCV2l4RlFVRXdXSEZETEVWQlFVVnZhMElzUzBGQlJpeEhRVUZSTEZWQlFWTjZiVUlzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpUdEJRVUZETEZGQlFVbERMRWxCUVVWU0xFdEJRVWNzYjBKQlFXbENRU3hEUVVGcVFpeDVRMEZCYVVKQkxFTkJRV3BDTEVWQlFVZ3NSMEZCYzBKeFF5eEZRVUZGTWtJc1RVRkJSaXhEUVVGVExFVkJRVlFzUlVGQldXaEZMRU5CUVZvc1EwRkJkRUlzUjBGQmNVTXNSVUZCUTIxdFFpeFZRVUZUTld4Q0xFdEJRVWNzUTBGQlEwRXNRMEZCUkN4SlFVRkpUaXhEUVVGUUxFbEJRVlZ2UXl4RlFVRkZORUlzVlVGQlJpeERRVUZoYWtVc1EwRkJZaXhMUVVGcFFrRXNRMEZCY2tNc1JVRkJkVU15YWtJc1ZVRkJVek5xUWl4RFFVRm9SQ3hGUVVGclJIVnFRaXhSUVVGUGFHcENMRXRCUVVkT0xFTkJRVWdzU1VGQlRVRXNTMEZCUnl4RFFVRkRiME1zUlVGQlJUUkNMRlZCUVVZc1EwRkJZV2hGTEVOQlFXSXNRMEZCU2l4SlFVRnhRa0VzUTBGQmNFWXNSVUZCTTBNc1EwRkJhMGtzVDBGQlQyOURMRVZCUVVWNWFFSXNSVUZCUml4RFFVRkxjRXdzUjBGQlRDeEhRVUZUYkZrc1JVRkJSVzFxUWl4UlFVRkdMRWRCUVZjc1EwRkJjRUlzUjBGQmMwSXNXVUZCVlN4UFFVRlBibXBDTEVWQlFVVnRha0lzVVVGQmJrSXNTMEZCT0VKdWFrSXNSVUZCUlcxcVFpeFJRVUZHTEVsQlFXTjBhRUlzUlVGQlJYbG9RaXhGUVVGR0xFTkJRVXMwUXl4TlFVRnVRaXhIUVVFd1FteHRRaXhGUVVGRmJXcENMRkZCUVVZc1IwRkJWM1JvUWl4RlFVRkZlV2hDTEVWQlFVWXNRMEZCU3pSRExFMUJRVXdzUTBGQldXeHRRaXhGUVVGRmJXcENMRkZCUVdRc1EwRkJja01zUjBGQk5rUnVha0lzUlVGQlJXMXFRaXhSUVVGR0xFZEJRVmQwYUVJc1JVRkJSWGxvUWl4RlFVRkdMRU5CUVVzMFF5eE5RVUZNTEVOQlFWazNUeXhSUVVGc1NDeERRVUYwUWl4RlFVRnJTaXhSUVVGTmNsZ3NSVUZCUlN0V0xFdEJRVklzU1VGQlpTOVdMRVZCUVVVclZpeExRVUZHTEV0QlFWVXNRMEZCUXl4RFFVRXhRaXhMUVVFNFFpOVdMRVZCUVVVclZpeExRVUZHTEVkQlFWRXNTVUZCZEVNc1EwRkJiRW9zUlVGQk9Fd3ZWaXhGUVVGRmJXMUNMRWRCUVVZc1IwRkJUVzV0UWl4RlFVRkZNbXhDTEZGQlFYUk5MRVZCUVN0Tk0yeENMRVZCUVVVeWJFSXNVVUZCUml4SFFVRlhMRmxCUVZVN1FVRkJRemxxUWl4UlFVRkZORUlzVlVGQlJpeERRVUZoZWtRc1JVRkJSVzF0UWl4SFFVRm1MRXRCUVhGQ2JtMUNMRVZCUVVWdGJVSXNSMEZCUml4RFFVRk5hR3hDTEVsQlFVNHNRMEZCVnl4SlFVRllMRU5CUVhKQ0xFVkJRWE5EYmtJc1JVRkJSU3RXTEV0QlFVWXNTVUZCVTJ4VkxFVkJRVVZ0VlN4UFFVRkdMRU5CUVZVc1NVRkJWaXhGUVVGbGFGY3NSVUZCUlN0V0xFdEJRV3BDTEVOQlFTOURPMEZCUVhWRkxFdEJRVFZUTEVWQlFUWlRMMVlzUTBGQmNGUTdRVUZCYzFRc1IwRkJNVEJDTEVWQlFUSXdRalpDTEVWQlFVVkRMRVZCUVVZc1EwRkJTekJDTEUxQlFVd3NRMEZCV1N4RlFVRkROR2xDTEZGQlFVOHNaMEpCUVZNMWJVSXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZOTEVOQlFXSXNSVUZCWlVNc1EwRkJaaXhGUVVGcFFqdEJRVUZETEdGQlFVOHNTMEZCU3poTUxFMUJRVXdzUTBGQldYQkVMRVZCUVZvc1JVRkJaMEkyVGl4SFFVRm9RaXhEUVVGdlFpeFRRVUZ3UWl4RlFVRTRRaXhEUVVFNVFpeEZRVUZwUTAwc1NVRkJha01zUjBGQmQwTjRWQ3hIUVVGNFF5eEhRVUU0UTJkcVFpeFBRVUU1UXl4RFFVRnpSQ3hGUVVGRE9VVXNVMEZCVVRsb1FpeERRVUZVTEVWQlFYUkVMRVZCUVd0RlJDeERRVUZzUlN4RlFVRnZSVThzUTBGQmNFVXNSVUZCYzBWRExFTkJRWFJGTEVOQlFWQTdRVUZCWjBZc1MwRkJNVWNzUlVGQk1rZHhiVUlzVTBGQlVTeHBRa0ZCVXpkdFFpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVTBzUTBGQllpeEZRVUZsUXl4RFFVRm1MRVZCUVdsQ08wRkJRVU1zVlVGQlNVTXNTVUZCUlRSQ0xFVkJRVVUwUXl4aFFVRkdMRU5CUVdkQ2FrWXNRMEZCYUVJc1EwRkJUanRCUVVGQkxGVkJRWGxDV1N4SlFVRkZlVUlzUlVGQlJXOXJRaXhMUVVGR0xFTkJRVkY0YlVJc1EwRkJVaXhGUVVGVlRTeERRVUZXTEVWQlFWbERMRU5CUVZvc1EwRkJNMEk3UVVGQlFTeFZRVUV3UTAwc1NVRkJSU3hUUVVGR1FTeERRVUZGTEVkQlFWVTdRVUZCUXl4WlFVRkpZaXhKUVVGRmFXeENMRWRCUVVjc1NVRkJTQ3hGUVVGUk4ybENMRVZCUVVVeVFpeE5RVUZHTEVOQlFWTXNSVUZCVkN4RlFVRlphRVVzUTBGQldpeERRVUZTTEVWQlFYVkNXU3hEUVVGMlFpeERRVUZPTEVOQlFXZERMRU5CUVVOSUxFdEJRVWMyU0N4RlFVRkZjRVlzUjBGQlJpeERRVUZOTEVsQlFVNHNSVUZCVnl4UlFVRllMRU5CUVVvc1MwRkJNa0pxUkN4RlFVRkZlVmNzU1VGQlJpeERRVUZQTEVOQlFVTXNRMEZCVWl4RFFVRXpRanRCUVVGelF5eFBRVUUzU0N4RFFVRTRTQ3hQUVVGUE5WWXNSVUZCUldkdFFpeE5RVUZHTEVkQlFWTm9iVUlzUTBGQlZDeEZRVUZYVEN4TFFVRkhSeXhGUVVGRk1sWXNTMEZCUml4TFFVRlZMRU5CUVVNc1EwRkJaQ3hIUVVGblFpeExRVUZMYWxRc1NVRkJUQ3hEUVVGVmVFTXNRMEZCVml4RFFVRm9RaXhIUVVFMlFpeExRVUZMZVZZc1MwRkJUQ3hEUVVGWE0xWXNSVUZCUlRKV0xFdEJRV0lzUlVGQmJVSjZWaXhEUVVGdVFpeERRVUV2UXp0QlFVRnhSU3hMUVVGNFZTeEZRVUY1VlRSV0xFMUJRVXNzWTBGQlV6RlhMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdVN1FVRkJReXhWUVVGSlF5eEpRVUZGTEZOQlFVWkJMRU5CUVVVc1EwRkJVMUlzUTBGQlZDeEZRVUZYTzBGQlFVTXNXVUZCU1VNc1NVRkJSVVFzUlVGQlJUQlhMRWxCUVZJc1EwRkJZU3hQUVVGUE1WY3NSVUZCUlRCWExFbEJRVlFzUlVGQlkzcFhMRVZCUVVWTkxFTkJRVVlzUTBGQlpEdEJRVUZ0UWl4UFFVRnNSQ3hEUVVGdFJDeFBRVUZOTEZsQlFWVXNUMEZCVDFBc1EwRkJha0lzUzBGQmNVSlBMRWxCUVVWT0xFTkJRVVlzUlVGQlNVRXNTVUZCUlVRc1EwRkJUaXhGUVVGUlFTeEpRVUZGTEV0QlFVc3NRMEZCY0VNc1IwRkJkVU5ETEV0QlFVZEVMRTFCUVVrc1EwRkJReXhEUVVGU0xFbEJRVmNzUzBGQlMzVlhMRXRCUVV3c1EwRkJWM1pYTEV0QlFVY3NTVUZCWkN4RlFVRnRRaXhGUVVGdVFpeERRVUZzUkN4RlFVRjVSU3hMUVVGTGMwUXNTVUZCVEN4RFFVRlZMRmxCUVZVN1FVRkJReXhaUVVGSmNrUXNTVUZCUlN4RFFVRkRMRU5CUVZBN1FVRkJRU3haUVVGVFVTeEpRVUZGTEZGQlFVMVVMRU5CUVU0c1NVRkJVMEVzU1VGQlJTeFpRVUYwUWp0QlFVRkJMRmxCUVcxRFdTeEpRVUZGZVVJc1JVRkJSVEJyUWl4TlFVRjJRenRCUVVGQkxGbEJRVGhEYW0xQ0xFbEJRVVYzU0N4RlFVRkZjRVlzUjBGQlJpeERRVUZOTEVsQlFVNHNRMEZCYUVRc1EwRkJORVFzU1VGQlIzcERMRU5CUVVnc1JVRkJTMHNzUlVGQlJVd3NRMEZCUml4TFFVRk5TeXhGUVVGRlRDeERRVUZHTEVWQlFVdHBWeXhKUVVGWUxFbEJRV2xDYkZjc1JVRkJSVTBzUlVGQlJVd3NRMEZCUml4RFFVRkdMRU5CUVdwQ0xFTkJRVXdzUzBGQmJVTXNTMEZCU1VFc1EwRkJTaXhKUVVGVFN5eERRVUZVTzBGQlFWZEJMRmxCUVVWTUxFTkJRVVlzUzBGQlRVc3NSVUZCUlV3c1EwRkJSaXhGUVVGTGFWY3NTVUZCV0N4SlFVRnBRamhPTEVkQlFVZHlZU3hKUVVGSUxFTkJRVkV4U2l4RFFVRlNMRU5CUVdwQ0xFbEJRVFpDUkN4RlFVRkZUU3hGUVVGRlRDeERRVUZHTEVOQlFVWXNRMEZCTjBJN1FVRkJXQ3hUUVVGblJDeExRVUZKUVN4SlFVRkZSeXhGUVVGRmIwTXNUVUZCVWl4RlFVRmxka01zUjBGQlpqdEJRVUZ2UWtjc1dVRkJSVWdzUTBGQlJpeEZRVUZMZDFvc1NVRkJUQ3hMUVVGWkxFbEJRVm9zU1VGQmEwSXNVVUZCVFdwaExFTkJRVTRzU1VGQlUxa3NSVUZCUlVnc1EwRkJSaXhGUVVGTE9GWXNTMEZCVEN4TFFVRmhkbGNzUTBGQmVFTXNTMEZCTkVOWkxFVkJRVVZJTEVOQlFVWXNSVUZCU3pSc1FpeEpRVUZNTEVOQlFWVXpVQ3hKUVVGV0xFTkJRV1Z1Vnl4RFFVRm1MRWRCUVd0Q1RpeEpRVUZGTEVOQlFVTXNRMEZCY2tJc1JVRkJkVUpYTEVWQlFVVnRSQ3hOUVVGR0xFTkJRVk4wUkN4RFFVRlVMRVZCUVZjc1EwRkJXQ3hEUVVGdVJUdEJRVUZ3UWl4VFFVRnpSeXhEUVVGRFVpeERRVUZFTEVsQlFVbE5MRU5CUVVvc1NVRkJUemhDTEVWQlFVVnRWU3hQUVVGR0xFTkJRVlVzU1VGQlZpeEZRVUZsZUZjc1EwRkJaaXhEUVVGUU8wRkJRWGxDTEU5QlFXNVRMRU5CUVM5Rk8wRkJRVzlZTEV0QlFYSjNRaXhGUVVGemQwSTRiVUlzVVVGQlR5eG5Ra0ZCVXpsdFFpeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRlBRU3hOUVVGSkxFTkJRVU1zUTBGQlRDeExRVUZUUVN4SlFVRkZRU3hMUVVGSExFbEJRV1FzUjBGQmIwSXNTMEZCUzNORUxFbEJRVXdzUTBGQlZTeFpRVUZWTzBGQlFVTXNXVUZCU1hKRUxFTkJRVW83UVVGQlFTeFpRVUZOVFN4SlFVRkZLMGdzUlVGQlJYQkdMRWRCUVVZc1EwRkJUU3hKUVVGT0xFTkJRVkk3UVVGQlFTeFpRVUZ2UWpGRExFbEJRVVZFTEVWQlFVVlFMRWxCUVVVc1QwRkJTaXhEUVVGMFFqdEJRVUZCTEZsQlFXMURVeXhKUVVGRlJpeEZRVUZGVUN4SlFVRkZMRmxCUVVvc1EwRkJja003UVVGQlFTeFpRVUYxUkZrc1NVRkJSWGxDTEVWQlFVVXdhMElzVFVGQk0wUTdRVUZCUVN4WlFVRnJSV3B0UWl4SlFVRkZUaXhKUVVGRlFTeEZRVUZGZDBNc1RVRkJTaXhIUVVGWExFTkJRUzlGTEVOQlFXbEdMRXRCUVVsNlF5eEZRVUZGZFcxQ0xFMUJRVVlzUjBGQlV5eERRVUZETEVOQlFWWXNSVUZCV1hwclFpeEZRVUZGYTFVc1MwRkJSaXhEUVVGUkxFbEJRVklzUlVGQllYWlhMRU5CUVdJc1JVRkJaU3hGUVVGbUxFTkJRVm9zUlVGQkswSlRMRXRCUVVkQkxFVkJRVVZwVnl4SlFVRk1MRWxCUVZkcVZ5eEZRVUZGYVZjc1NVRkJSaXhEUVVGUEwxVXNTVUZCVUN4RFFVRlpMRWxCUVZvc1JVRkJhVUlzUTBGQlF5eERRVUZzUWl4RFFVRXhReXhGUVVFclJERkNMRWxCUVVWWExFVkJRVVZ2UXl4TlFVRjJSU3hGUVVFNFJTOURMRWRCUVRsRk8wRkJRVzFHVnl4WlFVRkZXQ3hEUVVGR0xFVkJRVXRuWVN4SlFVRk1MRXRCUVZrc1NVRkJXaXhKUVVGclFuSmFMRVZCUVVWWUxFTkJRVVlzUlVGQlMzTlhMRXRCUVV3c1MwRkJZWFpYTEVOQlFTOUNMRXRCUVcxRFdTeEZRVUZGV0N4RFFVRkdMRVZCUVV0dmJVSXNTVUZCVEN4RFFVRlZNMUFzU1VGQlZpeERRVUZsTEVOQlFVTXNRMEZCYUVJc1IwRkJiVUk1Vml4RlFVRkZiVVFzVFVGQlJpeERRVUZUT1VRc1EwRkJWQ3hGUVVGWExFTkJRVmdzUTBGQmRFUTdRVUZCYmtZc1UwRkJkMG9zUzBGQlNVRXNTVUZCUlN4RFFVRk9MRVZCUVZGQkxFbEJRVVZoTEVOQlFWWXNSVUZCV1dJc1IwRkJXanRCUVVGblFrOHNXVUZCUlZBc1EwRkJSaXhMUVVGTlR5eEZRVUZGVUN4RFFVRkdMRVZCUVVzMmJVSXNUVUZCV0N4SlFVRnRRblJ0UWl4RlFVRkZVQ3hEUVVGR0xFVkJRVXMyYlVJc1RVRkJUQ3hEUVVGWmJteENMRWxCUVZvc1EwRkJhVUlzU1VGQmFrSXNRMEZCYmtJN1FVRkJhRUlzVTBGQk1FUXNUMEZCVDNCQ0xFVkJRVVYxYlVJc1RVRkJWRHRCUVVGblFpeFBRVUY0VlN4RFFVRXpRanRCUVVGeFZ5eExRVUU1YmtNc1JVRkJXaXhEUVVFek1FSXNSVUZCZHpsRWVtdENMRVZCUVVWcFFpeEpRVUZHTEVOQlFVOHNRMEZCUXl4UlFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGcFFpeE5RVUZxUWl4RFFVRlFMRVZCUVdkRExGVkJRVk4wUkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEZGQlFVbE5MRWxCUVVVNFFpeEZRVUZGUXl4RlFVRkdMRU5CUVV0eVF5eERRVUZNTEVOQlFVNHNRMEZCWTI5RExFVkJRVVZETEVWQlFVWXNRMEZCUzNKRExFTkJRVXdzU1VGQlVTeFZRVUZUUkN4RFFVRlVMRVZCUVZkUkxFTkJRVmdzUlVGQllVTXNRMEZCWWl4RlFVRmxPMEZCUVVNc1lVRkJUeXhSUVVGTlZDeERRVUZPTEVsQlFWTXNZVUZCVnl4UFFVRlBRU3hEUVVFelFpeEhRVUUyUWs4c1JVRkJSV2xFTEV0QlFVWXNRMEZCVVN4SlFVRlNMRVZCUVdGRExGTkJRV0lzUTBGQk4wSXNSMEZCY1VRc1MwRkJTMjlxUWl4UFFVRk1MRU5CUVdFNVFpeEhRVUZIT1d0Q0xFTkJRVWdzUlVGQlN5eERRVUZETEVOQlFVNHNRMEZCWWl4RlFVRnpRa1FzUTBGQmRFSXNSVUZCZDBKUkxFTkJRWGhDTEVWQlFUQkNReXhEUVVFeFFpeERRVUUxUkR0QlFVRjVSaXhMUVVGcVNEdEJRVUZyU0N4SFFVRTVTeXhEUVVGNE9VUXNSVUZCZDI5Rk5FSXNSVUZCUldsQ0xFbEJRVVlzUTBGQlR5eEZRVUZETUdwQ0xGZEJRVlZxUXl4SFFVRkhMRTFCUVVnc1EwRkJXQ3hGUVVGelFtdERMRk5CUVZGc1F5eEhRVUZITEUxQlFVZ3NRMEZCT1VJc1JVRkJlVU50UXl4aFFVRlpia01zUjBGQlJ5eFJRVUZJTEVOQlFYSkVMRVZCUVd0RmIwTXNVVUZCVHl4RlFVRkRjRVlzVTBGQlVTeE5RVUZVTEVWQlFYcEZMRVZCUVRCR2NVWXNVMEZCVVN4RlFVRkRja1lzVTBGQlVTeE5RVUZVTEVWQlFXeEhMRVZCUVcxSWMwWXNXVUZCVnl4RlFVRkRkRVlzVTBGQlVTeFJRVUZVTEVWQlFUbElMRVZCUVZBc1JVRkJlVW9zVlVGQlV5OW9RaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRiME1zVFVGQlJVTXNSVUZCUml4RFFVRkxkRU1zUTBGQlRDeEpRVUZSTEZWQlFWTkJMRU5CUVZRc1JVRkJWMDhzUTBGQldDeEZRVUZoUXl4RFFVRmlMRVZCUVdVN1FVRkJReXhoUVVGUExFdEJRVXR4YlVJc1QwRkJUQ3hEUVVGaE5XMUNMRU5CUVdJc1JVRkJaVVFzUTBGQlppeEZRVUZwUWs4c1EwRkJha0lzUlVGQmJVSkRMRU5CUVc1Q0xFTkJRVkE3UVVGQk5rSXNTMEZCY2tRN1FVRkJjMFFzUjBGQk4wNHNRMEZCZUc5RkxFVkJRWFV5UlRaQ0xFVkJRVVV3YTBJc1RVRkJSaXhIUVVGVExFVkJRV2d6UlN4RlFVRnRNMFV4YTBJc1JVRkJSWGxvUWl4RlFVRkdMRU5CUVV0bExFbEJRVXdzUjBGQlZTeFpRVUZWTzBGQlFVTXNVVUZCU1RkclFpeERRVUZLTzBGQlFVRXNVVUZCVFVNc1NVRkJSU3hEUVVGU08wRkJRVUVzVVVGQlZVMHNTVUZCUlRoQ0xFVkJRVVV3YTBJc1RVRkJaQ3hEUVVGeFFpeExRVUZKTVVNc1MwRkJSMmhwUWl4RlFVRkZjMFFzUjBGQlJpeEZRVUZRTEVWQlFXVXhSaXhKUVVGRlRTeEZRVUZGZVVNc1RVRkJia0lzUlVGQk1FSXZReXhIUVVFeFFqdEJRVUU0UWtRc1ZVRkJSVThzUlVGQlJVNHNRMEZCUml4RFFVRkdMRVZCUVU5RUxFOUJRVXRQTEVWQlFVVk9MRU5CUVVZc1RVRkJUMFFzUTBGQldpeEpRVUZsVHl4RlFVRkZkMFFzVFVGQlJpeERRVUZUT1VRc1IwRkJWQ3hGUVVGaExFTkJRV0lzUTBGQmRFSTdRVUZCT1VJc1MwRkJiMFZOTEVWQlFVVjVReXhOUVVGR0xFbEJRVlZZTEVWQlFVVjVhRUlzUlVGQlJpeERRVUZMY0U0c1NVRkJUQ3hGUVVGV0xFVkJRWE5DTWs0c1MwRkJSeXhMUVVGTExFTkJRVGxDTzBGQlFXZERMRWRCUVdwblJpeEZRVUZyWjBab2FVSXNSVUZCUlhsb1FpeEZRVUZHTEVOQlFVdHpReXhMUVVGTUxFZEJRVmNzVlVGQlUzQnRRaXhEUVVGVUxFVkJRVmM3UVVGQlEzRkRMRTFCUVVVd2EwSXNUVUZCUml4RFFVRlRPV3hDTEVsQlFWUXNRMEZCWTJwQ0xFTkJRV1FzUjBGQmFVSnhReXhGUVVGRmVXaENMRVZCUVVZc1EwRkJTek5OTEV0QlFVd3NSVUZCYWtJN1FVRkJPRUlzUjBGQmRtcEdMRVZCUVhkcVJqbFZMRVZCUVVWNWFFSXNSVUZCUml4RFFVRkxZeXhSUVVGTUxFZEJRV01zUlVGQmRHdEdMRVZCUVhsclJuWnBRaXhGUVVGRmVXaENMRVZCUVVZc1EwRkJTek5OTEV0QlFVd3NSMEZCVnl4WlFVRlZPMEZCUVVOdFRpeFhRVUZMUVN4TFFVRkhMRU5CUVVNc1EwRkJTaXhGUVVGTlJ5eEpRVUZZTzBGQlFXbENMRWRCUVdodVJpeEZRVUZwYmtad2FVSXNSVUZCUlhsb1FpeEZRVUZHTEVOQlFVdHdUaXhKUVVGTUxFZEJRVlVzV1VGQlZUdEJRVUZETkU0c1UwRkJSeXhKUVVGSU8wRkJRVkVzUjBGQk9XOUdMRVZCUVN0dlJtcHBRaXhGUVVGRmVXaENMRVZCUVVZc1EwRkJTelJETEUxQlFVd3NSMEZCV1N4RlFVRkRXU3hOUVVGTExFZEJRVTRzUlVGQlZVTXNUVUZCU3l4SFFVRm1MRVZCUVcxQ01WQXNWVUZCVXl4SFFVRTFRaXhGUVVFemNFWXNSVUZCTkhKR2VGWXNSVUZCUlVNc1JVRkJSaXhEUVVGTGEyeENMRXRCUVV3c1IwRkJWeXhWUVVGVGRtNUNMRU5CUVZRc1JVRkJWMDBzUTBGQldDeEZRVUZoTzBGQlFVTXNWMEZCVDA0c1NVRkJSVzlETEVWQlFVVjVhRUlzUlVGQlJpeEhRVUZMZW1oQ0xFVkJRVVY1YUVJc1JVRkJSaXhEUVVGTE5FTXNUVUZCVEN4RFFVRlplbTFDTEVOQlFWb3NTMEZCWjBKQkxFTkJRWEpDTEVkQlFYVkNRU3hEUVVGNlFpeEZRVUV5UWswc1NVRkJSVUVzUzBGQlJ5eEpRVUZvUXl4RlFVRnhReXhMUVVGTFoxY3NTMEZCVEN4RFFVRlhhRmNzUTBGQldDeEZRVUZoTEZWQlFWTkJMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNWVUZCU1VNc1NVRkJSVlFzUlVGQlJUaFZMRlZCUVVZc1EwRkJZWFpWTEVOQlFXSXNSVUZCWlU0c1EwRkJaaXhEUVVGT0xFTkJRWGRDVHl4RlFVRkZhMWNzU1VGQlJpeEhRVUZQTEZsQlFWVTdRVUZCUXpGWExGVkJRVVY1YmtJc1dVRkJSaXhEUVVGbGFHNUNMRU5CUVdZN1FVRkJhMElzVDBGQmNFTTdRVUZCY1VNc1MwRkJlRVlzUTBGQk5VTTdRVUZCYzBrc1IwRkJNekZHTEVWQlFUUXhSaXhaUVVGVk8wRkJRVU1zVVVGQlNWUXNTVUZCUlZFc1JVRkJSWE5DTEdGQlFVWXNRMEZCWjBJc1QwRkJhRUlzUTBGQlRqdEJRVUZCTEZGQlFTdENOMElzU1VGQlJVOHNSVUZCUlhOQ0xHRkJRVVlzUTBGQlowSXNVVUZCYUVJc1EwRkJha003UVVGQlFTeFJRVUV5UkhaQ0xFbEJRVVZPTEVWQlFVVm5ReXhYUVVGR0xFTkJRV042UWl4RlFVRkZjMElzWVVGQlJpeERRVUZuUWl4UlFVRm9RaXhEUVVGa0xFTkJRVGRFTEVOQlFYTkhPVUlzUlVGQlJUUkZMRWxCUVVZc1IwRkJUeXhWUVVGUUxFVkJRV3RDYUVRc1JVRkJSVGhzUWl4UFFVRkdMRWRCUVZVc1QwRkJTekZ1UWl4RlFVRkZlVTBzUzBGQmJrTXNSVUZCZVVNM1N5eEZRVUZGSzJ4Q0xGZEJRVVlzUjBGQlkzQnVRaXhGUVVGRmFWQXNVVUZCZWtRc1JVRkJhMFY0VUN4SlFVRkZVU3hGUVVGRmMwSXNZVUZCUml4RFFVRm5RaXhQUVVGb1FpeERRVUZ3UlN4RlFVRTJSamxDTEVWQlFVVjVUU3hMUVVGR0xFZEJRVkVzUjBGQmNrY3NSVUZCZVVkNlRTeEZRVUZGTkVVc1NVRkJSaXhIUVVGUExFOUJRV2hJTEVWQlFYZElhRVFzUlVGQlJXZHRRaXhWUVVGR0xFZEJRV0VzVVVGQlRUVnVRaXhGUVVGRmVVMHNTMEZCTjBrN1FVRkJiVW9zUjBGQmNGRXNSVUZCTlRGR0xFTkJRVzF0Unl4SlFVRkpiMklzUlVGQlNqdEJRVUZCTEUxQlFVOURMRXRCUVVkNmJFSXNSVUZCUlcxUUxFbEJRVVlzUTBGQlQzWkhMRlZCUVdwQ0xFTkJRVFJDTlVrc1JVRkJSVU1zUlVGQlJpeERRVUZMTUVJc1RVRkJUQ3hEUVVGWkxFVkJRVU56U2l4TlFVRkxMR05CUVZOMFRpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRExHRkJRVTh3U0N4RlFVRkZMRWxCUVVZc1JVRkJUM1JHTEVWQlFVVnBUQ3hKUVVGVUxFVkJRV04wVGl4RFFVRmtMRVZCUVdkQ1F5eERRVUZvUWl4RlFVRnJRbmRFTEZWQlFWVlVMRTFCUVZZc1IwRkJhVUlzUTBGQmJrTXNRMEZCVUR0QlFVRTJReXhMUVVGcVJTeEZRVUZyUlN0clFpeFpRVUZYTEc5Q1FVRlRMMjVDTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU4c1MwRkJTM05FTEVsQlFVd3NRMEZCVlN4WlFVRlZPMEZCUVVOcVFpeFZRVUZGTUd4Q0xGVkJRVVlzUTBGQllTeEpRVUZpTEVWQlFXdENMMjVDTEVOQlFXeENPMEZCUVhGQ0xFOUJRVEZETEVOQlFWQTdRVUZCYlVRc1MwRkJOVWtzUlVGQldpeEhRVUV5U25GRExFVkJRVVV5UWl4TlFVRkdMRU5CUVZNc1JVRkJRM05LTEUxQlFVc3NZMEZCVTNST0xFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1U3UVVGQlF5eFZRVUZKUXl4RFFVRktPMEZCUVVFc1ZVRkJUVU1zUTBGQlRqdEJRVUZCTEZWQlFWRkhMRWxCUVVWYUxFVkJRVVY1U2l4UlFVRmFMRU5CUVhGQ0xFbEJRVWNzVFVGQlNUZEpMRU5CUVVvc1NVRkJUeXhOUVVGSlFTeERRVUZZTEVsQlFXTXNUVUZCU1VFc1EwRkJja0lzUlVGQmRVSXNUMEZCVFN4bFFVRmhMRTlCUVU5YUxFVkJRVVZ4U3l4WlFVRjBRaXhIUVVGdFEyaEpMRVZCUVVWcGFFSXNTVUZCUml4RFFVRlBkR3BDTEVOQlFWQXNSVUZCVTBNc1EwRkJWQ3hGUVVGWFRTeERRVUZZTEVOQlFXNURMRWxCUVd0RUxFMUJRVWxMTEVOQlFVb3NTVUZCVDNsQ0xFVkJRVVZ4VUN4UlFVRkdMRU5CUVZjeFVpeERRVUZZTEVOQlFWQXNTMEZCZFVKVExFbEJRVVUwUWl4RlFVRkZNbXhDTEZOQlFVWXNRMEZCV1M5dVFpeEZRVUZGWjBjc1YwRkJSaXhGUVVGYUxFMUJRU3RDTlVRc1JVRkJSVzFRTEVsQlFVWXNRMEZCVDNSRUxFdEJRVkFzUTBGQllUbEdMRWxCUVdJc1EwRkJhMElyUWl4SlFVRnNRaXhEUVVGMVFteExMRU5CUVhaQ0xFbEJRVEJDTkc1Q0xFVkJRVEZDTEVkQlFUWkNMRXRCUVVzc1EwRkJha1VzUTBGQmVrSXNSMEZCT0VZc1MwRkJTeXhEUVVGTUxFdEJRVk4wYmtJc1EwRkJWQ3hIUVVGWExGTkJRVTlCTEVOQlFWQXNSMEZCVXl4TFFVRkxPRUlzUlVGQlJUQnNRaXhWUVVGR0xFTkJRV0V2YmtJc1EwRkJZaXhGUVVGbFF5eERRVUZtTEVOQlFXUXNSMEZCWjBOUkxFdEJRVWNzVTBGQlVVRXNRMEZCV0N4SlFVRmpMRXRCUVVzc1EwRkJUQ3hOUVVGVlJDeEpRVUZGUXl4RlFVRkZjVllzUjBGQlJpeERRVUZOT1ZZc1EwRkJUaXhGUVVGUlR5eERRVUZTTEVWQlFWVk9MRU5CUVZZc1EwRkJXaXhEUVVGa0xFZEJRWGREVHl4RFFVRjRReXhKUVVFeVExSXNSVUZCUlhOTExGbEJRVVlzUTBGQlpYSkxMRU5CUVdZc1JVRkJhVUpOTEVsQlFVVXNSVUZCYmtJc1IwRkJkVUpCTEVOQlFXeEZMRU5CUVRORExFZEJRV2RJUlN4TFFVRkhMRk5CUVZGQkxFTkJRVmdzU1VGQll5eFZRVUZSUkN4SlFVRkZReXhGUVVGRmVVTXNSMEZCUml4RFFVRk5iRVFzUTBGQlRpeEZRVUZSUXl4RFFVRlNMRU5CUVZZc1EwRkJaQ3hIUVVGdlEwOHNRMEZCY0VNc1NVRkJkVU5CTEVsQlFVVTJRaXhGUVVGRmEwc3NTVUZCUml4RFFVRlBaU3hKUVVGUUxFTkJRVmwwVGl4RFFVRmFMRVZCUVdORExFTkJRV1FzUTBGQlJpeEZRVU4yZVN0Q0xGRkJRVTFQTEVOQlFVNHNSMEZCVVN4TFFVRkxMRU5CUVdJc1IwRkJaVUVzUTBGRWFYWXJRaXhEUVVGb1VTeERRVUZPTzBGQlEzWXJPVUlzUzBGRWNUWTVRaXhGUVVOd05qbENkMjVDTEZkQlFWVXNSVUZCUTNCcVFpeE5RVUZMTEVWQlFVTnJVaXhMUVVGSkxHRkJRVk01Vml4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZETEdOQlFVY3NRMEZCUXpKQ0xFVkJRVVZuYlVJc1ZVRkJTQ3hKUVVGbExGbEJRVlV6YmtJc1EwRkJla0lzU1VGQk5FSnpSeXhGUVVGRmRrY3NRMEZCUml4RlFVRkpMRTlCUVVvc1EwRkJMMElzUlVGQk5FTTdRVUZCUXl4blFrRkJTVThzU1VGQlJWQXNSVUZCUlhsTkxFdEJRVklzUTBGQll5eFBRVUZQZWswc1JVRkJSWE5MTEZsQlFVWXNRMEZCWlN4TlFVRm1MRVZCUVhOQ2Nrc3NRMEZCZEVJc1IwRkJlVUpOTEUxQlFVbFFMRVZCUVVWNVRTeExRVUZHTEVkQlFWRnNUU3hEUVVGYUxFTkJRWHBDTEVWQlFYZERUaXhEUVVFdlF6dEJRVUZwUkR0QlFVRkRMRk5CUVdoSkxFVkJRVTRzUlVGRU1EVTVRaXhGUVVOcWVEbENPRzVDTEZsQlFWY3NiMEpCUVZNdmJrSXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eFZRVUZKVFN4RFFVRktPMEZCUVVFc1ZVRkJUVU1zU1VGQlJTeERRVUZTTzBGQlFVRXNWVUZCVlVNc1NVRkJSVklzUzBGQlIwRXNSVUZCUldsUExFdEJRVVlzUTBGQlVXaElMRU5CUVZJc1EwRkJaaXhEUVVFd1FpeEpRVUZIZWtjc1MwRkJSeXhOUVVGSlZDeEZRVUZGZVVvc1VVRkJXaXhGUVVGeFFpeFBRVUZOYkVvc1NVRkJSVVVzUlVGQlJVUXNSMEZCUml4RFFVRlNPMEZCUVdWU0xGVkJRVVV5U3l4bFFVRkdMRU5CUVd0Q2NFc3NRMEZCYkVJN1FVRkJaanRCUVVGdlF5eExRVVJ4Y1RsQ0xFVkJRVlFzUTBGQk0wb3NSVUZET1M4NFFuTnVRaXhMUVVGSExFVkJRVU12VWl4TFFVRkpMR0ZCUVZNNVZpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVTBzUTBGQllpeEZRVUZsTzBGQlFVTXNZVUZCVDA0c1RVRkJTU3hEUVVGRExFTkJRVXdzUjBGQlQyOURMRVZCUVVVd2JFSXNWVUZCUml4RFFVRmhMMjVDTEVOQlFXSXNSVUZCWlU4c1EwRkJaaXhEUVVGUUxFZEJRWGxDVUN4RlFVRkZjMHNzV1VGQlJpeERRVUZsTDBvc1EwRkJaaXhGUVVGcFFrRXNRMEZCYWtJc1EwRkJla0lzUlVGQk5rTkJMRU5CUVhCRU8wRkJRWE5FTEV0QlFUTkZMRVZCUkRJdk9FSXNSVUZET1RZNFFqaENMRVZCUVVWcFFpeEpRVUZHTEVOQlFVOXFRaXhGUVVGRmJWQXNTVUZCUml4RFFVRlBkRVFzUzBGQlVDeERRVUZoT1VZc1NVRkJZaXhEUVVGclFuZFBMRTFCUVd4Q0xFTkJRWGxDTVVrc1MwRkJla0lzUTBGQkswSXNUVUZCTDBJc1EwRkJVQ3hGUVVFNFF5eFZRVUZUYkU4c1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4UlFVRkpUU3hKUVVGRmRXNUNMRWRCUVVjM2JrSXNRMEZCU0N4TFFVRlBiME1zUlVGQlJXdExMRWxCUVVZc1EwRkJUMlVzU1VGQmNFSXNRMEZCZVVKM1lTeEhRVUZITjI1Q0xFTkJRVWdzU1VGQlRTeFZRVUZUUkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllVOHNRMEZCWWl4RlFVRmxPMEZCUVVNc1ZVRkJTVU1zUTBGQlNqdEJRVUZCTEZWQlFVMUhMRU5CUVU0N1FVRkJRU3hWUVVGUlJTeEpRVUZGWWl4RlFVRkZaMGNzVjBGQlJpeEZRVUZXTEVOQlFUQkNMRTlCUVU5NlJpeE5RVUZKU1N4SlFVRkZhMjVDTEVkQlFVZG9ia0lzUTBGQlNDeERRVUZHTEVWQlFWRm5ia0lzUjBGQlIyaHVRaXhEUVVGSUxFbEJRVTFNTEVOQlFXUXNSVUZCWjBKQkxFbEJRVVVzVVVGQlRVWXNSVUZCUlZBc1EwRkJSaXhGUVVGSlF5eERRVUZLTEVWQlFVMVBMRU5CUVU0c1EwRkJUaXhIUVVGbFRTeERRVUZtTEVkQlFXbENMRWxCUVc1RExFVkJRWGREWjI1Q0xFZEJRVWRvYmtJc1EwRkJTQ3hKUVVGTlJpeERRVUZzUkN4SFFVRnhSRWdzUTBGQk5VUTdRVUZCT0VRc1MwRkJPVWM3UVVGQkswY3NSMEZCY0Uwc1EwRkVPRFk0UWl4RFFVTjRkVGhDTEVsQlFVbDNia0lzUzBGQlJ5eHhRMEZCVUR0QlFVRkJMRTFCUVRaRFF5eExRVUZITEdWQlFXaEVMRU5CUVdkRk4yeENMRVZCUVVWRExFVkJRVVlzUTBGQlN6QkNMRTFCUVV3c1EwRkJXU3hGUVVGRGMyWXNUVUZCU3l4alFVRlRkR3BDTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWVVGQlR6QklMRVZCUVVVc1NVRkJSaXhGUVVGUGRFWXNSVUZCUldsb1FpeEpRVUZVTEVWQlFXTjBha0lzUTBGQlpDeEZRVUZuUWtNc1EwRkJhRUlzUlVGQmEwSjNSQ3hWUVVGVlZDeE5RVUZXTEVkQlFXbENMRU5CUVc1RExFTkJRVkE3UVVGQk5rTXNTMEZCYWtVc1JVRkJhMFZ0YkVJc1dVRkJWeXh2UWtGQlUyNXZRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQTEV0QlFVdHpSQ3hKUVVGTUxFTkJRVlVzV1VGQlZUdEJRVUZETEdWQlFVOHNTMEZCUzJwQ0xFVkJRVVVyYkVJc1QwRkJSaXhEUVVGVmNHOUNMRU5CUVZZc1MwRkJZMEVzUTBGQmJrSXNRMEZCVUR0QlFVRTJRaXhQUVVGc1JDeERRVUZRTzBGQlFUSkVMRXRCUVhCS0xFVkJRVm9zUjBGQmJVdHhReXhGUVVGRk1rSXNUVUZCUml4RFFVRlRMRVZCUVVOelppeE5RVUZMTEdOQlFWTjBha0lzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpUdEJRVUZETEZWQlFVbERMRU5CUVVvN1FVRkJRU3hWUVVGTlF5eERRVUZPTzBGQlFVRXNWVUZCVVVjc1NVRkJSVm9zUlVGQlJYbEtMRkZCUVZvc1EwRkJjVUlzU1VGQlJ5eE5RVUZKTjBrc1EwRkJTaXhKUVVGUExFMUJRVWxCTEVOQlFWZ3NTVUZCWXl4TlFVRkpRU3hEUVVGeVFpeEZRVUYxUWl4UFFVRlBMRTFCUVVsQkxFTkJRVW9zU1VGQlQzbENMRVZCUVVWeFVDeFJRVUZHTEVOQlFWY3hVaXhEUVVGWUxFTkJRVkFzUzBGQmRVSkRMRWxCUVVWdlF5eEZRVUZGSzJ4Q0xFOUJRVVlzUTBGQlZXNXZRaXhEUVVGV0xFdEJRV05CTEVOQlFXaENMRVZCUVd0Q1VTeEpRVUZGTkVJc1JVRkJSVzlvUWl4VFFVRkdMRU5CUVZsNGFrSXNRMEZCV2l4RFFVRXpReXhIUVVFeVJDeExRVUZMTEVOQlFVd3NTMEZCVTAwc1EwRkJWQ3hIUVVGWFJTeExRVUZITEZOQlFWRkJMRU5CUVZnc1NVRkJZeXhMUVVGTExFTkJRVXdzVFVGQlZVUXNTVUZCUlVNc1JVRkJSWEZXTEVkQlFVWXNRMEZCVFRsV0xFTkJRVTRzUlVGQlVVOHNRMEZCVWl4RlFVRlZUaXhEUVVGV0xFTkJRVm9zUTBGQlpDeEhRVUYzUTA4c1EwRkJlRU1zUjBGQk1FTlNMRVZCUVVWRExFTkJRVVlzU1VGQlMwMHNRMEZCTVVRc1IwRkJORVJGTEV0QlFVY3NVMEZCVVVFc1EwRkJXQ3hKUVVGakxGVkJRVkZFTEVsQlFVVkRMRVZCUVVWNVF5eEhRVUZHTEVOQlFVMXNSQ3hEUVVGT0xFVkJRVkZETEVOQlFWSXNRMEZCVml4RFFVRmtMRWRCUVc5RFR5eERRVUZ3UXl4SFFVRnpRMUlzUlVGQlJVTXNRMEZCUml4RFFVRndTenRCUVVGNVN5eExRVUV6VHl4RlFVRTBUM2RxUWl4WFFVRlZMRVZCUVVOd1ZTeFZRVUZUTEVWQlFVTnVUU3hMUVVGSkxHRkJRVk5zUkN4RFFVRlVMRVZCUVZjN1FVRkJReXhqUVVGSlF5eEpRVUZGYjBNc1JVRkJSV3RMTEVsQlFVWXNRMEZCVDJVc1NVRkJVQ3hEUVVGWmRFNHNRMEZCV2l4RlFVRmpMRlZCUVdRc1EwRkJUaXhEUVVGblF5eFBRVUZQUXl4SlFVRkZiMjlDTEZOQlFWTndiMElzUTBGQlZDeEZRVUZYTEVWQlFWZ3NRMEZCUml4SFFVRnBRbWR2UWl4SFFVRkhPV1FzU1VGQlNDeERRVUZSYmtzc1JVRkJSVzlMTEZGQlFWWXNTMEZCY1VJNFpDeEhRVUZITDJRc1NVRkJTQ3hEUVVGUmJrc3NSVUZCUlc5TExGRkJRVllzUzBGQmNVSndTeXhGUVVGRmIxQXNTVUZCTlVNc1IwRkJhVVFzUTBGQmFrUXNSMEZCYlVRc1EwRkJReXhEUVVFMVJUdEJRVUU0UlN4VFFVRXZTQ3hGUVVGV0xFVkJRWFJRTEVWQlFXdFpaMW9zVTBGQlVTeEZRVUZETEU5QlFVMHNVMEZCVUN4RlFVRnBRaXhUUVVGUkxGZEJRWHBDTEVWQlFURlpMRVZCUVZRc1EwRkJia3NzUlVGQk9HeENlRzFDTEVWQlFVVXJiRUlzVjBGQlJpeExRVUZuUW5Sc1FpeEZRVUZGYjJoQ0xGTkJRVVlzUTBGQldXcFZMRkZCUVZvc1IwRkJjVUlzUlVGQlEzUk5MRXRCUVVrc1lVRkJVMnhFTEVOQlFWUXNSVUZCVnp0QlFVRkRMRlZCUVVsRExFbEJRVVZFTEVWQlFVVnJReXhWUVVGU0xFTkJRVzFDTEU5QlFVOXFReXhMUVVGSFFTeEZRVUZGYVVNc1ZVRkJUQ3hKUVVGcFFtcERMRVZCUVVWcFF5eFZRVUZHTEVOQlFXRjFUaXhoUVVFNVFpeEZRVUUwUXl4SlFVRnVSRHRCUVVGM1JDeExRVUUxUml4RlFVRTJSbkZITEV0QlFVa3NZVUZCVXpsV0xFTkJRVlFzUlVGQlZ6dEJRVUZETEZWQlFVbERMRWxCUVVWRUxFVkJRVVZyUXl4VlFVRlNMRU5CUVcxQ2FrTXNUVUZCU1VFc1JVRkJSWGRRTEdGQlFVWXNSVUZCWjBKNFVDeEZRVUZGYVVNc1ZVRkJSaXhKUVVGamFrTXNSVUZCUldsRExGVkJRVVlzUTBGQllYVk9MR0ZCUVM5RE8wRkJRVGhFTEV0QlFUbE1MRVZCUVhKRExFTkJRVGxzUWl4RlFVRnZNRUp3VGl4RlFVRkZhVUlzU1VGQlJpeERRVUZQTEVOQlFVTXNWVUZCUkN4RlFVRlpMRlZCUVZvc1JVRkJkVUlzVjBGQmRrSXNSVUZCYlVNc1lVRkJia01zUlVGQmFVUXNZVUZCYWtRc1JVRkJLMFFzVTBGQkwwUXNSVUZCZVVVc1UwRkJla1VzUlVGQmJVWXNVVUZCYmtZc1JVRkJORVlzWVVGQk5VWXNSVUZCTUVjc2FVSkJRVEZITEVOQlFWQXNSVUZCYjBrc1dVRkJWVHRCUVVGRGFrSXNUVUZCUlN0c1FpeFBRVUZHTEVOQlFWVXNTMEZCUzI1cFFpeFhRVUZNTEVWQlFWWXNTVUZCT0VJc1NVRkJPVUk3UVVGQmJVTXNSMEZCYkV3c1EwRkJjREJDTEVOQlFYY3ZRaXhUUVVGVGNXbENMRVZCUVZRc1EwRkJXWFJ2UWl4RFFVRmFMRVZCUVdNN1FVRkJReXhSUVVGSlF5eEpRVUZGUkN4RlFVRkZhMDhzUzBGQlJpeERRVUZSYUVnc1EwRkJVaXhMUVVGWkxFVkJRV3hDTEVOQlFYRkNMRTlCUVU5cVNDeEZRVUZGZFVzc1NVRkJSaXhEUVVGUExFZEJRVkFzUTBGQlVEdEJRVUZ0UWl4WlFVRlRLMlFzUlVGQlZDeERRVUZaZG05Q0xFTkJRVm9zUlVGQll6dEJRVUZETEZkQlFVOUJMRVZCUVVWeFN5eFpRVUZHTEVsQlFXZENja3NzUlVGQlJYRkxMRmxCUVVZc1EwRkJaU3hQUVVGbUxFTkJRV2hDTEVsQlFYbERMRVZCUVdoRU8wRkJRVzFFTEV0QlFVVXZTQ3hGUVVGR0xFTkJRVXN3UWl4TlFVRk1MRU5CUVZrc1JVRkJRM2RyUWl4VlFVRlRMR3RDUVVGVGVHOUNMRU5CUVZRc1JVRkJWenRCUVVGRExGVkJRVWxETEVOQlFVbzdRVUZCUVN4VlFVRk5UU3hEUVVGT08wRkJRVUVzVlVGQlVVTXNRMEZCVWp0QlFVRkJMRlZCUVZWRExFTkJRVlk3UVVGQlFTeFZRVUZaUnl4RFFVRmFPMEZCUVVFc1ZVRkJZMFVzUTBGQlpEdEJRVUZCTEZWQlFXZENSU3hEUVVGb1FqdEJRVUZCTEZWQlFXdENSU3hKUVVGRkxFTkJRWEJDTEVOQlFYTkNMRWxCUVVkdFFpeEZRVUZGTkVJc1ZVRkJSaXhEUVVGaGFrVXNRMEZCWWl4RFFVRklMRVZCUVcxQ0xFOUJRVThzUzBGQlMzTkVMRWxCUVV3c1EwRkJWU3hWUVVGVGNrUXNRMEZCVkN4RlFVRlhPMEZCUVVOdlF5eFZRVUZGTEVsQlFVWXNSVUZCVVcxdFFpeFJRVUZTTEVOQlFXbENlRzlDTEVWQlFVVXlRaXhKUVVGR0xFTkJRVThzU1VGQlVDeEZRVUZaTVVJc1EwRkJXaXhGUVVGamMyOUNMRWRCUVVjc1NVRkJTQ3hEUVVGa0xFTkJRV3BDTzBGQlFUQkRMRTlCUVdoRkxFTkJRVkFzUTBGQmVVVXNTVUZCUnl4WlFVRlZMRTlCUVU5MmIwSXNRMEZCYWtJc1NVRkJiMEpCTEVOQlFYWkNMRVZCUVhsQ08wRkJRVU5ETEZsQlFVVkVMRVZCUVVWclR5eExRVUZHTEVOQlFWRm9TQ3hEUVVGU0xFdEJRVmtzUlVGQlpDeERRVUZwUWl4UFFVRk5NMGNzU1VGQlJTeExRVUZMVnl4SFFVRk1MRU5CUVZJN1FVRkJhMElzWTBGQlIxUXNTVUZCUlRodVFpeEhRVUZIYUc5Q0xFTkJRVWdzUTBGQlJpeEZRVUZSUXl4SlFVRkZMRTFCUVVsRUxFVkJRVVZyU2l4UlFVRk9MRWxCUVdkQ0xFMUJRVWsyWlN4SFFVRkhOMjVDTEVOQlFVZ3NRMEZCU2l4SFFVRlZMRWRCUVhaRExFVkJRVEpETzBGQlFVTkxMR2RDUVVGRkxFTkJRVVlzUTBGQlNTeFBRVUZOUml4SlFVRkZXQ3hGUVVGRllTeEhRVUZHTEVOQlFWSTdRVUZCWlU0c1owSkJRVVZYTEU5QlFVWXNRMEZCVlN4TlFVRkpVQ3hEUVVGS0xFZEJRVTBzUjBGQmFFSXNTVUZCY1VJc1EwRkJja0lzUzBGQmVVSktMRXRCUVVkSkxFbEJRVVVzUjBGQk9VSTdRVUZCWml4aFFVRnJSRWtzU1VGQlJYTnVRaXhIUVVGSE9XNUNMRU5CUVVnc1EwRkJSaXhGUVVGUlF5eE5RVUZKVHl4RFFVRktMRWxCUVU5VUxFVkJRVVVyU2l4WlFVRkdMRU5CUVdVc1QwRkJaaXhGUVVGMVFuUktMRU5CUVhaQ0xFTkJRV1k3UVVGQmVVTTdRVUZCTjBvN1FVRkJPRW9zWTBGQlR5eEpRVUZRTzBGQlFWa3NTMEZCTjFZc1JVRkJPRlo1YmtJc1lVRkJXU3h4UWtGQlUzcHZRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eFZRVUZKUXl4RFFVRktPMEZCUVVFc1ZVRkJUVTBzUTBGQlRqdEJRVUZCTEZWQlFWRkRMRU5CUVZJN1FVRkJRU3hWUVVGVlF5eERRVUZXTzBGQlFVRXNWVUZCV1Vjc1EwRkJXanRCUVVGQkxGVkJRV05GTEVOQlFXUTdRVUZCUVN4VlFVRm5Ra1VzUTBGQmFFSTdRVUZCUVN4VlFVRnJRa1VzU1VGQlJTeERRVUZ3UWl4RFFVRnpRaXhKUVVGSGJVSXNSVUZCUlRSQ0xGVkJRVVlzUTBGQllXcEZMRU5CUVdJc1EwRkJTQ3hGUVVGdFFpeFBRVUZQTEV0QlFVdHpSQ3hKUVVGTUxFTkJRVlVzVlVGQlUzSkVMRU5CUVZRc1JVRkJWenRCUVVGRGIwTXNWVUZCUlN4SlFVRkdMRVZCUVZGdmJVSXNWMEZCVWl4RFFVRnZRbnB2UWl4RlFVRkZNa0lzU1VGQlJpeERRVUZQTEVsQlFWQXNSVUZCV1RGQ0xFTkJRVm9zUlVGQlkzTnZRaXhIUVVGSExFbEJRVWdzUTBGQlpDeERRVUZ3UWp0QlFVRTJReXhQUVVGdVJTeERRVUZRTEVOQlFUUkZMRWxCUVVjc1EwRkJRemxyUWl4VlFVRlZWQ3hOUVVGa0xFVkJRWEZDTEU5QlFVOHNTMEZCUzNOTExFbEJRVXdzUTBGQlZTeFBRVUZXTEVWQlFXdENMRVZCUVd4Q0xFTkJRVkFzUTBGQk5rSXNTVUZCUnl4WlFVRlZMRTlCUVU5MFRpeERRVUZxUWl4SlFVRnZRa0VzUTBGQmRrSXNSVUZCZVVJN1FVRkJRME1zV1VGQlJVUXNSVUZCUld0UExFdEJRVVlzUTBGQlVXaElMRU5CUVZJc1MwRkJXU3hGUVVGa0xFTkJRV2xDTEU5QlFVMHpSeXhKUVVGRkxFdEJRVXRYTEVkQlFVd3NRMEZCVWp0QlFVRnJRaXhqUVVGSFZDeEpRVUZGT0c1Q0xFZEJRVWRvYjBJc1EwRkJTQ3hEUVVGR0xFVkJRVkZETEVsQlFVVXNUVUZCU1VRc1JVRkJSV3RLTEZGQlFVNHNTVUZCWjBJc1RVRkJTVFpsTEVkQlFVYzNia0lzUTBGQlNDeERRVUZLTEVkQlFWVXNSMEZCZGtNc1JVRkJNa003UVVGQlEwc3NaMEpCUVVVc1EwRkJSaXhEUVVGSkxFOUJRVTFHTEVsQlFVVllMRVZCUVVWaExFZEJRVVlzUTBGQlVqdEJRVUZsTEhGQ1FVRk5UaXhGUVVGRlZ5eFBRVUZHTEVOQlFWVXNUVUZCU1ZBc1EwRkJTaXhIUVVGTkxFZEJRV2hDTEVsQlFYRkNMRU5CUVVNc1EwRkJOVUk3UVVGQk9FSktMRzlDUVVGRlFTeEZRVUZGWjBVc1QwRkJSaXhEUVVGVkxFMUJRVWsxUkN4RFFVRktMRWRCUVUwc1IwRkJhRUlzUlVGQmIwSXNSMEZCY0VJc1EwRkJSanRCUVVFNVFqdEJRVUZtTEdGQlFYZEZTU3hKUVVGRmMyNUNMRWRCUVVjNWJrSXNRMEZCU0N4RFFVRkdMRVZCUVZGRExFMUJRVWxQTEVOQlFVb3NTVUZCVDFRc1JVRkJSU3RLTEZsQlFVWXNRMEZCWlN4UFFVRm1MRVZCUVhWQ2RFb3NRMEZCZGtJc1EwRkJaanRCUVVGNVF6dEJRVUZ1VER0QlFVRnZUQ3hqUVVGUExFbEJRVkE3UVVGQldTeExRVUY0ZDBJc1JVRkJlWGRDTUc1Q0xHRkJRVmtzY1VKQlFWTXhiMElzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhWUVVGSlRTeFhRVUZUVUN4RFFVRlVMSGxEUVVGVFFTeERRVUZVTEVOQlFVb3NRMEZCWlN4UFFVRk5MR0ZCUVZjc1QwRkJUME1zUTBGQmJFSXNTVUZCY1VJc1lVRkJWMDBzUTBGQmFFTXNSMEZCYTBOT0xFbEJRVVVzUzBGQlMzVnZRaXhSUVVGTUxFTkJRV040YjBJc1EwRkJaQ3hEUVVGR0xFZEJRVzFDTEV0QlFVdDViMElzVjBGQlRDeERRVUZwUW5wdlFpeERRVUZxUWl4RFFVRnlSQ3hIUVVGNVJYRkRMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRnFSU3hEUVVGaUxFbEJRV2RDTEV0QlFVdHpSQ3hKUVVGTUxFTkJRVlVzVlVGQlV5OURMRU5CUVZRc1JVRkJWenRCUVVGRE9FSXNWVUZCUlN4SlFVRkdMRVZCUVZGeGJVSXNWMEZCVWl4RFFVRnZRakZ2UWl4RlFVRkZNa0lzU1VGQlJpeERRVUZQTEVsQlFWQXNSVUZCV1hCQ0xFTkJRVm9zUlVGQlkyZHZRaXhIUVVGSExFbEJRVWdzUTBGQlpDeEZRVUYxUW5SdlFpeERRVUYyUWl4RFFVRndRaXhGUVVFNFEwRXNRMEZCT1VNN1FVRkJhVVFzVDBGQmRrVXNRMEZCYUVJc1IwRkJlVVlzUzBGQlMzRkVMRWxCUVV3c1EwRkJWU3haUVVGVk8wRkJRVU1zV1VGQlNYSkVMRU5CUVVvc1JVRkJUVThzUTBGQlRpeEZRVUZSUXl4RFFVRlNMRVZCUVZWSExFTkJRVllzUTBGQldTeEpRVUZITEdGQlFWZE1MRU5CUVdRc1JVRkJaMEk3UVVGQlEwTXNZMEZCUlN4RFFVRkdMRVZCUVVsRExFbEJRVVUwUWl4RlFVRkZMRWxCUVVZc1EwRkJUaXhGUVVGamVrSXNTVUZCUlZvc1JVRkJSV3RQTEV0QlFVWXNRMEZCVVdoSUxFTkJRVklzUzBGQldTeEZRVUUxUWl4RFFVRXJRaXhQUVVGTmFrZ3NTVUZCUlZjc1JVRkJSVW9zUjBGQlJpeERRVUZTTzBGQlFXVkRMR05CUVVWcmIwSXNVVUZCUml4RFFVRlhNVzlDTEVOQlFWZ3NTVUZCWTFFc1JVRkJSV2R2UWl4WFFVRkdMRU5CUVdONGIwSXNRMEZCWkN4RFFVRmtMRWRCUVN0Q1VTeEZRVUZGSzI1Q0xGRkJRVVlzUTBGQlYzWnZRaXhEUVVGWUxFTkJRUzlDTzBGQlFXWTdRVUZCTkVRc1UwRkJOVWNzVFVGQmFVZ3NTMEZCU3l4RFFVRk1MRXRCUVZORUxFTkJRVlFzU1VGQldTeGpRVUZaVHl4RFFVRjRRaXhMUVVFMFFrNHNTVUZCUlhOdlFpeEhRVUZITEVsQlFVZ3NRMEZCUml4RlFVRlhkRzlDTEV0QlFVZHhTU3hGUVVGRmQwNHNSMEZCUml4RFFVRk5MRWxCUVU0c1JVRkJWeXhsUVVGWUxFVkJRVEpDTjFZc1EwRkJNMElzUTBGQlpDeEZRVUUwUXl4TFFVRkxjVXNzV1VGQlRDeEpRVUZ0UWl4TFFVRkxRU3haUVVGTUxFTkJRV3RDTEU5QlFXeENMRVZCUVRCQ2Nrc3NTMEZCUjBRc1RVRkJTU3hEUVVGRExFTkJRVklzUjBGQlZTeEZRVUZXTEVkQlFXRnpTU3hGUVVGRmNFWXNSMEZCUml4RFFVRk5MRWxCUVU0c1JVRkJWeXhsUVVGWUxFdEJRVFpDTEVWQlFYQkZMRU5CUVROR08wRkJRVzlMTEU5QlFYUlVMRU5CUVhoTE8wRkJRV2RsTEV0QlFXeDRReXhGUVVGdGVFTjViRUlzVlVGQlV5eHJRa0ZCVXpOdlFpeERRVUZVTEVWQlFWYzdRVUZCUXl4VlFVRkpReXhEUVVGS08wRkJRVUVzVlVGQlRVMHNRMEZCVGp0QlFVRkJMRlZCUVZGRExFbEJRVVVzUTBGQlZpeERRVUZaVUN4SlFVRkZMRTFCUVVsRUxFTkJRVW9zUjBGQlRTeEhRVUZTTEVOQlFWa3NUMEZCVFU4c1NVRkJSU3hMUVVGTFF5eEhRVUZNTEVOQlFWSTdRVUZCYTBJc1dVRkJSeXhOUVVGSlJDeEZRVUZGYTBvc1VVRkJUaXhKUVVGblFpeERRVUZETEUxQlFVazJaU3hIUVVGSFF5eEhRVUZIYUc5Q0xFTkJRVWdzUTBGQlNDeERRVUZLTEVkQlFXTXNSMEZCWml4RlFVRnZRbGtzVDBGQmNFSXNRMEZCTkVKc1FpeERRVUUxUWl4SlFVRXJRaXhEUVVGRExFTkJRVzVFTEVWQlFYRkVMRTlCUVUwc1EwRkJReXhEUVVGUU8wRkJRWFpGTEU5QlFXZEdMRTlCUVUwc1EwRkJReXhEUVVGUU8wRkJRVk1zUzBGQmVqVkRMRVZCUVZvc1JVRkJkelpETEVsQlFVa3liMElzUzBGQlJ5eExRVUZRTEVOQlFXRjJiVUlzUlVGQlJVTXNSVUZCUml4RFFVRkxNRUlzVFVGQlRDeERRVUZaTEVWQlFVTTJhMElzUzBGQlNTeGhRVUZUTjI5Q0xFTkJRVlFzUlVGQlZ6dEJRVUZETEZWQlFVbERMRU5CUVVvN1FVRkJRU3hWUVVGTlRTeERRVUZPTzBGQlFVRXNWVUZCVVVNc1EwRkJVanRCUVVGQkxGVkJRVlZETEVsQlFVVXNTMEZCU3l4RFFVRk1MRU5CUVZvc1EwRkJiMEk3UVVGQlF5eFpRVUZIWjBRc1ZVRkJWVlFzVFVGQllpeEZRVUZ2UWl4UFFVRlBlRU1zU1VGQlJUWkNMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRnFSU3hEUVVGaUxFTkJRVVlzUlVGQmEwSXNTMEZCUzNORUxFbEJRVXdzUTBGQlZTeFZRVUZUTDBNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zWTBGQlNVVXNRMEZCU2l4RFFVRk5MRTFCUVVrc1MwRkJTMmRLTEZGQlFWUXNTMEZCYjBKb1NpeEpRVUZGUkN4SlFVRkZVaXhGUVVGRk1rSXNTVUZCUml4RFFVRlBMRWxCUVZBc1JVRkJXWEJDTEVOQlFWb3NSVUZCWXpoQ0xFVkJRVVVzU1VGQlJpeEZRVUZSZDIxQ0xFZEJRVklzUlVGQlpDeERRVUZHTEVkQlFTdENOMjlDTEVOQlFXcERMRVZCUVcxRExGRkJRVTFUTEVOQlFVNHNSMEZCVVVFc1NVRkJSU3hGUVVGV0xFZEJRV0VzV1VGQlZTeFBRVUZQUVN4RFFVRnFRaXhIUVVGdFFrRXNTMEZCUnl4RlFVRjBRaXhIUVVGNVFqQkVMRTFCUVUxRExFOUJRVTRzUTBGQll6TkVMRU5CUVdRc1RVRkJiVUpCTEVsQlFVVTBRaXhGUVVGRmEwSXNSMEZCUml4RFFVRk5PVU1zUTBGQlRpeEZRVUZSTEZWQlFWTlVMRU5CUVZRc1JVRkJWenRCUVVGRExHMUNRVUZQTEZGQlFVMUJMRU5CUVU0c1IwRkJVU3hGUVVGU0xFZEJRVmRCTEVsQlFVVXNSVUZCY0VJN1FVRkJkVUlzVjBGQk0wTXNRMEZCY2tJc1EwRkJla1VzUlVGQk5FbERMRWxCUVVWdlF5eEZRVUZGZVcxQ0xGRkJRVVlzUTBGQlZ5eExRVUZMYkd0Q0xFbEJRV2hDTEV0QlFYVkNka01zUlVGQlJYbHRRaXhSUVVGR0xFTkJRVmNzUzBGQlN6RmxMRkZCUVV3c1EwRkJZMjVGTEZkQlFXUXNSVUZCV0N4RFFVRnlTeXhGUVVFMlRXaEhMRXRCUVVjc1UwRkJVVUVzUTBGQldDeEpRVUZqTEV0QlFVc3NRMEZCVEN4TFFVRlRRU3hGUVVGRk5sWXNSMEZCUml4RFFVRk5MRWxCUVU0c1JVRkJWM0pXTEVOQlFWZ3NSVUZCWVN4UFFVRmlMRU5CUVhaQ0xFdEJRU3RETEV0QlFVdG5UU3hMUVVGTUxFZEJRVmRvVFN4RFFVRXhSQ3hEUVVGcVR6dEJRVUVyVWl4VFFVRXpWQ3hEUVVGNlFpeERRVUZ6Vml4SlFVRkhRU3hEUVVGSUxFVkJRVXNzVDBGQlQxSXNTVUZCUlc5RExFVkJRVVY1YlVJc1VVRkJSaXhEUVVGWGNtOUNMRVZCUVVWdFJTeEpRVUZpTEV0QlFXOUNka01zUlVGQlJYbHRRaXhSUVVGR0xFTkJRVmR5YjBJc1JVRkJSVEpLTEZGQlFVWXNRMEZCVjI1RkxGZEJRVmdzUlVGQldDeERRVUYwUWl4RlFVRXlSR2hITEV0QlFVY3NVMEZCVVVFc1EwRkJXQ3hKUVVGakxFdEJRVXNzUTBGQlRDeE5RVUZWVFN4SlFVRkZUaXhGUVVGRmFVUXNSMEZCUml4RFFVRk5la01zUTBGQlRpeEZRVUZSTEU5QlFWSXNRMEZCV2l4RFFVRmtMRWRCUVRSRFJpeERRVUUxUXl4SlFVRXJRMEVzU1VGQlJVVXNSVUZCUldkTkxFdEJRVW9zUlVGQlZTeFpRVUZWTEU5QlFVOXNUU3hEUVVGcVFpeEhRVUZ0UWtFc1JVRkJSV2xGTEU5QlFVWXNRMEZCVlc5clFpeEZRVUZXTEVWQlFXRXNSVUZCWWl4RFFVRnVRaXhIUVVGdlF5eFJRVUZOY205Q0xFTkJRVTRzUjBGQlVTeEZRVUZTTEVkQlFWZEJMRU5CUVhoSExFTkJRV3hGTzBGQlFUWkxPMEZCUVVNc1MwRkJibXRDTEVWQlFWb3NSMEZCYTJ4Q09FSXNSVUZCUlRKQ0xFMUJRVVlzUTBGQlV5eEZRVUZET0d0Q0xGVkJRVk1zUlVGQlEzUlNMRkZCUVU4c1JVRkJRM1JWTEV0QlFVa3NZVUZCVTJ4RUxFTkJRVlFzUlVGQlZ6dEJRVUZETEdOQlFVbERMRWxCUVVWdlF5eEZRVUZGYTBzc1NVRkJSaXhEUVVGUFpTeEpRVUZRTEVOQlFWbDBUaXhEUVVGYUxFVkJRV01zVDBGQlpDeERRVUZPTEVOQlFUWkNMRTlCUVU4c1VVRkJUVU1zUTBGQlRpeEhRVUZSUVN4RFFVRlNMRWRCUVZWeGIwSXNSMEZCUjJwdFFpeEZRVUZGVGl4SlFVRkdMRU5CUVU4dlFpeERRVUZRTEVOQlFVZ3NRMEZCYWtJN1FVRkJLMElzVTBGQk4wVXNSVUZCVWl4RlFVRjFSbk5TTEZGQlFVOHNSVUZCUTNCUExFdEJRVWtzWVVGQlUyeEVMRU5CUVZRc1JVRkJWenRCUVVGRExHTkJRVWxETEVOQlFVbzdRVUZCUVN4alFVRk5UU3hEUVVGT08wRkJRVUVzWTBGQlVVTXNRMEZCVWp0QlFVRkJMR05CUVZWRExFbEJRVVZVTEVWQlFVVjNha0lzVDBGQlpEdEJRVUZCTEdOQlFYTkNOV2xDTEVsQlFVVmFMRVZCUVVWNVVDeGhRVUV4UWp0QlFVRkJMR05CUVhkRE0wOHNTVUZCUlN4cFFrRkJaV1FzUlVGQlJUUkZMRWxCUVRORU8wRkJRVUVzWTBGQlowVTFSQ3hKUVVGRlJpeEpRVUZGTEVsQlFVWXNSMEZCVHl4RlFVRjZSVHRCUVVGQkxHTkJRVFJGU1N4SlFVRkZTaXhKUVVGRlJpeEpRVUZGTEVOQlFVb3NSMEZCVFVnc1JVRkJSWFZETEUxQlFYUkdMRU5CUVRaR0xFdEJRVWw0UXl4SlFVRkZTU3hKUVVGRkxFTkJRVVlzUjBGQlNVMHNRMEZCU2l4SFFVRk5TaXhKUVVGRlJpeERRVUZHTEVkQlFVa3NRMEZCYUVJc1JVRkJhMEpLTEVsQlFVVlZMRU5CUVhCQ0xFVkJRWE5DVml4SFFVRjBRanRCUVVFd1FpeG5Ra0ZCUjBRc1NVRkJSVVVzUlVGQlJVUXNRMEZCUml4RFFVRkdMRVZCUVU4c1EwRkJRMFFzUlVGQlJXbFFMRkZCUVVZc1NVRkJXV2hRTEUxQlFVbEpMRU5CUVdwQ0xFdEJRWEZDTEVOQlFVTk1MRVZCUVVVNFNTeFJRVUY0UWl4TFFVRnRReXhEUVVGRE9Va3NSVUZCUlRKQ0xGVkJRVVlzUTBGQllXMUlMRkZCUVdRc1NVRkJkMElzUTBGQlF6bERMRVZCUVVWb1J5eEZRVUZGTWtJc1ZVRkJTaXhGUVVGbExGVkJRV1lzUTBGQk5VUXNRMEZCVml4RlFVRnJSenRCUVVGRExHdENRVUZIYWtNc1NVRkJSVzlETEVWQlFVVTVRaXhEUVVGR0xFVkJRVXR6YjBJc1IwRkJUQ3hGUVVGR0xFVkJRV0V2YmtJc1EwRkJhRUlzUlVGQmEwSXNUMEZCVDJJc1EwRkJVQ3hEUVVGVFpTeEZRVUZGUXl4SlFVRkdMRU5CUVU5b1FpeERRVUZRTzBGQlFWVTdRVUZCYkVzc1YwRkJhMHNzVDBGQlQyVXNRMEZCVUR0QlFVRlRMRk5CUVhwU0xFVkJRVEJTT0ZVc1MwRkJTU3hoUVVGVE9WWXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eGpRVUZKVFN4RFFVRktPMEZCUVVFc1kwRkJUVU1zUTBGQlRqdEJRVUZCTEdOQlFWRkRMRWxCUVVWVUxFVkJRVVYzYWtJc1QwRkJXanRCUVVGQkxHTkJRVzlDTldsQ0xFbEJRVVY1UWl4RlFVRkZhVVFzVTBGQlJpeERRVUZaY2tZc1EwRkJXaXhEUVVGMFFqdEJRVUZCTEdOQlFYRkRZU3hKUVVGRlRDeEZRVUZGZFVNc1RVRkJla01zUTBGQlowUXNUMEZCVFd4RExFZEJRVTQ3UVVGQlZVNHNaMEpCUVVWRExFVkJRVVZMTEVOQlFVWXNRMEZCUml4RlFVRlBMRU5CUVVOT0xFVkJRVVZuVUN4UlFVRkdMRWRCUVZkdVRpeEZRVUZGYTBRc1QwRkJSaXhEUVVGVmJFUXNSVUZCUlhsdFFpeFJRVUZHTEVOQlFWZDBVaXhOUVVGWUxFTkJRV3RDZEZVc1IwRkJiRUlzUTBGQmMwSXhReXhEUVVGMFFpeERRVUZXTEVWQlFXMURTU3hEUVVGdVF5eEpRVUZ6UXl4RFFVRkRMRU5CUVc1RUxFMUJRWGRFVEN4SlFVRkZMRU5CUVVNc1EwRkJNMFFzUTBGQlVEdEJRVUZXTEZkQlFTdEZMRTlCUVU5QkxFMUJRVWxRTEVWQlFVVjVVQ3hoUVVGR0xFZEJRV2RDTEVOQlFVTXNRMEZCY2tJc1IwRkJkMEkzVHl4RFFVRXZRanRCUVVGcFF5eFRRVUUxWXl4RlFVRTVSaXhGUVVGV0xFVkJRVlFzUTBGQmJHeENMRVZCUVc5d1EzbENMRVZCUVVWcFFpeEpRVUZHTEVOQlFVOHNRMEZCUXl4UFFVRkVMRVZCUVZNc1ZVRkJWQ3hEUVVGUUxFVkJRVFJDTEZsQlFWVTdRVUZCUTJwQ0xFMUJRVVY1YlVJc1VVRkJSaXhEUVVGWExFbEJRVmdzU1VGQmFVSXNSVUZCUTJoVUxFdEJRVWtzWVVGQlV6bFdMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNXVUZCUjJ0RkxFMUJRVTFETEU5QlFVNHNRMEZCWTI1RkxFTkJRV1FzUTBGQlNDeEZRVUZ2UWl4UFFVRlBSQ3hGUVVGRmRWQXNUMEZCUml4SFFVRlZiRTRzUlVGQlJXdEVMRTlCUVVZc1EwRkJWV3hFTEVWQlFVVnlReXhEUVVGR0xFVkJRVXMyYjBJc1IwRkJUQ3hGUVVGV0xFVkJRWEZDTlc5Q0xFTkJRWEpDTEVsQlFYZENMRU5CUVVNc1EwRkJNVU03UVVGQk5FTXNUMEZCYmtZc1JVRkJha0lzUlVGQmMwY3lRaXhGUVVGRk9HeENMRTlCUVVZc1MwRkJXWEpzUWl4RlFVRkZlVzFDTEZGQlFVWXNRMEZCVnl4SlFVRllMRVZCUVdsQ05XeENMRWRCUVdwQ0xFZEJRWEZDTEZWQlFWTnNSQ3hEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQTEZOQlFVOUJMRVZCUVVWeFN5eFpRVUZHTEVOQlFXVXNUMEZCWml4RFFVRlFMRWRCUVN0Q0xFbEJRUzlDTEVkQlFXOURja3NzUlVGQlJYbE5MRXRCUVRkRE8wRkJRVzFFTEV0QlFXaEhMRU5CUVhSSE8wRkJRWGROTEVkQlFTOVBMRU5CUVhCd1F5eERRVUZ4TkVNc1NVRkJTWE5qTEV0QlFVY3NhVU5CUVZBc1EwRkJlVU14YlVJc1JVRkJSVEpDTEUxQlFVWXNRMEZCVXpOQ0xFVkJRVVZ6Vnl4TFFVRllMRVZCUVdsQ0xFVkJRVU54UXl4VFFVRlJMR2xDUVVGVEwyRXNRMEZCVkN4RlFVRlhUU3hEUVVGWUxFVkJRV0ZGTEVOQlFXSXNSVUZCWlVjc1EwRkJaaXhGUVVGcFFqdEJRVUZETEZWQlFVbEZMRU5CUVVvN1FVRkJRU3hWUVVGTlJTeERRVUZPTzBGQlFVRXNWVUZCVVVVc1EwRkJVanRCUVVGQkxGVkJRVlZGTEVOQlFWWTdRVUZCUVN4VlFVRlpReXhEUVVGYU8wRkJRVUVzVlVGQlkwa3NRMEZCWkR0QlFVRkJMRlZCUVdkQ1F5eERRVUZvUWp0QlFVRkJMRlZCUVd0Q1JTeEpRVUZGTEVOQlFVTnVRaXhMUVVGSFJDeERRVUZLTEVOQlFYQkNPMEZCUVVFc1ZVRkJNa0p4UWl4SlFVRkZUaXhGUVVGRlNTeEpRVUZHTEVOQlFVOHhRaXhEUVVGUUxFVkJRVk1zVFVGQlZDeEpRVUZwUWtFc1JVRkJSVEpGTEVsQlFXNUNMRWRCUVhkQ00wVXNRMEZCY2tRN1FVRkJRU3hWUVVGMVJHMURMRWxCUVVWaUxFVkJRVVZKTEVsQlFVWXNRMEZCVHpGQ0xFTkJRVkFzUlVGQlV5eFhRVUZVTEVsQlFYTkNRU3hGUVVGRmNWb3NVMEZCUml4RFFVRlpkRlFzUzBGQldpeERRVUZyUWl4SFFVRnNRaXhEUVVGMFFpeEhRVUUyUXl4RlFVRjBSeXhEUVVGNVJ5eEpRVUZIYUVZc1NVRkJSVVVzU1VGQlJWUXNTVUZCUlVFc1MwRkJSMFFzUTBGQlZDeEZRVUZYTEUxQlFVbERMRVZCUVVWblNpeFJRVUZPTEVsQlFXZENMRTFCUVVsb1NpeEZRVUZGWjBvc1VVRkJkRUlzU1VGQlowTXNRMEZCUTNObUxFZEJRVWMxWlN4SlFVRklMRU5CUVZGMFNTeEpRVUZGVVN4RlFVRkZjMWNzUzBGQlJpeERRVUZSU3l4VFFVRnNRaXhEUVVGcVF5eExRVUZuUlc1WUxFVkJRVVZXTEU5QlFVWXNRMEZCVlN4SFFVRldMRWxCUVdVc1EwRkJReXhEUVVGb1FpeExRVUZ2UW1sQ0xFbEJRVVZRTEVWQlFVVnRSU3hMUVVGR0xFTkJRVkVzUjBGQlVpeERRVUZHTEVWQlFXVnVSU3hKUVVGRlR5eEZRVUZGZVVrc1MwRkJSaXhGUVVGcVFpeEZRVUV5UW5wSkxFVkJRVVV3UWl4SlFVRkdMRVZCUVM5RExFZEJRWGxFZWtNc1NVRkJSVkVzUlVGQlJWWXNUMEZCUml4RFFVRlZMRWRCUVZZc1NVRkJaU3hEUVVGbUxFbEJRV3RDTEU5QlFVdFZMRU5CUVd4R0xFVkJRVzlHTlVJc1NVRkJSVUVzUlVGQlJXOURMRVZCUVVWblF5eFBRVUZLTEVsQlFXRndSU3hEUVVGaUxFZEJRV1VzU1VGQlNXOURMRVZCUVVWeFdTeExRVUZPTEVOQlFWazNXU3hEUVVGYUxFVkJRV01zYjBKQlFXbENOVUlzUTBGQmFrSXNlVU5CUVdsQ1FTeERRVUZxUWl4TlFVRnZRa0VzUTBGQmJFTXNRMEZCY2tjc1JVRkJNRWxCTEVWQlFVVXJiMElzVTBGQlJpeEhRVUZaY0c5Q0xFbEJRVVVzUTBGQlJpeEhRVUZKTEVOQlFURktMRVZCUVRSS1dDeEZRVUZGY1Zvc1UwRkJSaXhIUVVGWmJGZ3NSVUZCUlc5SkxFbEJRVVlzUTBGQlR5eEhRVUZRTEVOQlFYaExMRVZCUVc5TWRrc3NSVUZCUld0aExGVkJRVVlzUjBGQllXeGhMRVZCUVVWeFdpeFRRVUZHTEVkQlFWa3NTVUZCU1doVExFMUJRVW9zUTBGQlZ5eFpRVUZWYkVZc1JVRkJSVzlKTEVsQlFVWXNRMEZCVHl4bFFVRlFMRU5CUVZZc1IwRkJhME1zVTBGQk4wTXNRMEZCV2l4SFFVRnZSU3hKUVVGeVVTeEZRVUV3VVhaTExFVkJRVVZ2WVN4TlFVRkdMRWRCUVZNc1MwRkJTeXhEUVVGNFVpeEZRVUV3VW5CaExFVkJRVVUwVHl4TlFVRkdMRXRCUVZjMVR5eEZRVUZGTkU4c1RVRkJSaXhIUVVGVGNFOHNRMEZCY0VJc1EwRkJNVklzUlVGQmFWUkdMRWxCUVVVc1VVRkJUVUVzUTBGQlRpeEhRVUZSTEVOQlFVTk9MRU5CUVVRc1EwRkJVaXhIUVVGWmIwTXNSVUZCUldsRUxGTkJRVVlzUTBGQldTOUZMRU5CUVZvc1JVRkJZeXhEUVVGRFRpeERRVUZFTEVOQlFXUXNRMEZCTDFRc1JVRkJhMVo1UWl4SlFVRkZWeXhGUVVGRmMxY3NTMEZCUml4RFFVRlJUeXhQUVVGU0xFTkJRV2RDY2xnc1EwRkJhRUlzUzBGQmIwSXNSVUZCZUZjc1JVRkJNbGRxUWl4TFFVRkhMRU5CUVVOakxFVkJRVVZ6V2l4UFFVRk9MRWxCUVdWMFdpeEZRVUZGYzFvc1QwRkJSaXhEUVVGVmVGZ3NTMEZCVml4RFFVRm5RaTlETEVOQlFXaENMRVZCUVd0Q1JpeERRVUZzUWl4TlFVRjFRaXhEUVVGRExFTkJRV3hrTEVOQlFXUXNSVUZCYldVN1FVRkJReXhaUVVGSExFTkJRVU5MTEVOQlFVUXNTVUZCU1N4RFFVRkRZeXhGUVVGRmNWb3NVVUZCVUN4SlFVRnBRaXhEUVVGRE1Wa3NSVUZCUlhkRExGRkJRVVlzUTBGQlYzQkZMRU5CUVZnc1EwRkJja0lzUlVGQmJVTTdRVUZCUXl4bFFVRkpWeXhKUVVGRlRTeEZRVUZGZVZnc1dVRkJSaXhKUVVGblFuUllMRU5CUVd4Q0xFVkJRVzlDYTI1Q0xFZEJRVWMxWlN4SlFVRklMRU5CUVZFdlNTeEpRVUZGVXl4RFFVRldMRTFCUVdWaUxFbEJRVVZCTEVWQlFVVnJRaXhWUVVGdVFpeERRVUY0UWl4RlFVRjFSR3hDTEVOQlFYWkVMRVZCUVhsRVFTeEpRVUZGUVN4RlFVRkZhMElzVlVGQk4wUTdRVUZCZDBWT0xHTkJRVVZZTEVsQlFVWXNRMEZCVDBRc1EwRkJVQ3hIUVVGVlJTeEpRVUZGUml4RFFVRmFPMEZCUVhoRkxGZEJRWE5HUlN4UFFVRkxWQ3hGUVVGRmJVb3NZVUZCUml4SlFVRnBRbkJLTEVOQlFYUkNMRXRCUVRCQ2IwSXNSVUZCUlZnc1NVRkJSaXhEUVVGUFF5eEZRVUZGTWtzc1YwRkJSaXhKUVVGbE0wc3NSVUZCUlN0dVFpeFpRVUZxUWl4SlFVRXJRbXB3UWl4RFFVRjBReXhEUVVFeFFqdEJRVUZ0UlN4aFFVRkZMRU5CUVVZc1EwRkJTU3hQUVVGTkxFTkJRVU5uUWl4SlFVRkZXU3hGUVVGRlpDeEhRVUZHTEVOQlFVZ3NTMEZCV1N4RFFVRkRZaXhGUVVGRk9Gb3NiMEpCUVVZc1JVRkJia0k3UVVGQk5FTTVXaXhaUVVGRk1rVXNTVUZCUml4SFFVRlBPVVFzU1VGQlJTeERRVUZHTEVkQlFVbE5MRU5CUVVvc1IwRkJUVTBzUlVGQlJUQllMRkZCUVVZc1NVRkJXWFpZTEVOQlFYcENMRVZCUVRKQ1NpeEpRVUZGTEVOQlFVTTJSeXhGUVVGRmNFWXNSMEZCUml4RFFVRk5iRU1zUTBGQlRpeEZRVUZSTEZGQlFWSXNTMEZCYlVJc1JVRkJjRUlzUlVGQmQwSm1MRVZCUVVVeVJTeEpRVUV4UWl4TFFVRnBRekJFTEVWQlFVVndSaXhIUVVGR0xFTkJRVTFzUXl4RFFVRk9MRVZCUVZFc1VVRkJVaXhEUVVFNVJDeEZRVUZuUmxNc1MwRkJSMEVzUlVGQlJTdENMRXRCUVVZc1EwRkJVWGhETEVOQlFWSXNSVUZCVlZRc1EwRkJWaXhEUVVGdVJpeEZRVUZuUjJ0Q0xFbEJRVVZLTEV0QlFVZE1MRVZCUVVWTExFTkJRVVlzUTBGQmNrY3NSVUZCTUVkSkxFdEJRVWRCTEVWQlFVVXJRaXhMUVVGTUxFbEJRVmx2UlN4RlFVRkZOVWNzUTBGQlJpeERRVUZhTEV0QlFXMUNaaXhGUVVGRmIyRXNUVUZCUml4SFFVRlROVmtzUlVGQlJTdENMRXRCUVVZc1EwRkJVWGhETEVOQlFWSXNSVUZCVlZRc1EwRkJWaXhEUVVGVUxFVkJRWE5DVGl4RlFVRkZiMkVzVFVGQlJpeExRVUZYTEVOQlFVTXNRMEZCV2l4SlFVRmxjR0VzUlVGQlJYRmhMR05CUVVZc1JVRkJlRVFzUTBGQk1VYzdRVUZCTlVNc1UwRkJhMDhzVDBGQlQzSmhMRVZCUVVVeVJTeEpRVUZHTEVkQlFVOHZReXhEUVVGUUxFVkJRVk5xUWl4TFFVRkhXQ3hGUVVGRmIySXNhMEpCUVVZc1JVRkJTQ3hKUVVFeVFqTmFMRVZCUVVWdFZ5eFJRVUZHTEVsQlFWbHVWeXhGUVVGRmJWY3NVVUZCUml4RFFVRlhjbFVzUzBGQldDeERRVUZwUWpWQ0xFVkJRVVVyUlN4SFFVRkdMRVZCUVdwQ0xFVkJRWGxDY0Vjc1EwRkJla0lzVFVGQk9FSXNRMEZCUXl4RFFVRjBSU3hKUVVGNVJTeERRVUZEY1Vnc1JVRkJSVzVJTEVOQlFVWXNRMEZCTVVVc1NVRkJaMFpaTEV0QlFVZG5RaXhGUVVGRk5FSXNWVUZCUml4RFFVRmhlRVFzUlVGQlJXOUNMRU5CUVVZc1EwRkJZaXhEUVVGSUxFbEJRWFZDTEVOQlFVTlJMRVZCUVVWM1F5eFJRVUZHTEVOQlFWZHdSU3hEUVVGWUxFTkJRWGhDTEV0QlFYZERVeXhKUVVGRlZDeEZRVUZGV1N4RFFVRkdMRU5CUVVZc1JVRkJUMGdzVFVGQlNWUXNSVUZCUlZrc1EwRkJSaXhKUVVGTExFbEJRVlFzUTBGQlVDeEZRVUZ6UW1kQ0xFVkJRVVZ6Vnl4TFFVRkdMRU5CUVZGTExGTkJRVklzUjBGQmEwSnVXQ3hEUVVGNFF5eEZRVUV3UTNCQ0xFVkJRVVZ2UWl4RFFVRkdMRWRCUVRGRExFVkJRV2xFVVN4RlFVRkZjMWNzUzBGQlJpeERRVUZSU3l4VFFVRlNMRWRCUVd0Q0xFdEJRVXNzUTBGQmVFVXNSVUZCTUVVNVdDeE5RVUZKVkN4RlFVRkZXU3hEUVVGR0xFbEJRVXRJTEVOQlFWUXNRMEZCYkVnc1EwRkJla1lzUlVGQmQwNXFRaXhGUVVGRmIyRXNUVUZCYWs4N1FVRkJkMDg3UVVGQlF5eExRVUZ3ZGtNc1JVRkJjWFpETms4c1ZVRkJVeXhyUWtGQlUyeHdRaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVUwc1EwRkJZaXhGUVVGbE8wRkJRVU1zVlVGQlNVTXNTVUZCUlRaQ0xFVkJRVVV5UWl4TlFVRkdMRU5CUVZNc1NVRkJTVE5DTEVWQlFVVnhXU3hMUVVGT0xFVkJRVlFzUlVGQmNVSnVZU3hEUVVGeVFpeEZRVUYxUWl4RlFVRkRjVVVzVFVGQlN6VkZMRU5CUVU0c1JVRkJVWGxpTEdGQlFWa3NRMEZCUXl4RFFVRnlRaXhGUVVGMlFpeERRVUZPTEVOQlFYTkVjRm9zUlVGQlJYTlhMRXRCUVVZc1EwRkJVWEZETEU5QlFWSXNRMEZCWjBKNFlTeERRVUZvUWl4RlFVRnJRaXhKUVVGc1FpeEZRVUYxUWxBc1EwRkJka0k3UVVGQk1FSXNTMEZCT1RGRExFVkJRV3BDTEVkQlFXc3pRMjlETEVWQlFVVkRMRVZCUVVZc1EwRkJTekJDTEUxQlFVd3NRMEZCV1N4RlFVRkRaMWdzVTBGQlVTeHBRa0ZCVTJoaUxFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVNc1lVRkJUeXhMUVVGTGNVUXNTVUZCVEN4RFFVRlZMRmxCUVZVN1FVRkJRMnBDTEZWQlFVVnpWeXhMUVVGR0xFTkJRVkZ4UXl4UFFVRlNMRU5CUVdkQ2FHSXNRMEZCYUVJc1JVRkJhMEpETEVOQlFXeENMRVZCUVc5Q0xFbEJRWEJDTzBGQlFUQkNMRTlCUVM5RExFTkJRVkE3UVVGQmQwUXNTMEZCTDBVc1JVRkJaMFpyY0VJc1owSkJRV1VzZDBKQlFWTnVjRUlzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhWUVVGSlRTeEpRVUZGTEV0QlFVc3NRMEZCVEN4RFFVRk9MRU5CUVdNc1NVRkJSMEVzUTBGQlNDeEZRVUZMTEU5QlFVODRRaXhGUVVGRmMxY3NTMEZCUml4RFFVRlJjVU1zVDBGQlVpeERRVUZuUW1oaUxFTkJRV2hDTEVWQlFXdENReXhEUVVGc1FpeEZRVUZ2UWswc1EwRkJjRUlzUlVGQmMwSXNRMEZCUXl4RFFVRjJRaXhEUVVGUU8wRkJRV2xETEV0QlFXcExMRVZCUVZvc1EwRkJiRE5ETEVWQlFXdHBSRGhDTEVWQlFVVnBRaXhKUVVGR0xFTkJRVThzZDB4QlFYZE1NRU1zUzBGQmVFd3NRMEZCT0V3c1IwRkJPVXdzUTBGQlVDeEZRVUV3VFN4VlFVRlRhRWNzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJRMjlETEUxQlFVVkRMRVZCUVVZc1EwRkJTM0pETEVOQlFVd3NTVUZCVVN4VlFVRlRSQ3hEUVVGVUxFVkJRVmRQTEVOQlFWZ3NSVUZCWVR0QlFVRkRMR0ZCUVU5clJDeFZRVUZWVkN4TlFVRldMRWRCUVdsQ0xFTkJRV3BDTEVkQlFXMUNMRXRCUVVzeVlTeEZRVUZNTEVOQlFWRXhaQ3hEUVVGU0xFVkJRVlVzU1VGQlZpeEZRVUZsUkN4RFFVRm1MRVZCUVdsQ1R5eERRVUZxUWl4RFFVRnVRaXhIUVVGMVF5eExRVUZMZVdFc1QwRkJUQ3hEUVVGaEwyRXNRMEZCWWl4RFFVRTVRenRCUVVFNFJDeExRVUZ3Ump0QlFVRnhSaXhIUVVFM1V5eERRVUZzYVVRc1JVRkJhVEZFYjBNc1JVRkJSVU1zUlVGQlJpeERRVUZMTUVJc1RVRkJUQ3hEUVVGWkxFVkJRVU52YkVJc1QwRkJUU3hsUVVGVGNIQkNMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNZVUZCVHl4TFFVRkxjMlFzVlVGQlRDeERRVUZuUW5aa0xFTkJRV2hDTEVWQlFXMUNkMlFzVlVGQmJrSXNRMEZCT0VKMlpDeExRVUZIUkN4RFFVRnFReXhEUVVGUU8wRkJRVEpETEV0QlFXaEZMRVZCUVZvc1EwRkJhakZFTEVWQlFXYzJSRFJDTEVWQlFVVjVia0lzVDBGQlJpeEhRVUZWTEdWQlFXTnljRUlzUTBGQmVEZEVMRVZCUVRBM1JEUkNMRVZCUVVWNWJrSXNUMEZCUml4SlFVRlhhRzVDTEVWQlFVVnBRaXhKUVVGR0xFTkJRVThzUlVGQlF6Sk1MRTlCUVUwc1UwRkJVQ3hGUVVGcFFtZE5MRTFCUVVzc1ZVRkJkRUlzUlVGQlVDeEZRVUY1UXl4VlFVRlRhbUlzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhSUVVGSlRTeEpRVUZGTEZOQlFVWkJMRU5CUVVVc1EwRkJVMUFzUTBGQlZDeEZRVUZYTzBGQlFVTnhReXhSUVVGRmMxY3NTMEZCUml4RFFVRlJkVkVzVVVGQlVpeERRVUZwUW1wd1FpeERRVUZxUWl4RlFVRnRRa1FzUlVGQlJUWlBMRTFCUVhKQ0xFVkJRVFJDZUUwc1JVRkJSWE5YTEV0QlFVWXNRMEZCVVdkQ0xFZEJRVklzUTBGQldUTmFMRU5CUVZvc1EwRkJOVUk3UVVGQk5FTXNTMEZCT1VRc1EwRkJLMFJ4UXl4RlFVRkZjMWNzUzBGQlJpeERRVUZSVHl4UFFVRlNMRU5CUVdkQ2Fsb3NRMEZCYUVJc1NVRkJiVUlzUlVGQlEzVmFMRTlCUVUwc2FVSkJRVlU3UVVGQlF5eFpRVUZKYUZvc1NVRkJSU3hMUVVGTGIwb3NZVUZCVEN4SlFVRnZRaXhKUVVFeFFqdEJRVUZCTEZsQlFTdENia29zU1VGQlJUWklMRVZCUVVWNVRpeE5RVUZHTEVOQlFWTjJWaXhEUVVGVUxFVkJRVmRRTEVOQlFWZ3NRMEZCYWtNc1EwRkJLME5STEV0QlFVZEVMRVZCUVVWMVRDeG5Ra0ZCUml4RFFVRnRRaTlNTEVOQlFXNUNMRVZCUVhGQ1R5eERRVUZ5UWl4RlFVRjFRaXhEUVVGRExFTkJRWGhDTEVOQlFVZ3NSVUZCT0VJclNDeEZRVUZGZVU0c1RVRkJSaXhEUVVGVGRsWXNRMEZCVkN4RlFVRlhVQ3hEUVVGWUxFVkJRV0VzUTBGQlExRXNTMEZCUnl4RFFVRktMRWxCUVU4c1EwRkJjRUlzUTBGQk9VSTdRVUZCY1VRc1QwRkJkRWdzUlVGQmRVaG5XaXhWUVVGVExHOUNRVUZWTzBGQlFVTXNXVUZCU1dwYUxFbEJRVVVzUzBGQlMyOUtMR0ZCUVV3c1NVRkJiMElzU1VGQk1VSTdRVUZCUVN4WlFVRXJRbTVLTEVsQlFVVTJTQ3hGUVVGRmVVNHNUVUZCUml4RFFVRlRkbFlzUTBGQlZDeEZRVUZYVUN4RFFVRllMRWxCUVdNc1EwRkJMME1zUTBGQmFVUlJMRWxCUVVVMlNDeEZRVUZGZVU0c1RVRkJSaXhEUVVGVGRsWXNRMEZCVkN4RlFVRlhVQ3hEUVVGWUxFVkJRV0ZSTEVOQlFXSXNRMEZCUml4SlFVRnRRa1FzUlVGQlJTdFZMRzFDUVVGR0xFTkJRWE5DZGxZc1EwRkJkRUlzUlVGQmQwSlBMRU5CUVhoQ0xFVkJRVEJDTEVOQlFVTXNRMEZCTTBJc1IwRkJPRUlyU0N4RlFVRkZPRXNzVFVGQlJpeERRVUZUTlZNc1EwRkJWQ3hGUVVGWFVDeERRVUZZTEVOQlFXcEVPMEZCUVdkRkxFOUJRVFZRTEVWQlFXNUNPMEZCUVdsU0xFZEJRWFpaTEVOQlFYSTRSQ3hEUVVFNE1FVXNTVUZCU1hGd1FpeExRVUZIZEhCQ0xFVkJRVVU0VHl4UlFVRlVPMEZCUVVFc1RVRkJhMEo1WVN4TFFVRkhiRzVDTEVWQlFVVnpSQ3hIUVVGR0xFVkJRWEpDTzBGQlFVRXNUVUZCTmtJMmFrSXNTMEZCUnl4SlFVRm9ReXhEUVVGeFEyNXVRaXhGUVVGRmIyNUNMRkZCUVVZc1IwRkJWeXhWUVVGVGVIQkNMRU5CUVZRc1JVRkJWenRCUVVGRExGRkJRVWxOTEVOQlFVb3NRMEZCVFN4SlFVRkhMRU5CUVVOT0xFTkJRVVFzU1VGQlNTeFpRVUZWTEU5QlFVOUJMRU5CUVhoQ0xFVkJRVEJDTEU5QlFVOHNTVUZCVUN4RFFVRlpMRWxCUVVjN1FVRkJRMDBzVlVGQlJ5eEpRVUZKVUN4RlFVRkZNSEJDTEZOQlFVNHNSVUZCUkN4RFFVRnJRa01zWlVGQmJFSXNRMEZCYTBNeGNFSXNRMEZCYkVNc1JVRkJiME1zVlVGQmNFTXNRMEZCUmp0QlFVRnJSQ3hMUVVGMFJDeERRVUZ6UkN4UFFVRk5UeXhEUVVGT0xFVkJRVkU3UVVGQlEwUXNWVUZCUlN4TFFVRkxMRU5CUVZBN1FVRkJVeXhaUVVGUFFTeExRVUZITEVOQlFVTkJMRVZCUVVWNVNpeHZRa0ZCUml4RFFVRjFRaXhoUVVGMlFpeEZRVUZ6UTJoSUxFMUJRVEZETEVsQlFXdEVXQ3hGUVVGRmNVTXNTMEZCUml4RFFVRlJMR3RDUVVGblFucEZMRU5CUVhoQ0xFTkJRV3hFTEVWQlFUWkZUU3hEUVVGd1JqdEJRVUZ6Uml4SFFVRnFUeXhEUVVGclR5eEpRVUZKY1hCQ0xFdEJRVWNzVDBGQlVEdEJRVUZCTEUxQlFXVkRMRXRCUVVjc1VVRkJiRUk3UVVGQlFTeE5RVUV5UWtNc1MwRkJSeXgxUTBGQk9VSTdRVUZCUVN4TlFVRnpSVU1zUzBGQlJ5eHZRMEZCZWtVc1EwRkJPRWNzVTBGQlUwTXNSVUZCVkN4RFFVRlphSEZDTEVOQlFWb3NSVUZCWTBNc1EwRkJaQ3hGUVVGblFrMHNRMEZCYUVJc1JVRkJhMEpETEVOQlFXeENMRVZCUVc5Q08wRkJRVU1zVVVGQlNVTXNRMEZCU2l4RFFVRk5MRWxCUVVjd1JDeE5RVUZOUXl4UFFVRk9MRU5CUVdOdVJTeERRVUZrTEVOQlFVZ3NSVUZCYjBKdlF5eEZRVUZGYVVJc1NVRkJSaXhEUVVGUGNrUXNRMEZCVUN4RlFVRlRMRlZCUVZOQkxFTkJRVlFzUlVGQlYxRXNRMEZCV0N4RlFVRmhPMEZCUVVOR0xGZEJRVWR4Y0VJc1IwRkJSM3BtTEVsQlFVZ3NRMEZCVVc1TExFTkJRVklzUTBGQlNDeEhRVUZqVVN4RlFVRkZVaXhEUVVGR0xFVkJRVWxUTEVOQlFVb3NRMEZCWkN4SFFVRnhRblZ3UWl4SFFVRkhhSEZDTEVsQlFVVXNSMEZCUml4SlFVRlBMRzlDUVVGcFFsTXNRMEZCYWtJc2VVTkJRV2xDUVN4RFFVRnFRaXhOUVVGdlFpeFJRVUZOUVN4RFFVRXhRaXhIUVVFMFFsSXNRMEZCTlVJc1IwRkJPRUlzUlVGQmNrTXNTVUZCZVVNc1IwRkJOVU1zUlVGQlowUlJMRU5CUVdoRUxFVkJRV3RFUml4RFFVRnNSQ3hGUVVGdlJFTXNRMEZCY0VRc1EwRkJja0k3UVVGQk5FVXNTMEZCYmtjc1JVRkJjRUlzUzBGQk9FZ3NTVUZCUjBRc1MwRkJSeXhoUVVGWE9FSXNSVUZCUlhWRExFbEJRVVlzUTBGQlR6TkZMRU5CUVZBc1EwRkJha0lzUlVGQk1rSlBMRVZCUVVWU0xFTkJRVVlzUlVGQlNVTXNRMEZCU2l4RlFVRXpRaXhMUVVGMVF5eExRVUZKVVN4RFFVRktMRWxCUVZOU0xFTkJRVlE3UVVGQlZ5dHdRaXhUUVVGSGFIRkNMRWxCUVVVc1IwRkJSaXhIUVVGTlV5eERRVUZPTEVkQlFWRXNSMEZCV0N4RlFVRmxVaXhGUVVGRlVTeERRVUZHTEVOQlFXWXNSVUZCYjBKR0xFTkJRWEJDTEVWQlFYTkNReXhEUVVGMFFqdEJRVUZZTzBGQlFXOURMRXRCUVVWNWNFSXNTMEZCUml4SFFVRlJMRlZCUVZOcWNVSXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eFJRVUZKVFN4RFFVRktPMEZCUVVFc1VVRkJUVU1zU1VGQlJTeEZRVUZTTzBGQlFVRXNVVUZCVjBNc1NVRkJSU3hUUVVGR1FTeERRVUZGTEVOQlFWTlVMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNWVUZCU1Uwc1NVRkJSVGhDTEVWQlFVVTBRaXhWUVVGR0xFTkJRV0ZvUlN4RFFVRmlMRWxCUVdkQ1FTeEhRVUZvUWl4SFFVRnZRa0VzUTBGQk1VSXNRMEZCTkVKUExFVkJRVVZCTEVWQlFVVjNReXhOUVVGS0xFbEJRVmxyYmtJc2JVSkJRVzFDYkhGQ0xFTkJRVzVDTEVsQlFYTkNMRWRCUVhSQ0xFZEJRVEJDYTNGQ0xHMUNRVUZ0UWl4UlFVRk5NM0JDTEVOQlFVNHNSMEZCVVN4RlFVRlNMRWRCUVZkQkxFTkJRVGxDTEVOQlFYUkRPMEZCUVhWRkxFdEJRVGxJTEVOQlFTdElMRWxCUVVjMFJDeE5RVUZOUXl4UFFVRk9MRU5CUVdOd1JTeERRVUZrTEV0QlFXdENRU3hGUVVGRk9FTXNUVUZCUml4SlFVRlZMRU5CUVVOVUxFVkJRVVUyUWl4aFFVRkdMRU5CUVdkQ2JFVXNRMEZCYUVJc1EwRkJhRU1zUlVGQmJVUnhReXhGUVVGRmFVSXNTVUZCUml4RFFVRlBkRVFzUTBGQlVDeEZRVUZUTEZsQlFWVTdRVUZCUTFNc1VVRkJSU3hMUVVGTGVWVXNTVUZCVUN4RlFVRlpMRXRCUVV0NlNTeExRVUZxUWp0QlFVRjNRaXhMUVVFMVF5eEZRVUZ1UkN4TFFVRnpSeXhMUVVGSmJFMHNRMEZCU2l4SlFVRlRVQ3hEUVVGVU8wRkJRVmRuY1VJc1UwRkJSM3B3UWl4RFFVRklMRVZCUVV0UUxFVkJRVVZQTEVOQlFVWXNRMEZCVEN4RlFVRlZUaXhEUVVGV0xFVkJRVmxSTEVOQlFWbzdRVUZCV0N4TFFVRXdRaXhQUVVGUFJDeEZRVUZGWjBzc1NVRkJSaXhEUVVGUExFZEJRVkFzUTBGQlVEdEJRVUZ0UWl4SFFVRjRVeXhGUVVGNVUyNUpMRVZCUVVWRExFVkJRVVlzUTBGQlN6QkNMRTFCUVV3c1EwRkJXU3hGUVVGRGJXMUNMRmRCUVZVc2NVSkJRVlU3UVVGQlF5eGhRVUZQT1c1Q0xFVkJRVVUwYmtJc1MwRkJSaXhEUVVGUkxFdEJRVXRITEdOQlFVd3NSVUZCVWl4RFFVRlFPMEZCUVhORExFdEJRVFZFTEVWQlFUWkVRU3huUWtGQlpTd3dRa0ZCVlR0QlFVRkRMR0ZCUVU4c1MwRkJTemR0UWl4SFFVRk1MRU5CUVZNc1dVRkJWVHRCUVVGRExGbEJRVWwyUkN4SlFVRkZjVU1zUlVGQlJXbG9RaXhKUVVGR0xFTkJRVThzU1VGQlVDeEZRVUZaTEZWQlFWb3NRMEZCVGl4RFFVRTRRaXhQUVVGUGRHcENMRWxCUVVWeFF5eEZRVUZGYVVRc1UwRkJSaXhEUVVGWmRFWXNRMEZCV2l4RFFVRkdMRWRCUVdsQ0xFbEJRWGhDTzBGQlFUWkNMRTlCUVM5RkxFVkJRV2xHYzAwc1RVRkJha1lzUTBGQmQwWXNXVUZCVlR0QlFVRkRMRmxCUVVsMFRTeEpRVUZGTEV0QlFVczBSU3hKUVVGWUxFTkJRV2RDTEU5QlFVOHNTMEZCUzNOUkxFbEJRVXdzU1VGQlZ5eERRVUZETjFNc1JVRkJSU3hKUVVGR0xFVkJRVkYxVUN4RlFVRlNMRU5CUVZjc1YwRkJXQ3hEUVVGYUxFbEJRWEZEYlZrc1IwRkJSelZtTEVsQlFVZ3NRMEZCVVN4TFFVRkxReXhSUVVGaUxFTkJRWEpETEVsQlFUWkVMRU5CUVVNd1ppeEhRVUZITTJZc1NVRkJTQ3hEUVVGUmJrc3NRMEZCVWl4RFFVRTVSQ3hMUVVFeVJTeExRVUZMZFZBc1QwRkJUQ3hKUVVGakxFTkJRVU40UlN4SFFVRkhXaXhKUVVGSUxFTkJRVkZ1U3l4RFFVRlNMRU5CUVRGR0xFTkJRVkE3UVVGQk5rY3NUMEZCYUU4c1JVRkJhMDkxUkN4SFFVRnNUeXhEUVVGelR5eFZRVUZUZGtRc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4WlFVRkpUU3hKUVVGRk9FSXNSVUZCUlN4SlFVRkdMRVZCUVZGM2JVSXNSMEZCVWl4RlFVRk9MRU5CUVc5Q0xFOUJRVThzVVVGQlRYUnZRaXhEUVVGT0xFZEJRVkVzU1VGQlVpeEhRVUZoTkVRc1RVRkJUVU1zVDBGQlRpeERRVUZqTjBRc1EwRkJaQ3hKUVVGcFFqaENMRVZCUVVWclFpeEhRVUZHTEVOQlFVMW9SQ3hEUVVGT0xFVkJRVkVzVlVGQlUxQXNRMEZCVkN4RlFVRlhPMEZCUVVNc2FVSkJRVTBzUlVGQlEydFdMRTFCUVV0cVZpeEZRVUZGYVZZc1NVRkJVaXhGUVVGaGVra3NUMEZCVFhwTkxFVkJRVVYzUlN4UFFVRkdMRU5CUVZWeGJFSXNSVUZCVml4RlFVRmhMRTFCUVdJc1EwRkJia0lzUlVGQlRqdEJRVUVyUXl4VFFVRnVSU3hEUVVGcVFpeEhRVUZ6Uml4RlFVRkRNMVVzVFVGQlMycFdMRVZCUVVWcFZpeEpRVUZTTEVWQlFXRjZTU3hQUVVGTmJFMHNSVUZCUldsRkxFOUJRVVlzUTBGQlZYRnNRaXhGUVVGV0xFVkJRV0VzVFVGQllpeERRVUZ1UWl4RlFVRXhSenRCUVVGdFNpeFBRVUV6V2l4RlFVRTJXak50UWl4SFFVRTNXaXhGUVVGUU8wRkJRVEJoTEV0QlFXcG5RaXhGUVVGYUxFTkJRWHBUTEVOQlFYbDZRaXhKUVVGSmJXNUNMRXRCUVVjc1RVRkJVRHRCUVVGQkxFMUJRV05ETEV0QlFVY3NUVUZCYWtJN1FVRkJRU3hOUVVGM1FrTXNTMEZCUnl4bFFVRXpRanRCUVVGQkxFMUJRVEpEUXl4TFFVRkhMRFJDUVVFNVF6dEJRVUZCTEUxQlFUSkZReXhMUVVGSExESkVRVUU1UlR0QlFVRkJMRTFCUVRCSlF5eExRVUZITEdkQ1FVRTNTVHRCUVVGQkxFMUJRVGhLUXl4TFFVRkhMRTlCUVdwTE8wRkJRVUVzVFVGQmVVdERMRXRCUVVjc1JVRkJOVXM3UVVGQlFTeE5RVUVyUzBNc1MwRkJSeXhGUVVGc1REdEJRVUZCTEUxQlFYRk1ReXhMUVVGSExFdEJRVXN2Y0VJc1RVRkJUQ3hEUVVGWkxFZEJRVm9zUTBGQmVFdzdRVUZCUVN4TlFVRjVUV2R4UWl4TFFVRkhkbkZDTEVWQlFVVnpRaXhoUVVGR0xFTkJRV2RDTEVkQlFXaENMRU5CUVRWTkxFTkJRV2xQYVhCQ0xFZEJRVWN6WWl4SlFVRklMRWRCUVZGcllTeEhRVUZIYkdFc1NVRkJXQ3hEUVVGblFpeFRRVUZUTkdJc1JVRkJWQ3hEUVVGWmFISkNMRU5CUVZvc1JVRkJZenRCUVVGRExGZEJRVThzVlVGQlUwTXNRMEZCVkN4RlFVRlhUU3hEUVVGWUxFVkJRV0U3UVVGQlF5eHJRa0ZCVlN4UFFVRlBUaXhEUVVGcVFpeExRVUZ4UWswc1NVRkJSVTRzUTBGQlJpeEZRVUZKUVN4SlFVRkZMRWRCUVROQ0xFVkJRV2RETEVsQlFVbFBMRU5CUVVvN1FVRkJRU3hWUVVGTlF5eEpRVUZGTEVOQlFWSTdRVUZCUVN4VlFVRlZSeXhKUVVGRldDeEZRVUZGWjBjc1YwRkJSaXhIUVVGblFtbEpMRXRCUVdoQ0xFTkJRWE5DYUVnc1EwRkJkRUlzUzBGQk1FSXNSVUZCZEVNc1EwRkJlVU1zU1VGQlJ6ZEZMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRXhSQ3hEUVVGaUxFTkJRVWdzUlVGQmJVSXNUMEZCVFVNc1NVRkJSVWtzUlVGQlJVZ3NSMEZCUml4RFFVRlNPMEZCUVdVc1owSkJRVTFFTEVWQlFVVXNRMEZCUml4RFFVRk9MRWxCUVZsQkxFbEJRVVZCTEVWQlFVVkxMRXRCUVVZc1EwRkJVU3hEUVVGU0xFdEJRVmtzUjBGQlpDeEZRVUZyUWl4RFFVRkRZaXhGUVVGRlVTeERRVUZHTEVsQlFVdFNMRVZCUVVWUkxFTkJRVVlzUzBGQlRTeEZRVUZhTEVWQlFXZENOazBzVDBGQmFFSXNRMEZCZDBJNVRTeERRVUY0UWl4RFFVRTVRaXhKUVVFd1JDeERRVUZEVUN4RlFVRkZVU3hEUVVGR0xFbEJRVXRTTEVWQlFVVlJMRU5CUVVZc1MwRkJUU3hGUVVGYUxFVkJRV2RDVXl4SlFVRm9RaXhEUVVGeFFsWXNRMEZCY2tJc1EwRkJNVVE3UVVGQlpqdEJRVUZwUnl4TFFVRnNUanRCUVVGdFRpeFpRVUZUTUhGQ0xFVkJRVlFzUTBGQldXcHlRaXhEUVVGYUxFVkJRV05ETEVOQlFXUXNSVUZCWjBKTkxFTkJRV2hDTEVWQlFXdENReXhEUVVGc1FpeEZRVUZ2UWp0QlFVRkRMRkZCUVVsRExFbEJRVVVzUlVGQlRqdEJRVUZCTEZGQlFWTkhMRWxCUVVWYUxFMUJRVWsyY1VJc1JVRkJaaXhEUVVGclFpeFRRVUZUTDNCQ0xFTkJRVlFzUTBGQlYwVXNRMEZCV0N4RlFVRmhPMEZCUVVNc1ZVRkJTVVVzUTBGQlNpeERRVUZOTEU5QlFVOVVMRVZCUVVWUExFTkJRVVlzU1VGQlN5eERRVUZETEVOQlFVNHNSVUZCVVhGQ0xFVkJRVVZwUWl4SlFVRkdMRU5CUVU5MFJDeEZRVUZGWjBJc1EwRkJSaXhMUVVGTkxFVkJRV0lzUlVGQlowSXNWVUZCVTJoQ0xFTkJRVlFzUlVGQlYyZENMRU5CUVZnc1JVRkJZVHRCUVVGRExGbEJRVWxKTEVsQlFVVktMRVZCUVVWbUxFTkJRVVlzUlVGQlNVMHNRMEZCU2l4RlFVRk5ReXhEUVVGT0xFTkJRVTRzUTBGQlpTeFBRVUZOTEZsQlFWVXNUMEZCVDFrc1EwRkJha0lzU1VGQmIwSlNMRU5CUVhCQ0xFbEJRWFZDU0N4RlFVRkZWeXhEUVVGR0xFTkJRWFpDTEVkQlFUUkNVaXhKUVVGRkxFVkJRVVZOTEVsQlFVVkZMRU5CUVVvc1EwRkJSaXhIUVVGVExFdEJRVXNzUTBGQk1VTXNTVUZCTmtOdVFpeEZRVUZGYVhKQ0xGTkJRVVlzUTBGQldUZGtMRTlCUVZvc1EwRkJiMEpxVFN4RFFVRndRaXhIUVVGMVFrNHNSVUZCUlUwc1EwRkJSaXhEUVVGMlFpeEZRVUUwUWl4RFFVRkRMRU5CUVRGRkxFTkJRVTQ3UVVGQmJVWXNUMEZCYUVrc1EwRkJVaXhGUVVFd1NVWXNRMEZCYWtvN1FVRkJiVW9zV1VGQlQwb3NSVUZCUldJc1JVRkJSV2x5UWl4VFFVRkdMRU5CUVZrc1EwRkJXaXhEUVVGR0xFdEJRVzFDTEVOQlFVTjZjVUlzUlVGQlJTeEhRVUZHTEVOQlFVUXNTVUZCVTBzc1JVRkJSU3hIUVVGR0xFTkJRVzVETzBGQlFUQkRMRmxCUVZOeGNVSXNSVUZCVkN4RFFVRlpibkpDTEVOQlFWb3NSVUZCWTBNc1EwRkJaQ3hGUVVGblFqdEJRVUZETEZGQlFVbE5MRU5CUVVvN1FVRkJRU3hSUVVGTlF5eERRVUZPTzBGQlFVRXNVVUZCVVVNc1NVRkJSVFJDTEVWQlFVVXJiMElzV1VGQlJpeERRVUZsUXl4WFFVRm1MRWxCUVRSQ0xFVkJRWFJETEVOQlFYbERMRXRCUVVrNWNVSXNRMEZCU2l4SlFVRlRUaXhEUVVGVU8wRkJRVmNzVjBGQlN5eERRVUZNTEV0QlFWTkJMRVZCUVVWTkxFTkJRVVlzUTBGQlZDeExRVUZuUWl4RFFVRkRSU3hGUVVGRlJpeERRVUZHTEVsQlFVdFFMRU5CUVV3c1IwRkJUMUVzVFVGQlNVRXNTVUZCUlN4RlFVRk9MRU5CUVZJc1JVRkJiVUpFTEVOQlFXNUNMRWxCUVhOQ1RpeEZRVUZGVFN4RFFVRkdMRU5CUVhSRE8wRkJRVmdzUzBGQmRVUXNUMEZCVDBNc1MwRkJSelpDTEVWQlFVVXlRaXhOUVVGR0xFTkJRVk1zUTBGQlF5eERRVUZXTEVWQlFWbG9SU3hEUVVGYUxFVkJRV05STEVOQlFXUXNRMEZCU0N4RlFVRnZRbElzUTBGQk0wSTdRVUZCTmtJc1dVRkJVM055UWl4RlFVRlVMRU5CUVZsMGNrSXNRMEZCV2l4RlFVRmpReXhEUVVGa0xFVkJRV2RDVFN4RFFVRm9RaXhGUVVGclFqdEJRVUZETEZGQlFVbERMRU5CUVVvN1FVRkJRU3hSUVVGTlF5eERRVUZPTzBGQlFVRXNVVUZCVVVjc1EwRkJVanRCUVVGQkxGRkJRVlZGTEVOQlFWWTdRVUZCUVN4UlFVRlpSU3hKUVVGRmFFSXNSVUZCUldkVExGRkJRV2hDTzBGQlFVRXNVVUZCZVVJNVVTeEpRVUZGYkVJc1JVRkJSV3R5UWl4VFFVRTNRaXhEUVVGMVF5eFBRVUZOTEZGQlFVMW9jVUlzUlVGQlJTeERRVUZHTEVOQlFWbzdRVUZCYVVKQkxGRkJRVVV5U2l4TFFVRkdMRWxCUVZVc1MwRkJTeXhEUVVGTUxFdEJRVk55U3l4RFFVRlVMRXRCUVdGQkxFbEJRVVZTTEVWQlFVVjFja0lzVVVGQlJpeEpRVUZaZEhKQ0xFVkJRVVYxY2tJc2FVSkJRVVlzUTBGQmIwSXNZMEZCY0VJc1EwRkJNMElzUTBGQlZqdEJRVUZxUWl4TFFVRXlSaXhKUVVGSGFISkNMRU5CUVVnc1JVRkJTeXhMUVVGSlF5eERRVUZLTEVsQlFWTlBMRU5CUVZRN1FVRkJWeXhWUVVGSFFTeEZRVUZGVUN4RFFVRkdMRXRCUVUxUExFVkJRVVZRTEVOQlFVWXNSVUZCU3pCS0xFbEJRVXdzUTBGQlZUTktMRU5CUVZZc1EwRkJWQ3hGUVVGelFqdEJRVUZEVlN4VlFVRkZiVTBzVDBGQlJpeERRVUZWTlUwc1EwRkJWaXhGUVVGaE8wRkJRVTA3UVVGQmNrUXNTMEZCY1VRc1NVRkJSMU1zUlVGQlJTeERRVUZHTEV0QlFVOVlMRU5CUVZZc1JVRkJXVXNzU1VGQlJVMHNSVUZCUlN4RFFVRkdMRU5CUVVZc1EwRkJXaXhMUVVGMVFqdEJRVUZETEZkQlFVbFVMRU5CUVVvc1NVRkJVMFlzUTBGQlZDeEZRVUZYTzBGQlFVTXNXVUZCUnl4RFFVRkRWeXhGUVVGRkxFTkJRVVlzUTBGQlJDeEpRVUZQYkVJc1JVRkJSWGx5UWl4VlFVRkdMRU5CUVdGb2NrSXNTVUZCUlN4SFFVRkdMRWRCUVUxVExFVkJRVVVzUTBGQlJpeERRVUZ1UWl4RFFVRldMRVZCUVcxRE8wRkJRVU5PTEdOQlFVVklMRU5CUVVZc1EwRkJTVHRCUVVGTkxHVkJRVWxMTEVsQlFVVk1MRU5CUVU0N1FVRkJVeXhYUVVGRlJ5eExRVUZIUlN4RFFVRk1PMEZCUVU4c1UwRkJSMFlzUTBGQlNDeEZRVUZMTEU5QlFVOUJMRTFCUVVsTkxFVkJRVVVzUTBGQlJpeERRVUZLTEVsQlFWVkJMRVZCUVVWdFRTeFBRVUZHTEVOQlFWVjZUU3hEUVVGV0xFTkJRVllzUlVGQmRVSk1MRVZCUVVWTExFTkJRVVlzUTBGQk9VSTdRVUZCYlVNc1dVRkJVemh4UWl4RlFVRlVMRU5CUVZreGNrSXNRMEZCV2l4RlFVRmpReXhEUVVGa0xFVkJRV2RDVFN4RFFVRm9RaXhGUVVGclFrTXNRMEZCYkVJc1JVRkJiMEk3UVVGQlF5eFJRVUZKUXl4RFFVRktPMEZCUVVFc1VVRkJUVWNzUTBGQlRqdEJRVUZCTEZGQlFWRkZMRU5CUVZJN1FVRkJRU3hSUVVGVlJTeERRVUZXTzBGQlFVRXNVVUZCV1VVc1EwRkJXanRCUVVGQkxGRkJRV05GTEVsQlFVVXNSVUZCYUVJN1FVRkJRU3hSUVVGdFFrTXNTVUZCUlhKQ0xFVkJRVVZyY2tJc1UwRkJSaXhEUVVGWmNuRkNMRXRCUVZvc1JVRkJja0lzUTBGQmVVTXNTVUZCUjFFc1JVRkJSU3hEUVVGR0xFTkJRVWdzUlVGQlVTeExRVUZKVUN4RFFVRktMRWxCUVZOa0xFVkJRVVY1Y2tJc1ZVRkJXRHRCUVVGelFuSnhRaXhSUVVGRlRpeEZRVUZGYlVZc1YwRkJSaXhGUVVGR0xFbEJRVzFDYWtjc1JVRkJSWGx5UWl4VlFVRkdMRU5CUVdFemNVSXNRMEZCWWl4RFFVRnVRanRCUVVGMFFpeExRVUY1UkVZc1NVRkJSVk1zUlVGQlJYZEtMRXRCUVVZc1JVRkJSaXhEUVVGWkxFOUJRVTFxU3l4RFFVRk9PMEZCUVZFc1ZVRkJSMW9zUlVGQlJUSnlRaXhqUVVGR0xFTkJRV2xDTDNGQ0xFTkJRV3BDTEUxQlFYTkNUQ3hGUVVGRlVDeEZRVUZGTW5KQ0xHTkJRVVlzUTBGQmFVSXZjVUlzUTBGQmFrSXNRMEZCUml4SlFVRjFRbGdzUTBGQk4wTXNSMEZCWjBRc1EwRkJRMmxDTEVOQlFVUXNTVUZCU1ZZc1EwRkJTaXhKUVVGUFVpeEZRVUZGTkhKQ0xGVkJRVlFzUzBGQmMwSXpja0lzU1VGQlJVUXNSVUZCUlRSeVFpeFZRVUZHTEVOQlFXRXpja0lzUTBGQllpeEZRVUZsUkN4RlFVRkZObkpDTEZGQlFXcENMRU5CUVhoQ0xFTkJRV2hFTEVWQlFXOUhNM0ZDTEVsQlFVVk9MRU5CUVhSSExFVkJRWGRIUVN4SlFVRkZVeXhGUVVGRmQwb3NTMEZCUml4RlFVRTNSeXhGUVVGMVNDeEpRVUZITEZGQlFVMXFTeXhEUVVGVUxFVkJRVmRCTEVsQlFVVk5MRU5CUVVZc1EwRkJXQ3hMUVVGdlFpeEpRVUZITEZGQlFVMUJMRU5CUVU0c1NVRkJVMEVzVFVGQlNVNHNRMEZCYUVJc1JVRkJhMEk3UVVGQlF5eFpRVUZIUlN4SlFVRkZUU3hGUVVGRlJpeEpRVUZGTEVkQlFVWXNSMEZCVFU0c1EwRkJVaXhMUVVGWlVTeEZRVUZGTEU5QlFVdFNMRU5CUVZBc1EwRkJaQ3hGUVVGM1FpeERRVUZEUlN4RFFVRTFRaXhGUVVFNFFpeExRVUZKVEN4RFFVRktMRWxCUVZOWExFTkJRVlE3UVVGQlZ5eGpRVUZIU2l4SlFVRkZVQ3hGUVVGRmRVWXNTMEZCUml4RFFVRlJMRWRCUVZJc1EwRkJSaXhGUVVGbGFFWXNSVUZCUlN4RFFVRkdMRTFCUVU5S0xFTkJRVkFzUzBGQlYwVXNTVUZCUlUwc1JVRkJSVVlzU1VGQlJTeEhRVUZHTEVkQlFVMUdMRVZCUVVVc1EwRkJSaXhEUVVGU0xFdEJRV1ZKTEVWQlFVVXNUMEZCUzBvc1JVRkJSU3hEUVVGR0xFTkJRVkFzUTBGQk5VSXNRMEZCYkVJc1JVRkJORVE3UVVGQlEwWXNhMEpCUVVrc1EwRkJReXhEUVVGTUxFZEJRVTlCTEVsQlFVVk5MRVZCUVVWWUxFTkJRVVlzUTBGQlZDeEhRVUZqVnl4RlFVRkZXQ3hEUVVGR0xFMUJRVThzUTBGQlF5eERRVUZTTEV0QlFWbEhMRWxCUVVWSkxFVkJRVVVzUTBGQlJpeERRVUZHTEVWQlFVOUxMRVZCUVVWblRTeFBRVUZHTEVOQlFWVnlUU3hGUVVGRkxFTkJRVVlzUTBGQlZpeERRVUZ1UWl4RFFVRmtMRU5CUVd0RU8wRkJRVTA3UVVGQmFFa3NVMEZCWjBrc1NVRkJSMFlzVFVGQlNTeERRVUZETEVOQlFWSXNSVUZCVlN4SlFVRkhRU3hMUVVGSFpDeEZRVUZGTEZGQlFVWXNRMEZCVGl4RlFVRnJRa01zU1VGQlJXRXNSVUZCUldJc1EwRkJSaXhEUVVGR0xFTkJRV3hDTEV0QlFUaENMRWxCUVVjN1FVRkJRMEVzWTBGQlJXRXNSVUZCUldJc1EwRkJSaXhEUVVGR08wRkJRVThzVTBGQldDeERRVUZYTEU5QlFVMXpRaXhEUVVGT0xFVkJRVkU3UVVGQlF5eHBRa0ZCVFN4RlFVRkRlVk1zVDBGQlRTeGhRVUZRTEVWQlFYRkNkRkFzVDBGQlRUVkVMRWxCUVVWVExFTkJRVVlzUjBGQlNTeDNRa0ZCYzBKTUxFTkJRWFJDTEVkQlFYZENMRTFCUVhoQ0xFZEJRU3RDVGl4RFFVRTVSQ3hGUVVGT08wRkJRWFZGTzBGQlFVTTdRVUZCZUdNc1MwRkJkMk1zVDBGQlRTeEZRVUZEYjFRc1QwRkJUU3hUUVVGUUxFVkJRV2xDYlVNc1RVRkJTMnhYTEVOQlFYUkNMRVZCUVU0N1FVRkJLMElzUzBGQlJTdEVMRTFCUVVZc1EwRkJVeXhGUVVGRE9HNUNMRkZCUVU4c1EwRkJVaXhGUVVGVlF5eGpRVUZoTEVWQlFYWkNMRVZCUVRCQ1F5eE5RVUZMTEVWQlFTOUNMRVZCUVd0RFdpeGpRVUZoTEVWQlFVTmhMRXRCUVVrelF5eEhRVUZIYkdFc1NVRkJVaXhGUVVGaGVFc3NUVUZCU3l4TFFVRnNRaXhGUVVGM1FuTnVRaXhUUVVGUmVrSXNSMEZCUjNSblFpeEpRVUZJTEVOQlFWRnRaaXhIUVVGSE5rTXNVVUZCV0N4RFFVRm9ReXhGUVVGeFJIWlVMRkZCUVU4c1EwRkJReXhEUVVFM1JDeEZRVUVyUkhkVUxHRkJRVmtzUTBGQlF5eERRVUUxUlN4RlFVRTRSVU1zVDBGQlRTeERRVUZETEVOQlFYSkdMRVZCUVhWR1F5eGhRVUZaTEd0RVFVRnVSeXhGUVVGelNrTXNVMEZCVVN4RlFVRkRMRXRCUVVsNlFpeEZRVUZNTEVWQlFWRXZiMElzVFVGQlN5eFpRVUZpTEVWQlFUQkNkMk1zVFVGQlN5eFhRVUV2UWl4RlFVRXlRMmxQTEV0QlFVa3NNa0pCUVM5RExFVkJRVEpGUXl4TlFVRkxMRzFEUVVGb1JpeEZRVUU1U2l4RlFVRnRVbnBoTEZWQlFWTXNSVUZCUTNkaExFdEJRVWtzVTBGQlRDeEZRVUZsYWs4c1RVRkJTeXhSUVVGd1FpeEZRVUUyUW10UExFMUJRVXNzVlVGQmJFTXNSVUZCTlZJc1JVRkJNRlZrTEdkQ1FVRmxMRVZCUVVOaExFdEJRVWtzWVVGQlRDeEZRVUZ0UW5weFFpeE5RVUZMTEdOQlFYaENMRVZCUVhWRE1IRkNMRTFCUVVzc1kwRkJOVU1zUlVGQmVsWXNSVUZCY1Zwb1FpeFpRVUZYTEVWQlFVTXNWVUZCVXpWcFFpeE5RVUZXTEVWQlFXbENMR0ZCUVZrc1EwRkJReXhEUVVFNVFpeEZRVUZuUXl4aFFVRlpiMDRzUzBGQlMwTXNTMEZCYWtRc1JVRkJkVVFzV1VGQlZ6ZFVMRVZCUVVWdmJrSXNVVUZCY0VVc1JVRkJhR0VzUlVGQk9HVTBRaXhoUVVGWkxFVkJRVU5aTEV0QlFVa3NRMEZCUXl4RFFVRk9MRVZCUVZGVExGTkJRVkVzUTBGQlF5eERRVUZxUWl4RlFVRXhaaXhGUVVFdlF5eEZRVUU0YWtKRExGZEJRVlVzYlVKQlFWTXpjMElzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdFN1FVRkJReXhoUVVGUFFTeEpRVUZGYTNKQ0xFZEJRVWRCTEVkQlFVZHVja0lzUTBGQlNDeEZRVUZMY1VNc1JVRkJSU3R2UWl4WlFVRlFMRU5CUVVnc1JVRkJkMEp1Y2tJc1EwRkJlRUlzUTBGQlJpeEhRVUUyUW10eVFpeEhRVUZIT1c5Q0xFVkJRVVVyYjBJc1dVRkJUQ3hGUVVGclFuQnlRaXhEUVVGc1FpeERRVUZ3UXp0QlFVRjVSQ3hMUVVFdmIwSXNSVUZCWjNCQ05ITkNMR1ZCUVdNMVFpeEhRVUZIU2l4RlFVRklMRU5CUVRsd1FpeEZRVUZ4Y1VKcFF5eGxRVUZqTjBJc1IwRkJSMGdzUlVGQlNDeERRVUZ1Y2tJc1JVRkJNSEpDYVVNc1RVRkJTeXhqUVVGVE4zTkNMRU5CUVZRc1JVRkJWMDBzUTBGQldDeEZRVUZoTzBGQlFVTXNNRUpCUVdsQ1RpeERRVUZxUWl4NVEwRkJhVUpCTEVOQlFXcENMRTlCUVhGQ1RTeEpRVUZGVGl4RFFVRkdMRVZCUVVsQkxFbEJRVVVzUzBGQlN5eERRVUZvUXl4SFFVRnRRMDBzU1VGQlJVRXNTMEZCUnl4RlFVRjRReXhEUVVFeVF5eEpRVUZKUlN4RFFVRktPMEZCUVVFc1ZVRkJUVWNzUTBGQlRqdEJRVUZCTEZWQlFWRkZMRU5CUVZJN1FVRkJRU3hWUVVGVlJTeERRVUZXTzBGQlFVRXNWVUZCV1VVc1EwRkJXanRCUVVGQkxGVkJRV05GTEVOQlFXUTdRVUZCUVN4VlFVRm5Ra01zUTBGQmFFSTdRVUZCUVN4VlFVRnJRa1VzUTBGQmJFSTdRVUZCUVN4VlFVRnZRa1VzUTBGQmNFSTdRVUZCUVN4VlFVRnpRa01zUTBGQmRFSTdRVUZCUVN4VlFVRjNRa1VzU1VGQlJWTXNSVUZCUlhOeFFpeFRRVUZHTEVOQlFWa3NSVUZCV2l4RlFVRmxjSE5DTEVOQlFXWXNRMEZCTVVJN1FVRkJRU3hWUVVFMFEzTkNMRWxCUVVWRUxFVkJRVVU0Y1VJc1QwRkJSaXhKUVVGWE9YRkNMRU5CUVhwRU8wRkJRVUVzVlVGQk1rUlJMRWxCUVVWU0xFVkJRVVU0Y1VJc1QwRkJSaXhMUVVGWk4zRkNMRVZCUVVVMFNDeFJRVUZHTEVsQlFWazFTQ3hGUVVGRmFVSXNUVUZCTVVJc1NVRkJhME5VTEVWQlFVVlNMRU5CUVVZc1EwRkJiRU1zUjBGQmRVTlJMRVZCUVVWelZ5eExRVUYwUnp0QlFVRkJMRlZCUVRSSGJsY3NTVUZCUlVnc1JVRkJSVEJTTEZGQlFVWXNSVUZCT1VjN1FVRkJRU3hWUVVFeVNIUlNMRWxCUVVWS0xFVkJRVVV5VVN4VFFVRkdMRU5CUVZrc1lVRkJXaXhEUVVFM1NEdEJRVUZCTEZWQlFYZEtkRkVzU1VGQlJXUXNSVUZCUlcxeVFpeFZRVUZHTEVsQlFXTXNSVUZCZUVzN1FVRkJRU3hWUVVFeVMzQnhRaXhKUVVGRkxFVkJRVGRMTzBGQlFVRXNWVUZCWjB4NVF5eEpRVUZGTEVWQlFXeE1PMEZCUVVFc1ZVRkJjVXhqTEVsQlFVVXNWVUZCZGt3N1FVRkJRU3hWUVVGclRVTXNTVUZCUlN4RlFVRkRjVkFzV1VGQlZ5eERRVUZhTEVWQlFXTm5WeXh0UWtGQmEwSXNNa0pCUVZONGNrSXNRMEZCVkN4RlFVRlhPMEZCUVVNc1kwRkJTVU1zUTBGQlNpeERRVUZOTEVsQlFVZHZRaXhEUVVGSUxFVkJRVXM3UVVGQlF5eG5Ra0ZCUnl4RFFVRkRUQ3hEUVVGS0xFVkJRVTA3UVVGQlEwRXNhMEpCUVVVc1JVRkJSaXhEUVVGTExFOUJRVTFtTEVsQlFVVjFjVUlzUjBGQlJ6Tm5RaXhKUVVGSUxFTkJRVkV2U1N4RFFVRlNMRU5CUVZJN1FVRkJiVUpGTEd0Q1FVRkZaaXhGUVVGRkxFTkJRVVlzUlVGQlMyZEhMRmRCUVV3c1JVRkJSaXhKUVVGelFtaEhMRVZCUVVVc1EwRkJSaXhEUVVGMFFqdEJRVUZ1UWp0QlFVRTRReXhwUWtGQlJXVXNSVUZCUldoQ0xFVkJRVVZwUnl4WFFVRkdMRVZCUVVZc1EwRkJSanRCUVVGeFFpeHJRa0ZCVHl4UlFVRk5hRWNzUTBGQlRpeEhRVUZSTEVsQlFWSXNSMEZCWVVFc1EwRkJjRUk3UVVGQmMwSXNVMEZCTjBvc1JVRkJPRW9yYzBJc2RVSkJRWE5DTEdsRFFVRlZPMEZCUVVNc2FVSkJRVTh6Y2tJc1NVRkJSVkFzUTBGQlJpeEhRVUZKTEVsQlFWZzdRVUZCWjBJc1UwRkJMMDBzUlVGQlowNXRjMElzYTBKQlFXbENMREJDUVVGVGFuUkNMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoTzBGQlFVTXNhVUpCUVU4c1VVRkJUVzlDTEVOQlFVNHNTMEZCVlhKQ0xFbEJRVVZ2Uml4RlFVRkZjRVlzUlVGQlJXbEhMRmRCUVVZc1JVRkJSaXhKUVVGdFFtSXNSVUZCUlhCR0xFVkJRVVZwUnl4WFFVRkdMRVZCUVVZc1MwRkJiMEpxUnl4RFFVRjZReXhGUVVFeVF6SkRMRVZCUVVVelF5eERRVUZHTEVsQlFVdERMRU5CUVRGRUxFZEJRVFpFTEVsQlFYQkZPMEZCUVhsRkxGTkJRWGhVTEVWQlFYbFVhWFJDTEd0Q1FVRnBRaXd3UWtGQlUyeDBRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eHBRa0ZCVHl4UlFVRk5jVUlzUTBGQlRpeExRVUZWVHl4RlFVRkZNbkJDTEZGQlFVWXNSMEZCVjNaeVFpeERRVUZ5UWl4SFFVRjNRaXhKUVVFdlFqdEJRVUZ2UXl4VFFVRXhXQ3hGUVVFeVdDdHpRaXhaUVVGWExHOUNRVUZUTDNOQ0xFTkJRVlFzUlVGQlZ6dEJRVUZETEdOQlFVbERMRU5CUVVvc1EwRkJUU3hKUVVGSFJDeERRVUZJTEVWQlFVc3NTVUZCUjNGQ0xFTkJRVWdzUlVGQlN6aEZMRVZCUVVVNFRpeE5RVUZHTEVOQlFWTnFWU3hGUVVGRmJVY3NSVUZCUldkdVFpeE5RVUZLTEVOQlFWUXNSVUZCVEN4TFFVRm5ReXhMUVVGSmJIUkNMRU5CUVVvc1NVRkJVMFFzUTBGQlZEdEJRVUZYTUVNc1kwRkJSWHBETEVOQlFVWXNTVUZCU3l4RFFVRkRlVU1zUlVGQlJYcERMRU5CUVVZc1EwRkJSQ3hGUVVGTlJDeEZRVUZGUXl4RFFVRkdMRU5CUVU0c1EwRkJURHRCUVVGWUxGZEJRVFJDTEU5QlFVOHNTVUZCVUR0QlFVRlpMRk5CUVhKbExFVkJRWE5sYlhSQ0xFOUJRVTBzWlVGQlUzQjBRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGpRVUZKUXl4SlFVRkZSQ3hMUVVGSGEwY3NRMEZCVkN4RFFVRlhMRTlCUVU5NlJpeExRVUZIUVN4RlFVRkZNbk5DTEV0QlFVWXNRMEZCVVc1MFFpeERRVUZTTEVOQlFVZ3NSVUZCWTNGSExFVkJRVVVzUTBGQlJpeEZRVUZKY2tjc1EwRkJTaXhEUVVGa0xFVkJRWEZDTEVsQlFUVkNPMEZCUVdsRExGTkJRWEJwUWl4RlFVRndUU3hEUVVFd2RVSXNTVUZCUjNWRExFVkJRVVZ0VWl4UFFVRkdMRU5CUVZWNFRpeERRVUZXTEVkQlFXRjJSU3hGUVVGRmNYRkNMRWRCUVVZc1IwRkJUU3hEUVVGRExFTkJRVU5vYzBJc1MwRkJSekpDTEVWQlFVVnhjVUlzUjBGQlRDeEpRVUZWTTBNc1IwRkJSMnhoTEVsQlFXUXNTVUZCYjBJc1JVRkJja0lzUlVGQmVVSTFTeXhQUVVGNlFpeERRVUZwUTIxdFFpeEZRVUZxUXl4RlFVRnZRM0pDTEVkQlFVYzJReXhSUVVGSUxFZEJRVmtzU1VGQmFFUXNRMEZCYmtJc1JVRkJlVVYyY1VJc1JVRkJSV2RFTEVsQlFVWXNSMEZCVDNKRkxFVkJRVVU0YzBJc1RVRkJSaXhKUVVGVk9YTkNMRVZCUVVWeFJTeEpRVUZhTEVsQlFXdENhRVFzUlVGQlJYbHlRaXhOUVVGd1FpeEpRVUUwUW5weVFpeEZRVUZGWjBRc1NVRkJPVWNzUlVGQmJVaG9SQ3hGUVVGRmMzQkNMRk5CUVVZc1IwRkJXU3hEUVVGRGRIQkNMRVZCUVVWcGNVSXNVVUZCUml4SlFVRlpMRWRCUVdJc1JVRkJhMEkxYkVJc1YwRkJiRUlzUjBGQlowTnBTU3hMUVVGb1F5eERRVUZ6UTJoSUxFTkJRWFJETEV0QlFUQkRMRU5CUVVNc1JVRkJSQ3hEUVVGNlN5eEZRVUU0U3l4UlFVRk5kRVlzUlVGQlJUQnlRaXhYUVVGNlRDeEZRVUZ4VFR0QlFVRkRiSE5DTEZsQlFVVmFMRVZCUVVWelFpeGhRVUZHTEVOQlFXZENMRWRCUVdoQ0xFTkJRVVlzUTBGQmRVSXNTVUZCUnp0QlFVRkRWaXhaUVVGRlowOHNTVUZCUml4SFFVRlBlRTRzUlVGQlJYRnhRaXhIUVVGVUxFVkJRV0UzY1VJc1JVRkJSV2RQTEVsQlFVWXNSMEZCVDJoUExFVkJRVVZuVHl4SlFVRjBRaXhGUVVFeVFuaE9MRVZCUVVVd2NrSXNWMEZCUml4SFFVRmpka01zUjBGQlIyOUNMRkZCUVVnc1IwRkJXU3hKUVVGYUxFZEJRV2xDY0VJc1IwRkJSM2RETEVsQlFYQkNMRWxCUVRCQ2JuTkNMRVZCUVVVcmNVSXNVVUZCUml4SFFVRlhMRWxCUVZnc1IwRkJaMEl2Y1VJc1JVRkJSVzF6UWl4SlFVRnlSanRCUVVFd1JpeFRRVUU1Uml4RFFVRTRSaXhQUVVGTmJHNUNMRU5CUVU0c1JVRkJVVHRCUVVGRGVrVXNXVUZCUlRCeVFpeFhRVUZHTEVkQlFXTXNRMEZCUXl4RFFVRm1PMEZCUVdsQ08wRkJRVU1zVjBGQlJ6RnlRaXhGUVVGRmRWVXNTVUZCUml4SlFVRlJkbFVzUlVGQlJYZHhRaXhYUVVGV0xFbEJRWFZDTEZsQlFWVXNUMEZCVDNoeFFpeEZRVUZGZFZVc1NVRkJNVU1zUzBGQmFVUjJWU3hGUVVGRmRWVXNTVUZCUml4SFFVRlBPVlFzUlVGQlJUUnVRaXhMUVVGR0xFTkJRVkZ5YjBJc1JVRkJSWFZWTEVsQlFWWXNSVUZCWlhaVkxFVkJRVVUwY2tJc1YwRkJha0lzUTBGQmVFUXNSMEZCZFVaMlF5eEhRVUZIVEN4RlFVRklMRVZCUVUxb2NFSXNRMEZCVGl4RlFVRlJja0lzUTBGQlVpeEZRVUZWTkVZc1EwRkJWaXhEUVVGMlJpeEZRVUZ2UnpsRkxFTkJRWFpITEVWQlFYbEhMRTlCUVU4NFJTeERRVUZRTEVOQlFWTTFSU3hKUVVGRll5eEZRVUZGYzFjc1MwRkJSaXhKUVVGVEwxY3NSVUZCUldkWUxFMUJRV0lzUlVGQmIwSnlXQ3hMUVVGSExFMUJRVWxqTEVWQlFVVjVjRUlzVFVGQlJpeEZRVUZRTEVsQlFXMUNlbkJDTEVWQlFVVnpWeXhMUVVGR0xFTkJRVkZ4UXl4UFFVRlNMRU5CUVdkQ0xGZEJRV2hDTEVOQlFYWkRMRVZCUVc5RmNGb3NSVUZCUldkRUxFbEJRVVlzUjBGQlQyaEVMRVZCUVVWblJDeEpRVUZHTEVOQlFVOW9ReXhYUVVGUUxFVkJRVE5GTEVWQlFXZEhhRUlzUlVGQlJUWnlRaXhWUVVGR0xFZEJRV0VzUTBGQlF5OURMRWRCUVVkMlowSXNTVUZCU0N4RFFVRlJka2tzUlVGQlJXZEVMRWxCUVZZc1EwRkJPVWNzUlVGQk9FaG9SU3hKUVVGRlowSXNSVUZCUlhGeFFpeEhRVUZHTEVOQlFVMTZia0lzVDBGQlRpeERRVUZqT0d4Q0xFVkJRV1FzUlVGQmFVSXNSVUZCYWtJc1EwRkJhRWtzUlVGQmNVb3hiMElzUlVGQlJUWnlRaXhWUVVGR0xFZEJRV0UzY2tJc1JVRkJSWFZWTEVsQlFVWXNTVUZCVVhaVkxFVkJRVVYzY1VJc1YwRkJWaXhKUVVGMVFpeE5RVUZKTEVOQlFVTjRjVUlzUlVGQlJUQnhRaXhYUVVGR0xFbEJRV1VzUlVGQmFFSXNSVUZCYjBKdWNrSXNUMEZCY0VJc1EwRkJORUlzYlVOQlFUVkNMRU5CUVROQ0xFdEJRVGhHVXl4RlFVRkZkVlVzU1VGQlJpeEhRVUZQZGxVc1JVRkJSWFZWTEVsQlFVWXNRMEZCVHpOU0xFOUJRVkFzUTBGQlpUWnNRaXhGUVVGbUxFVkJRV3RDTEVkQlFXeENMRU5CUVhKSExFTkJRV0lzU1VGQk1ra3piMElzU1VGQlJVVXNSVUZCUlhGeFFpeEhRVUZHTEVOQlFVMXdja0lzUzBGQlRpeERRVUZaUkN4RlFVRkZiME1zVFVGQlpDeERRVUZHTEVWQlFYZENjRUlzUlVGQlJYVlZMRWxCUVVZc1MwRkJVM1pXTEV0QlFVY3NRMEZCUXpSdlFpeEhRVUZIY21Zc1NVRkJTQ3hEUVVGUmRrb3NRMEZCVWl4SlFVRlhMRWRCUVZnc1IwRkJaU3hIUVVGb1FpeEpRVUZ4UW1kQ0xFVkJRVVYxVlN4SlFVRXhRaXhGUVVFclFpeFBRVUZQZGxVc1JVRkJSWFZWTEVsQlFXcEVMRU5CUVhoQ0xFVkJRU3RGZGxVc1JVRkJSU3RVTEV0QlFVWXNTMEZCVlN4RFFVRkRMRU5CUVZnc1MwRkJaUzlWTEVsQlFVVkJMRVZCUVVVMFJDeFBRVUZHTEVOQlFWVXJiRUlzUlVGQlZpeEZRVUZoTEVsQlFXSXNRMEZCUml4RlFVRnhRamR2UWl4SlFVRkZMRU5CUVVNNGJrSXNSMEZCUjNKbUxFbEJRVWdzUTBGQlVYWktMRU5CUVZJc1NVRkJWeXhIUVVGWUxFZEJRV1VzUjBGQmFFSXNTVUZCY1VJc1NVRkJja0lzUjBGQk1FSXliMElzU1VGQk1VSXNSMEZCWjBNM2JrSXNRMEZCZEVVc1EwRkJMMFVzUlVGQmQwcEZMRVZCUVVWeGNVSXNSMEZCUml4SFFVRk5jbkpDTEVsQlFVVmpMRU5CUVROVExFTkJRWEpLTEVWQlFXMWpSU3hGUVVGRk9ISkNMRlZCUVVZc1MwRkJaWEp5UWl4RlFVRkZNSEJDTEZsQlFVWXNRMEZCWlc1eVFpeERRVUZtTEV0QlFXMUNkVVlzUlVGQlJUaHRRaXhuUWtGQlJpeERRVUZ0UWl4dFFrRkJia0lzUlVGQmRVTTFjVUlzUlVGQlJUQndRaXhaUVVGR0xFTkJRV1Z1Y2tJc1EwRkJaaXhEUVVGMlF5eERRVUZ1UWl4RlFVRTJSWGxDTEVWQlFVVXljRUlzU1VGQlJpeERRVUZQY0hKQ0xFTkJRVkFzUzBGQlYzVkdMRVZCUVVVNGJVSXNaMEpCUVVZc1EwRkJiVUlzWlVGQmJrSXNSVUZCYlVNMWNVSXNSVUZCUlRKd1FpeEpRVUZHTEVOQlFVOXdja0lzUTBGQlVDeERRVUZ1UXl4RFFVRjJSeXhEUVVGdVl5eEZRVUY1YkVJc1EwRkJRMmRDTEVWQlFVVjFWU3hKUVVGR0xFbEJRVkYyVlN4RlFVRkZObkpDTEZWQlFWWXNTVUZCYzBJM2NrSXNSVUZCUlRCeFFpeFhRVUZHTEV0QlFXZENMRU5CUVVNc1EwRkJka01zU1VGQk1FTXZja0lzUlVGQlJTdHlRaXhYUVVFM1F5eExRVUV5Ukc1dFFpeEZRVUZGT0cxQ0xHZENRVUZHTEVOQlFXMUNMR05CUVc1Q0xFVkJRV3REY25KQ0xFVkJRVVV3Y1VJc1YwRkJjRU1zUTBGQmNIQkNMRVZCUVhGelFtNXRRaXhGUVVGRk9HMUNMR2RDUVVGR0xFTkJRVzFDTEZGQlFXNUNMRVZCUVRSQ2NuSkNMRVZCUVVWemNFSXNVMEZCUml4RFFVRlpMRU5CUVZvc1MwRkJaMEowY0VJc1JVRkJSVEp4UWl4UFFVRkdMRU5CUVZVemNVSXNSVUZCUlhOd1FpeFRRVUZHTEVOQlFWa3NRMEZCV2l4RFFVRldMRU5CUVdoQ0xFZEJRVEJEZEhCQ0xFVkJRVVV5Y1VJc1QwRkJSaXhEUVVGVk0zRkNMRVZCUVVWemNFSXNVMEZCUml4RFFVRlpMRU5CUVZvc1EwRkJWaXhMUVVFeVFpeFJRVUZOZEhCQ0xFVkJRVVZ6Y0VJc1UwRkJSaXhEUVVGWkxFTkJRVm9zUTBGQlRpeEhRVUZ4UWl4UFFVRkxTaXhGUVVGTUxFZEJRVkVzVlVGQk4wSXNSMEZCZDBNc1JVRkJia1VzUTBGQk1VTXNSMEZCYVVoc2NFSXNSVUZCUlRKeFFpeFBRVUZHTEVOQlFWVXNSMEZCVml4RFFVRTNTU3hEUVVGeWMwSXNRMEZCYXpKQ0xFdEJRVWs1Y1VJc1EwRkJTaXhKUVVGVFJ5eEZRVUZGSzNKQ0xFOUJRVmc3UVVGQmJVSjRia0lzVlVGQlJUaHRRaXhuUWtGQlJpeERRVUZ0UW5oeVFpeERRVUZ1UWl4RlFVRnhRa2NzUlVGQlJTdHlRaXhQUVVGR0xFTkJRVlZzYzBJc1EwRkJWaXhEUVVGeVFqdEJRVUZ1UWl4UFFVRnpSQ3hKUVVGSFJ5eEZRVUZGWjNOQ0xGVkJRVVlzUzBGQlpXaHpRaXhGUVVGRlozTkNMRlZCUVVZc1EwRkJZV3B6UWl4SlFVRmlMRU5CUVd0Q1JTeERRVUZzUWl4RlFVRnZRbk5GTEVOQlFYQkNMRVZCUVhOQ2RrVXNRMEZCZEVJc1RVRkJNa0lzUTBGQlF5eERRVUUxUWl4SlFVRXJRbEFzUTBGQk9VTXNRMEZCU0N4RlFVRnZSQ3hQUVVGUE9FVXNSVUZCUldsdVFpeExRVUZHTEVWQlFWQXNRMEZCYVVJc1NVRkJSMnh1UWl4SlFVRkZMRTlCUVVZc1JVRkJWWHBFTEVWQlFVVTBVQ3hIUVVGR0xFTkJRVTE2VVN4RlFVRkZkV3RDTEZGQlFWSXNRMEZCVml4RlFVRTBRbWhuUWl4RlFVRkZlVTRzU1VGQlJpeERRVUZQYUZNc1JVRkJSV2x6UWl4UFFVRlVMRU5CUVRWQ0xFVkJRVGhETVc1Q0xFVkJRVVV3VGl4SlFVRkdMRU5CUVU5cVV5eEZRVUZGT0VNc1MwRkJWQ3hEUVVFNVF5eEZRVUU0UkdwRkxFbEJRVVYzY1VJc1IwRkJSMG9zUlVGQlNDeEZRVUZOYW5CQ0xFTkJRVTRzUlVGQlVYSkNMRU5CUVZJc1JVRkJWVFJHTEVOQlFWWXNRMEZCYmtVc1JVRkJaMFk3UVVGQlF5eFpRVUZIUVN4RlFVRkZjVkFzVlVGQlJpeEhRVUZoTEVOQlFXSXNSVUZCWldwVkxFdEJRVWRoTEVWQlFVVTBXU3hQUVVGR0xFTkJRVlVzVlVGQlZpeEZRVUZ4UWl4RFFVRkROMVVzUTBGQlJDeEZRVUZIZGtVc1EwRkJTQ3hEUVVGeVFpeERRVUZzUWl4RlFVRTRRMUFzUTBGQmFrUXNSVUZCYlVRc1QwRkJUemhGTEVOQlFWQXNRMEZCVTNaRkxFVkJRVVY1Y1VJc1MwRkJSaXhKUVVGVGVuRkNMRVZCUVVWcmMwSXNUMEZCUml4SFFVRlZMRU5CUVc1Q0xFdEJRWFZDTlhOQ0xFbEJRVVZzUWl4RlFVRkZPRlVzVlVGQlJpeERRVUZoTEZsQlFWVTdRVUZCUXpOUExGbEJRVVZwYmtJc1MwRkJSaXhEUVVGUkxGTkJRVkk3UVVGQmJVSXNVMEZCTTBNc1JVRkJORU40Y2tJc1JVRkJSV3R6UWl4UFFVRTVReXhEUVVGNlFpeEZRVUZwUml4SlFVRkhPMEZCUVVONmMwSXNZMEZCUlN4RFFVRkRMRU5CUVVnc1JVRkJTMW9zUlVGQlJYTjBRaXhKUVVGR0xFTkJRVTl3Y2tJc1EwRkJVQ3hGUVVGVE1rUXNRMEZCVkN4RFFVRk1PMEZCUVdsQ0xGTkJRWEpDTEVOQlFYRkNMRTlCUVUxRUxFTkJRVTRzUlVGQlVUdEJRVUZETEdOQlFVZG9SaXhEUVVGSUxFVkJRVXNzVFVGQlRXZEdMRU5CUVU0c1EwRkJVVU1zUlVGQlJTeERRVUZETEVOQlFVZ3NSVUZCUzBRc1EwRkJURHRCUVVGUk8wRkJRVU1zVDBGQmJGSXNUVUZCZFZKRExFVkJRVVVzUTBGQlF5eERRVUZJTEVWQlFVc3NZMEZCVEN4RlFVRnhRaXhUUVVGVFFTeERRVUZVTEVOQlFWZHlSeXhEUVVGWUxFVkJRV0ZOTEVOQlFXSXNSVUZCWlVNc1EwRkJaaXhGUVVGcFFsRXNRMEZCYWtJc1JVRkJiVUk3UVVGQlF5eFpRVUZKU1N4RFFVRktPMEZCUVVFc1dVRkJUVXNzUTBGQlRqdEJRVUZCTEZsQlFWRkRMRU5CUVZJN1FVRkJRU3haUVVGVmFVSXNRMEZCVmp0QlFVRkJMRmxCUVZsNVF5eERRVUZhTzBGQlFVRXNXVUZCWTJNc1NVRkJSVE5HTEVOQlFXaENMRU5CUVd0Q1l5eE5RVUZKUVN4SlFVRkZMRU5CUVVNc1EwRkJTQ3hGUVVGTFNDeExRVUZIYkVJc1JVRkJSWGx1UWl4WlFVRkdMRU5CUVdWMmJVSXNRMEZCWml4RFFVRlNMRVZCUVRCQ1ZDeEpRVUZGTEV0QlFVc3NRMEZCYWtNc1JVRkJiVU5MTEVsQlFVVkZMRXRCUVVjc1JVRkJlRU1zUlVGQk1rTnRSaXhGUVVGRmNWQXNWVUZCUml4SFFVRmhkbFlzU1VGQlJTeERRVUZHTEVkQlFVa3NRMEZCU2l4SFFVRk5MRU5CUVRsRUxFVkJRV2RGYlVJc1NVRkJSVzVDTEV0QlFVY3NSMEZCU0N4SlFVRlJRU3hKUVVGRkxFZEJRVllzU1VGQlpTeFJRVUZOUVN4RFFVRjJSaXhGUVVGNVJrOHNUVUZCU1cxRExFbEJRVVV5YjBJc1IwRkJSekZ3UWl4RFFVRklMRVZCUVV0MVJTeERRVUZNTEVWQlFVOHpSaXhEUVVGUUxFTkJRVTRzUTBGQmVrWXNSVUZCTUVkdFF5eEpRVUZGSzI5Q0xFZEJRVWM1Y0VJc1EwRkJTQ3hGUVVGTFpTeERRVUZNTEVWQlFVOTNSQ3hEUVVGUUxFVkJRVk12UlN4RFFVRlVMRU5CUVRWSExFVkJRWGRJUVN4TFFVRkhVU3hGUVVGRk9ISkNMRlZCUVVZc1MwRkJaWFJ2UWl4SlFVRkZaU3hGUVVGRmNXeENMR2xDUVVGR0xFTkJRVzlDTEdWQlFYQkNMRU5CUVVZc1JVRkJkVU53YlVJc1RVRkJTUzlETEVWQlFVVXdjRUlzV1VGQlJpeERRVUZsYm5KQ0xFTkJRV1lzU1VGQmEwSjNSU3hEUVVGMFFpeERRVUYyUXl4RlFVRm5SVUVzU1VGQlJXVXNSVUZCUlhGc1FpeHBRa0ZCUml4RFFVRnZRaXhOUVVGd1FpeERRVUZzUlN4RlFVRTRSbkJ0UWl4TlFVRkpMME1zUlVGQlJUSndRaXhKUVVGR0xFTkJRVTl3Y2tJc1EwRkJVQ3hKUVVGVmQwVXNRMEZCWkN4RFFVRTNSeXhIUVVFclNDeFJRVUZOYmtZc1EwRkJUaXhKUVVGVExGZEJRVk15UWl4RlFVRkZaMFFzU1VGQmNFSXNSMEZCZVVKelFpeEpRVUZGTEZkQlFUTkNMRWRCUVhWRExGRkJRVTFxUnl4RFFVRk9MRWRCUVZGcFJ5eEpRVUZGTEdGQlFWWXNTVUZCZVVKQkxFbEJRVVYyUkN4RlFVRkZjVklzUzBGQlNpeEZRVUZWZGxNc1NVRkJSV3RDTEVWQlFVVjNWQ3hKUVVGa0xFVkJRVzFDZWxVc1NVRkJSV2xDTEVWQlFVVXJRaXhMUVVGMlFpeEZRVUUyUW5SRUxFbEJRVVVzUTBGQlEwMHNRMEZCZWtRc1EwRkJla3NzUzBGQmRVOUJMRWxCUVVWM1JTeERRVUZHTEVWQlFVa3NRMEZCUTJwSExFTkJRVVFzU1VGQlNXbEhMRU5CUVVvc1MwRkJVVUVzU1VGQlJTeFBRVUZHTEVWQlFWVnFSeXhKUVVGRkxFTkJRVVlzUzBGQlRVRXNTVUZCUlN4RFFVRlNMRU5CUVd4Q0xFTkJRVE5QTEVOQlFYaElMRVZCUVd0WmEwY3NSVUZCUldkdVFpeE5RVUZHTEVkQlFWTnNkRUlzUTBGQk0xa3NSVUZCTmxsclJ5eEZRVUZGTm01Q0xGVkJRVVlzUjBGQllTeERRVUZEZW5SQ0xFdEJRVWN5Uml4RFFVRktMRWxCUVU4c1JVRkJhbUVzUlVGQmIyRTVSU3hKUVVGRmIwSXNSVUZCUldsVExGZEJRVVlzUTBGQll6VlRMRU5CUVdRc1JVRkJaMElzUTBGQlEwb3NRMEZCUkN4RlFVRkhlVVVzUTBGQlNDeEZRVUZMUXl4RFFVRk1MRU5CUVdoQ0xFTkJRVVlzUjBGQk1rSXpSQ3hGUVVGRmIxTXNWVUZCUml4RFFVRmhMMU1zUTBGQllpeEZRVUZsTEVOQlFVTnpSU3hEUVVGRUxFVkJRVWRFTEVOQlFVZ3NSVUZCUzNoRkxFTkJRVXdzUTBGQlppeERRVUV2WWl4RlFVRjFaSGxGTEVWQlFVVTBiVUlzVlVGQlJpeERRVUZoY25GQ0xFTkJRV0lzUTBGQmRtUXNSVUZCZFdWQkxFbEJRVVVzUzBGQlN5eERRVUU1WlN4RlFVRm5abTVDTEV0QlFVZGhMRVZCUVVVMFdTeFBRVUZHTEVOQlFWVTFXaXhKUVVGRkxHRkJRVVlzUjBGQlowSXNWMEZCTVVJc1JVRkJjME1zUTBGQlF5dEZMRU5CUVVRc1JVRkJSM1pGTEVOQlFVZ3NSVUZCUzFJc1NVRkJSVXNzUTBGQlJpeEhRVUZKUXl4RFFVRlVMRU5CUVhSRExFTkJRVzVtTEVWQlFYTnBRbVVzUlVGQlJTdFJMRkZCUVVZc1EwRkJWek5TTEVOQlFWZ3NSVUZCWVN4RFFVRkRjMFVzUTBGQlJDeEZRVUZIUkN4RFFVRklMRU5CUVdJc1EwRkJkR2xDTEVWQlFUQnFRak5GTEUxQlFVbGhMRVZCUVVVMFdTeFBRVUZHTEVOQlFWVXNZMEZCVml4RlFVRjVRaXhEUVVGRE4xVXNRMEZCUkN4RlFVRkhka1VzUTBGQlNDeERRVUY2UWl4SFFVRm5ReXhGUVVGRlV5eEZRVUZGZVhCQ0xFMUJRVW9zU1VGQldYcHdRaXhGUVVGRmMxY3NTMEZCUml4RFFVRlJjVU1zVDBGQlVpeERRVUZuUWl4VlFVRm9RaXhEUVVGb1JDeERRVUU1YWtJN1FVRkJORzlDTEdOQlFVODNWU3hEUVVGUU8wRkJRVk1zUzBGQk9USklMRVZCUVNzeVNEaHVRaXhUUVVGUkxHbENRVUZUYW5WQ0xFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhUU3hEUVVGaUxFVkJRV1U3UVVGQlF5eGhRVUZQT0VJc1JVRkJSV0VzUjBGQlJpeERRVUZOYkVRc1EwRkJUaXhGUVVGUlF5eERRVUZTTEVWQlFWVk5MRU5CUVZZc1JVRkJXU3hOUVVGYUxFTkJRVkE3UVVGQk1rSXNTMEZCYkRaSUxFVkJRVzAyU0RKMFFpeFhRVUZWTEcxQ1FVRlRiSFZDTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zWVVGQlQyOURMRVZCUVVWaExFZEJRVVlzUTBGQlRXeEVMRU5CUVU0c1JVRkJVU3hMUVVGTExFTkJRV0lzUlVGQlpVTXNRMEZCWml4RlFVRnBRaXhSUVVGcVFpeERRVUZRTzBGQlFXdERMRXRCUVRjNVNDeEZRVUZVTEVkQlFYa3JTRzlETEVWQlFVVnBRaXhKUVVGR0xFTkJRVThzUTBGQlF5eExRVUZFTEVWQlFVOHNUVUZCVUN4RFFVRlFMRVZCUVhOQ0xGVkJRVk4wUkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllUdEJRVUZEYjBNc1RVRkJSWEJETEVOQlFVWXNTVUZCU3l4VlFVRlRSQ3hEUVVGVUxFVkJRVmRQTEVOQlFWZ3NSVUZCWVVNc1EwRkJZaXhGUVVGbFF5eERRVUZtTEVWQlFXbENPMEZCUVVNc1lVRkJUelJDTEVWQlFVVTBRaXhWUVVGR0xFTkJRV0V4UkN4RFFVRmlMRTFCUVd0Q1JTeEpRVUZGUVN4TFFVRkhSQ3hEUVVGTUxFVkJRVTlCTEVsQlFVVkVMRU5CUVZRc1JVRkJWMEVzU1VGQlJTeExRVUZMTEVOQlFYQkRMRWRCUVhWRE9FSXNSVUZCUlhseFFpeEpRVUZHTEVOQlFVOTZjVUlzUlVGQlJUSkNMRTFCUVVZc1EwRkJVeXhGUVVGRGFXOUNMRXRCUVVscWMwSXNRMEZCVEN4RlFVRlBORVVzVFVGQlN6TkZMRU5CUVZvc1JVRkJZelJ5UWl4VlFVRlRjSEpDTEVOQlFYWkNMRVZCUVhsQ01GWXNUVUZCU3pWV0xFTkJRVGxDTEVWQlFXZERjM1JDTEZOQlFWRnlkRUlzUTBGQmVFTXNSVUZCVkN4RlFVRnZSRFpDTEVWQlFVVTJRaXhoUVVGR0xFTkJRV2RDYkVVc1EwRkJhRUlzUzBGQmIwSkJMRU5CUVhoRkxFTkJRVkFzUTBGQk9VTTdRVUZCYVVrc1MwRkJlRW83UVVGQmVVb3NSMEZCTjB3c1EwRkJlaXRJTEVWQlFYZHhTWEZETEVWQlFVVnhZeXhSUVVGR0xFZEJRVmNzVlVGQlV6RmxMRU5CUVZRc1JVRkJWenRCUVVGRExGZEJRVTl4UXl4RlFVRkZlWEZDTEVsQlFVWXNRMEZCVHl4RlFVRkRZaXhMUVVGSmFuTkNMRU5CUVV3c1JVRkJUelJGTEUxQlFVc3NTMEZCV2l4RlFVRnJRbWx1UWl4VlFVRlRMRkZCUVROQ0xFVkJRVzlEYkZjc1QwRkJUU3hEUVVGRExFTkJRVE5ETEVWQlFUWkRNRmNzVDBGQlRTeERRVUZETEVOQlFYQkVMRVZCUVhORWVsUXNVVUZCVHl4RFFVRkRMRU5CUVRsRUxFVkJRV2RGTEZWQlFWTXNRMEZCUXl4RFFVRXhSU3hGUVVGUUxFTkJRVkE3UVVGQk5FWXNSMEZCTTNoSkxFVkJRVFI0U1haWExFVkJRVVZETEVWQlFVWXNRMEZCU3pCQ0xFMUJRVXdzUTBGQldTeEZRVUZEYlhGQ0xGTkJRVkVzYVVKQlFWTnVkVUlzUTBGQlZDeEZRVUZYTzBGQlFVTXNWVUZCU1VNc1EwRkJTaXhEUVVGTkxFOUJRVThzUzBGQlN5eERRVUZNTEUxQlFWVnZReXhGUVVGRk5FSXNWVUZCUml4RFFVRmhha1VzUTBGQllpeE5RVUZyUWtFc1NVRkJSVUVzUlVGQlJUSkNMRWxCUVVZc1EwRkJUeXhMUVVGTExFTkJRVXdzUTBGQlVDeERRVUZ3UWl4SFFVRnhRekZDTEVsQlFVVnZReXhGUVVGRmNrTXNRMEZCUml4RlFVRkpMRXRCUVVzc1EwRkJUQ3hGUVVGUk5Fb3NZVUZCV2l4RlFVRXlRbXBITEVWQlFUTkNMRU5CUVRoQ0xFTkJRVGxDTEVWQlFXbERObUVzUzBGQmFrTXNRMEZCZFVNc1EwRkJReXhEUVVGNFF5eERRVUYyUXl4RlFVRnJSaXhMUVVGTExFTkJRVXdzUlVGQlVYUmpMRlZCUVZJc1NVRkJiMEpxUXl4RlFVRkZLMlVzV1VGQlJpeERRVUZsTEV0QlFVc3NRMEZCVEN4RFFVRm1MRU5CUVhSSExFVkJRVGhJTDJVc1JVRkJSWE5FTEVkQlFVWXNRMEZCVFN4WlFVRlZPMEZCUVVNc1dVRkJTWFpFTEVsQlFVVXNTVUZCVGl4RFFVRlhMRTlCUVUxQkxFVkJRVVZ2ZFVJc2FVSkJRVkk3UVVGQk1FSndkVUlzWTBGQlJVRXNSVUZCUlc5MVFpeHBRa0ZCU2p0QlFVRXhRaXhUUVVGblJDeFBRVUZQY0hWQ0xFTkJRVkE3UVVGQlV5eFBRVUZ5Uml4RlFVRjFSamhsTEUxQlFYWkdMRU5CUVRoR0xFbEJRVGxHTEVOQlFYaEpMRWRCUVRaUExFbEJRWEJRTzBGQlFYbFFMRXRCUVhCU0xFVkJRWEZTZFZBc1YwRkJWU3h0UWtGQlUzSjFRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGhRVUZQY1VNc1JVRkJSVFJDTEZWQlFVWXNRMEZCWVdwRkxFTkJRV0lzU1VGQlowSXNTMEZCUzNORUxFbEJRVXdzUTBGQlZTeFZRVUZUY2tRc1EwRkJWQ3hGUVVGWE8wRkJRVU52UXl4VlFVRkZMRWxCUVVZc1JVRkJVV2R6UWl4VFFVRlNMRU5CUVd0Q2NuVkNMRVZCUVVVeVFpeEpRVUZHTEVOQlFVOHNTVUZCVUN4RlFVRlpNVUlzUTBGQldpeERRVUZzUWp0QlFVRnJReXhQUVVGNFJDeERRVUZvUWl4SFFVRXdSU3hMUVVGTGNVUXNTVUZCVEN4RFFVRlZMRmxCUVZVN1FVRkJReXhaUVVGSmNrUXNTVUZCUlc5RExFVkJRVVVzU1VGQlJpeERRVUZPTzBGQlFVRXNXVUZCWXpsQ0xFbEJRVVZPTEVWQlFVVXJVaXhSUVVGR0xFVkJRV2hDTEVOQlFUWkNlbElzUlVGQlJYbERMRTFCUVVZc1IwRkJVM3BETEVWQlFVVTBkRUlzVDBGQlJpeERRVUZWYm5WQ0xFTkJRVllzUTBGQlZDeEhRVUZ6UWtNc1JVRkJSVFpsTEUxQlFVWXNRMEZCVXpsbExFTkJRVlFzUTBGQmRFSTdRVUZCYTBNc1QwRkJjRVlzUTBGQmFrWTdRVUZCZFVzc1MwRkJiR1FzUlVGQmJXUnpkVUlzVFVGQlN5eGpRVUZUZEhWQ0xFTkJRVlFzUlVGQlZ6dEJRVUZETEZWQlFVbERMRWxCUVVWdlF5eEZRVUZGTkVJc1ZVRkJSaXhEUVVGaGFrVXNRMEZCWWl4RFFVRk9MRU5CUVhOQ0xFOUJRVThzUzBGQlMzTkVMRWxCUVV3c1EwRkJWU3hWUVVGVEwwTXNRMEZCVkN4RlFVRlhPMEZCUVVNNFFpeFZRVUZGTEVsQlFVWXNSVUZCVVRoeVFpeFBRVUZTTEVOQlFXZENiSFZDTEVsQlFVVkVMRVZCUVVVeVFpeEpRVUZHTEVOQlFVOHNTVUZCVUN4RlFVRlpjRUlzUTBGQldpeERRVUZHTEVkQlFXbENVQ3hEUVVGcVF6dEJRVUZ2UXl4UFFVRXhSQ3hEUVVGUU8wRkJRVzFGTEV0QlFUZHFRaXhGUVVFNGFrSjFkVUlzVVVGQlR5eG5Ra0ZCVTNaMVFpeERRVUZVTEVWQlFWYzdRVUZCUXl4aFFVRlBMRXRCUVVzeVVDeE5RVUZNTEVOQlFWa3pVQ3hEUVVGYUxFVkJRV1Y1VHl4SFFVRm1MRU5CUVcxQ0xFMUJRVzVDTEVWQlFUSkNia3dzU1VGQk0wSXNRMEZCWjBNc1dVRkJWVHRCUVVGRGFrSXNWVUZCUlN4SlFVRkdMRVZCUVZFNFl5eFhRVUZTTEVOQlFXOUNMRXRCUVVzelZpeFZRVUY2UWp0QlFVRnhReXhQUVVGb1JpeEhRVUZyUml4SlFVRjZSanRCUVVFNFJpeExRVUV2Y1VJc1JVRkJXaXhEUVVFMWVFa3NSVUZCTURsS2JrZ3NSVUZCUlcxUUxFbEJRVVlzUTBGQlQycEVMRTlCUVZBc1EwRkJaVzFYTEUxQlFXWXNSMEZCYzBJc1ZVRkJVekZyUWl4RFFVRlVMRVZCUVZjN1FVRkJReXhYUVVGTkxFTkJRVU54UXl4RlFVRkZiVkFzU1VGQlJpeERRVUZQYWtRc1QwRkJVQ3hEUVVGbGFXZENMRTlCUVdZc1EwRkJkVUo0ZFVJc1EwRkJka0lzUTBGQlVEdEJRVUZwUXl4SFFVRTNhRXNzUlVGQk9HaExjVU1zUlVGQlJXMVFMRWxCUVVZc1EwRkJUMnBFTEU5QlFWQXNRMEZCWldsblFpeFBRVUZtTEVkQlFYVkNMRlZCUVZONGRVSXNRMEZCVkN4RlFVRlhPMEZCUVVNc1YwRkJUU3hEUVVGRExFVkJRVVZCTEVWQlFVVjVkVUlzVjBGQlJpeEpRVUZsZW5WQ0xFVkJRVVV3ZFVJc1dVRkJha0lzU1VGQkswSXhkVUlzUlVGQlJUWnBRaXhqUVVGR0xFZEJRVzFDTjJZc1RVRkJjRVFzUTBGQlVEdEJRVUZ0UlN4SFFVRndiMHNzUlVGQmNXOUxXQ3hGUVVGRksyOUNMRmxCUVVZc1EwRkJaWFZFTEVkQlFXWXNSMEZCYlVJc1dVRkJWVHRCUVVGRExGRkJRVWM3UVVGQlF5eGhRVUZQTEVsQlFVa3pkVUlzUlVGQlJUUjFRaXhqUVVGT0xFVkJRVkE3UVVGQk5FSXNTMEZCYUVNc1EwRkJaME1zVDBGQlRUTjFRaXhEUVVGT0xFVkJRVkVzUTBGQlJUdEJRVUZETEVkQlFUbHpTeXhEUVVFcmMwc3NTVUZCU1RSMVFpeExRVUZITEVWQlFVTXNSMEZCUlN4SFFVRklMRVZCUVU4c1RVRkJTeXhIUVVGYUxFVkJRVkE3UVVGQlFTeE5RVUYzUWtNc1MwRkJSM3B6UWl4RlFVRkZLMjlDTEZsQlFVWXNRMEZCWlhWRUxFZEJRV1lzUlVGQk0wSXNRMEZCWjBRdmMwSXNSVUZCUlcxMFFpeEpRVUZHTEVkQlFVOHNRMEZCUXl4RFFVRkRSQ3hGUVVGR0xFbEJRVTBzY1VKQlFXOUNRU3hGUVVGcVF5eEZRVUZ2UTJ4MFFpeEZRVUZGYTNKQ0xFbEJRVVlzUjBGQlQyZERMRXRCUVVjc1EwRkJReXhEUVVGRFFTeEZRVUZvUkN4RlFVRnRSSHB6UWl4RlFVRkZkM0ZDTEdGQlFVWXNRMEZCWjBJc1ZVRkJVelZ6UWl4RFFVRlVMRVZCUVZjN1FVRkJReXhSUVVGSlRTeEZRVUZLTEVWQlFVMURMRU5CUVU0c1EwRkJVU3hKUVVGSGIwSXNSVUZCUlcxMFFpeEpRVUZHTEVsQlFWRkVMRTFCUVVrc1EwRkJRemQxUWl4RlFVRkZjWFJDTEZkQlFXeENMRVZCUVRoQ0xFOUJRVTBzUlVGQlExTXNUVUZCU3l4alFVRlRkSFJDTEVOQlFWUXNSVUZCVjBjc1EwRkJXQ3hGUVVGaE8wRkJRVU1zV1VGQlNVVXNRMEZCU2p0QlFVRkJMRmxCUVUxRkxFbEJRVVZtTEVWQlFVVXdkVUlzUjBGQlJpeEZRVUZTTEVOQlFXZENMRWxCUVVjemRFSXNSVUZCUldkMVFpeEpRVUZHTEVOQlFVOHZkVUlzUlVGQlJUSkZMRWxCUVZRc1JVRkJZek5GTEVWQlFVVm5jMElzUjBGQmFFSXNSVUZCYjBKb2MwSXNSVUZCUlc5elFpeExRVUYwUWl4RlFVRTBRbkJ6UWl4RlFVRkZaM1pDTEZGQlFUbENMRVZCUVhWRGFIWkNMRVZCUVVWelVTeFJRVUY2UXl4SFFVRnRSSFJSTEVWQlFVVnBka0lzVTBGQmVFUXNSVUZCYTBVc1MwRkJTWEIxUWl4RFFVRktMRWxCUVZOaUxFVkJRVVZwZGtJc1UwRkJXRHRCUVVGeFFteDFRaXhaUVVGRlJpeERRVUZHTEVsQlFVdGlMRVZCUVVWcGRrSXNVMEZCUml4RFFVRlpjSFZDTEVOQlFWb3NRMEZCVER0QlFVRnlRaXhUUVVGNVEySXNSVUZCUlhOeVFpeFJRVUZHTEVsQlFWbDJjVUlzUlVGQlJXdHpRaXhuUWtGQlpDeEpRVUZuUTJ4elFpeEZRVUZGYTNOQ0xHZENRVUZHTEVOQlFXMUNhblJDTEVWQlFVVnpja0lzVVVGQmNrSXNRMEZCYUVNc1JVRkJLMFIwY2tJc1JVRkJSWEYwUWl4WFFVRkdMRWxCUVdVM2MwSXNSVUZCUlN4clFrRkJSaXhEUVVGbUxFdEJRWFZEUVN4RlFVRkZMR3RDUVVGR0xFbEJRWE5DTEdkQ1FVRTNSQ3hEUVVFdlJDeERRVUU0U1N4TFFVRkpTeXhEUVVGS0xFbEJRVk5NTEVOQlFWUTdRVUZCVjA4c1dVRkJSV2x6UWl4blFrRkJSaXhEUVVGdFFtNXpRaXhEUVVGdVFpeEZRVUZ4UWt3c1JVRkJSVXNzUTBGQlJpeERRVUZ5UWp0QlFVRllMRk5CUVhORFVDeExRVUZGTEZkQlFWTlFMRU5CUVZRc1JVRkJWenRCUVVGRExHbENRVUZQTEZsQlFWVTdRVUZCUTA4c2JVSkJRVWxCTEV0QlFVVkRMRWxCUVVWUkxFVkJRVVZ0ZFVJc1RVRkJSaXhIUVVGVGJuVkNMRVZCUVVWdmRVSXNUMEZCUml4SFFVRlZjSFZDTEVWQlFVVnhkVUlzVDBGQlJpeEhRVUZWY25WQ0xFVkJRVVZ6ZFVJc2EwSkJRVVlzUjBGQmNVSXNTVUZCZEVRc1JVRkJNa1FzV1VGQlZYUjJRaXhEUVVGV0xFZEJRVmxuUWl4RlFVRkZiM05DTEV0QlFVWXNSVUZCV2l4SFFVRnpRaXhaUVVGVmNIUkNMRU5CUVZZc1IwRkJXU3haUVVGVkxFOUJRVTluUWl4RlFVRkZiWE5DTEUxQlFXNUNMRWRCUVRCQ2RuTkNMRVZCUVVVc1EwRkJSaXhGUVVGSkxFOUJRVW9zUTBGQk1VSXNSMEZCZFVOQkxFVkJRVVZKTEVWQlFVVnRjMElzVFVGQlNpeEZRVUZYYm5OQ0xFVkJRVVZuZEVJc1ZVRkJZaXhEUVVGdVJDeEhRVUUwUlhCMFFpeEZRVUZGYVhWQ0xFZEJRVWMzZEVJc1JVRkJSVzF6UWl4TlFVRk1MRXRCUVdOdWMwSXNSVUZCUlcxelFpeE5RVUZzUWl4RlFVRjVRbTV6UWl4RlFVRkZaM1JDTEZWQlFUTkNMRVZCUVhORExGbEJRVlZvZEVJc1JVRkJSWFYxUWl4WlFVRkdMRWxCUVdkQ0xFMUJRVEZDTEV0QlFXMURMRmxCUVZVc1QwRkJUM1oxUWl4RlFVRkZkM1ZDTEZsQlFYUkVMRWRCUVcxRkxFVkJRVU5ETEZGQlFVOTZkVUlzUlVGQlJUQjFRaXhSUVVGV0xFVkJRVzVGTEVkQlFYVkdMRVZCUVVNemRFSXNUVUZCUzJZc1JVRkJSWGQxUWl4WlFVRlNMRVZCUVRkSUxFVkJRVzFLZUhWQ0xFVkJRVVZuYzBJc2NVSkJRVVlzUlVGQmJrb3NRMEZCYWtzN1FVRkJaMVlzVjBGQmJGYzdRVUZCYlZjc1UwRkJhbGdzUlVGQmExaG9jMElzUlVGQlJXMTFRaXhOUVVGR0xFZEJRVk0xZFVJc1NVRkJNMWdzUlVGQksxaERMRWxCUVVWUkxFVkJRVVZ2ZFVJc1QwRkJSaXhIUVVGVk4zVkNMRWRCUVVVc1QwRkJSaXhEUVVFeldTeEZRVUZ6V2l4TFFVRkxMRU5CUVV3c1MwRkJVMU1zUlVGQlJYRjFRaXhQUVVGWUxFZEJRVzFDY25WQ0xFVkJRVVZ4ZFVJc1QwRkJSaXhIUVVGVk4zVkNMRU5CUVRkQ0xFZEJRU3RDVVN4RlFVRkZjM1ZDTEd0Q1FVRkdMRWRCUVhGQ0xGbEJRVlU3UVVGQlF5eG5Ra0ZCU1hSMVFpeEZRVUZGZDFVc1ZVRkJUaXhKUVVGclFuaFdMRVZCUVVVNFZTeFZRVUZHTEVOQlFXRXNXVUZCVlR0QlFVRkRkbFVzYTBKQlFVZERMRWRCUVVnN1FVRkJUeXhYUVVFdlFpeERRVUZzUWp0QlFVRnRSQ3hUUVVGNFowSXNSVUZCZVdkQ1JDeExRVUZGUVN4SFFVRkZMRTlCUVVZc1EwRkJNMmRDTEVOQlFYTm9RaXhKUVVGSE8wRkJRVU5UTEZsQlFVVXJjMElzU1VGQlJpeERRVUZQT1hSQ0xFVkJRVVYzZEVJc1ZVRkJSaXhKUVVGamVIUkNMRVZCUVVWclZ5eEpRVUZvUWl4SlFVRnpRaXhKUVVFM1FqdEJRVUZ0UXl4VFFVRjJReXhEUVVGMVF5eFBRVUZOYWxZc1EwRkJUaXhGUVVGUk8wRkJRVU1zWTBGQlIxZ3NSVUZCU0N4RlFVRkxMRTFCUVUxWExFTkJRVTQ3UVVGQlVUdEJRVUZETEU5QlFYWTFRaXhGUVVGM05VSnJjMElzVDBGQlRTeHBRa0ZCVlR0QlFVRkROM05DTEdOQlFVZEJMRWxCUVVnN1FVRkJUeXhQUVVGb04wSXNSVUZCVGp0QlFVRjNOMElzUjBGQk1TOUNMRU5CUVc1RUxFVkJRU3RwUXpoQ0xFVkJRVVYxY1VJc1lVRkJSaXhEUVVGblFpeFZRVUZUTlhOQ0xFTkJRVlFzUlVGQlZ6dEJRVUZEUVN4TlFVRkZjM1JDTEZkQlFVWXNTMEZCWjBKMGRFSXNSVUZCUldkVExGRkJRVVlzUTBGQlZ6SmtMRTFCUVZnc1IwRkJhMElzUTBGQlF5eERRVUZ1UXp0QlFVRnpReXhIUVVGc1JTeERRVUV2YVVNc1JVRkJiVzVEZEhSQ0xFVkJRVVZ6Y1VJc1UwRkJSaXhEUVVGWkxFVkJRVU5LTEZOQlFWRXNSVUZCUTI5RUxGRkJRVThzTWtaQlFWSXNSVUZCVkN4RlFVRTRSek5rTEZWQlFWTXNSVUZCUXpKa0xGRkJRVThzZVVKQlFWSXNSVUZCZGtnc1JVRkJNRXBzUlN4WlFVRlhMRVZCUVVNc1pVRkJZeXh2UWtGQlUzcHlRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eGxRVUZQY1VNc1JVRkJSVFpETEZWQlFVWXNRMEZCWVd4R0xFTkJRV0lzUjBGQlowSkJMRU5CUVhaQ08wRkJRWGxDTEU5QlFYQkVMRVZCUVhKTExFVkJRVm9zUTBGQmJtNURMRVZCUVRReFEzRkRMRVZCUVVWMWNVSXNZVUZCUml4RFFVRm5RaXhSUVVGb1FpeEZRVUY1UWl4VlFVRlROWE5DTEVOQlFWUXNSVUZCVnp0QlFVRkRMRk5CUVVzc1EwRkJUQ3hMUVVGVFFTeEZRVUZGTWxZc1MwRkJXQ3hMUVVGdFFqTldMRVZCUVVVeVZpeExRVUZHTEVkQlFWRXNRMEZCUXl4RFFVRTFRaXhIUVVFclFqTldMRVZCUVVWemRFSXNWMEZCUml4TFFVRm5RblIwUWl4RlFVRkZORVVzU1VGQlJpeEhRVUZQTEV0QlFYWkNMRU5CUVM5Q08wRkJRVFpFTEVkQlFXeEhMRU5CUVRVeFF5eEZRVUZuT0VOMlF5eEZRVUZGZDNGQ0xHRkJRVVlzUTBGQlowSXNVVUZCYUVJc1JVRkJlVUlzVlVGQlV6ZHpRaXhEUVVGVUxFVkJRVmM3UVVGQlF5eFJRVUZIUVN4RlFVRkZjM1JDTEZkQlFVd3NSVUZCYVVJN1FVRkJReXhWUVVGSmNuUkNMRU5CUVVvc1JVRkJUVTBzUjBGQlRpeERRVUZSTEU5QlFVMHNSVUZCUTNkMFFpeE5RVUZMTEdOQlFWTjBkRUlzUTBGQlZDeEZRVUZYUnl4RFFVRllMRVZCUVdFN1FVRkJRMWdzWTBGQlJXOURMRVZCUVVVc1ZVRkJSaXhGUVVGamFXaENMRWxCUVdRc1EwRkJiVUlzUlVGQlEzTk5MRk5CUVZFMWRrSXNSVUZCUlRaMlFpeGhRVUZZTEVWQlFYbENjRklzUzBGQlNYcGxMRVZCUVVWcGMwSXNSMEZCTDBJc1JVRkJia0lzUlVGQmQwUjBUeXhGUVVGNFJDeERRVUV5UkN4WlFVRXpSQ3hGUVVGM1JYQmtMRTFCUVVVc1YwRkJVMUFzUTBGQlZDeEZRVUZYTzBGQlFVTkRMR05CUVVWdFZDeE5RVUZHTEVsQlFWYzNVeXhOUVVGRkxFbEJRV0lzUlVGQmEwSlFMRXRCUVVkWkxFVkJRVVVzV1VGQlZWb3NSVUZCUlRSRkxFbEJRVm9zUjBGQmFVSXNSMEZCYWtJc1IwRkJjVUlzUjBGQmRrSXNSVUZCTWtJMVJTeEZRVUZGTkVVc1NVRkJOMElzUTBGQmNrSTdRVUZCZDBRc1YwRkJPVWtzUTBGQlJpeEZRVUZyU25CRkxFVkJRVVYzUWl4SlFVRkdMRU5CUVU5RExGZEJRVkFzUTBGQmJVSm9ReXhGUVVGRkxFTkJRVVlzUTBGQmJrSXNRMEZCYkVvN1FVRkJNa3NzVTBGQkwwd3NSVUZCWjAxdGRFSXNUMEZCVFN4cFFrRkJWVHRCUVVGRE4zTkNMR2xDUVVGSFFTeExRVUZJTzBGQlFVOHNVMEZCZUU0c1JVRkJUanRCUVVGblR6dEJRVUZETEVkQlFXaFRMRU5CUVdnNFF5eERRVUZyZFVRc1NVRkJTWFYyUWl4TFFVRkhMRVZCUVZBN1FVRkJRU3hOUVVGVlF5eExRVUZITEcxQ1FVRmlMRU5CUVdsRE1YUkNMRVZCUVVWemNVSXNVMEZCUml4RFFVRlpMRVZCUVVOeFJDeFBRVUZOTEZWQlFWQXNSVUZCYTBKRExHVkJRV01zZVVKQlFWVTdRVUZCUXl4VlFVRkphbmRDTEVsQlFVVTRka0lzUjBGQlIyNXdRaXhIUVVGSUxFMUJRVlYwUlN4RlFVRkZaME1zVDBGQlJpeEhRVUZWTEVkQlFWWXNSMEZCWTJ0c1FpeEpRVUU1UWl4RFFVRnRReXhQUVVGUExFdEJRVXQyY0VJc1EwRkJUQ3hKUVVGUkxFTkJRVU1zUTBGQlZDeEZRVUZYUVN4RFFVRnNRanRCUVVGdlFpeExRVUZzUnl4RlFVRmFMRWRCUVdsSWNVTXNSVUZCUlhWeFFpeGhRVUZHTEVOQlFXZENMRmxCUVdoQ0xFVkJRVFpDTEZWQlFWTXpjMElzUTBGQlZDeEZRVUZYVFN4RFFVRllMRVZCUVdGRExFTkJRV0lzUlVGQlpUdEJRVUZETEZGQlFVbERMRU5CUVVvN1FVRkJRU3hSUVVGTlJ5eERRVUZPTzBGQlFVRXNVVUZCVVVVc1EwRkJVanRCUVVGQkxGRkJRVlZGTEVsQlFVVm1MRVZCUVVVcmRrSXNTMEZCUml4TFFVRlZMRU5CUVVNc1EwRkJXQ3hMUVVGbFJDeEhRVUZITld4Q0xFbEJRVWdzUTBGQlVXeExMRVZCUVVWbmMwSXNSMEZCVml4SlFVRmxMRXRCUVdZc1IwRkJjVUlzV1VGQlZTeFBRVUZQYUhOQ0xFVkJRVVZyVnl4SlFVRnVRaXhKUVVGNVFpeE5RVUZKTEVOQlFVTnNWeXhGUVVGRmNYTkNMRmRCUVVZc1NVRkJaU3hGUVVGb1FpeEZRVUZ2UW01eVFpeFBRVUZ3UWl4RFFVRTBRaXh0UTBGQk5VSXNRMEZCTjBJc1NVRkJLMFkwZFVJc1IwRkJSelZzUWl4SlFVRklMRU5CUVZGc1N5eEZRVUZGYTFjc1NVRkJWaXhEUVVFdlJpeEpRVUZuU0N4TlFVRndTaXhEUVVGYUxFTkJRWGRMTEVsQlFVZHVWaXhMUVVGSExGbEJRVlZtTEVWQlFVVnBja0lzVTBGQlJpeERRVUZaTEVOQlFWb3NRMEZCYUVJc1JVRkJLMElzVDBGQlQzcHhRaXhKUVVGRlVpeEZRVUZGWjNkQ0xHRkJRVVlzUjBGQlowSTFkRUlzUlVGQlJUUkNMRlZCUVVZc1EwRkJZV2hGTEVWQlFVVm5kMElzWVVGQlppeEpRVUU0UW1oM1FpeEZRVUZGWjNkQ0xHRkJRVVlzUlVGQk9VSXNSMEZCWjBSb2QwSXNSVUZCUldkM1FpeGhRVUZ3UlN4RlFVRnJSbXAyUWl4SlFVRkZaaXhGUVVGRlpTeERRVUZHTEVsQlFVdG1MRVZCUVVWbExFTkJRVVlzUlVGQlMzZEVMRTlCUVV3c1EwRkJZWFZ5UWl4RlFVRmlMRVZCUVdkQ0xFOUJRVXQwZGtJc1EwRkJja0lzUTBGQlVDeEhRVUVyUWxJc1JVRkJSU3QyUWl4TFFVRkdMRXRCUVZVc1EwRkJReXhEUVVGWUxFdEJRV1V2ZGtJc1JVRkJSV2R6UWl4SFFVRkdMRWxCUVU4c1EwRkJRM3BETEVkQlFVZHlaaXhKUVVGSUxFTkJRVkZzU3l4RlFVRkZaM05DTEVkQlFWWXNTVUZCWlN4SFFVRm1MRWRCUVcxQ0xFZEJRWEJDTEVsQlFYbENhSE5DTEVWQlFVVXJka0lzUzBGQk0wSXNSMEZCYVVNc1IwRkJha01zUjBGQmNVTjJka0lzUTBGQk0wUXNRMEZCYWtnc1JVRkJLMHRTTEVWQlFVVjNja0lzVlVGQlJpeERRVUZoTEdGQlFXSXNTVUZCTkVJc1dVRkJWVHRCUVVGRExHRkJRVTh6Y1VJc1MwRkJSM1ZDTEVWQlFVVnhReXhMUVVGR0xFTkJRVkZxUlN4SlFVRkZMR2xDUVVGV0xFTkJRVWdzUlVGQlowTkxMRVZCUVVVc1EwRkJSaXhEUVVGMlF6dEJRVUUwUXl4TFFVRnNVU3hGUVVGdFVXSXNSVUZCUldseVFpeFRRVUZHTEVOQlFWa3NRMEZCV2l4SlFVRmxMRTFCUVd4U0xFVkJRWGxTZEhGQ0xFbEJRVVZhTEVWQlFVVlRMRU5CUVVZc1EwRkJNMUlzUlVGQloxTlVMRVZCUVVWVExFTkJRVVlzU1VGQlN5eFpRVUZWTzBGQlFVTkxMRlZCUVVVeVF5eFRRVUZHTzBGQlFWa3NTMEZCTlZRc1JVRkJObFJxUkN4RlFVRkZlVlFzVFVGQlJpeERRVUZUTEZsQlFWVTdRVUZCUXl4WFFVRkxMRU5CUVV3c1MwRkJVM0pVTEVOQlFWUXNSMEZCVjNsQ0xFVkJRVVZ5UXl4RFFVRkdMRVZCUVV0dGIwSXNWVUZCVEN4RFFVRm5RakZ1UWl4RFFVRm9RaXhEUVVGWUxFZEJRVGhDVkN4RlFVRkZVeXhEUVVGR0xFbEJRVXRITEVOQlFXNURMRVZCUVhGRFdDeEZRVUZGVVN4RFFVRkdMRTFCUVU5U0xFVkJRVVZuZDBJc1lVRkJSaXhIUVVGblFqRjJRaXhGUVVGRk1IWkNMR0ZCUVd4Q0xFVkJRV2REU0N4SFFVRkhOM1ZDTEVsQlFVZ3NRMEZCVVZJc1EwRkJVaXhEUVVGMlF5eERRVUZ5UXl4RlFVRjNSa3NzUzBGQlIzVkNMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRnlSQ3hEUVVGaUxFTkJRVWdzU1VGQmIwSkJMRVZCUVVWRkxFVkJRVVVzUTBGQlJpeERRVUZHTEVOQlFUVkhMRVZCUVc5SVFTeEpRVUZGUml4SlFVRkZMRXRCUVVzc1EwRkJOMGc3UVVGQkswZ3NTMEZCYmtvc1EwRkJOMVFzUlVGQmEyUXNVVUZCZW1RN1FVRkJhMlVzUjBGQmRIUkNMRU5CUVdwSUxFVkJRWGt3UW1kQ0xFVkJRVVZ6ZFVJc2EwSkJRVVlzUjBGQmNVSXNXVUZCVlR0QlFVRkRMRkZCUVVsc2QwSXNTVUZCUlZFc1JVRkJSVEoyUWl4alFVRkdMRU5CUVdsQ1JDeHJRa0ZCYWtJc1EwRkJiME1zUlVGQmNFTXNSVUZCZDBNNVdTeEpRVUU1UXl4RFFVRnRSQ3hQUVVGUGNGZ3NSVUZCUlRCTkxGTkJRVVlzUjBGQldTdzBRa0ZCV2l4RlFVRjVReXhOUVVGSk1VMHNSVUZCUlhkS0xGVkJRVVlzUTBGQllYaEhMRTFCUVdwRk8wRkJRWGRGTEVkQlFYUkpMRVZCUVRreFFpeEZRVUYxSzBKWUxFVkJRVVYzVUN4VFFVRkdMRWRCUVZrc1ZVRkJVemRTTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaFRTeERRVUZpTEVWQlFXVTdRVUZCUXl4UlFVRkhMRmxCUVZVc1QwRkJUMUFzUTBGQmNFSXNSVUZCYzBJc1QwRkJUU3hGUVVGT0xFTkJRVk1zWVVGQlZ5eFBRVUZQUXl4RFFVRnNRaXhMUVVGelFrMHNTVUZCUlU0c1EwRkJSaXhGUVVGSlFTeEpRVUZGTEVOQlFVTXNRMEZCTjBJc1JVRkJaME1zU1VGQlNWRXNRMEZCU2l4RlFVRk5SeXhEUVVGT0xFVkJRVkZGTEVOQlFWSXNRMEZCVlN4UFFVRlBZaXhOUVVGSk1rSXNSVUZCUlhOMVFpeHJRa0ZCUml4SlFVRnpRbXAzUWl4SlFVRkZUeXhGUVVGRk1uWkNMR05CUVVZc1EwRkJhVUpFTEd0Q1FVRnFRaXhEUVVGdlF5eEZRVUZ3UXl4RFFVRkdMRVZCUVRCRGVuWkNMRWxCUVVWU0xFVkJRVVUyUWl4aFFVRkdMRU5CUVdkQ0xFMUJRV2hDTEVOQlFUVkRMRVZCUVc5RmNrSXNSVUZCUlRKUExFbEJRVVlzUjBGQlR6VlBMRVZCUVVWelR5eFJRVUZHTEVOQlFWZE5MRWxCUVhSR0xFVkJRVEpHYmxBc1JVRkJSU3RDTEVsQlFVWXNRMEZCVDBNc1YwRkJVQ3hEUVVGdFFuaENMRU5CUVc1Q0xFTkJRV3BJTEVsQlFYZEpVaXhKUVVGRlR5eERRVUU1U1N4SFFVRnBTa2tzU1VGQlJUUkdMRVZCUVVWeFJDeEpRVUZHTEVOQlFVODNTaXhEUVVGUUxFTkJRVzVLTEVWQlFUWktZeXhKUVVGRkxFTkJRVU5RTEVOQlFVUXNTVUZCU1N4RlFVRnVTeXhGUVVGelMwc3NTVUZCUlN4RFFVRkRXQ3hGUVVGRk5rSXNZVUZCUml4RFFVRm5RbXhDTEVWQlFVVXNRMEZCUml4RFFVRm9RaXhEUVVGRUxFTkJRVVlzU1VGQk1rSkJMRWxCUVVVMlNpeEhRVUZITEVOQlFVTjZTeXhEUVVGRUxFTkJRVWdzUlVGQlQwTXNRMEZCVUN4RlFVRlRZU3hEUVVGVUxFTkJRVVlzUlVGQlkwRXNTMEZCUjBFc1JVRkJSV3RETEUxQlFVd3NTVUZCWVZnc1JVRkJSWFpDTEVOQlFVWXNSVUZCUzNOVExFMUJRVXdzUlVGQk0wSXNSVUZCZVVNdlVTeEZRVUZGWlN4TFFVRkdMRU5CUVZFc1JVRkJVaXhGUVVGWGVFTXNSVUZCUlRSSkxGVkJRV0lzUTBGQmNFVXNRMEZCTjBzN1FVRkJNbEVzUjBGQmRqRkRMRVZCUVhjeFEyNUlMRVZCUVVWRExFVkJRVVlzUTBGQlMzZFpMRWxCUVV3c1IwRkJWU3hWUVVGVE9XRXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZOTEVOQlFXSXNSVUZCWlR0QlFVRkRMRkZCUVVsRExFTkJRVW83UVVGQlFTeFJRVUZOUXl4RFFVRk9PMEZCUVVFc1VVRkJVVWNzUTBGQlVqdEJRVUZCTEZGQlFWVkZMRWxCUVVVc1NVRkJXanRCUVVGQkxGRkJRV2xDUlN4SlFVRkZhRUlzUlVGQlJXMUNMRTlCUVVZc1EwRkJWU3hIUVVGV0xFTkJRVzVDTEVOQlFXdERMRTlCUVU5SUxFbEJRVVVzUTBGQlF5eERRVUZJTEV0QlFVOVNMRWxCUVVVNGJrSXNSMEZCUjNSdlFpeEZRVUZGWVN4TFFVRkdMRU5CUVZGSExFTkJRVklzUTBGQlNDeERRVUZHTEVWQlFXbENhRUlzU1VGQlJVRXNSVUZCUldFc1MwRkJSaXhEUVVGUkxFTkJRVklzUlVGQlZVY3NRMEZCVml4RFFVRXhRaXhIUVVGM1EzRkNMRVZCUVVVMFFpeFZRVUZHTEVOQlFXRm9SU3hEUVVGaUxFdEJRV2xDVFN4SlFVRkZUaXhEUVVGR0xFVkJRVWxCTEVsQlFVVXNTMEZCU3l4RFFVRTFRaXhKUVVFclFrRXNTMEZCUnl4dlFrRkJhVUpCTEVOQlFXcENMSGxEUVVGcFFrRXNRMEZCYWtJc1JVRkJTQ3hMUVVGM1FsRXNTVUZCUlN4TlFVRXhRaXhEUVVGMlJTeEZRVUY1UjBzc1JVRkJSV3RETEUxQlFVWXNSMEZCVXl4RFFVRlVMRWxCUVZsWUxFVkJRVVY1Y1VJc1NVRkJSaXhEUVVGUExFVkJRVU5pTEV0QlFVbHFjMElzUTBGQlRDeEZRVUZQTkVVc1RVRkJTMjVGTEV0QlFVY3NTMEZCWml4RlFVRnhRbTl5UWl4VlFVRlRMRTFCUVRsQ0xFVkJRWEZETVZZc1RVRkJTMnhYTEVOQlFURkRMRVZCUVZBc1JVRkJjVVF5VkN4SlFVRnlSQ3hEUVVFd1JDeFZRVUZUTlZRc1EwRkJWQ3hGUVVGWE8wRkJRVU5aTEZWQlFVVTJReXhUUVVGR0xFVkJRVmt6UXl4RlFVRkZlV1FzU1VGQlJpeERRVUZQTDJRc1NVRkJSVFpDTEVWQlFVVXNUMEZCUml4RlFVRlhlV01zVFVGQldDeERRVUZyUW5wakxFVkJRVVYzVUN4VFFVRkdMRU5CUVZrM1VpeERRVUZhTEVOQlFXeENMRVZCUVd0RGRVMHNTVUZCYkVNc1EwRkJkVU12VEN4RFFVRjJReXhEUVVGR0xFZEJRVFJEVWl4RFFVRnVSQ3hEUVVGYU8wRkJRV3RGTEV0QlFYaEpMRVZCUVRCSmFWVXNUVUZCTVVrc1EwRkJhVW94VkN4TFFVRkhMRlZCUVZOUUxFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVOaExGRkJRVVYzUXl4SlFVRkdMRU5CUVU4c1dVRkJWVHRCUVVGREwwTXNWVUZCUldsRUxFdEJRVVlzUTBGQlVTeEpRVUZTTEVWQlFXRTFReXhMUVVGSExFTkJRVU5hTEVWQlFVVjNka0lzV1VGQlNDeEZRVUZuUW5aMlFpeERRVUZvUWl4RlFVRnJRa1FzUTBGQmJFSXNRMEZCYUVJN1FVRkJjME1zVDBGQmVFUTdRVUZCTUVRc1MwRkJOVTRzUTBGQmNrZ3NSVUZCYlZZc1NVRkJNVlk3UVVGQksxWXNSMEZCYm5aRUxFVkJRVzkyUkhGRExFVkJRVVZwUWl4SlFVRkdMRU5CUVU4c1EwRkJReXhYUVVGRUxFVkJRV0VzVlVGQllpeEZRVUYzUWl4alFVRjRRaXhGUVVGMVF5eFhRVUYyUXl4RlFVRnRSQ3hoUVVGdVJDeEZRVUZwUlN4VlFVRnFSU3hEUVVGUUxFVkJRVzlHTEZWQlFWTjBSQ3hEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRiME1zVFVGQlJVTXNSVUZCUml4RFFVRkxja01zUTBGQlRDeEpRVUZSTEZWQlFWTkVMRU5CUVZRc1JVRkJWenRCUVVGRExHRkJRVThzUzBGQlN6SmtMRVZCUVV3c1EwRkJVVEZrTEVOQlFWSXNSVUZCVlVRc1EwRkJWaXhEUVVGUU8wRkJRVzlDTEV0QlFYaERPMEZCUVhsRExFZEJRVE5KTEVOQlFYQjJSQ3hGUVVGcE5FUnhReXhGUVVGRmJWQXNTVUZCUml4RFFVRlBha1FzVDBGQlVDeERRVUZsTm1oQ0xGRkJRV1lzUjBGQmQwSXNWVUZCVTNCM1FpeERRVUZVTEVWQlFWYzdRVUZCUXl4WFFVRlBjVU1zUlVGQlJXMUVMRWxCUVVZc1EwRkJUMjVFTEVWQlFVVXdhMElzVFVGQlZDeEZRVUZuUWl4VlFVRlRPVzFDTEVOQlFWUXNSVUZCVnp0QlFVRkRMR0ZCUVU5RUxFMUJRVWxETEVWQlFVVm5ZU3hKUVVGaU8wRkJRV3RDTEV0QlFUbERMRVZCUVdkRWFsZ3NUVUZCZGtRN1FVRkJPRVFzUjBGQmJpdEVMRVZCUVc4clJGZ3NSVUZCUldkMVFpeE5RVUZHTEVkQlFWTXNSVUZCUTBNc1YwRkJWU3h0UWtGQlUzUjNRaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVUwc1EwRkJZaXhGUVVGbE8wRkJRVU1zVlVGQlNVTXNRMEZCU2p0QlFVRkJMRlZCUVUxRExFTkJRVTQ3UVVGQlFTeFZRVUZSUnl4RFFVRlNPMEZCUVVFc1ZVRkJWVVVzUTBGQlZqdEJRVUZCTEZWQlFWbEZMRU5CUVZvN1FVRkJRU3hWUVVGalJTeERRVUZrTzBGQlFVRXNWVUZCWjBKRkxFTkJRV2hDTzBGQlFVRXNWVUZCYTBKRExFbEJRVVZuUWl4RlFVRkZNRlVzUjBGQlJpeERRVUZOTDFjc1EwRkJUaXhGUVVGUkxGVkJRVklzUTBGQmNFSTdRVUZCUVN4VlFVRjNRM1ZDTEVsQlFVVmpMRVZCUVVWeVF5eERRVUZHTEVOQlFURkRPMEZCUVVFc1ZVRkJLME41UWl4SlFVRkZMRVZCUVdwRUxFTkJRVzlFTEdGQlFWZEtMRU5CUVZnc1MwRkJaWEpDTEVWQlFVVTJWeXhMUVVGR0xFTkJRVkZ0U3l4UlFVRlNMRWRCUVdsQ0xGVkJRV2hETEVkQlFUUkRhR2RDTEVsQlFVVlBMRVZCUVVVNGRVSXNUVUZCUml4RlFVRTVReXhGUVVGNVJIcDJRaXhKUVVGRmVVSXNSVUZCUlRCVkxFZEJRVVlzUTBGQlRTOVhMRU5CUVU0c1JVRkJVU3hMUVVGU0xFTkJRVE5FTEVWQlFUQkZhMElzU1VGQlJXMUNMRVZCUVVVd1ZTeEhRVUZHTEVOQlFVMHZWeXhEUVVGT0xFVkJRVkVzVFVGQlVpeERRVUUxUlN4RlFVRTBSbTlDTEVsQlFVVXNRMEZCUXl4bFFVRmhReXhEUVVGaUxFbEJRV2RDTEZsQlFWVkJMRU5CUVROQ0xFdEJRU3RDTEVOQlFVTlVMRWxCUVVWTkxFTkJRVWdzUlVGQlRVTXNUMEZCVGl4RFFVRmpMRTFCUVdRc1NVRkJjMElzUTBGQlF5eERRVUZ3U2l4RlFVRnpTa01zUzBGQlIxb3NTVUZCUldVc1JVRkJSWGxtTEZGQlFVWXNSVUZCUml4RlFVRmxiR2RDTEVsQlFVVk9MRVZCUVVWelRDeEhRVUZ1UWl4RlFVRjFRbkpNTEVsQlFVVkVMRVZCUVVWMWFVSXNTVUZCT1VJc1MwRkJjVU5xYVVJc1NVRkJSV3RGTEZkQlFWZHdSU3hEUVVGWUxFdEJRV1VzUTBGQmFrSXNSVUZCYlVKSUxFbEJRVVYxUlN4WFFVRlhPVVFzUTBGQldDeExRVUZsTEVOQlFYcEZMRU5CUVhSS0xFVkJRV3RQYlVJc1JVRkJSVFJDTEZWQlFVWXNRMEZCWVdoRkxFTkJRV0lzVFVGQmEwSkJMRWxCUVVWQkxFVkJRVVV3UWl4SlFVRkdMRU5CUVU4elFpeERRVUZRTEVWQlFWTlBMRU5CUVZRc1JVRkJWemhDTEVWQlFVVXlRaXhOUVVGR0xFTkJRVk1zUlVGQlZDeEZRVUZaYUVRc1EwRkJXaXhEUVVGWUxFTkJRWEJDTEVOQlFXeFBMRVZCUVd0U0xGRkJRVTFtTEVWQlFVVTJUQ3hIUVVGU0xFdEJRV055U3l4RlFVRkZjVXNzUjBGQlJpeEhRVUZOTjB3c1JVRkJSVFpNTEVkQlFVWXNSMEZCVFRsTExFVkJRVVU0U3l4SFFVRlNMRWRCUVZsb1RDeERRVUZvUXl4RFFVRnNVaXhGUVVGeFZDeFJRVUZOWWl4RlFVRkZPR2xDTEVsQlFWSXNTMEZCWlhSb1FpeEZRVUZGYzJoQ0xFbEJRVVlzUjBGQlR6bHBRaXhGUVVGRk9HbENMRWxCUVVZc1IwRkJUeTlvUWl4RlFVRkZLMmhDTEVsQlFWUXNSMEZCWTNScFFpeERRVUZ3UXl4RFFVRnlWQ3hGUVVFMFZpeFhRVUZWVWl4RFFVRldMRWRCUVZsQkxFVkJRVVZ6ZDBJc1MwRkJSaXhEUVVGUk5YVkNMRWxCUVZJc1EwRkJZVE5DTEVOQlFXSXNSVUZCWlhsQ0xFTkJRV1lzUTBGQldpeEhRVUU0UWtZc1JVRkJSWGRXTEVkQlFVWXNRMEZCVFhSV0xFTkJRVTRzUTBGQk1WZzdRVUZCYlZrc1MwRkJiR1FzUlVGQk55dEVMRVZCUVdrNFJWa3NSVUZCUlVNc1JVRkJSaXhEUVVGTE1FSXNUVUZCVEN4RFFVRlpMRVZCUVVOeGMwSXNVVUZCVHl4blFrRkJVM0ozUWl4RFFVRlVMRVZCUVZjN1FVRkJReXhWUVVGSGVVUXNWVUZCVlZRc1RVRkJZaXhGUVVGdlFpeFBRVUZQTEV0QlFVc3NRMEZCVEN4TFFVRlRhRVFzUTBGQlZDeEhRVUZYTEVsQlFWZ3NSMEZCWjBJc1MwRkJTM05FTEVsQlFVd3NRMEZCVlN4VlFVRlRja1FzUTBGQlZDeEZRVUZYTzBGQlFVTnZReXhWUVVGRlozVkNMRTFCUVVZc1EwRkJVME1zVTBGQlZDeERRVUZ0UWl4SlFVRnVRaXhGUVVGM1FuUjNRaXhEUVVGNFFpeEZRVUV3UWtNc1EwRkJNVUk3UVVGQk5rSXNUMEZCYmtRc1EwRkJka0lzUTBGQk5FVXNTVUZCU1VFc1EwRkJTanRCUVVGQkxGVkJRVTFOTEVOQlFVNDdRVUZCUVN4VlFVRlJReXhEUVVGU08wRkJRVUVzVlVGQlZVTXNRMEZCVmp0QlFVRkJMRlZCUVZsSExFbEJRVVVzUzBGQlN5eERRVUZNTEVOQlFXUXNRMEZCYzBJc1NVRkJSMEVzUTBGQlNDeEZRVUZMTEU5QlFVOUJMRVZCUVVWcGFVSXNZMEZCUml4SFFVRnRRamRtTEUxQlFXNUNMRWxCUVRKQ2VFTXNTVUZCUlVrc1JVRkJSV3RwUWl4eFFrRkJSaXhGUVVGR0xFVkJRVFJDTjJsQ0xFbEJRVVZYTEVWQlFVVm5TaXhoUVVGb1F5eEZRVUU0UTNKS0xFbEJRVVZPTEVWQlFVVXdUQ3hsUVVGc1JDeEZRVUZyUld4TUxFbEJRVVZTTEVWQlFVVTBUQ3hYUVVGMFJTeEZRVUZyUml4RlFVRkRReXhMUVVGSmRFd3NSVUZCUlhOTUxFZEJRVVlzUjBGQlRYSk1MRVZCUVVVcmRrSXNWMEZCVWl4SFFVRnZRbXAzUWl4RlFVRkZhM2RDTEZOQlFUTkNMRVZCUVhGRE1VNHNUVUZCUzNacFFpeEZRVUZGZFdsQ0xFbEJRVVlzUjBGQlQzUnBRaXhGUVVGRmFYZENMRmRCUVZRc1IwRkJjVUp1ZDBJc1JVRkJSVzkzUWl4VlFVRnFSU3hGUVVFM1J5eEpRVUV5VEN4RlFVRkROMnRDTEV0QlFVa3NRMEZCVEN4RlFVRlBhVmdzVFVGQlN5eERRVUZhTEVWQlFXeE5PMEZCUVdsT0xFdEJRV2hYTEVWQlFXbFhMMElzVlVGQlV5eHZRa0ZCVlR0QlFVRkRMRlZCUVVjc1MwRkJTeXhEUVVGTUxFTkJRVWdzUlVGQlZ6dEJRVUZETEZsQlFVbG9hRUlzUTBGQlNqdEJRVUZCTEZsQlFVMURMRU5CUVU0N1FVRkJRU3haUVVGUlRTeEpRVUZGTEV0QlFVc3NRMEZCVEN4RFFVRldPMEZCUVVFc1dVRkJhMEpETEVsQlFVVXNSVUZCUTNOTUxFdEJRVWtzUTBGQlRDeEZRVUZQYVZnc1RVRkJTeXhEUVVGYUxFVkJRWEJDTEVOQlFXMURMRTlCUVUwc1dVRkJWVEZuUWl4RlFVRkZNRlVzUjBGQlJpeERRVUZOZUZjc1EwRkJUaXhGUVVGUkxGVkJRVklzUTBGQlZpeEhRVUU0UWs0c1NVRkJSVTBzUlVGQlJYVnBRaXh4UWtGQlJpeEZRVUZvUXl4SlFVRXlSRGxwUWl4SlFVRkZMRXRCUVVzMGQwSXNXVUZCVEN4RlFVRkdMRVZCUVhOQ00zZENMRWxCUVVVc1MwRkJTMjkzUWl4TlFVRk1MRVZCUVhoQ0xFVkJRWE5ET1hCQ0xFVkJRVVYyUnl4RlFVRkZMRU5CUVVZc1EwRkJSaXhGUVVGUExFMUJRVkFzVFVGQmFVSlJMRWxCUVVWU0xFVkJRVVZ4ZDBJc1RVRkJSaXhGUVVGdVFpeERRVUYwUXl4RlFVRnhSVGQyUWl4SlFVRkZMRVZCUVVOelRDeExRVUZKZEV3c1JVRkJSWE5NTEVkQlFVWXNSMEZCVFhwS0xFVkJRVVV3VlN4SFFVRkdMRU5CUVUwdlZ5eEZRVUZGTEVOQlFVWXNRMEZCVGl4RlFVRlhMR2RDUVVGWUxFVkJRVFJDTEVOQlFVTXNRMEZCTjBJc1EwRkJXQ3hGUVVFeVF5dHBRaXhOUVVGTGRtbENMRVZCUVVWMWFVSXNTVUZCUml4SFFVRlBNV2RDTEVWQlFVVXdWU3hIUVVGR0xFTkJRVTB2Vnl4RlFVRkZMRU5CUVVZc1EwRkJUaXhGUVVGWExHbENRVUZZTEVWQlFUWkNMRU5CUVVNc1EwRkJPVUlzUTBGQmRrUXNSVUZCYkVrc1IwRkJORTRzUlVGQlF6aE1MRXRCUVVrM1RDeEZRVUZGTmt3c1IwRkJSaXhIUVVGTmRFd3NSVUZCUlhOTUxFZEJRVklzUjBGQldYcEtMRVZCUVVVd1ZTeEhRVUZHTEVOQlFVMTRWeXhEUVVGT0xFVkJRVkVzVjBGQlVpeEZRVUZ2UWl4RFFVRkRMRU5CUVhKQ0xFTkJRV3BDTEVWQlFYbERkMmxDTEUxQlFVczVhVUlzUlVGQlJUaHBRaXhKUVVGR0xFZEJRVTkyYVVJc1JVRkJSWFZwUWl4SlFVRlVMRWRCUVdNeFowSXNSVUZCUlRCVkxFZEJRVVlzUTBGQlRYaFhMRU5CUVU0c1JVRkJVU3haUVVGU0xFVkJRWEZDTEVOQlFVTXNRMEZCZEVJc1EwRkJOVVFzUlVGQmJFODdRVUZCZDFRN1FVRkJReXhMUVVFM2RFSXNSVUZCT0hSQ2NYZENMR05CUVdFc2QwSkJRVlU3UVVGQlF5eGhRVUZQTEV0QlFVdHlkRUlzUjBGQlRDeERRVUZUTEZsQlFWVTdRVUZCUXl4WlFVRkpka1FzU1VGQlJTeExRVUZMTkhkQ0xGbEJRVmdzUTBGQmQwSXNUMEZCVFRWM1FpeExRVUZITEdGQlFWZHhReXhGUVVGRk1GVXNSMEZCUml4RFFVRk5MMWNzUTBGQlRpeEZRVUZSTEZWQlFWSXNRMEZCY0VJN1FVRkJkME5CTEdOQlFVVkJMRVZCUVVVMGQwSXNXVUZCU2p0QlFVRjRReXhUUVVGNVJDeFBRVUZQTlhkQ0xFdEJRVWN5VVN4RlFVRldPMEZCUVdFc1QwRkJiRWdzUTBGQlVEdEJRVUV5U0N4TFFVRnFNMElzUlVGQldpeERRVUZxT0VVc1JVRkJhVEJIZEU4c1JVRkJSV2xDTEVsQlFVWXNRMEZCVHl4RlFVRkRNR2RDTEZsQlFWY3NZVUZCV2l4RlFVRXdRa1FzVjBGQlZTeGhRVUZ3UXl4RlFVRlFMRVZCUVRCRUxGVkJRVk12YWtJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRTdRVUZCUXl4UlFVRkpUU3hKUVVGRkxHdENRVUZuUWs0c1EwRkJkRUlzUTBGQmQwSnZReXhGUVVGRlF5eEZRVUZHTEVOQlFVdDBReXhEUVVGTUxFbEJRVkVzVlVGQlUxRXNRMEZCVkN4RlFVRlhPMEZCUVVNc1lVRkJUMjFJTEVWQlFVVXNTVUZCUml4RlFVRlBMRlZCUVZNelNDeERRVUZVTEVWQlFWZFJMRU5CUVZnc1JVRkJZVU1zUTBGQllpeEZRVUZsTzBGQlFVTXNXVUZCU1Vjc1EwRkJTaXhEUVVGTkxFOUJRVTk1UWl4RlFVRkZkME1zVVVGQlJpeERRVUZYTjBVc1EwRkJXQ3hKUVVGaldTeEpRVUZGV2l4RFFVRm9RaXhIUVVGclFpeE5RVUZKUVN4RlFVRkZlVW9zVVVGQlRpeExRVUZwUWpkSkxFbEJRVVZhTEVWQlFVVTJUQ3hYUVVGeVFpeERRVUZzUWl4RlFVRnZSQ3hMUVVGTExFTkJRVXdzUzBGQlUzQk1MRU5CUVZRc1IwRkJWMGNzU1VGQlJVRXNSVUZCUlZnc1EwRkJSaXhEUVVGR0xFZEJRVTlFTEVWQlFVVlJMRU5CUVVZc1EwRkJiRUlzUjBGQmRVSXNUVUZCUzBrc1NVRkJSVUVzUlVGQlJXbDNRaXhSUVVGR0xFTkJRVmQwZDBJc1NVRkJSVXNzUlVGQlJUaDJRaXhYUVVGS0xFZEJRV2RDYW5kQ0xFTkJRVE5DTEVWQlFUWkNSaXhKUVVGRlJTeERRVUZHTEVkQlFVbEhMRVZCUVVVMGRrSXNWMEZCYmtNc1EwRkJSaXhIUVVGclJIaDNRaXhGUVVGRlVTeERRVUZHTEVsQlFVdERMRU5CUVRWRUxFTkJRV3hHTzBGQlFXbEtMRTlCUVRsTExFVkJRU3RMVkN4RFFVRXZTeXhGUVVGcFRGRXNRMEZCYWt3c1JVRkJiVXhwUkN4VlFVRlZWQ3hOUVVFM1RDeERRVUZRTzBGQlFUUk5MRXRCUVdoUE8wRkJRV2xQTEVkQlFXcFZMRU5CUVdvd1J5eEZRVUZ2YjBoWUxFVkJRVVZwUWl4SlFVRkdMRU5CUVU4c1EwRkJReXhMUVVGRUxFVkJRVThzVFVGQlVDeERRVUZRTEVWQlFYTkNMRlZCUVZOMFJDeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRGIwTXNUVUZCUlhsbUxGRkJRVVlzUTBGQlZ6ZG9RaXhEUVVGWUxFbEJRV015WjBJc1IwRkJSMmhtTEVWQlFVVjNaU3hoUVVGTUxFVkJRVzFDTEZWQlFWTndaMElzUTBGQlZDeEZRVUZYVHl4RFFVRllMRVZCUVdFN1FVRkJReXhWUVVGSFFTeERRVUZJTEVWQlFVc3NUMEZCVDBFc1NVRkJSV2xuUWl4SFFVRkhlR2RDTEVOQlFVZ3NSVUZCUzBNc1EwRkJUQ3hEUVVGR0xFVkJRVlY1Wml4SFFVRkhkbFlzU1VGQlNDeERRVUZSTlVvc1EwRkJVaXhKUVVGWE9FSXNSVUZCUlhKRExFTkJRVVlzUlVGQlMyZG9RaXhSUVVGTUxFZEJRV2RDTDJkQ0xFTkJRV2hDTEVsQlFXMUNMRWxCUVRsQ0xFZEJRVzFEVFN4RFFVRndSRHRCUVVGelJDeExRVUUxUml4RFFVRmtPMEZCUVRSSExFZEJRV2hLTEVOQlFYQnZTQ3hGUVVGemVFZzRRaXhGUVVGRmFVSXNTVUZCUml4RFFVRlBMRVZCUVVOM2RFSXNVVUZCVHl4UlFVRlNMRVZCUVdsQ1F5eFBRVUZOTEU5QlFYWkNMRVZCUVZBc1JVRkJkVU1zVlVGQlV5OTNRaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRiME1zVFVGQlJXbENMRWxCUVVZc1EwRkJUeXhGUVVGRE1tWXNVMEZCVVN4VlFVRlJhbXBDTEVOQlFXcENMRVZCUVcxQ09GTXNVMEZCVVRkVExFTkJRVE5DTEVWQlFUWkNMRWxCUVVjc1ZVRkJVVVFzUTBGQmVFTXNSVUZCVUN4RlFVRnJSQ3hWUVVGVFR5eERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVHRCUVVGRE5rSXNVVUZCUlVNc1JVRkJSaXhEUVVGTE9VSXNRMEZCVEN4SlFVRlJMRlZCUVZORExFTkJRVlFzUlVGQlYwY3NRMEZCV0N4RlFVRmhPMEZCUVVNc1dVRkJTVVVzU1VGQlJUSkRMRlZCUVZWVUxFMUJRVllzUzBGQmJVSjZReXhMUVVGSExHRkJRVmNzVDBGQlQwVXNRMEZCZUVNc1EwRkJUanRCUVVGQkxGbEJRV2xFVHl4SlFVRkZWQ3hOUVVGSlJTeE5RVUZKTEVOQlFVTXNRMEZCVEN4SlFVRlJSeXhOUVVGSkxFTkJRVU1zUTBGQllpeEhRVUZsTEZGQlFXWXNSMEZCZDBJc1VVRkJOVUlzUTBGQmJrUXNRMEZCZVVZc1QwRkJUeXRITEVWQlFVVXNTVUZCUml4RlFVRlBMRlZCUVZNeFNDeERRVUZVTEVWQlFWZE5MRU5CUVZnc1JVRkJZVVVzUTBGQllpeEZRVUZsTzBGQlFVTXNZMEZCU1Vjc1EwRkJTaXhEUVVGTkxFOUJRVTk1UWl4RlFVRkZkME1zVVVGQlJpeERRVUZYTlVVc1EwRkJXQ3hKUVVGakxFMUJRVWxQTEVWQlFVVlhMRTlCUVVZc1EwRkJWU3hQUVVGV0xFTkJRVW9zUjBGQmRVSnNRaXhGUVVGRkxGVkJRVkZFTEVOQlFWWXNRMEZCZGtJc1IwRkJiME5ETEVWQlFVVkhMRkZCUVVZc1EwRkJWM1ZNTEdWQlFWZ3NRMEZCTWtJc1YwRkJVek5NTEVOQlFYQkRMRU5CUVd4RUxFZEJRWGxHTEUxQlFVbERMRVZCUVVWM1NpeFJRVUZPTEVsQlFXZENOMGtzU1VGQlJWZ3NSVUZCUlRCTUxHVkJRVW9zUlVGQmIwSnlTQ3hMUVVGTGNXUXNSMEZCVEN4RFFVRlRNV2hDTEVWQlFVVnRXQ3hKUVVGR0xFTkJRVThzVjBGQlUzQllMRU5CUVdoQ0xFTkJRVlFzUlVGQk5FSlpMRVZCUVVVc1YwRkJVMW9zUTBGQldDeERRVUUxUWl4RlFVRXdRME1zUlVGQlJXMVlMRWxCUVVZc1EwRkJUeXhYUVVGVGNGZ3NRMEZCYUVJc1EwRkJNVU1zUlVGQk5rUlpMRVZCUVVVc1YwRkJVMW9zUTBGQldDeERRVUUzUkN4RlFVRXlSVmtzUlVGQlJTeFhRVUZUV2l4RFFVRllMRU5CUVRORkxFTkJRWEJETEVsQlFTdElMRXRCUVVzc1EwRkJUQ3hMUVVGVFV5eERRVUZVTEVkQlFWYzBRaXhGUVVGRk1GVXNSMEZCUml4RFFVRk5PVmNzUTBGQlRpeEZRVUZSVFN4RFFVRlNMRVZCUVZWVExFTkJRVllzUTBGQldDeEhRVUYzUW5GQ0xFVkJRVVYzVlN4TFFVRkdMRU5CUVZFMVZ5eERRVUZTTEVWQlFWVk5MRU5CUVZZc1JVRkJXVVVzUTBGQldpeEZRVUZqVHl4RFFVRmtMRU5CUVhaUU8wRkJRWGRSTEZOQlFYSlRMRVZCUVhOVFppeERRVUYwVXl4RlFVRjNVMkVzU1VGQlJVd3NRMEZCUml4SFFVRkpMRXRCUVVzc1EwRkJhbFFzUlVGQmJWUkxMRU5CUVc1VUxFTkJRVkE3UVVGQk5sUXNUMEZCTldFN1FVRkJObUVzUzBGQk4yVTdRVUZCSzJVc1IwRkJjR2xDTEVOQlFYUjRTQ3hGUVVFMGVrbDFRaXhGUVVGRlF5eEZRVUZHTEVOQlFVc3dRaXhOUVVGTUxFTkJRVmtzUlVGQlEyZDBRaXhOUVVGTExHTkJRVk5vZUVJc1EwRkJWQ3hGUVVGWFF5eERRVUZZTEVWQlFXRk5MRU5CUVdJc1JVRkJaVHRCUVVGRExHRkJRVThzUzBGQlMyOWtMRVZCUVV3c1EwRkJVVE5rTEVOQlFWSXNSVUZCVlN4SlFVRldMRVZCUVdWRExFTkJRV1lzUlVGQmFVSk5MRU5CUVdwQ0xFTkJRVkE3UVVGQk1rSXNTMEZCYWtRc1JVRkJhMFF3ZDBJc1VVRkJUeXhuUWtGQlUycDRRaXhEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRMR0ZCUVU4c1MwRkJTM2xaTEVkQlFVd3NRMEZCVXpGWkxFTkJRVlFzUlVGQlZ5eEpRVUZZTEVWQlFXZENReXhEUVVGb1FpeERRVUZRTzBGQlFUQkNMRXRCUVdwSExFVkJRV3RIYVhoQ0xGVkJRVk1zYTBKQlFWTnNlRUlzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGTkxFTkJRV0lzUlVGQlpVTXNRMEZCWml4RlFVRnBRanRCUVVGRExHRkJRVThzUzBGQlMyMWtMRVZCUVV3c1EwRkJVVEZrTEVOQlFWSXNSVUZCVlVRc1EwRkJWaXhGUVVGWlR5eERRVUZhTEVWQlFXTkRMRU5CUVdRc1EwRkJVRHRCUVVGM1FpeExRVUZ5U2l4RlFVRnpTakozUWl4WlFVRlhMRzlDUVVGVGJuaENMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVFN4RFFVRmlMRVZCUVdVN1FVRkJReXhoUVVGUExFMUJRVWxyUkN4VlFVRlZWQ3hOUVVGa0xFZEJRWEZDTEV0QlFVc3dWaXhIUVVGTUxFTkJRVk14V1N4RFFVRlVMRVZCUVZjc1NVRkJXQ3hEUVVGeVFpeEhRVUZ6UXl4TFFVRkxNRmtzUjBGQlRDeERRVUZUZWxrc1EwRkJWQ3hGUVVGWFJDeExRVUZITEVsQlFXUXNSVUZCYlVKUExFTkJRVzVDTEVOQlFUZERPMEZCUVcxRkxFdEJRWEJRTEVWQlFWb3NRMEZCTlhwSkxFVkJRU3RxU2poQ0xFVkJRVVVyZFVJc1UwRkJSaXhIUVVGWkxGVkJRVk53ZUVJc1EwRkJWQ3hGUVVGWE8wRkJRVU5CTEZGQlFVVnhReXhGUVVGRmFWUXNVMEZCUml4RlFVRkdMRWRCUVdkQ2FsUXNSVUZCUlhsUUxFdEJRVVlzUTBGQlVTeERRVUZETEVOQlFWUXNRMEZCYUVJN1FVRkJORUlzUjBGQmJtNUtMRVZCUVc5dVNucFFMRVZCUVVVclFpeFBRVUZHTEVkQlFWVkVMRTFCUVUxRExFOUJRWEJ2U2l4RlFVRTBiMG92UWl4RlFVRkZaM1pDTEZOQlFVWXNSMEZCV1hCaUxFdEJRVXRETEV0QlFUZHdTaXhGUVVGdGNVbzNWQ3hGUVVGRkswZ3NVVUZCUml4SFFVRlhOMFFzUTBGQk9YRktMRVZCUVdkeVNpeGpRVUZaTEU5QlFVOHJjVUlzVFVGQmJrSXNTVUZCTWtKQkxFOUJRVTlETEVkQlFXeERMRWxCUVhWRFJDeFBRVUZQTEZGQlFWQXNSVUZCWjBJc1JVRkJhRUlzUlVGQmJVSXNXVUZCVlR0QlFVRkRMRmRCUVU5cWRrSXNRMEZCVUR0QlFVRlRMRWRCUVhaRExFTkJRWFowU2l4RFFVRm5kMG9zU1VGQlNXMTJRaXhMUVVGSGVIaENMRVZCUVVWNWVFSXNUVUZCVkR0QlFVRkJMRTFCUVdkQ1F5eExRVUZITVhoQ0xFVkJRVVV3U1N4RFFVRnlRaXhEUVVGMVFpeFBRVUZQY2tjc1JVRkJSWE4yUWl4VlFVRkdMRWRCUVdFc1ZVRkJVekY0UWl4RFFVRlVMRVZCUVZjN1FVRkJReXhYUVVGUFJDeEZRVUZGTUVrc1EwRkJSaXhMUVVGTmNrY3NRMEZCVGl4TFFVRlZja01zUlVGQlJUQkpMRU5CUVVZc1IwRkJTV2R3UWl4RlFVRmtMRWRCUVd0Q2VuaENMRXRCUVVkRUxFVkJRVVY1ZUVJc1RVRkJSaXhMUVVGWGNIWkNMRU5CUVdRc1MwRkJhMEp5UXl4RlFVRkZlWGhDTEUxQlFVWXNSMEZCVTBRc1JVRkJNMElzUTBGQmJFSXNSVUZCYVVSdWRrSXNRMEZCZUVRN1FVRkJNRVFzUjBGQmJrWXNSVUZCYjBad1F5eE5RVUZKUkN4RlFVRkZlWGhDTEUxQlFVWXNSMEZCVTNwNFFpeEZRVUZGTUVrc1EwRkJSaXhIUVVGSmNrY3NRMEZCYWtJc1EwRkJjRVlzUlVGQmQwZEJMRU5CUVM5SE8wRkJRV2xJTEVOQlJqYzRja0lzUTBGQlJEczdPenM3UVVORVFUczdRVUZGUVN4RFFVRkRMRlZCUVZWeFJ5eERRVUZXTEVWQlFXRTdPMEZCUlZvN08wRkJSVUVzVFVGQlNXdHdRaXh4UWtGQmNVSXNUMEZCZWtJN08wRkJSVUU3UVVGRFFUdEJRVU5CTEUxQlFVbERMR0ZCUVdFN1FVRkRaa01zWVVGQlUwWXNhMEpCUkUwN08wRkJSMlk3T3p0QlFVZEJSeXhqUVVGVkxFVkJUa3M3TzBGQlVXWTdPenRCUVVkQlF5eFpRVUZSTEVWQldFODdPMEZCWVdZN096dEJRVWRCUXl4VFFVRkxMR1ZCUVZrN1FVRkRaaXhoUVVGUGRuQkNMRVZCUVVVc1RVRkJSaXhGUVVGVk5FVXNTVUZCVml4RFFVRmxMRXRCUVdZc1RVRkJNRUlzUzBGQmFrTTdRVUZEUkN4TFFXeENZenRCUVcxQ1pqczdPenRCUVVsQk5HdENMRmxCUVZFc1owSkJRVlZCTEU5QlFWWXNSVUZCYTBKb1pDeEpRVUZzUWl4RlFVRjNRanRCUVVNNVFqdEJRVU5CTzBGQlEwRXNWVUZCU1doS0xGbEJRVmxuU2l4UlFVRlJhV1FzWVVGQllVUXNUMEZCWWl4RFFVRjRRanRCUVVOQk8wRkJRMEU3UVVGRFFTeFZRVUZKUlN4WFFVRlhReXhWUVVGVmJtMUNMRk5CUVZZc1EwRkJaanM3UVVGRlFUdEJRVU5CTEZkQlFVczJiRUlzVVVGQlRDeERRVUZqU3l4UlFVRmtMRWxCUVRCQ0xFdEJRVXRzYlVJc1UwRkJUQ3hKUVVGclFtZHRRaXhQUVVFMVF6dEJRVU5FTEV0QmFrTmpPMEZCYTBObU96czdPenM3T3pzN1FVRlRRVWtzYjBKQlFXZENMSGRDUVVGVlNpeE5RVUZXTEVWQlFXdENhR1FzU1VGQmJFSXNSVUZCZDBJN1FVRkRkRU1zVlVGQlNYRmtMR0ZCUVdGeVpDeFBRVUZQYldRc1ZVRkJWVzVrTEVsQlFWWXNRMEZCVUN4SFFVRjVRbWxrTEdGQlFXRkVMRTlCUVU5dWRrSXNWMEZCY0VJc1JVRkJhVU5yUkN4WFFVRnFReXhGUVVFeFF6dEJRVU5CYVhOQ0xHRkJRVTlOTEVsQlFWQXNSMEZCWXl4TFFVRkxReXhYUVVGTUxFTkJRV2xDTEVOQlFXcENMRVZCUVc5Q1JpeFZRVUZ3UWl4RFFVRmtPenRCUVVWQkxGVkJRVWtzUTBGQlEwd3NUMEZCVDFFc1VVRkJVQ3hEUVVGblFuQnNRaXhKUVVGb1FpeERRVUZ4UWl4VlFVRlZhV3hDTEZWQlFTOUNMRU5CUVV3c1JVRkJhVVE3UVVGREwwTk1MR1ZCUVU5UkxGRkJRVkFzUTBGQlowSndiRUlzU1VGQmFFSXNRMEZCY1VJc1ZVRkJWV2xzUWl4VlFVRXZRaXhGUVVFeVEwd3NUMEZCVDAwc1NVRkJiRVE3UVVGRFJEdEJRVU5FTEZWQlFVa3NRMEZCUTA0c1QwRkJUMUVzVVVGQlVDeERRVUZuUW5aakxFbEJRV2hDTEVOQlFYRkNMRlZCUVhKQ0xFTkJRVXdzUlVGQmRVTTdRVUZEY2tNcllpeGxRVUZQVVN4UlFVRlFMRU5CUVdkQ2RtTXNTVUZCYUVJc1EwRkJjVUlzVlVGQmNrSXNSVUZCYVVNcllpeE5RVUZxUXp0QlFVTkVPMEZCUTBRN096czdRVUZKUVVFc1lVRkJUMUVzVVVGQlVDeERRVUZuUWpGWUxFOUJRV2hDTEVOQlFYZENMR0ZCUVdGMVdDeFZRVUZ5UXpzN1FVRkZRU3hYUVVGTFVDeE5RVUZNTEVOQlFWa3ZkMElzU1VGQldpeERRVUZwUW1sNFFpeFBRVUZQVFN4SlFVRjRRanM3UVVGRlFUdEJRVU5FTEV0Qk9VUmpPMEZCSzBSbU96czdPenM3T3p0QlFWRkJSeXh6UWtGQmEwSXNNRUpCUVZWVUxFMUJRVllzUlVGQmEwSTdRVUZEYkVNc1ZVRkJTVXNzWVVGQllVWXNWVUZCVlVZc1lVRkJZVVFzVDBGQlQxRXNVVUZCVUN4RFFVRm5RblpqTEVsQlFXaENMRU5CUVhGQ0xGVkJRWEpDTEVWQlFXbERjRlFzVjBGQk9VTXNRMEZCVml4RFFVRnFRanM3UVVGRlFTeFhRVUZMYVhaQ0xFMUJRVXdzUTBGQldXcDFRaXhOUVVGYUxFTkJRVzFDTEV0QlFVdHBkVUlzVFVGQlRDeERRVUZaTjNkQ0xFOUJRVm9zUTBGQmIwSXJkMElzVDBGQlQwMHNTVUZCTTBJc1EwRkJia0lzUlVGQmNVUXNRMEZCY2tRN1FVRkRRVTRzWVVGQlQxRXNVVUZCVUN4RFFVRm5Rak5MTEZWQlFXaENMRU5CUVRKQ0xGVkJRVlYzU3l4VlFVRnlReXhGUVVGcFJHNWpMRlZCUVdwRUxFTkJRVFJFTEZWQlFUVkVPMEZCUTBFN096czdRVUZFUVN4UFFVdERORVVzVDBGTVJDeERRVXRUTEd0Q1FVRnJRblZZTEZWQlRETkNPMEZCVFVFc1YwRkJTeXhKUVVGSmFsQXNTVUZCVkN4SlFVRnBRalJQTEUxQlFXcENMRVZCUVhsQ08wRkJRM1pDUVN4bFFVRlBOVThzU1VGQlVDeEpRVUZsTEVsQlFXWXNRMEZFZFVJc1EwRkRSanRCUVVOMFFqdEJRVU5FTzBGQlEwUXNTMEZ5Um1NN08wRkJkVVptT3pzN096czdRVUZOUVhOUUxGbEJRVkVzWjBKQlFWVkRMRTlCUVZZc1JVRkJiVUk3UVVGRGVrSXNWVUZCU1VNc1QwRkJUMFFzYlVKQlFXMUNibkZDTEVOQlFUbENPMEZCUTBFc1ZVRkJTVHRCUVVOR0xGbEJRVWx2Y1VJc1NVRkJTaXhGUVVGVk8wRkJRMUpFTEd0Q1FVRlJkblpDTEVsQlFWSXNRMEZCWVN4WlFVRlpPMEZCUTNaQ2IwWXNZMEZCUlN4SlFVRkdMRVZCUVZGNVRpeEpRVUZTTEVOQlFXRXNWVUZCWWl4RlFVRjVRalJqTEV0QlFYcENPMEZCUTBRc1YwRkdSRHRCUVVkRUxGTkJTa1FzVFVGSlR6dEJRVU5NTEdOQlFVbHVkVUlzWTBGQlkybDFRaXhQUVVGa0xIbERRVUZqUVN4UFFVRmtMRU5CUVVvN1FVRkJRU3hqUVVOSlJ5eFJRVUZSTEVsQlJGbzdRVUZCUVN4alFVVkpReXhOUVVGTk8wRkJRMUlzYzBKQlFWVXNaMEpCUVZWRExFbEJRVllzUlVGQlowSTdRVUZEZUVKQkxHMUNRVUZMUXl4UFFVRk1MRU5CUVdFc1ZVRkJWWFI0UWl4RFFVRldMRVZCUVdFN1FVRkRlRUpCTEc5Q1FVRkpkM2RDTEZWQlFWVjRkMElzUTBGQlZpeERRVUZLTzBGQlEwRTJSeXhyUWtGQlJTeFhRVUZYTjBjc1EwRkJXQ3hIUVVGbExFZEJRV3BDTEVWQlFYTkNkWGhDTEZWQlFYUkNMRU5CUVdsRExFOUJRV3BETzBGQlEwUXNaVUZJUkR0QlFVbEVMR0ZCVGs4N1FVRlBVaXh6UWtGQlZTeHJRa0ZCV1R0QlFVTndRbEFzZDBKQlFWVlNMRlZCUVZWUkxFOUJRVllzUTBGQlZqdEJRVU5CYm5GQ0xHZENRVUZGTEZkQlFWZHRjVUlzVDBGQldDeEhRVUZ4UWl4SFFVRjJRaXhGUVVFMFFrOHNWVUZCTlVJc1EwRkJkVU1zVDBGQmRrTTdRVUZEUkN4aFFWWlBPMEZCVjFJc2VVSkJRV0VzY1VKQlFWazdRVUZEZGtJc2JVSkJRVXNzVVVGQlRDeEZRVUZsTVhsQ0xFOUJRVTh5ZVVJc1NVRkJVQ3hEUVVGWlRDeE5RVUZOYWtJc1VVRkJiRUlzUTBGQlpqdEJRVU5FTzBGQllrOHNWMEZHVmp0QlFXbENRV3RDTEdOQlFVbHlkVUlzU1VGQlNpeEZRVUZWYVhWQ0xFOUJRVlk3UVVGRFJEdEJRVU5HTEU5QmVrSkVMRU5CZVVKRkxFOUJRVTlUTEVkQlFWQXNSVUZCV1R0QlFVTmFkR1VzWjBKQlFWRjBVU3hMUVVGU0xFTkJRV00wZFVJc1IwRkJaRHRCUVVORUxFOUJNMEpFTEZOQk1rSlZPMEZCUTFJc1pVRkJUMVFzVDBGQlVEdEJRVU5FTzBGQlEwWXNTMEUzU0dNN08wRkJLMGhtT3pzN096czdPenRCUVZGQlNpeHBRa0ZCWVN4eFFrRkJWWHAyUWl4TlFVRldMRVZCUVd0Q2MxY3NVMEZCYkVJc1JVRkJOa0k3UVVGRGVFTjBWeXhsUVVGVFFTeFZRVUZWTEVOQlFXNUNPMEZCUTBFc1lVRkJUM05DTEV0QlFVdHBka0lzUzBGQlRDeERRVUZYYW5aQ0xFdEJRVXRyZGtJc1IwRkJUQ3hEUVVGVExFVkJRVlFzUlVGQllYaDNRaXhUUVVGVExFTkJRWFJDTEVsQlFUSkNjMElzUzBGQlMwTXNUVUZCVEN4TFFVRm5Ra1FzUzBGQlMydDJRaXhIUVVGTUxFTkJRVk1zUlVGQlZDeEZRVUZoZUhkQ0xFMUJRV0lzUTBGQmRFUXNSVUZCTkVVeFFpeFJRVUUxUlN4RFFVRnhSaXhGUVVGeVJpeEZRVUY1UmxRc1MwRkJla1lzUTBGQkswWXNRMEZCTDBZc1MwRkJjVWQ1V1N4WlFVRlpMRTFCUVUxQkxGTkJRV3hDTEVkQlFUaENMRVZCUVc1SkxFTkJRVkE3UVVGRFJDeExRVEZKWXp0QlFUSkpaanM3T3pzN1FVRkxRVzFoTEZsQlFWRXNaMEpCUVZWNFdpeEpRVUZXTEVWQlFXZENORmtzVDBGQmFFSXNSVUZCZVVJN08wRkJSUzlDTzBGQlEwRXNWVUZCU1N4UFFVRlBRU3hQUVVGUUxFdEJRVzFDTEZkQlFYWkNMRVZCUVc5RE8wRkJRMnhEUVN4clFrRkJWVzU1UWl4UFFVRlBNbmxDTEVsQlFWQXNRMEZCV1N4TFFVRkxkRUlzVVVGQmFrSXNRMEZCVmp0QlFVTkVPMEZCUTBRN1FVRklRU3hYUVVsTExFbEJRVWtzVDBGQlQyTXNUMEZCVUN4TFFVRnRRaXhSUVVGMlFpeEZRVUZwUXp0QlFVTnNRMEVzYjBKQlFWVXNRMEZCUTBFc1QwRkJSQ3hEUVVGV08wRkJRMFE3TzBGQlJVZ3NWVUZCU1Vjc1VVRkJVU3hKUVVGYU96dEJRVVZCTzBGQlEwRjBjVUlzVVVGQlJYQkdMRWxCUVVZc1EwRkJUM1YyUWl4UFFVRlFMRVZCUVdkQ0xGVkJRVlV6ZUVJc1EwRkJWaXhGUVVGaFoxVXNTVUZCWWl4RlFVRnRRanRCUVVOcVF6dEJRVU5CTEZsQlFVbG5aQ3hUUVVGVFl5eE5RVUZOYWtJc1VVRkJUaXhEUVVGbE4yTXNTVUZCWml4RFFVRmlPenRCUVVWQk8wRkJRMEVzV1VGQlNYZGxMRkZCUVZGb2NrSXNSVUZCUlhWU0xFbEJRVVlzUlVGQlVURk9MRWxCUVZJc1EwRkJZU3hYUVVGWE1ra3NTVUZCV0N4SFFVRnJRaXhIUVVFdlFpeEZRVUZ2UXpWRExFOUJRWEJETEVOQlFUUkRMRmRCUVZjMFF5eEpRVUZZTEVkQlFXdENMRWRCUVRsRUxFTkJRVm83TzBGQlJVRTdRVUZEUVhkbExHTkJRVTF3ZDBJc1NVRkJUaXhEUVVGWExGbEJRVms3UVVGRGNrSXNZMEZCU1hGM1FpeE5RVUZOYW5KQ0xFVkJRVVVzU1VGQlJpeERRVUZXTzBGQlFVRXNZMEZEU1c5a0xFOUJRVThzUlVGRVdEdEJRVVZCTzBGQlEwRXNZMEZCU1RaT0xFbEJRVWw0WkN4SlFVRktMRU5CUVZNc1ZVRkJWQ3hEUVVGS0xFVkJRVEJDTzBGQlEzaENia0lzYjBKQlFWRkRMRWxCUVZJc1EwRkJZU3g1UWtGQmVVSkRMRWxCUVhwQ0xFZEJRV2RETEhORVFVRTNRenRCUVVOQk8wRkJRMFE3TzBGQlJVUXNZMEZCU1hsbExFbEJRVWx5YlVJc1NVRkJTaXhEUVVGVExHTkJRVlFzUTBGQlNpeEZRVUU0UWp0QlFVTTFRaXhuUWtGQlNYTnRRaXhSUVVGUlJDeEpRVUZKY20xQ0xFbEJRVW9zUTBGQlV5eGpRVUZVTEVWQlFYbENkRWdzUzBGQmVrSXNRMEZCSzBJc1IwRkJMMElzUlVGQmIwTnRkRUlzVDBGQmNFTXNRMEZCTkVNc1ZVRkJWVEY1UWl4RFFVRldMRVZCUVdGVExFTkJRV0lzUlVGQlowSTdRVUZEZEVVc2EwSkJRVWt5ZVVJc1RVRkJUWEI2UWl4RlFVRkZkVVlzUzBGQlJpeERRVUZSTEVkQlFWSXNSVUZCWVhwRExFZEJRV0lzUTBGQmFVSXNWVUZCVlhWM1FpeEZRVUZXTEVWQlFXTTdRVUZEZGtNc2RVSkJRVTlCTEVkQlFVZDZkVUlzU1VGQlNDeEZRVUZRTzBGQlEwUXNaVUZHVXl4RFFVRldPMEZCUjBFc2EwSkJRVWwzZFVJc1NVRkJTU3hEUVVGS0xFTkJRVW9zUlVGQldTOU9MRXRCUVVzclRpeEpRVUZKTEVOQlFVb3NRMEZCVEN4SlFVRmxSU3hYUVVGWFJpeEpRVUZKTEVOQlFVb3NRMEZCV0N4RFFVRm1PMEZCUTJJc1lVRk1WeXhEUVVGYU8wRkJUVVE3UVVGRFJDeGpRVUZKTzBGQlEwWkdMR2RDUVVGSmVHUXNTVUZCU2l4RFFVRlRMRlZCUVZRc1JVRkJjVUlzU1VGQlNTdGlMRTFCUVVvc1EwRkJWM2h3UWl4RlFVRkZMRWxCUVVZc1EwRkJXQ3hGUVVGdlFtOWtMRWxCUVhCQ0xFTkJRWEpDTzBGQlEwUXNWMEZHUkN4RFFVVkZMRTlCUVU5clR5eEZRVUZRTEVWQlFWYzdRVUZEV0dobUxHOUNRVUZSZEZFc1MwRkJVaXhEUVVGamMzWkNMRVZCUVdRN1FVRkRSQ3hYUVVwRUxGTkJTVlU3UVVGRFVqdEJRVU5FTzBGQlEwWXNVMEY0UWtRN1FVRjVRa1FzVDBGcVEwUTdRVUZyUTBRc1MwRm9UV003UVVGcFRXWkRMR1ZCUVZjNVFpeFpRV3BOU1R0QlFXdE5aaXRDTEcxQ1FVRmxMSFZDUVVGVlVpeExRVUZXTEVWQlFXbENPMEZCUXpsQ0xGVkJRVWxUTEdOQlFXTTdRVUZEYUVJc2MwSkJRV01zWlVGRVJUdEJRVVZvUWl3MFFrRkJiMElzY1VKQlJrbzdRVUZIYUVJc2VVSkJRV2xDTEdWQlNFUTdRVUZKYUVJc2RVSkJRV1U3UVVGS1F5eFBRVUZzUWp0QlFVMUJMRlZCUVVsc1lTeFBRVUZQTjFvc1UwRkJVekJDTEdGQlFWUXNRMEZCZFVJc1MwRkJka0lzUTBGQldEdEJRVUZCTEZWQlEwa3JRaXhIUVVSS096dEJRVWRCTEZkQlFVc3NTVUZCU1hCQ0xFTkJRVlFzU1VGQll6QjRRaXhYUVVGa0xFVkJRVEpDTzBGQlEzcENMRmxCUVVrc1QwRkJUMnhoTEV0QlFVdHdSQ3hMUVVGTUxFTkJRVmR3VlN4RFFVRllMRU5CUVZBc1MwRkJlVUlzVjBGQk4wSXNSVUZCTUVNN1FVRkRlRU52UWl4blFrRkJUWE4zUWl4WlFVRlpNWGhDTEVOQlFWb3NRMEZCVGp0QlFVTkVPMEZCUTBZN1FVRkRSQ3hWUVVGSmIwSXNSMEZCU2l4RlFVRlRPMEZCUTFBc1pVRkJUMEVzUjBGQlVEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1RU3hqUVVGTmFWSXNWMEZCVnl4WlFVRlpPMEZCUXpOQ05HVXNaMEpCUVUxMlN5eGpRVUZPTEVOQlFYRkNMR1ZCUVhKQ0xFVkJRWE5ETEVOQlFVTjFTeXhMUVVGRUxFTkJRWFJETzBGQlEwUXNVMEZHU3l4RlFVVklMRU5CUmtjc1EwRkJUanRCUVVkQkxHVkJRVThzWlVGQlVEdEJRVU5FTzBGQlEwWTdRVUY2VG1Nc1IwRkJha0k3TzBGQk5FNUJOMElzWVVGQlYzVkRMRWxCUVZnc1IwRkJhMEk3UVVGRGFFSTdPenM3T3pzN1FVRlBRVU1zWTBGQlZTeHJRa0ZCVlVNc1NVRkJWaXhGUVVGblFqbE5MRXRCUVdoQ0xFVkJRWFZDTzBGQlF5OUNMRlZCUVVsd1FpeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXhaUVVGWk8wRkJRMnBDTEZsQlFVbHpSeXhWUVVGVkxFbEJRV1E3UVVGQlFTeFpRVU5KTmtnc1QwRkJUemwzUWl4VFFVUllPenRCUVVkQkxGbEJRVWt5YVVJc1ZVRkJWU3hKUVVGa0xFVkJRVzlDTzBGQlEyeENRU3hyUWtGQlVYUlNMRmRCUVZjc1dVRkJXVHRCUVVNM1FuZG1MR2xDUVVGTE9YZENMRXRCUVV3c1EwRkJWMnR3UWl4UFFVRllMRVZCUVc5Q05rZ3NTVUZCY0VJN1FVRkRRVzVQTEc5Q1FVRlJMRWxCUVZJN1FVRkRSQ3hYUVVoUExFVkJSMHh2UWl4TFFVaExMRU5CUVZJN1FVRkpSRHRCUVVOR0xFOUJWa1E3UVVGWFJEdEJRWFJDWlN4SFFVRnNRanM3UVVGNVFrRTdRVUZEUVR0QlFVTkJPenM3TzBGQlNVRXNUVUZCU1RSTUxHRkJRV0VzVTBGQllrRXNWVUZCWVN4RFFVRlZMMFlzVFVGQlZpeEZRVUZyUWp0QlFVTnFReXhSUVVGSmVtOUNMR05CUVdONWIwSXNUVUZCWkN4NVEwRkJZMEVzVFVGQlpDeERRVUZLTzBGQlFVRXNVVUZEU1cxSUxGRkJRVkU1Y2tJc1JVRkJSU3h2UWtGQlJpeERRVVJhTzBGQlFVRXNVVUZGU1N0eVFpeFJRVUZSTDNKQ0xFVkJRVVVzVVVGQlJpeERRVVphT3p0QlFVbEJMRkZCUVVrc1EwRkJRemh5UWl4TlFVRk5lSGhDTEUxQlFWZ3NSVUZCYlVJN1FVRkRha0l3Uml4UlFVRkZMRGhDUVVGR0xFVkJRV3RETWxjc1VVRkJiRU1zUTBGQk1rTnFaaXhUUVVGVE5FSXNTVUZCY0VRN1FVRkRSRHRCUVVORUxGRkJRVWw1ZVVJc1RVRkJUWHA0UWl4TlFVRldMRVZCUVd0Q08wRkJRMmhDZVhoQ0xGbEJRVTFvVFN4WFFVRk9MRU5CUVd0Q0xFOUJRV3hDTzBGQlEwUTdPMEZCUlVRc1VVRkJTVGRxUWl4VFFVRlRMRmRCUVdJc1JVRkJNRUk3UVVGRGVFSTdRVUZEUVdsMFFpeHBRa0ZCVnpaRExGVkJRVmdzUTBGQmMwSXpRaXhMUVVGMFFqdEJRVU5CYkVJc2FVSkJRVmMwUWl4TlFVRllMRU5CUVd0Q0xFbEJRV3hDTzBGQlEwUXNTMEZLUkN4TlFVbFBMRWxCUVVrM2RVSXNVMEZCVXl4UlFVRmlMRVZCUVhWQ08wRkJRelZDTzBGQlEwRXNWVUZCU1RKMlFpeFBRVUZQY0hkQ0xFMUJRVTEwUWl4VFFVRk9MRU5CUVdkQ2FFTXNTMEZCYUVJc1EwRkJjMEpqTEVsQlFYUkNMRU5CUVRKQ09FSXNVMEZCTTBJc1JVRkJjME1zUTBGQmRFTXNRMEZCV0N4RFFVWTBRaXhEUVVWNVFqdEJRVU55UkN4VlFVRkphM2hDTEZsQlFWa3NTMEZCUzNobExFbEJRVXdzUTBGQlZTeFZRVUZXTEVOQlFXaENMRU5CU0RSQ0xFTkJSMWM3TzBGQlJYWkRMRlZCUVVsM1pTeGpRVUZqUXl4VFFVRmtMRWxCUVRKQ1JDeFZRVUZWZEVnc1RVRkJWaXhOUVVGelFuVklMRk5CUVhKRUxFVkJRV2RGTzBGQlF6bEVPMEZCUTBFc1dVRkJTU3hMUVVGTE5YaENMRTFCUVV3c1MwRkJaMElzUTBGQmNFSXNSVUZCZFVJN1FVRkRja0k3UVVGRFFUSjRRaXh2UWtGQlZYUklMRTFCUVZZc1JVRkJhMEkzY0VJc1MwRkJiRUlzUTBGQmQwSnRlRUlzVTBGQmVFSXNSVUZCYlVOS0xFbEJRVzVETzBGQlEwUXNVMEZJUkN4TlFVZFBPMEZCUTB3c1pVRkJTMnA0UWl4SlFVRk1MRU5CUVZVc1ZVRkJWWEJETEVOQlFWWXNSVUZCWVRSNVFpeEZRVUZpTEVWQlFXbENPMEZCUTNwQ08wRkJRMEZoTEhOQ1FVRlZkRWdzVFVGQlZpeEZRVUZyUWpkd1FpeExRVUZzUWl4RFFVRjNRbXRHTEVWQlFVVnZja0lzUlVGQlJpeEZRVUZOTTJRc1NVRkJUaXhEUVVGWExGVkJRVmdzUTBGQmVFSXNSVUZCWjBSdlpTeEpRVUZvUkR0QlFVTkVMRmRCU0VRN1FVRkpSRHRCUVVOR0xFOUJXRVFzVFVGWFR6dEJRVU5NTzBGQlEwRXNZMEZCVFN4SlFVRkpUU3hqUVVGS0xFTkJRVzFDTEcxQ1FVRnRRbmhJTEUxQlFXNUNMRWRCUVRSQ0xHMURRVUUxUWl4SlFVRnRSWE5JTEZsQlFWbDRReXhoUVVGaGQwTXNVMEZCWWl4RFFVRmFMRWRCUVhORExHTkJRWHBITEVsQlFUSklMRWRCUVRsSkxFTkJRVTQ3UVVGRFJEdEJRVU5HTEV0QmNFSk5MRTFCYjBKQk8wRkJRMHc3UVVGRFFTeFpRVUZOTEVsQlFVbHdaMElzVTBGQlNpeERRVUZqTEcxQ1FVRnRRak5RTEVsQlFXNUNMRWRCUVRCQ0xEaEdRVUY0UXl4RFFVRk9PMEZCUTBRN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFJDeEhRWHBEUkRzN1FVRXlRMEYwUlN4VFFVRlBkWGhDTEZWQlFWQXNSMEZCYjBKQkxGVkJRWEJDTzBGQlEwRnVjRUlzU1VGQlJYQkhMRVZCUVVZc1EwRkJTemgzUWl4VlFVRk1MRWRCUVd0Q1FTeFZRVUZzUWpzN1FVRkZRVHRCUVVOQkxFZEJRVU1zV1VGQldUdEJRVU5ZTEZGQlFVa3NRMEZCUTNoMFFpeExRVUZMUkN4SFFVRk9MRWxCUVdFc1EwRkJRM0pHTEU5QlFVOXpSaXhKUVVGUUxFTkJRVmxFTEVkQlFUbENMRVZCUVcxRGNrWXNUMEZCVDNOR0xFbEJRVkFzUTBGQldVUXNSMEZCV2l4SFFVRnJRa01zUzBGQlMwUXNSMEZCVEN4SFFVRlhMRmxCUVZrN1FVRkRNVVVzWVVGQlR5eEpRVUZKUXl4SlFVRktMRWRCUVZkcmRrSXNUMEZCV0N4RlFVRlFPMEZCUTBRc1MwRkdhME03TzBGQlNXNURMRkZCUVVsRExGVkJRVlVzUTBGQlF5eFJRVUZFTEVWQlFWY3NTMEZCV0N4RFFVRmtPMEZCUTBFc1UwRkJTeXhKUVVGSk4zcENMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1RaNlFpeFJRVUZSTDNoQ0xFMUJRVm9zU1VGQmMwSXNRMEZCUXpGRExFOUJRVTl4YTBJc2NVSkJRVGxETEVWQlFYRkZMRVZCUVVWNmFrSXNRMEZCZGtVc1JVRkJNRVU3UVVGRGVFVXNWVUZCU1RoNlFpeExRVUZMUkN4UlFVRlJOM3BDTEVOQlFWSXNRMEZCVkR0QlFVTkJXaXhoUVVGUGNXdENMSEZDUVVGUUxFZEJRU3RDY210Q0xFOUJRVTh3TUVJc1MwRkJTeXgxUWtGQldpeERRVUV2UWp0QlFVTkJNVEJDTEdGQlFVOHlNRUlzYjBKQlFWQXNSMEZCT0VJek1FSXNUMEZCVHpBd1FpeExRVUZMTEhOQ1FVRmFMRXRCUVhWRE1UQkNMRTlCUVU4d01FSXNTMEZCU3l3MlFrRkJXaXhEUVVGeVJUdEJRVU5FTzBGQlEwUXNVVUZCU1N4MVFrRkJkVUkzY1VJc1NVRkJka0lzUTBGQk5FSTNTaXhQUVVGUE5EQkNMRk5CUVZBc1EwRkJhVUpETEZOQlFUZERMRXRCUVRKRUxFTkJRVU0zTUVJc1QwRkJUM0ZyUWl4eFFrRkJia1VzU1VGQk5FWXNRMEZCUTNKclFpeFBRVUZQTWpCQ0xHOUNRVUY0Unl4RlFVRTRTRHRCUVVNMVNDeFZRVUZKUnl4WFFVRlhMRU5CUVdZN1FVRkRRVGt3UWl4aFFVRlBjV3RDTEhGQ1FVRlFMRWRCUVN0Q0xGVkJRVlV3VVN4UlFVRldMRVZCUVc5Q08wRkJRMnBFTEZsQlFVa3hka0lzVFVGQlRVTXNTMEZCUzBRc1IwRkJUQ3hGUVVGV08wRkJRMEVzV1VGQlNUSjJRaXhYUVVGWGFIaENMRXRCUVV0eFpDeEhRVUZNTEVOQlFWTjVWQ3hYUVVGWExFVkJRWEJDTEVWQlFYZENlblpDTEVkQlFYaENMRU5CUVdZN1FVRkRRU3hsUVVGUGJWQXNWMEZCVnl4WlFVRlpPMEZCUXpWQ2RXZENMRzFDUVVGVFJDeFhRVUZYUlN4UlFVRndRanRCUVVORUxGTkJSazBzUlVGRlNrRXNWMEZCVnpOMlFpeEhRVVpRTEVOQlFWQTdRVUZIUkN4UFFVNUVPMEZCVDBGeVJpeGhRVUZQTWpCQ0xHOUNRVUZRTEVkQlFUaENlRTRzV1VGQk9VSTdRVUZEUkR0QlFVTkVPenM3UVVGSFFTeFJRVUZKTEVOQlFVTnVia0lzVDBGQlQya3hRaXhYUVVGU0xFbEJRWFZDTEVOQlFVTnFNVUlzVDBGQlQya3hRaXhYUVVGUUxFTkJRVzFDTlhaQ0xFZEJRUzlETEVWQlFXOUVPMEZCUTJ4RWNrWXNZVUZCVDJreFFpeFhRVUZRTEVkQlFYRkNPMEZCUTI1Q2NHVXNaVUZCVDNaU0xFdEJRVXRFTEVkQlFVd3NSVUZFV1R0QlFVVnVRa0VzWVVGQlN5eGxRVUZaTzBGQlEyWXNhVUpCUVU5RExFdEJRVXRFTEVkQlFVd3NTMEZCWVN4TFFVRkxkMUlzUzBGQmVrSTdRVUZEUkR0QlFVcHJRaXhQUVVGeVFqdEJRVTFFTzBGQlEwWXNSMEZxUTBRN1FVRnJRMEVzVFVGQlNTeERRVUZEY1dVc1UwRkJVek41UWl4VFFVRlVMRU5CUVcxQ2JYVkNMRWxCUVhoQ0xFVkJRVGhDTzBGQlF6VkNkMFVzWVVGQlV6TjVRaXhUUVVGVUxFTkJRVzFDYlhWQ0xFbEJRVzVDTEVkQlFUQkNMRlZCUVZWNVJTeExRVUZXTEVWQlFXbENPMEZCUTNwRExGVkJRVWtzVDBGQlR5eEpRVUZRTEV0QlFXZENMRlZCUVhCQ0xFVkJRV2RETzBGQlF6bENPMEZCUTBFN1FVRkRRU3hqUVVGTkxFbEJRVWxzYUVJc1UwRkJTaXhEUVVGakxITkZRVUZrTEVOQlFVNDdRVUZEUkRzN1FVRkZSQ3hWUVVGSmJXaENMRkZCUVZGMmVFSXNUVUZCVFhSQ0xGTkJRVTRzUTBGQlowSm9ReXhMUVVGb1FpeERRVUZ6UW1Nc1NVRkJkRUlzUTBGQk1rSTRRaXhUUVVFelFpeEZRVUZ6UXl4RFFVRjBReXhEUVVGYU8wRkJRVUVzVlVGRFNXdDVRaXhWUVVGVkxFbEJSR1E3UVVGQlFTeFZRVVZKUXl4UFFVRlBMRk5CUVZCQkxFbEJRVThzUjBGQldTeERRVUZGTEVOQlJucENPMEZCUVVFc1ZVRkhTVU1zVTBGQlV5eFRRVUZVUVN4TlFVRlRMRWRCUVZrN1FVRkRka0lzWlVGQlQwWXNVVUZCVVc1NVFpeExRVUZTTEVOQlFXTXNaMEpCUVdkQ2IzbENMRWxCUVdoQ0xFZEJRWFZDTEVsQlFYWkNMRWRCUVRoQ1NDeExRVUUxUXl4RlFVRnRSRU1zVFVGQlRUTXdRaXhOUVVGT0xFTkJRV0Z2UkN4TlFVRk5kRUlzVTBGQlRpeERRVUZuUW1oRExFdEJRV2hDTEVOQlFYTkNZeXhKUVVGMFFpeERRVUV5UWpoQ0xGTkJRVE5DTEVOQlFXSXNRMEZCYmtRc1EwRkJVRHRCUVVORUxFOUJURVE3TzBGQlQwRXNWVUZCU1N4TFFVRkxXaXhUUVVGVUxFVkJRVzlDTzBGQlEyeENPMEZCUTBFcmVVSXNZVUZCU3k5NVFpeFRRVUZNTEVkQlFXbENMRXRCUVV0QkxGTkJRWFJDTzBGQlEwUTdRVUZEUkdkNlFpeGhRVUZQYUhwQ0xGTkJRVkFzUjBGQmJVSXNTVUZCU1N0NVFpeEpRVUZLTEVWQlFXNUNPenRCUVVWQkxHRkJRVTlETEUxQlFWQTdRVUZEUkN4TFFYSkNSRHRCUVhOQ1JEdEJRVU5FTzBGQlEwRXNWMEZCVXpGRUxGbEJRVlFzUTBGQmMwSTNka0lzUlVGQmRFSXNSVUZCTUVJN1FVRkRlRUlzVVVGQlNXdDZRaXhUUVVGVE0zbENMRk5CUVZRc1EwRkJiVUp4VXl4SlFVRnVRaXhMUVVFMFFqQm1MRk5CUVdoRExFVkJRVEpETzBGQlEzcERMRlZCUVVsclFpeG5Ra0ZCWjBJc2QwSkJRWEJDTzBGQlEwRXNWVUZCU1VNc1ZVRkJWVVFzWTBGQlkycHpRaXhKUVVGa0xFTkJRVzFDZGtnc1IwRkJSMmhDTEZGQlFVZ3NSVUZCYmtJc1EwRkJaRHRCUVVOQkxHRkJRVTk1TUVJc1YwRkJWMEVzVVVGQlVTOTVRaXhOUVVGU0xFZEJRV2xDTEVOQlFUVkNMRWRCUVdkREszbENMRkZCUVZFc1EwRkJVaXhGUVVGWE1YZENMRWxCUVZnc1JVRkJhRU1zUjBGQmIwUXNSVUZCTTBRN1FVRkRSQ3hMUVVwRUxFMUJTVThzU1VGQlNTOURMRWRCUVVkUExGTkJRVWdzUzBGQmFVSXJlRUlzVTBGQmNrSXNSVUZCWjBNN1FVRkRja01zWVVGQlQzUjVRaXhIUVVGSFV5eFhRVUZJTEVOQlFXVnRVeXhKUVVGMFFqdEJRVU5FTEV0QlJrMHNUVUZGUVR0QlFVTk1MR0ZCUVU4MVV5eEhRVUZIVHl4VFFVRklMRU5CUVdGRkxGZEJRV0lzUTBGQmVVSnRVeXhKUVVGb1F6dEJRVU5FTzBGQlEwWTdRVUZEUkN4WFFVRlRObVVzVlVGQlZDeERRVUZ2UW1sRExFZEJRWEJDTEVWQlFYbENPMEZCUTNaQ0xGRkJRVWtzVjBGQlYwRXNSMEZCWml4RlFVRnZRaXhQUVVGUExFbEJRVkFzUTBGQmNFSXNTMEZCY1VNc1NVRkJTU3haUVVGWlFTeEhRVUZvUWl4RlFVRnhRaXhQUVVGUExFdEJRVkFzUTBGQmNrSXNTMEZCZFVNc1NVRkJTU3hEUVVGRGFuaENMRTFCUVUxcGVFSXNUVUZCVFN4RFFVRmFMRU5CUVV3c1JVRkJjVUlzVDBGQlQyaDRRaXhYUVVGWFozaENMRWRCUVZnc1EwRkJVRHRCUVVOcVJ5eFhRVUZQUVN4SFFVRlFPMEZCUTBRN1FVRkRSRHRCUVVOQk8wRkJRMEVzVjBGQlV6TkVMRk5CUVZRc1EwRkJiVUl5UkN4SFFVRnVRaXhGUVVGM1FqdEJRVU4wUWl4WFFVRlBRU3hKUVVGSmVIaENMRTlCUVVvc1EwRkJXU3hwUWtGQldpeEZRVUVyUWl4UFFVRXZRaXhGUVVGM1EzbENMRmRCUVhoRExFVkJRVkE3UVVGRFJEdEJRVU5HTEVOQmFsbEJMRU5CYVZsRGQzSkNMRTFCYWxsRUxFTkJRVVE3UVVOR1FUczdRVUZGUVRzN1FVRkZRU3hKUVVGSmQwVXNaVUZCWlN4WlFVRlpPMEZCUVVVc1YwRkJVME1zWjBKQlFWUXNRMEZCTUVKeWJrSXNUVUZCTVVJc1JVRkJhME5uV0N4TFFVRnNReXhGUVVGNVF6dEJRVUZGTEZOQlFVc3NTVUZCU1ROclFpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWt5YTBJc1RVRkJUVGRwUWl4TlFVRXhRaXhGUVVGclF6bENMRWRCUVd4RExFVkJRWFZETzBGQlFVVXNWVUZCU1dreFFpeGhRVUZoZEZFc1RVRkJUVE5yUWl4RFFVRk9MRU5CUVdwQ0xFTkJRVEpDYVRGQ0xGZEJRVmQ0WWl4VlFVRllMRWRCUVhkQ2QySXNWMEZCVjNoaUxGVkJRVmdzU1VGQmVVSXNTMEZCYWtRc1EwRkJkMFIzWWl4WFFVRlhkR2RDTEZsQlFWZ3NSMEZCTUVJc1NVRkJNVUlzUTBGQlowTXNTVUZCU1N4WFFVRlhjMmRDTEZWQlFXWXNSVUZCTWtKQkxGZEJRVmQwWWl4UlFVRllMRWRCUVhOQ0xFbEJRWFJDTEVOQlFUUkNibUVzVDBGQlQydFdMR05CUVZBc1EwRkJjMEl2Unl4TlFVRjBRaXhGUVVFNFFuTnVRaXhYUVVGWE0xb3NSMEZCZWtNc1JVRkJPRU15V2l4VlFVRTVRenRCUVVFMFJEdEJRVUZGTEVkQlFVTXNUMEZCVHl4VlFVRlZReXhYUVVGV0xFVkJRWFZDUXl4VlFVRjJRaXhGUVVGdFEwTXNWMEZCYmtNc1JVRkJaMFE3UVVGQlJTeFJRVUZKUkN4VlFVRktMRVZCUVdkQ1NDeHBRa0ZCYVVKRkxGbEJRVmwyZWtJc1UwRkJOMElzUlVGQmQwTjNla0lzVlVGQmVFTXNSVUZCY1VRc1NVRkJTVU1zVjBGQlNpeEZRVUZwUWtvc2FVSkJRV2xDUlN4WFFVRnFRaXhGUVVFNFFrVXNWMEZCT1VJc1JVRkJORU1zVDBGQlQwWXNWMEZCVUR0QlFVRnhRaXhIUVVGb1RqdEJRVUZ0VGl4RFFVRTVhRUlzUlVGQmJrSTdPMEZCUlVFc1UwRkJVMGNzWlVGQlZDeERRVUY1UWtNc1VVRkJla0lzUlVGQmJVTktMRmRCUVc1RExFVkJRV2RFTzBGQlFVVXNUVUZCU1N4RlFVRkZTU3h2UWtGQmIwSktMRmRCUVhSQ0xFTkJRVW9zUlVGQmQwTTdRVUZCUlN4VlFVRk5MRWxCUVVrM2FFSXNVMEZCU2l4RFFVRmpMRzFEUVVGa0xFTkJRVTQ3UVVGQk1rUTdRVUZCUlRzN1FVRkZla29zUTBGQlF5eFZRVUZWTjB3c1EwRkJWaXhGUVVGaE96dEJRVVZhT3pzN096czdPenM3UVVGVFFTeE5RVUZKSzNSQ0xGbEJRVmtzV1VGQldUdEJRVU14UWpzN096czdPenRCUVU5QkxHRkJRVk5CTEZOQlFWUXNRMEZCYlVKRExFOUJRVzVDTEVWQlFUUkNiRlFzVDBGQk5VSXNSVUZCY1VNN1FVRkRia01yVXl4elFrRkJaMElzU1VGQmFFSXNSVUZCYzBKRkxGTkJRWFJDT3p0QlFVVkJMRmRCUVVzdlJDeFJRVUZNTEVkQlFXZENaMFVzVDBGQmFFSTdRVUZEUVN4WFFVRkxiRlFzVDBGQlRDeEhRVUZsT1dFc1JVRkJSVEZGTEUxQlFVWXNRMEZCVXl4RlFVRlVMRVZCUVdGNWVVSXNWVUZCVlVVc1VVRkJka0lzUlVGQmFVTXNTMEZCUzJwRkxGRkJRVXdzUTBGQlkzWmpMRWxCUVdRc1JVRkJha01zUlVGQmRVUnhUaXhQUVVGMlJDeERRVUZtTzBGQlEwRXNWMEZCUzI5VUxGbEJRVXdzUjBGQmIwSnNkVUlzUjBGQmNFSTdRVUZEUVN4WFFVRkxiWFZDTEZOQlFVd3NSMEZCYVVKdWRVSXNSMEZCYWtJN08wRkJSVUVzVjBGQlMzRnhRaXhMUVVGTU8wRkJRMEVzVjBGQlN5dEVMRTlCUVV3N08wRkJSVUZxUml4cFFrRkJWMU1zWTBGQldDeERRVUV3UWl4SlFVRXhRaXhGUVVGblF5eFhRVUZvUXp0QlFVTkJWQ3hwUWtGQlYydEdMRkZCUVZnc1EwRkJiMEpETEZGQlFYQkNMRU5CUVRaQ0xGZEJRVGRDTEVWQlFUQkRPMEZCUTNoRExHdENRVUZWTzBGQlJEaENMRTlCUVRGRE8wRkJSMFE3TzBGQlJVUTdPenM3T3p0QlFVOUJaaXhwUWtGQllWRXNVMEZCWWl4RlFVRjNRaXhEUVVGRE8wRkJRM1pDYW1Fc1YwRkJTeXhQUVVSclFqdEJRVVYyUWk5UUxHRkJRVThzVTBGQlUzTnRRaXhMUVVGVUxFZEJRV2xDTzBGQlEzUkNMRmxCUVVsb2NFSXNTMEZCU3l4TFFVRkxNbTlDTEZGQlFVd3NRMEZCWTNCc1FpeEpRVUZrTEVOQlFXMUNMRWxCUVc1Q0xFTkJRVlE3TzBGQlJVRXNZVUZCUzI5c1FpeFJRVUZNTEVOQlFXTndiRUlzU1VGQlpDeERRVUZ0UWl4aFFVRnVRaXhGUVVGclF5eE5RVUZzUXpzN1FVRkZRU3hoUVVGTGIyeENMRkZCUVV3c1EwRkJZMnhMTEZGQlFXUXNRMEZCZFVJc2JVSkJRVzFDTEV0QlFVdG9SaXhQUVVGTUxFTkJRV0Y1VkN4VlFVRjJSRHM3UVVGRlFUdEJRVU5CTEdGQlFVdEtMRk5CUVV3c1IwRkJhVUp1ZFVJc1JVRkJSWFJKTEZGQlFVWXNSVUZCV1cxTkxFbEJRVm9zUTBGQmFVSXNhVUpCUVdsQ2VFTXNSVUZCYWtJc1IwRkJjMElzYlVKQlFYUkNMRWRCUVRSRFFTeEZRVUUxUXl4SFFVRnBSQ3h2UWtGQmFrUXNSMEZCZDBWQkxFVkJRWGhGTEVkQlFUWkZMRWxCUVRsR0xFVkJRVzlIZFVRc1NVRkJjRWNzUTBGQmVVY3NaVUZCZWtjc1JVRkJNRWdzVDBGQk1VZ3NSVUZCYlVsQkxFbEJRVzVKTEVOQlFYZEpMR1ZCUVhoSkxFVkJRWGxLZGtRc1JVRkJla29zUTBGQmFrSTdPMEZCUlVFN1FVRkRRU3haUVVGSkxFdEJRVXQ1V2l4UFFVRk1MRU5CUVdFd1ZDeGpRVUZpTEV0QlFXZERMRWxCUVhCRExFVkJRVEJETzBGQlEzaERMR05CUVVsRExGVkJRVlV2TWtJc1UwRkJVekJDTEdGQlFWUXNRMEZCZFVJc1MwRkJka0lzUTBGQlpEdEJRVU5CTEdOQlFVbHpNVUlzYTBKQlFXdENNWFZDTEVWQlFVVXNTMEZCUzJkeFFpeFJRVUZRTEVWQlFXbENNMklzUjBGQmFrSXNRMEZCY1VJc1ZVRkJja0lzVFVGQmNVTXNUMEZCY2tNc1IwRkJLME1zYTBKQlFTOURMRWRCUVc5RkxIRkNRVUV4Ump0QlFVTkJiMmRDTEd0Q1FVRlJOM05DTEZsQlFWSXNRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNNa0pCUVRKQ09ITkNMR1ZCUVhwRU8wRkJRMEVzWlVGQlMwTXNVVUZCVEN4SFFVRm5Rak4xUWl4RlFVRkZlWFZDTEU5QlFVWXNRMEZCYUVJN1FVRkRRU3hqUVVGSlF5eHZRa0ZCYjBJc2EwSkJRWGhDTEVWQlFUUkRPMEZCUXpGRE1YVkNMR05CUVVVc1RVRkJSaXhGUVVGVmIxY3NUVUZCVml4RFFVRnBRaXhMUVVGTGRWa3NVVUZCZEVJN1FVRkRSQ3hYUVVaRUxFMUJSVTg3UVVGRFRDeHBRa0ZCU3pORkxGRkJRVXdzUTBGQll6bG1MRkZCUVdRc1EwRkJkVUlzTWtKQlFYWkNMRVZCUVc5RWEwMHNUVUZCY0VRc1EwRkJNa1FzUzBGQlMzVlpMRkZCUVdoRk8wRkJRMFE3UVVGRFJqczdRVUZGUkN4aFFVRkxOMVFzVDBGQlRDeERRVUZoT0ZRc1ZVRkJZaXhIUVVFd1FpeExRVUZMT1ZRc1QwRkJUQ3hEUVVGaE9GUXNWVUZCWWl4SlFVRXlRaXhKUVVGSmFIZENMRTFCUVVvc1EwRkJWeXhMUVVGTGEyTXNUMEZCVEN4RFFVRmhLMVFzVjBGQmVFSXNSVUZCY1VNc1IwRkJja01zUlVGQk1FTndkRUlzU1VGQk1VTXNRMEZCSzBNc1MwRkJTM1Z2UWl4UlFVRk1MRU5CUVdNc1EwRkJaQ3hGUVVGcFFuaHRRaXhUUVVGb1JTeERRVUZ5UkRzN1FVRkZRU3haUVVGSkxFdEJRVXR6V0N4UFFVRk1MRU5CUVdFNFZDeFZRVUZpTEV0QlFUUkNMRWxCUVdoRExFVkJRWE5ETzBGQlEzQkRMR1ZCUVVzNVZDeFBRVUZNTEVOQlFXRm5WU3hSUVVGaUxFZEJRWGRDTEV0QlFVdG9WU3hQUVVGTUxFTkJRV0ZuVlN4UlFVRmlMRWxCUVhsQ0xFdEJRVXM1UlN4UlFVRk1MRU5CUVdNc1EwRkJaQ3hGUVVGcFFuaHRRaXhUUVVGcVFpeERRVUV5UW1kRExFdEJRVE5DTEVOQlFXbERMSFZEUVVGcVF5eEZRVUV3UlN4RFFVRXhSU3hGUVVFMlJXeEpMRXRCUVRkRkxFTkJRVzFHTEVkQlFXNUdMRVZCUVhkR0xFTkJRWGhHTEVOQlFXcEVPMEZCUTBFc1pVRkJTM2w0UWl4aFFVRk1PMEZCUTBRN1FVRkRSQ3haUVVGSkxFTkJRVU1zUzBGQlMycFZMRTlCUVV3c1EwRkJZV3RWTEdOQlFXUXNTMEZCYVVNc1NVRkJja01zUlVGQk1rTTdRVUZEZWtNc1pVRkJTMnhWTEU5QlFVd3NRMEZCWVd0VkxHTkJRV0lzUjBGQk9FSXhlVUlzVjBGQlZ6RkZMRTlCUVU5MVppeG5Ra0ZCVUN4RFFVRjNRbTVZTEVWQlFVVXNiVUpCUVVZc1JVRkJkVUlzUTBGQmRrSXNRMEZCZUVJc1JVRkJiVVJwZGtJc2EwSkJRVGxFTEVsQlFXOUdMRWxCUVd4SU8wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096czdPMEZCY0VOMVFpeExRVUZFTEVWQk1FTnlRanRCUVVORWJtSXNWMEZCU3l4VFFVUktPMEZCUlVRdlVDeGhRVUZQTEZOQlFWTnhjVUlzVDBGQlZDeEhRVUZ0UWp0QlFVTjRRaXhoUVVGTGNFVXNVVUZCVEN4RFFVRmphR0VzUjBGQlpDeERRVUZyUWl3eVFrRkJiRUlzUlVGQkswTnBSaXhGUVVFdlF5eERRVUZyUkR0QlFVTm9SQ3cyUWtGQmJVSXNTMEZCUzNGU0xFbEJRVXdzUTBGQlZXZERMRWxCUVZZc1EwRkJaU3hKUVVGbUxFTkJSRFpDTzBGQlJXaEVMRGhDUVVGdlFpeExRVUZMTkVjc1MwRkJUQ3hEUVVGWE5VY3NTVUZCV0N4RFFVRm5RaXhKUVVGb1FpeERRVVkwUWp0QlFVZG9SQ3dyUWtGQmNVSXNTMEZCUzNwYUxFMUJRVXdzUTBGQldYbGFMRWxCUVZvc1EwRkJhVUlzU1VGQmFrSXNRMEZJTWtJN1FVRkphRVFzYTBOQlFYZENMRXRCUVVzMlJ5eGxRVUZNTEVOQlFYRkNOMGNzU1VGQmNrSXNRMEZCTUVJc1NVRkJNVUk3UVVGS2QwSXNVMEZCYkVRN08wRkJUMEVzV1VGQlNTeExRVUZMZUU0c1QwRkJUQ3hEUVVGaGMxVXNXVUZCWWl4TFFVRTRRaXhKUVVGc1F5eEZRVUYzUXp0QlFVTjBReXhqUVVGSlF5eFZRVUZWTEV0QlFVdDJWU3hQUVVGTUxFTkJRV0V3VkN4alFVRmlMRWRCUVRoQ0xFdEJRVXRITEZGQlFXNURMRWRCUVRoRE0zVkNMRVZCUVVVc01rSkJRVVlzUTBGQk5VUTdRVUZEUVhGMlFpeHJRa0ZCVVhCaExFVkJRVklzUTBGQlZ5eEZRVUZGTEhOQ1FVRnpRaXhMUVVGTGFXRXNTMEZCVEN4RFFVRlhOVWNzU1VGQldDeERRVUZuUWl4SlFVRm9RaXhEUVVGNFFpeEZRVUZZTzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN1FVRm9Ra01zUzBFeFEzRkNMRVZCSzBSeVFqdEJRVU5FZUZVc1YwRkJTeXhsUVVSS08wRkJSVVF2VUN4aFFVRlBMRk5CUVZObmNrSXNZVUZCVkN4SFFVRjVRanRCUVVNNVFpeFpRVUZKZWtVc1VVRkJVU3hKUVVGYU96dEJRVVZCZEhGQ0xGVkJRVVZ3U1N4TlFVRkdMRVZCUVZWeFpDeEZRVUZXTEVOQlFXRXNkVUpCUVdJc1JVRkJjME1zV1VGQldUdEJRVU5vUkN4alFVRkphMVVzVjBGQlZ6WkRMRlZCUVZnc1EwRkJjMEp6UkN4UFFVRjBRaXhEUVVFNFFtaEdMRTFCUVUxNFVDeFBRVUZPTEVOQlFXTm5WU3hSUVVFMVF5eERRVUZLTEVWQlFUSkVPMEZCUTNwRWVFVXNhMEpCUVUxcFJpeE5RVUZPTEVOQlFXRXNTVUZCWWp0QlFVTkVMRmRCUmtRc1RVRkZUenRCUVVOTWFrWXNhMEpCUVUxcFJpeE5RVUZPTEVOQlFXRXNTMEZCWWp0QlFVTkVPMEZCUTBZc1UwRk9SQ3hGUVUxSGNtRXNSMEZPU0N4RFFVMVBMRzFDUVU1UUxFVkJUVFJDTEZsQlFWazdRVUZEZEVNc1kwRkJTV2xWTEZkQlFWYzJReXhWUVVGWUxFTkJRWE5DYzBRc1QwRkJkRUlzUTBGQk9FSm9SaXhOUVVGTmVGQXNUMEZCVGl4RFFVRmpaMVVzVVVGQk5VTXNRMEZCU2l4RlFVRXlSRHRCUVVONlJIaEZMR3RDUVVGTmFVWXNUVUZCVGl4RFFVRmhMRWxCUVdJN1FVRkRSRHRCUVVOR0xGTkJWa1E3UVVGWFJEczdRVUZGUkRzN096czdPMEZCYkVKRExFdEJMMFJ4UWl4RlFYVkdja0k3UVVGRFJIcGlMRmRCUVVzc1VVRkVTanRCUVVWRUwxQXNZVUZCVHl4VFFVRlRkM0pDTEUxQlFWUXNRMEZCWjBKWUxGVkJRV2hDTEVWQlFUUkNPMEZCUTJwRExGbEJRVWxaTEZWQlFWVXNTMEZCUzNoR0xGRkJRVXdzUTBGQlkyNXRRaXhKUVVGa0xFTkJRVzFDTEdOQlFXNUNMRU5CUVdRN1FVRkRRU3haUVVGSkszRkNMRlZCUVVvc1JVRkJaMEk3UVVGRFpDeGxRVUZMVFN4TFFVRk1PMEZCUTBFc1pVRkJTMDRzVlVGQlRDeEhRVUZyUWl4SlFVRnNRanRCUVVOQkxHVkJRVXMxUlN4UlFVRk1MRU5CUVdOd2JFSXNTVUZCWkN4RFFVRnRRaXhoUVVGdVFpeEZRVUZyUXl4UFFVRnNRenRCUVVOQkxHVkJRVXR2YkVJc1VVRkJUQ3hEUVVGamFHRXNSMEZCWkN4RFFVRnJRaXh0UTBGQmJFSTdRVUZEUVN4alFVRkpkMllzVVVGQlVXd3hRaXhOUVVGYUxFVkJRVzlDTzBGQlEyeENhekZDTEc5Q1FVRlJOV2RDTEVsQlFWSTdRVUZEUkR0QlFVTkdMRk5CVWtRc1RVRlJUenRCUVVOTUxHVkJRVXRuWjBJc1ZVRkJUQ3hIUVVGclFpeExRVUZzUWp0QlFVTkJMR1ZCUVVzMVJTeFJRVUZNTEVOQlFXTndiRUlzU1VGQlpDeERRVUZ0UWl4aFFVRnVRaXhGUVVGclF5eE5RVUZzUXp0QlFVTkJMR1ZCUVV0dmJFSXNVVUZCVEN4RFFVRmpMMVVzUlVGQlpDeERRVUZwUWp0QlFVTm1MQ3RDUVVGdFFpeExRVUZMY1ZJc1NVRkJUQ3hEUVVGVlowTXNTVUZCVml4RFFVRmxMRWxCUVdZc1EwRkVTanRCUVVWbUxHbERRVUZ4UWl4TFFVRkxlbG9zVFVGQlRDeERRVUZaZVZvc1NVRkJXaXhEUVVGcFFpeEpRVUZxUWp0QlFVWk9MRmRCUVdwQ08wRkJTVUVzWTBGQlNXdElMRkZCUVZGc01VSXNUVUZCV2l4RlFVRnZRanRCUVVOc1Ftc3hRaXh2UWtGQlVUZG5RaXhKUVVGU08wRkJRMFE3UVVGRFJqdEJRVU5HT3p0QlFVVkVPenM3T3p0QlFYcENReXhMUVhaR2NVSXNSVUZ4U0hKQ08wRkJRMFJ0Uml4WFFVRkxMR2RDUVVSS08wRkJSVVF2VUN4aFFVRlBMRk5CUVZNd2NrSXNZMEZCVkN4RFFVRjNRbmhtTEV0QlFYaENMRVZCUVN0Q08wRkJRM0JETEdWQlFVOHNTMEZCVUR0QlFVTkVPenRCUVVWRU8wRkJRMEU3TzBGQlVFTXNTMEZ5U0hGQ0xFVkJPRWh5UWp0QlFVTkVOa1FzVjBGQlN5eHRRa0ZFU2p0QlFVVkVMMUFzWVVGQlR5eFRRVUZUTW5KQ0xHbENRVUZVTEVOQlFUSkNlbVlzUzBGQk0wSXNSVUZCYTBNN1FVRkRka01zV1VGQlNYTkNMRTlCUVU4c1NVRkJXQ3hEUVVSMVF5eERRVU4wUWpzN1FVRkZha0k3UVVGRFFTeFpRVUZKUVN4TFFVRkxiMlVzV1VGQlRDeExRVUZ6UW5CbExFdEJRVXR4WlN4WlFVRXZRaXhGUVVFMlF6dEJRVU16UXp0QlFVTkJMR05CUVVseVpTeExRVUZMT0Vvc1UwRkJUQ3hMUVVGdFFpeERRVUYyUWl4RlFVRXdRanRCUVVONFFqbEtMR2xDUVVGTE9Fb3NVMEZCVEN4SFFVRnBRaXhEUVVGcVFqdEJRVU5FTzBGQlEwUTdRVUZEUVN4alFVRkpPVW9zUzBGQlN6aEtMRk5CUVV3c1MwRkJiVUk1U2l4TFFVRkxiMlVzV1VGQlRDeEhRVUZ2UW5CbExFdEJRVXR4WlN4WlFVRm9SQ3hGUVVFNFJEdEJRVU0xUkhKbExHbENRVUZMT0Vvc1UwRkJUQ3hIUVVGcFFqbEtMRXRCUVV0dlpTeFpRVUZNTEVkQlFXOUNjR1VzUzBGQlMzRmxMRmxCUVhwQ0xFZEJRWGRETEVOQlFYcEVPMEZCUTBRN1FVRkRSanRCUVVORWNtVXNZVUZCUzNObExFOUJRVXdzUjBGQlpYUmxMRXRCUVVzNFNpeFRRVUZNTEVkQlFXbENMRU5CUVdoRE8wRkJRMEU1U2l4aFFVRkxkV1VzVTBGQlRDeEhRVUZwUW5abExFdEJRVXM0U2l4VFFVRk1MRWRCUVdsQ09Vb3NTMEZCUzI5bExGbEJRVXdzUjBGQmIwSndaU3hMUVVGTGNXVXNXVUZCTTBRN1FVRkRRWEpsTEdGQlFVdDNaU3hMUVVGTUxFZEJRV0U1Wml4TlFVRk5hVU1zWVVGQlRpeERRVUZ2UW5kQ0xFdEJRV3BETzBGQlEwUTdRVUZ1UWtFc1MwRTVTSEZDTEVWQmEwcHlRanRCUVVORVNTeFhRVUZMTEhkQ1FVUktPMEZCUlVRdlVDeGhRVUZQTEZOQlFWTnBjMElzYzBKQlFWUXNRMEZCWjBNdlppeExRVUZvUXl4RlFVRjFRenRCUVVNMVF5eFpRVUZKYzBJc1QwRkJUeXhKUVVGWUxFTkJSRFJETEVOQlF6TkNPMEZCUTJwQ0xGbEJRVWt3WlN4TFFVRkxhR2RDTEUxQlFVMTVSQ3hMUVVGT0xFZEJRV051UXl4TFFVRkxkMlVzUzBGQk5VSTdRVUZEUVN4WlFVRkpSeXhQUVVGUExFTkJRVU5FTEVWQlFWbzdRVUZEUVRGbExHRkJRVXQzWlN4TFFVRk1MRWRCUVdFNVppeE5RVUZOZVVRc1MwRkJia0k3TzBGQlJVRXNXVUZCU1hWakxFMUJRVTB4WlN4TFFVRkxjMlVzVDBGQldDeEpRVUZ6UWtzc1VVRkJVVE5sTEV0QlFVdDFaU3hUUVVGMlF5eEZRVUZyUkR0QlFVTm9SRGRtTEdkQ1FVRk5ORUlzWlVGQlRqdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1OVUlzWjBKQlFVMHlRaXhqUVVGT08wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096czdPenM3UVVGbVF5eExRV3hLY1VJc1JVRjVTM0pDTzBGQlEwUnJReXhYUVVGTExFMUJSRW83UVVGRlJDOVFMR0ZCUVU4c1UwRkJVM1ZwUWl4SlFVRlVMRU5CUVdOeVZ5eExRVUZrTEVWQlFYRkNjVU1zVDBGQmNrSXNSVUZCT0VJN1FVRkRia01zV1VGQlNTeExRVUZMTUZnc1VVRkJUQ3hEUVVGakwwb3NVVUZCWkN4RFFVRjFRaXhUUVVGMlFpeExRVUZ4UXl4TFFVRkxNazhzVlVGQk9VTXNSVUZCTUVRN1FVRkRlRVE3UVVGRFJEdEJRVU5FTEZsQlFVbDBSU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNXVUZCU1doWkxFOUJRVW9zUlVGQllUdEJRVU5ZTEdWQlFVczBZaXhaUVVGTUxFZEJRVzlDTldJc1QwRkJjRUk3UVVGRFJEczdRVUZGUkN4WlFVRkpMRXRCUVV0M1NTeFBRVUZNTEVOQlFXRnhWaXhQUVVGaUxFdEJRWGxDTEV0QlFUZENMRVZCUVc5RE8wRkJRMnhEZGpSQ0xHbENRVUZQZFhkQ0xGRkJRVkFzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUlzUTBGQmJrSTdRVUZEUkN4VFFVWkVMRTFCUlU4c1NVRkJTU3hMUVVGTGNrNHNUMEZCVEN4RFFVRmhjVllzVDBGQllpeExRVUY1UWl4UlFVRTNRaXhGUVVGMVF6dEJRVU0xUTNZMFFpeHBRa0ZCVDNWM1FpeFJRVUZRTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDZW5kQ0xGTkJRVk5uV0N4SlFVRlVMRU5CUVdOcGFFSXNXVUZCYWtNN1FVRkRSRHM3UVVGRlJEczdPenRCUVVsQmNrWXNZMEZCVFU0c1VVRkJUaXhEUVVGbGJFc3NVVUZCWml4RFFVRjNRaXhUUVVGNFFqczdRVUZGUVN4aFFVRkxjVThzVTBGQlRDeERRVUZsZG5CQ0xFbEJRV1lzUTBGQmIwSXNaVUZCY0VJc1JVRkJjVU1zVFVGQmNrTTdRVUZEUVN4aFFVRkxiMnhDTEZGQlFVd3NRMEZCWTNCc1FpeEpRVUZrTEVOQlFXMUNMR0ZCUVc1Q0xFVkJRV3RETEU5QlFXeERMRVZCUVRKRE1FNHNUMEZCTTBNc1EwRkJiVVFzY1VKQlFXNUVPenRCUVVWQk8wRkJRMEVzV1VGQlNTeExRVUZMZDBrc1QwRkJUQ3hEUVVGaGMxWXNZVUZCWWl4TFFVRXJRaXhMUVVGdVF5eEZRVUV3UXp0QlFVTjRRM0IzUWl4WlFVRkZMRTFCUVVZc1JVRkJWVGhtTEZGQlFWWXNRMEZCYlVJc2IwSkJRVzVDTEVWQlFYbEROMHNzUlVGQmVrTXNRMEZCTkVNc1YwRkJOVU1zUlVGQmVVUXNTMEZCUzNkaExHTkJRVGxFTzBGQlEwRXNaVUZCUzNwR0xGRkJRVXdzUTBGQll5OVZMRVZCUVdRc1EwRkJhVUlzV1VGQmFrSXNSVUZCSzBJc1MwRkJTM2xoTEdsQ1FVRndRenRCUVVOQkxHVkJRVXN4Uml4UlFVRk1MRU5CUVdNdlZTeEZRVUZrTEVOQlFXbENMRmRCUVdwQ0xFVkJRVGhDTEV0QlFVc3JZU3h6UWtGQmJrTTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxFdEJRVXRzVml4UFFVRk1MRU5CUVdFd1ZDeGpRVUZpTEV0QlFXZERMRWxCUVhCRExFVkJRVEJETzBGQlEzaERMR1ZCUVV0SExGRkJRVXdzUTBGQll6ZFBMRkZCUVdRc1EwRkJkVUlzV1VGQmRrSTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxFdEJRVXRvUml4UFFVRk1MRU5CUVdGelZTeFpRVUZpTEV0QlFUaENMRWxCUVRsQ0xFbEJRWE5ETEV0QlFVdDBWU3hQUVVGTUxFTkJRV0V3VkN4alFVRmlMRXRCUVdkRExFbEJRVEZGTEVWQlFXZEdPMEZCUXpsRkxHVkJRVXRITEZGQlFVd3NRMEZCWXpkUExGRkJRV1FzUTBGQmRVSXNZVUZCZGtJN1FVRkRSRHM3UVVGRlJDeFpRVUZKTEV0QlFVdG9SaXhQUVVGTUxFTkJRV0YxVml4VFFVRmlMRXRCUVRKQ0xFbEJRUzlDTEVWQlFYRkRPMEZCUTI1RExHVkJRVXR5Unl4UlFVRk1MRU5CUVdNNVZTeEhRVUZrTEVOQlFXdENhVlVzVjBGQlYzRkRMR0ZCUVZnc1EwRkJlVUlzUzBGQlMzaENMRkZCUVRsQ0xFTkJRV3hDTEVWQlFUSkVMRmxCUVZrN1FVRkRja1ZOTEd0Q1FVRk5UaXhSUVVGT0xFTkJRV1Z1YlVJc1NVRkJaaXhEUVVGdlFpeFhRVUZ3UWl4RlFVRnBRelZKTEVWQlFXcERMRU5CUVc5RExFTkJRWEJETEVWQlFYVkRjMHdzUzBGQmRrTTdRVUZEUkN4WFFVWkVPMEZCUjBRN08wRkJSVVFzV1VGQlNTeExRVUZMZFZVc1QwRkJUQ3hEUVVGaGQxWXNVMEZCWWl4TFFVRXlRaXhKUVVFdlFpeEZRVUZ4UXp0QlFVTnVReXhsUVVGTGRFY3NVVUZCVEN4RFFVRmpPV1lzVVVGQlpDeERRVUYxUWl3eVFrRkJka0lzUlVGQmIwUjBSaXhKUVVGd1JDeERRVUY1UkN4VlFVRjZSQ3hGUVVGeFJTeEpRVUZ5UlR0QlFVTkJkV3RDTEhGQ1FVRlhhMFlzVVVGQldDeERRVUZ2UW1sRExGTkJRWEJDTEVOQlFUaENMRXRCUVV0MFJ5eFJRVUZ1UXp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdRVUYwUkVNc1MwRjZTM0ZDTEVWQmMwOXlRanRCUVVORWJGY3NWMEZCU3l4UFFVUktPMEZCUlVRdlVDeGhRVUZQTEZOQlFWTnRja0lzUzBGQlZDeERRVUZsY2xRc1JVRkJaaXhGUVVGdFFqdEJRVU40UWl4WlFVRkpMRU5CUVVNc1MwRkJTMjFQTEZGQlFVd3NRMEZCWXk5S0xGRkJRV1FzUTBGQmRVSXNVMEZCZGtJc1EwRkJSQ3hKUVVGelF5eExRVUZMTWs4c1ZVRkJMME1zUlVGQk1rUTdRVUZEZWtRN1FVRkRSRHM3UVVGRlJDeFpRVUZKZEVVc1VVRkJVU3hKUVVGYU96dEJRVVZCUVN4alFVRk5UaXhSUVVGT0xFTkJRV1ZxU3l4WFFVRm1MRU5CUVRKQ0xGTkJRVE5DT3p0QlFVVkJMR0ZCUVV0cFN5eFJRVUZNTEVOQlFXTndiRUlzU1VGQlpDeERRVUZ0UWl4aFFVRnVRaXhGUVVGclF5eE5RVUZzUXp0QlFVTkJPenM3TzBGQlJFRXNVMEZMUXpCT0xFOUJURVFzUTBGTFV5eHhRa0ZNVkRzN1FVRlBRVHRCUVVOQkxGbEJRVWtzUzBGQlMzZEpMRTlCUVV3c1EwRkJZWE5XTEdGQlFXSXNTMEZCSzBJc1MwRkJia01zUlVGQk1FTTdRVUZEZUVOd2QwSXNXVUZCUlN4TlFVRkdMRVZCUVZVclppeFhRVUZXTEVOQlFYTkNMRzlDUVVGMFFpeEZRVUUwUXk5UUxFZEJRVFZETEVOQlFXZEVMRmRCUVdoRUxFVkJRVFpFTEV0QlFVdDVaaXhqUVVGc1JUdEJRVU5CTEdWQlFVdDZSaXhSUVVGTUxFTkJRV05vWVN4SFFVRmtMRU5CUVd0Q0xGbEJRV3hDTEVWQlFXZERMRXRCUVVzd1ppeHBRa0ZCY2tNN1FVRkRRU3hsUVVGTE1VWXNVVUZCVEN4RFFVRmphR0VzUjBGQlpDeERRVUZyUWl4WFFVRnNRaXhGUVVFclFpeExRVUZMWjJkQ0xITkNRVUZ3UXp0QlFVTkVPenRCUVVWRUxGbEJRVWtzUzBGQlMyeFdMRTlCUVV3c1EwRkJZVEJVTEdOQlFXSXNTMEZCWjBNc1NVRkJjRU1zUlVGQk1FTTdRVUZEZUVNc1pVRkJTMGNzVVVGQlRDeERRVUZqTlU4c1YwRkJaQ3hEUVVFd1FpeFpRVUV4UWp0QlFVTkVPenRCUVVWRUxGbEJRVWtzUzBGQlMycEdMRTlCUVV3c1EwRkJZWE5WTEZsQlFXSXNTMEZCT0VJc1NVRkJPVUlzU1VGQmMwTXNTMEZCUzNSVkxFOUJRVXdzUTBGQllUQlVMR05CUVdJc1MwRkJaME1zU1VGQk1VVXNSVUZCWjBZN1FVRkRPVVVzWlVGQlMwY3NVVUZCVEN4RFFVRmpOVThzVjBGQlpDeERRVUV3UWl4aFFVRXhRanRCUVVORU96dEJRVVZFTEdGQlFVdHZUeXhUUVVGTUxFTkJRV1YyY0VJc1NVRkJaaXhEUVVGdlFpeGxRVUZ3UWl4RlFVRnhReXhQUVVGeVF6czdRVUZGUVN4WlFVRkpMRXRCUVV0clZ5eFBRVUZNTEVOQlFXRjNWaXhUUVVGaUxFdEJRVEpDTEVsQlFTOUNMRVZCUVhGRE8wRkJRMjVETEdWQlFVdDBSeXhSUVVGTUxFTkJRV001Wml4UlFVRmtMRU5CUVhWQ0xESkNRVUYyUWl4RlFVRnZSRzFXTEZWQlFYQkVMRU5CUVN0RUxGVkJRUzlFTzBGQlEwRTRTaXh4UWtGQlYydEdMRkZCUVZnc1EwRkJiMEpyUXl4WlFVRndRaXhEUVVGcFF5eExRVUZMZGtjc1VVRkJkRU03UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3T3pzN08wRkJla05ETEV0QmRFOXhRaXhGUVhOU2NrSTdRVUZEUkd4WExGZEJRVXNzVVVGRVNqdEJRVVZFTDFBc1lVRkJUeXhUUVVGVE9Fc3NUVUZCVkN4RFFVRm5RbTlDTEV0QlFXaENMRVZCUVhWQ2NVTXNUMEZCZGtJc1JVRkJaME03UVVGRGNrTXNXVUZCU1N4TFFVRkxNRmdzVVVGQlRDeERRVUZqTDBvc1VVRkJaQ3hEUVVGMVFpeFRRVUYyUWl4RFFVRktMRVZCUVhWRE8wRkJRM0pETEdWQlFVdHBVQ3hMUVVGTUxFTkJRVmRxWml4TFFVRllMRVZCUVd0Q2NVTXNUMEZCYkVJN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeGxRVUZMWjFVc1NVRkJUQ3hEUVVGVmNsY3NTMEZCVml4RlFVRnBRbkZETEU5QlFXcENPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3TzBGQlZrTXNTMEYwVW5GQ0xFVkJjMU55UWp0QlFVTkVkMElzVjBGQlN5eHBRa0ZFU2p0QlFVVkVMMUFzWVVGQlR5eFRRVUZUYjNKQ0xHVkJRVlFzUTBGQmVVSndNMElzUTBGQmVrSXNSVUZCTkVJN1FVRkRha01zV1VGQlNYazBRaXhUUVVGVExFbEJRV0k3TzBGQlJVRnlTQ3h0UWtGQlYydEdMRkZCUVZnc1EwRkJiMEp2UXl4VFFVRndRaXhEUVVFNFFqRTBRaXhEUVVFNVFpeEZRVUZwUXl4WFFVRnFReXhGUVVFNFF6dEJRVU0xUTIwelFpeHBRa0ZCVHl4cFFrRkJXVHRCUVVOcVFuTkNMRzFDUVVGUGRFSXNTMEZCVUR0QlFVTkJjMElzYlVKQlFVOTBReXhaUVVGUUxFTkJRVzlDTTI1Q0xFdEJRWEJDTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVORUxGZEJUREpETzBGQlRUVkRiWEZDTEcxQ1FVRlRMRzFDUVVGWk8wRkJRMjVDTXpSQ0xHTkJRVVU0V2l4bFFVRkdPMEZCUTBFNVdpeGpRVUZGTmxvc1kwRkJSanRCUVVORU8wRkJWREpETEZOQlFUbERPMEZCVjBRN08wRkJSVVE3T3pzN08wRkJiRUpETEV0QmRGTnhRaXhGUVRaVWNrSTdRVUZEUkd0RExGZEJRVXNzVTBGRVNqdEJRVVZFTDFBc1lVRkJUeXhUUVVGVE5ITkNMRTlCUVZRc1IwRkJiVUk3UVVGRGVFSXNZVUZCUzNwQ0xFdEJRVXc3UVVGRFFTeGhRVUZMYkVZc1VVRkJUQ3hEUVVGamFHRXNSMEZCWkN4RFFVRnJRaXd5UWtGQmJFSTdRVUZEUVN4aFFVRkxNbVVzVVVGQlRDeERRVUZqTTJVc1IwRkJaQ3hEUVVGclFpeGxRVUZzUWpzN1FVRkZRVzFhTEcxQ1FVRlhZeXhuUWtGQldDeERRVUUwUWl4SlFVRTFRanRCUVVORU8wRkJVa0VzUzBFM1ZIRkNMRU5CUVhoQ096dEJRWGRWUVN4WFFVRlBPRVFzVTBGQlVEdEJRVU5FTEVkQmVsZGxMRVZCUVdoQ096dEJRVEpYUVVFc1dVRkJWVVVzVVVGQlZpeEhRVUZ4UWp0QlFVTnVRanM3T3pzN08wRkJUVUZ0UWl4clFrRkJZeXhKUVZCTE96dEJRVk51UWpzN096czdPMEZCVFVGYUxHOUNRVUZuUWl4SlFXWkhPenRCUVdsQ2JrSTdPenM3T3p0QlFVMUJORUlzYlVKQlFXVXNTVUYyUWtrN08wRkJlVUp1UWpzN096czdPMEZCVFVGd1FpeHZRa0ZCWjBJc1EwRXZRa2M3TzBGQmFVTnVRanM3T3pzN08wRkJUVUZVTEdkQ1FVRlpMRTFCZGtOUE96dEJRWGxEYmtJN096czdPenRCUVUxQk5FSXNZVUZCVXl4SlFTOURWVHM3UVVGcFJHNUNPenM3T3pzN1FVRk5RWFpDTEdkQ1FVRlpMRXRCZGtSUE96dEJRWGxFYmtJN096czdPenRCUVUxQlJTeGpRVUZWTEVsQkwwUlRPenRCUVdsRmJrSTdPenM3T3p0QlFVMUJkVUlzWlVGQlZ5eEpRWFpGVVRzN1FVRjVSVzVDT3pzN096czdPMEZCVDBGNFFpeHBRa0ZCWVN4aFFXaEdUVHM3UVVGclJtNUNPenM3T3pzN1FVRk5RWGxDTEdWQlFWYzdRVUY0UmxFc1IwRkJja0k3TzBGQk1rWkJPMEZCUTBGdVNDeGhRVUZYU3l4TlFVRllMRU5CUVd0Q2RVVXNVMEZCYkVJc1JVRkJOa0lzVjBGQk4wSTdRVUZEUkN4RFFXNWtRU3hEUVcxa1EyaEdMRTFCYm1SRUxFTkJRVVE3UVVOU1FUczdRVUZGUVRzN096czdPMEZCUlVFc1EwRkJReXhWUVVGVEwyOUNMRU5CUVZRc1JVRkJXVHM3UVVGRllqczdPenM3T3pzN08wRkJSbUVzVFVGWFVEUjNRaXhMUVZoUE8wRkJXVmc3T3pzN096dEJRVTFCTEcxQ1FVRlpOVU1zVDBGQldpeEZRVUZ4UW14VUxFOUJRWEpDTEVWQlFUWkNPMEZCUVVFN08wRkJRek5DTEZkQlFVdHJVQ3hSUVVGTUxFZEJRV2RDWjBVc1QwRkJhRUk3UVVGRFFTeFhRVUZMYkZRc1QwRkJUQ3hIUVVGbE9XRXNSVUZCUlRGRkxFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRnpNVUlzVFVGQlRUTkRMRkZCUVc1Q0xFVkJRVFpDTEV0QlFVdHFSU3hSUVVGTUxFTkJRV04yWXl4SlFVRmtMRVZCUVRkQ0xFVkJRVzFFY1U0c1QwRkJia1FzUTBGQlpqczdRVUZGUVN4WFFVRkxkVkFzUzBGQlREczdRVUZGUVd4Q0xHbENRVUZYVXl4alFVRllMRU5CUVRCQ0xFbEJRVEZDTEVWQlFXZERMRTlCUVdoRE8wRkJRMEZVTEdsQ1FVRlhhMFlzVVVGQldDeERRVUZ2UWtNc1VVRkJjRUlzUTBGQk5rSXNUMEZCTjBJc1JVRkJjME03UVVGRGNFTXNaVUZCVHp0QlFVTk1MSGxDUVVGbExFMUJSRlk3UVVGRlRDeDNRa0ZCWXp0QlFVWlVMRk5CUkRaQ08wRkJTM0JETEdWQlFVODdRVUZEVEN4M1FrRkJZeXhOUVVSVU8wRkJSVXdzZVVKQlFXVTdRVUZHVmp0QlFVdzJRaXhQUVVGMFF6dEJRVlZFT3p0QlFVVkVPenM3T3pzN08wRkJja05YTzBGQlFVRTdRVUZCUVN3NFFrRXdRMGc3UVVGRFRqdEJRVU5CTEdGQlFVdDFReXhOUVVGTU96dEJRVVZCTEdGQlFVdERMRkZCUVV3c1IwRkJaMElzUzBGQlN6bEhMRkZCUVV3c1EwRkJZMjV0UWl4SlFVRmtMRTlCUVhWQ0xFdEJRVXRwV0N4UFFVRk1MRU5CUVdGcFZ5eGpRVUZ3UXl4RFFVRm9RanRCUVVOQkxHRkJRVXRETEU5QlFVd3NSMEZCWlN4TFFVRkxhRWdzVVVGQlRDeERRVUZqYm0xQ0xFbEJRV1FzVDBGQmRVSXNTMEZCUzJsWUxFOUJRVXdzUTBGQllXMVhMRlZCUVhCRExFTkJRV1k3TzBGQlJVRXNXVUZCU1VNc1ZVRkJWU3hMUVVGTGJFZ3NVVUZCVEN4RFFVRmpibTFDTEVsQlFXUXNRMEZCYlVJc1MwRkJia0lzUTBGQlpEdEJRVUZCTEZsQlEwbHpkRUlzWVVGQllTeExRVUZMU0N4UFFVRk1MRU5CUVdGd2RFSXNUVUZCWWl4RFFVRnZRaXhaUVVGd1FpeERRVVJxUWp0QlFVRkJMRmxCUlVsMlF5eExRVUZMTEV0QlFVc3liMElzVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVJemIwSXNSVUZCYWtJc1NVRkJkVUk0YmtJc1YwRkJWMWtzVjBGQldDeERRVUYxUWl4RFFVRjJRaXhGUVVFd1FpeFBRVUV4UWl4RFFVWm9RenM3UVVGSlFTeGhRVUZMUXl4UlFVRk1MRU5CUVdOd2JFSXNTVUZCWkN4RFFVRnRRanRCUVVOcVFpeDVRa0ZCWlhaRUxFVkJSRVU3UVVGRmFrSXNaMEpCUVUxQk8wRkJSbGNzVTBGQmJrSTdPMEZCUzBFc1dVRkJTU3hEUVVGRE9IWkNMRmRCUVZjM01rSXNUVUZCYUVJc1JVRkJkMEk3UVVGRGRFSXNaVUZCU3pBeVFpeFBRVUZNTEVOQlFXRXZNVUlzUlVGQllpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFqWnJRaXhSUVVGdVFpeERRVUUwUWl4WFFVRTFRanRCUVVORU96dEJRVVZFTEZsQlFVa3NRMEZCUXl4TFFVRkxhRVlzVDBGQlRDeERRVUZoYzFjc1RVRkJiRUlzUlVGQk1FSTdRVUZEZUVJc1pVRkJTMG9zVDBGQlRDeERRVUZoYkZJc1VVRkJZaXhEUVVGelFpeGhRVUYwUWp0QlFVTkVPenRCUVVWRUxGbEJRVWx2VWl4UlFVRlJOVEpDTEUxQlFWb3NSVUZCYjBJN1FVRkRiRUkyZFVJc2NVSkJRVmRyU1N4alFVRllMRU5CUVRCQ1NDeFBRVUV4UWl4RlFVRnRReXhMUVVGTFNTeG5Ra0ZCVEN4RFFVRnpRbWhLTEVsQlFYUkNMRU5CUVRKQ0xFbEJRVE5DTEVOQlFXNURPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzWlVGQlMyZEtMR2RDUVVGTUxFZEJSRXNzUTBGRGJVSTdRVUZEZWtJN08wRkJSVVFzV1VGQlNTeExRVUZMZUZjc1QwRkJUQ3hEUVVGaGVWY3NUMEZCYWtJc1JVRkJNRUk3UVVGRGVFSXNaVUZCUzBNc1dVRkJURHRCUVVORU96dEJRVVZFTEdGQlFVdHdSQ3hQUVVGTU96dEJRVVZCTEZsQlFVa3NTMEZCUzNSVUxFOUJRVXdzUTBGQllUSlhMRkZCUVdJc1NVRkJlVUlzUzBGQlMxUXNUMEZCVEN4RFFVRmhNVEpDTEUxQlFXSXNSMEZCYzBJc1EwRkJia1FzUlVGQmMwUTdRVUZEY0VRc1pVRkJTMjh6UWl4UFFVRk1PMEZCUTBRN08wRkJSVVFzV1VGQlNTeExRVUZMTlZjc1QwRkJUQ3hEUVVGaE5sY3NWVUZCYWtJc1JVRkJOa0k3UVVGQlJUdEJRVU0zUWl4bFFVRkxZaXhSUVVGTUxFTkJRV05zYzBJc1NVRkJaQ3hEUVVGdFFpeFZRVUZ1UWl4RlFVRXJRaXhEUVVFdlFqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenRCUVhaR1Z6dEJRVUZCTzBGQlFVRXNjVU5CTkVaSk8wRkJRMklzWVVGQlMyZDBRaXhSUVVGTUxFZEJRV2RDTEV0QlFVczFTQ3hSUVVGTUxFTkJRV051YlVJc1NVRkJaQ3hQUVVGMVFpeExRVUZMYVZnc1QwRkJUQ3hEUVVGaEsxY3NXVUZCY0VNc1JVRkJiMFJvZFVJc1NVRkJjRVFzUTBGQmVVUXNVVUZCZWtRc1EwRkJhRUk3UVVGRFJEczdRVUZGUkRzN096czdRVUZvUjFjN1FVRkJRVHRCUVVGQkxHZERRVzlIUkR0QlFVTlNMRmxCUVVsNWJVSXNVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJTelZOTEV0QlFVd3NSMEZCWVN4SlFVRkplVXdzVjBGQlZ6SkpMRXRCUVdZc1EwRkRXQ3hMUVVGTE9VZ3NVVUZFVFN4RlFVVllPMEZCUTBVdlR5eHZRa0ZCVlN4TFFVRkxTQ3hQUVVGTUxFTkJRV0ZwV0N4VlFVUjZRanRCUVVWRlF5eHZRa0ZCVlR0QlFVWmFMRk5CUmxjc1JVRk5XQ3haUVVGWE8wRkJRMVF4U0N4blFrRkJUVEpJTEZkQlFVNHNRMEZCYTBJc1NVRkJiRUk3UVVGRFJDeFRRVkpWTEVOQlFXSTdRVUZUUVN4aFFVRkxkbFVzUzBGQlRDeERRVUZYYWxBc1MwRkJXRHRCUVVORU96dEJRVVZFT3pzN096czdRVUZzU0ZjN1FVRkJRVHRCUVVGQkxIbERRWFZJVVR0QlFVTnFRaXhaUVVGSk5tSXNVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJTelJJTEdsQ1FVRk1PMEZCUTBRN08wRkJSVVE3T3pzN096czdRVUUxU0ZjN1FVRkJRVHRCUVVGQkxIZERRV3RKVDNKWExFVkJiRWxRTEVWQmEwbFhPMEZCUVVNN1FVRkRja0lzV1VGQlNUVkRMRTFCUVUwc1EwRkJWanRCUVVGQkxGbEJRV0ZyV2l4SlFVRmlPMEZCUVVFc1dVRkJiVUpETEZWQlFWVXNRMEZCTjBJN1FVRkJRU3haUVVGblF6bElMRkZCUVZFc1NVRkJlRU03TzBGQlJVRXNZVUZCU3pCSExFOUJRVXdzUTBGQllYQXlRaXhKUVVGaUxFTkJRV3RDTEZsQlFWYzdRVUZETTBKMU0wSXNhVUpCUVU4c1MwRkJTeTlZTEhGQ1FVRk1MRWRCUVRaQ2EwTXNUVUZCY0VNN1FVRkRRWFJqTEZsQlFVVXNTVUZCUml4RlFVRlJORVVzU1VGQlVpeERRVUZoTEZsQlFXSXNSVUZCTWtKM2RFSXNUMEZCTTBJN08wRkJSVUVzWTBGQlNUbElMRTFCUVUwd1J5eFBRVUZPTEVOQlFXTndkRUlzVFVGQlpDeERRVUZ4UWl4WlFVRnlRaXhGUVVGdFF5eERRVUZ1UXl4TlFVRXdRekJ0UWl4TlFVRk5NRWNzVDBGQlRpeERRVUZqTHpGQ0xFVkJRV1FzUTBGQmFVSnRNMElzVDBGQmFrSXNSVUZCTUVJc1EwRkJNVUlzUTBGQk9VTXNSVUZCTkVVN1FVRkJRenRCUVVNelJYQjVRaXhqUVVGRkxFbEJRVVlzUlVGQlVYRlBMRWRCUVZJc1EwRkJXU3hGUVVGRExGbEJRVmtzVlVGQllpeEZRVUY1UWl4WFFVRlhMRTFCUVhCRExFVkJRVm83UVVGRFJEdEJRVU5FTkVzc1owSkJRVTFyV2l4UFFVRlBiRm9zUjBGQlVDeEhRVUZoYTFvc1NVRkJZaXhIUVVGdlFteGFMRWRCUVRGQ08wRkJRMEZ0V2p0QlFVTkVMRk5CVkVRN08wRkJWMEVzV1VGQlNVRXNXVUZCV1N4TFFVRkxjRUlzVDBGQlRDeERRVUZoTVRKQ0xFMUJRVGRDTEVWQlFYRkRPMEZCUTI1RExHVkJRVXQzTWtJc1VVRkJUQ3hEUVVGamVtbENMRWRCUVdRc1EwRkJhMElzUlVGQlF5eFZRVUZWTkVzc1IwRkJXQ3hGUVVGc1FpeEZRVVJ0UXl4RFFVTkRPMEZCUTNCRExHTkJRVWMwUXl4RlFVRklMRVZCUVU4N1FVRkJRMEVzWlVGQlJ6VkRMRWRCUVVnN1FVRkJVeXhYUVVaclFpeERRVVZxUWp0QlFVTnVRanRCUVVOR096dEJRVVZFT3pzN096czdRVUYwU2xjN1FVRkJRVHRCUVVGQkxITkRRVEpLUzNGRUxFMUJNMHBNTEVWQk1rcGhPMEZCUTNSQ0xHRkJRVXN3VlN4UFFVRk1MRU5CUVdGd01rSXNTVUZCWWl4RFFVRnJRaXhaUVVGWE8wRkJRek5DYjBZc1dVRkJSU3hKUVVGR0xFVkJRVkZ4VHl4SFFVRlNMRU5CUVZrc1dVRkJXaXhGUVVFd1FtbFBMRTFCUVRGQ08wRkJRMFFzVTBGR1JEdEJRVWRFT3p0QlFVVkVPenM3T3pzN1FVRnFTMWM3UVVGQlFUdEJRVUZCTEdkRFFYTkxSRHRCUVVOU0xGbEJRVWxuVHl4UlFVRlJMRWxCUVZvN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVV0T0xGRkJRVXdzUTBGQlkyaGhMRWRCUVdRc1EwRkJhMElzYzBKQlFXeENMRVZCUVRCRGFVWXNSVUZCTVVNc1EwRkJOa003UVVGRE0wTXNhVU5CUVhWQ0xFdEJRVXR4WXl4blFrRkJUQ3hEUVVGelFtaEtMRWxCUVhSQ0xFTkJRVEpDTEVsQlFUTkNPMEZCUkc5Q0xGTkJRVGRETzBGQlIwRXNXVUZCU1N4TFFVRkxNRWtzVDBGQlRDeERRVUZoTVRKQ0xFMUJRV0lzUjBGQmMwSXNRMEZCTVVJc1JVRkJOa0k3TzBGQlJUTkNMR05CUVVrc1MwRkJTM2RuUWl4UFFVRk1MRU5CUVdGMVdDeExRVUZxUWl4RlFVRjNRanRCUVVOMFFpeHBRa0ZCUzNKQ0xFOUJRVXdzUTBGQllXaG9RaXhIUVVGaUxFTkJRV2xDTEhkRFFVRnFRaXhGUVVORGFVWXNSVUZFUkN4RFFVTkpMRzlDUVVSS0xFVkJRekJDTEZWQlFWTnNaQ3hEUVVGVUxFVkJRVmM3UVVGRGJrTkJMR2RDUVVGRk5sb3NZMEZCUmp0QlFVTkJNRmtzYjBKQlFVMHlTQ3hYUVVGT0xFTkJRV3RDTEVsQlFXeENPMEZCUTBRc1lVRktSQ3hGUVVsSGFHUXNSVUZLU0N4RFFVbE5MSEZDUVVwT0xFVkJTVFpDTEZWQlFWTnNaQ3hEUVVGVUxFVkJRVmM3UVVGRGRFTkJMR2RDUVVGRk5sb3NZMEZCUmp0QlFVTkJNRmtzYjBKQlFVMHlTQ3hYUVVGT0xFTkJRV3RDTEV0QlFXeENPMEZCUTBRc1lVRlFSRHRCUVZGRU8wRkJRMFE3TzBGQlJVRXNZMEZCU1N4TFFVRkxibGdzVDBGQlRDeERRVUZoTWxjc1VVRkJha0lzUlVGQk1rSTdRVUZEZWtJc2FVSkJRVXRVTEU5QlFVd3NRMEZCWVM5aUxFVkJRV0lzUTBGQlowSXNaMEpCUVdoQ0xFVkJRV3RETEZsQlFWYzdRVUZETTBOeFZpeHZRa0ZCVFU0c1VVRkJUaXhEUVVGbGRtTXNTVUZCWml4RFFVRnZRaXhYUVVGd1FpeEZRVUZwUXpaakxFMUJRVTFPTEZGQlFVNHNRMEZCWlhaakxFbEJRV1lzUTBGQmIwSXNWMEZCY0VJc1NVRkJiVU1zUzBGQmJrTXNSMEZCTWtNc1NVRkJOVVU3UVVGRFFUWmpMRzlDUVVGTk5VMHNTMEZCVGl4RFFVRlpORTBzVFVGQlRVNHNVVUZCVGl4RFFVRmxkbU1zU1VGQlppeERRVUZ2UWl4WFFVRndRaXhKUVVGdFF5eFBRVUZ1UXl4SFFVRTJReXhQUVVGNlJEdEJRVU5FTEdGQlNFUTdPMEZCUzBFc1owSkJRVWtzUzBGQlMzRk9MRTlCUVV3c1EwRkJZWGRZTEZsQlFXcENMRVZCUVN0Q08wRkJRemRDTEcxQ1FVRkxkRWtzVVVGQlRDeERRVUZqTDFVc1JVRkJaQ3hEUVVGcFFpeHhRa0ZCYWtJc1JVRkJkME1zV1VGQlZ6dEJRVU5xUkhGV0xITkNRVUZOTlUwc1MwRkJUaXhEUVVGWk5sVXNTMEZCV2p0QlFVTkVMR1ZCUmtRc1JVRkZSM1JrTEVWQlJrZ3NRMEZGVFN4eFFrRkdUaXhGUVVVMlFpeFpRVUZYTzBGQlEzUkRMRzlDUVVGSkxFTkJRVU54Vml4TlFVRk5UaXhSUVVGT0xFTkJRV1YyWXl4SlFVRm1MRU5CUVc5Q0xGZEJRWEJDTEVOQlFVd3NSVUZCZFVNN1FVRkRja00yWXl4M1FrRkJUVFZOTEV0QlFVNHNRMEZCV1dwUUxFdEJRVm83UVVGRFJEdEJRVU5HTEdWQlRrUTdRVUZQUkR0QlFVTkdPenRCUVVWRUxHTkJRVWtzUzBGQlMzRk5MRTlCUVV3c1EwRkJZVEJZTEZWQlFXcENMRVZCUVRaQ08wRkJRek5DTEdkQ1FVRkpReXhaUVVGWkxFdEJRVXQ2U1N4UlFVRk1MRU5CUVdOdWJVSXNTVUZCWkN4UFFVRjFRaXhMUVVGTGFWZ3NUMEZCVEN4RFFVRmhORmdzVTBGQmNFTXNWMEZCYlVRc1MwRkJTelZZTEU5QlFVd3NRMEZCWVRaWUxGTkJRV2hGTEVOQlFXaENPMEZCUTBGR0xITkNRVUZWTjNSQ0xFbEJRVllzUTBGQlpTeFZRVUZtTEVWQlFUSkNMRU5CUVROQ08wRkJRMEU3UVVGRVFTeGhRVVZEY1ZFc1JVRkdSQ3hEUVVWSkxHdERRVVpLTEVWQlJYZERMRlZCUVZOc1pDeERRVUZVTEVWQlFWYzdRVUZEZUVSQkxHZENRVUZGTmxvc1kwRkJSanRCUVVOUE1Ga3NiMEpCUVUweVNDeFhRVUZPTEVOQlFXdENhbmxDTEVWQlFVVXNTVUZCUml4RlFVRlJhV2RDTEZGQlFWSXNRMEZCYVVKeFN5eE5RVUZOZUZBc1QwRkJUaXhEUVVGak5GZ3NVMEZCTDBJc1EwRkJiRUk3UVVGRFJDeGhRVXhFTzBGQlRVUTdPMEZCUlVRc1kwRkJTU3hMUVVGTE5WZ3NUMEZCVEN4RFFVRmhlVmNzVDBGQmFrSXNSVUZCTUVJN1FVRkRlRUlzYVVKQlFVdExMRkZCUVV3c1EwRkJZek5qTEVWQlFXUXNRMEZCYVVJc2EwTkJRV3BDTEVWQlFYRkVMRmxCUVZjN1FVRkRPVVFzYTBKQlFVa3NZVUZCWVhoVUxFbEJRV0lzUTBGQmEwSXNTMEZCU3l0Q0xGTkJRWFpDTEVOQlFVb3NSVUZCZFVNN1FVRkJSU3gxUWtGQlR5eExRVUZRTzBGQlFXVXNaVUZFVFN4RFFVTk9PMEZCUTNoRUxHdENRVUZKYjNaQ0xFMUJRVTAxZVVJc1JVRkJSU3hKUVVGR0xFVkJRVkY1VGl4SlFVRlNMRU5CUVdFc1QwRkJZaXhEUVVGV08wRkJRVUVzYTBKQlEwRnZiRUlzVFVGQlRVUXNUVUZCVFhSSkxFMUJRVTB3Unl4UFFVRk9MRU5CUVdOd2RFSXNUVUZCWkN4RFFVRnhRaXhaUVVGeVFpeEZRVUZ0UXpaS0xFbEJRVzVETEVOQlFYZERMRTlCUVhoRExFTkJSRm83UVVGQlFTeHJRa0ZGUVhGc1FpeFRRVUZUZUVrc1RVRkJUVEJITEU5QlFVNHNRMEZCWXk4eFFpeEZRVUZrTEVOQlFXbENNak5DTEVkQlFXcENMRU5CUmxRN08wRkJTVUYwU1N4dlFrRkJUVEpJTEZkQlFVNHNRMEZCYTBKWkxFZEJRV3hDTEVWQlFYVkNReXhOUVVGMlFpeEZRVUVyUWtZc1IwRkJMMEk3UVVGRFJDeGhRVkJFTzBGQlVVUTdPMEZCUlVRc1kwRkJTU3hMUVVGTE9WZ3NUMEZCVEN4RFFVRmhObGNzVlVGQmFrSXNSVUZCTmtJN1FVRkRNMElzYVVKQlFVdGlMRkZCUVV3c1EwRkJZMjV1UWl4SFFVRmtMRU5CUVd0Q0xFdEJRVXRwYjBJc1VVRkJka0lzUlVGQmFVTXpZeXhGUVVGcVF5eERRVUZ2UXl4clFrRkJjRU1zUlVGQmQwUXNWVUZCVTJ4a0xFTkJRVlFzUlVGQldUdEJRVU5zUlR0QlFVTkJiM2hDTEhsQ1FVRlhhMFlzVVVGQldDeERRVUZ2UW05RExGTkJRWEJDTEVOQlFUaENNVFJDTEVOQlFUbENMRVZCUVdsRExFOUJRV3BETEVWQlFUQkRPMEZCUTNoRE9Fa3NjMEpCUVUwc1owSkJRVmM3UVVGRFpubHdRaXgzUWtGQlRUSklMRmRCUVU0c1EwRkJhMElzU1VGQmJFSTdRVUZEUkN4cFFrRklkVU03UVVGSmVFTmpMREJDUVVGVkxHOUNRVUZYTzBGQlEyNUNla2tzZDBKQlFVMHlTQ3hYUVVGT0xFTkJRV3RDTEV0QlFXeENPMEZCUTBRc2FVSkJUblZETzBGQlQzaERka0lzZVVKQlFWTXNiVUpCUVZjN1FVRkJSVHRCUVVOd1FpeHpRa0ZCU1RGM1FpeEZRVUZGYWtrc1JVRkJSVzlQTEUxQlFVb3NSVUZCV1N0RExFVkJRVm9zUTBGQlpXOW9RaXhOUVVGTmMwZ3NVVUZCY2tJc1EwRkJTaXhGUVVGdlF6dEJRVU5zUTNSSUxEQkNRVUZOYzBnc1VVRkJUaXhEUVVGbGFIVkNMRTFCUVdZc1EwRkJjMElzV1VGQmRFSXNSVUZCYjBNeVF5eExRVUZ3UXp0QlFVTkVPMEZCUTBZN1FVRllkVU1zWlVGQk1VTTdRVUZoUkN4aFFXWkVPMEZCWjBKRU8wRkJRMFk3UVVGRFJqczdRVUZGUkRzN096dEJRVEZRVnp0QlFVRkJPMEZCUVVFc0swSkJObEJHTzBGQlExQTdRVUZEUVN4WlFVRkpMRTlCUVU4c1MwRkJTM2x4UWl4UFFVRmFMRWxCUVhWQ0xGZEJRVE5DTEVWQlFYZERPMEZCUTNSRE8wRkJRMFE3TzBGQlJVUXNXVUZCU1N4TFFVRkxRU3hQUVVGTUxFTkJRV0V4TWtJc1RVRkJZaXhIUVVGelFpeERRVUV4UWl4RlFVRTJRanRCUVVNelFqdEJRVU5CTEdWQlFVc3dka0lzVVVGQlRDeERRVUZqYUdFc1IwRkJaQ3hEUVVGclFpeFhRVUZzUWl4RlFVRXJRbTVOTEVsQlFTOUNMRU5CUVc5RExFZEJRWEJETEVWQlFYbERiVTBzUjBGQmVrTXNRMEZCTmtNc1YwRkJOME03TzBGQlJVRTdRVUZEUVN4alFVRkpMRXRCUVVzNFN5eFBRVUZNTEVOQlFXRXlWeXhSUVVGcVFpeEZRVUV5UWp0QlFVTjZRaXhwUWtGQlN5OVVMRXRCUVV3c1EwRkJWM05XTEU5QlFWZzdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHVkJRVXRvUXl4UFFVRk1MRU5CUVdGd01rSXNTVUZCWWl4RFFVRnJRaXhWUVVGVGQzZENMRVZCUVZRc1JVRkJZVHRCUVVNM1FuQnlRaXhqUVVGRmIzSkNMRVZCUVVZc1JVRkJUWEpNTEZkQlFVNHNRMEZCYTBJc01rSkJRV3hDTEVWQlEwZFdMRlZCUkVnc1EwRkRZeXhYUVVSa0xFVkJSVWQ2VVN4SlFVWklPMEZCUjBRc1YwRktSRHM3UVVGTlFUdEJRVU5CTEdWQlFVdHZhVUlzVDBGQlRDeERRVUZoYURKQ0xFdEJRV0lzUjBGQmNVSTRhMElzVVVGQmNrSXNRMEZCT0VJc1YwRkJPVUlzUlVGQk1rTnVVaXhKUVVFelF6czdRVUZGUVR0QlFVTkJMR1ZCUVV0eFlpeFJRVUZNTEVOQlFXTXhXQ3hQUVVGa0xFTkJRWE5DTEhOQ1FVRjBRaXhGUVVFNFF5eERRVUZETEV0QlFVc3daU3hQUVVGTUxFTkJRV0ZvTWtJc1MwRkJZaXhGUVVGRUxFTkJRVGxET3p0QlFVVkJPMEZCUTBFc1kwRkJTU3hMUVVGTE9HWXNUMEZCVEN4RFFVRmhlVmNzVDBGQmFrSXNSVUZCTUVJN1FVRkRlRUlzYVVKQlFVc3dRaXhqUVVGTUxFTkJRVzlDTEVOQlFYQkNPMEZCUTBRN1FVRkRSanRCUVVOR096dEJRVVZFT3pzN096czdPenM3UVVGb1UxYzdRVUZCUVR0QlFVRkJMR3REUVhkVFEwTXNTMEY0VTBRc1JVRjNVMUZETEZkQmVGTlNMRVZCZDFOeFFsQXNSMEY0VTNKQ0xFVkJkMU13UWp0QlFVTnVReXhaUVVGSkxFTkJRVU1zUzBGQlN6VkNMRTlCUVZZc1JVRkJiVUk3UVVGQlF6dEJRVUZUTEZOQlJFMHNRMEZEVER0QlFVTTVRaXhaUVVGSmIwTXNXVUZCV1N4TFFVRkxjRU1zVDBGQlRDeERRVUZoY0hSQ0xFMUJRV0lzUTBGQmIwSXNXVUZCY0VJc1JVRkJhME16U1N4RlFVRnNReXhEUVVGeFF5eERRVUZ5UXl4RFFVRm9RanM3UVVGRlFTeFpRVUZKTEU5QlFVOTNSeXhKUVVGUUxFTkJRVmt5ZUVJc1ZVRkJWU3hEUVVGV0xFVkJRV0UxZGtJc1UwRkJla0lzUTBGQlNpeEZRVUY1UXp0QlFVRkZMR2xDUVVGUExFdEJRVkE3UVVGQlpTeFRRVXAyUWl4RFFVbDNRanM3UVVGRk0wUXNXVUZCU1RaMlFpeGpRVUZqTEV0QlFVdHlReXhQUVVGTUxFTkJRV0ZvTWtJc1MwRkJZaXhGUVVGc1FqdEJRVUZCTEZsQlEwRnpORUlzWVVGQllTeExRVUZMZEVNc1QwRkJUQ3hEUVVGaE9URkNMRWxCUVdJc1JVRkVZanRCUVVGQkxGbEJSVUZ4TkVJc1VVRkJVVXdzVVVGQlVTeFBRVUZTTEVkQlFXdENMRTFCUmpGQ08wRkJRVUVzV1VGSFFVMHNVMEZCVTA0c1VVRkJVU3hOUVVGU0xFZEJRV2xDTEU5QlNERkNPMEZCUVVFc1dVRkpRVFZKTEZGQlFWRXNTVUZLVWp0QlFVRkJMRmxCUzBGdFNpeFRRVXhCT3p0QlFVOUJMRmxCUVVrc1EwRkJRMDRzVjBGQlRDeEZRVUZyUWp0QlFVRkZPMEZCUTJ4Q1RTeHpRa0ZCV1ZBc1VVRkJVVHRCUVVOdVFpeGxRVUZMY0Zrc1QwRkJUQ3hEUVVGaE5Ga3NXVUZCWWl4SFFVRTBRazRzVlVGQlZYWjVRaXhKUVVGV0xFOUJRVzFDTEV0QlFVdHBZU3hQUVVGTUxFTkJRV0Z0Vnl4VlFVRm9ReXhGUVVFNFF6TXlRaXhOUVVFNVF5eEhRVUYxUkRnMFFpeFZRVUZWZG5sQ0xFbEJRVllzVDBGQmJVSXNTMEZCUzJsaExFOUJRVXdzUTBGQllXMVhMRlZCUVdoRExFTkJRWFpFTEVkQlFYVkhiME1zVjBGQmJra3NSMEZCYVVwRUxGVkJRVlYyZVVJc1NVRkJWaXhQUVVGdFFpeExRVUZMYVdFc1QwRkJUQ3hEUVVGaGJWY3NWVUZCYUVNc1EwRkVkRWtzUjBGRGIwdzdRVUZGTDB3c1pVRkJTMjVYTEU5QlFVd3NRMEZCWVRSWkxGbEJRV0lzUjBGQk5FSk9MRlZCUVZVM2NFSXNTVUZCVml4UFFVRnRRaXhMUVVGTGRWSXNUMEZCVEN4RFFVRmhiVmNzVlVGQmFFTXNSVUZCT0VNek1rSXNUVUZCT1VNc1IwRkJkVVE0TkVJc1ZVRkJWVGR3UWl4SlFVRldMRTlCUVcxQ0xFdEJRVXQxVWl4UFFVRk1MRU5CUVdGdFZ5eFZRVUZvUXl4RFFVRjJSQ3hIUVVGMVIzRkRMRlZCUVc1SkxFZEJRV2RLUml4VlFVRlZOM0JDTEVsQlFWWXNUMEZCYlVJc1MwRkJTM1ZTTEU5QlFVd3NRMEZCWVcxWExGVkJRV2hETEVOQlNHcEtMRU5CUkdkQ0xFTkJTV2RNTzBGQlEycE5MRk5CVEVRc1RVRkxUenRCUVVOTWQwTXNjMEpCUVZsT0xGZEJRVm83UVVGRFJEczdRVUZGUkN4WlFVRkpUU3hWUVVGVmJqVkNMRTFCUVdRc1JVRkJjMEk3UVVGRGNFSTdPenM3UVVGSlFTeGxRVUZMTUhaQ0xGRkJRVXdzUTBGQll6RllMRTlCUVdRc1EwRkJjMElzTkVKQlFYUkNMRVZCUVc5RUxFTkJRVU00WjBJc1UwRkJSQ3hGUVVGWlN5eFRRVUZhTEVOQlFYQkVPenRCUVVWQkxHTkJRVWtzUzBGQlN6TlpMRTlCUVV3c1EwRkJZWGxYTEU5QlFXcENMRVZCUVRCQ08wRkJRM2hDY1VJc2EwSkJRVTFCTEU5QlFVOHNTMEZCU3pWQ0xFOUJRVXdzUTBGQllYWnVRaXhMUVVGaUxFTkJRVzFDWjNGQ0xGTkJRVzVDTEVOQlFXSXNRMEZFZDBJc1EwRkRiMEk3UVVGRE5VTXNhVUpCUVV0U0xHTkJRVXdzUTBGQmIwSk1MRWRCUVhCQ08wRkJRMFE3TzBGQlJVUXNZMEZCU1N4TFFVRkxPVmdzVDBGQlRDeERRVUZoYzFjc1RVRkJZaXhKUVVGMVFpeERRVUZETEV0QlFVdHdTQ3hSUVVGTUxFTkJRV001WjBJc1JVRkJaQ3hEUVVGcFFpeFRRVUZxUWl4RFFVRTFRaXhGUVVGNVJEdEJRVU4yUkdsblFpeDFRa0ZCVjNkTExFMUJRVmdzUTBGQmEwSkRMRk5CUVd4Q0xFTkJRMFZJTEZWQlFWVXpWQ3hSUVVGV0xFTkJRVzFDTEZkQlFXNUNMRVZCUVdkRGVsSXNSMEZCYUVNc1EwRkJiME1zUlVGQlF5eFpRVUZaTEZWQlFXSXNSVUZCZVVJc1QwRkJUeXhEUVVGb1F5eEZRVUZ3UXl4RFFVUkdMRVZCUlVVc1MwRkJTM2xOTEU5QlFVd3NaMEpCUVRCQ2VWa3NTMEZCTVVJc1EwRkdSaXhGUVVkRkxGbEJRVlU3UVVGRFVrVXNkMEpCUVZWd2JFSXNSMEZCVml4RFFVRmpMRVZCUVVNc1dVRkJXU3hWUVVGaUxFVkJRWGxDTEZkQlFWY3NUMEZCY0VNc1JVRkJaQ3hGUVVORGVrb3NTVUZFUkN4RFFVTk5MRmRCUkU0c1JVRkRiVUlzVVVGRWJrSTdRVUZGU0N4aFFVNUVPenRCUVZGQmRXdENMSFZDUVVGWGQwc3NUVUZCV0N4RFFVRnJRa1VzVlVGQmJFSXNRMEZEUlZRc1ZVRkJWWEpVTEZkQlFWWXNRMEZCYzBJc1YwRkJkRUlzUTBGRVJpeEZRVVZGTEV0QlFVdHFSaXhQUVVGTUxHVkJRWGxDTUZrc1RVRkJla0lzUTBGR1JpeEZRVWRGTEZsQlFWVTdRVUZEVWtvc2QwSkJRVlV2VkN4VlFVRldMRU5CUVhGQ0xGZEJRWEpDTzBGQlEwRXNhMEpCUVVkcFRDeE5RVUZOZUZBc1QwRkJUaXhEUVVGak1sY3NVVUZCWkN4SlFVRXdRaXhEUVVGRGJrZ3NUVUZCVFRWTkxFdEJRVTRzUTBGQldXOVhMRkZCUVRGRExFVkJRVzFFTzBGQlEycEVlRW9zYzBKQlFVMDFUU3hMUVVGT0xFTkJRVmx6Vml4UFFVRmFPMEZCUTBRN1FVRkRSRHRCUVVORUxHRkJWRWc3UVVGVlJDeFhRVzVDUkN4TlFXMUNUenRCUVVOTVNTeHpRa0ZCVlhKVUxGZEJRVllzUTBGQmMwSXNhVUpCUVhSQ0xFVkJRWGxEVml4VlFVRjZReXhEUVVGdlJDeFhRVUZ3UkN4RlFVRnBSWHBSTEVsQlFXcEZPMEZCUTBFMmEwSXNjMEpCUVZVelZDeFJRVUZXTEVOQlFXMUNMR2xDUVVGdVFpeEZRVUZ6UTJ4aUxFbEJRWFJETEVOQlFUSkRMRmRCUVRORExFVkJRWGRFTEZGQlFYaEVMRVZCUVd0Rkswb3NTVUZCYkVVN1FVRkRRU3huUWtGQlNTeExRVUZMYlUwc1QwRkJUQ3hEUVVGaE1sY3NVVUZCWWl4SlFVRjVRaXhEUVVGRExFdEJRVXN2VkN4TFFVRk1MRU5CUVZkdlZ5eFJRVUY2UXl4RlFVRnRSRHRCUVVOcVJDeHRRa0ZCUzNCWExFdEJRVXdzUTBGQlYzTldMRTlCUVZnN1FVRkRSRHRCUVVOR08wRkJRMGc3T3pzN1FVRkpSU3hsUVVGTGFFb3NVVUZCVEN4RFFVRmpNVmdzVDBGQlpDeERRVUZ6UWl4elFrRkJkRUlzUlVGQk9FTXNRMEZCUTIxb1FpeFRRVUZFTEVOQlFUbERPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3p0QlFUVlhWenRCUVVGQk8wRkJRVUVzY1VOQmExaEpZaXhIUVd4WVNpeEZRV3RZVXp0QlFVTnNRaXhaUVVGSmJVSXNZVUZCWVN4TFFVRkxMMG9zVVVGQlRDeERRVUZqYm0xQ0xFbEJRV1FzVDBGQmRVSXNTMEZCUzJsWUxFOUJRVXdzUTBGQllTdFhMRmxCUVhCRExFVkJRMmhDYUhWQ0xFbEJSR2RDTEVOQlExZ3NXVUZFVnl4RlFVTkhhMk1zVjBGRVNDeERRVU5sTEZkQlJHWXNSVUZETkVKNFRpeEpRVVExUWl4RlFVRnFRanRCUVVGQkxGbEJSVUY1YUVJc1QwRkJUMFFzVjBGQlYyeDNRaXhKUVVGWUxFTkJRV2RDTEZkQlFXaENMRVZCUVRaQ2MxTXNUVUZCTjBJc1JVRkdVRHRCUVVGQkxGbEJSMEU0WkN4aFFVRmhMRXRCUVV0eVF5eFJRVUZNTEVOQlFXTXpNa0lzUlVGQlpDeERRVUZwUWpJelFpeEhRVUZxUWl4RlFVRnpRamxUTEZGQlFYUkNMRU5CUVN0Q0xGZEJRUzlDTEVWQlFUUkRNVW9zVFVGQk5VTXNRMEZCYlVRMFpDeEpRVUZ1UkN4RFFVaGlPMEZCU1VRN08wRkJSVVE3T3pzN08wRkJlbGhYTzBGQlFVRTdRVUZCUVN4blEwRTJXRVE3UVVGRFVpeGhRVUZMYUVzc1VVRkJUQ3hEUVVGamFHRXNSMEZCWkN4RFFVRnJRaXhYUVVGc1FpeEZRVUVyUW01TkxFbEJRUzlDTEVOQlFXOURMRWRCUVhCRExFVkJRWGxEYlUwc1IwRkJla01zUTBGQk5rTXNWMEZCTjBNc1JVRkJNRVEzVlN4SFFVRXhSQ3hIUVVGblJYbFVMRWxCUVdoRk8wRkJRMEYxWVN4dFFrRkJWMk1zWjBKQlFWZ3NRMEZCTkVJc1NVRkJOVUk3UVVGRFJEdEJRV2haVlRzN1FVRkJRVHRCUVVGQk96dEJRVzFaWWpKSExGRkJRVTB6UXl4UlFVRk9MRWRCUVdsQ08wRkJRMlk3T3pzN096dEJRVTFCYzBRc1lVRkJVeXhKUVZCTk8wRkJVV1k3T3pzN096dEJRVTFCYVVJc1owSkJRVmtzU1VGa1J6dEJRV1ZtT3pzN096czdRVUZOUVRCQ0xIRkNRVUZwUWl4blFrRnlRa1k3UVVGelFtWTdPenM3T3p0QlFVMUJReXh2UWtGQlowSXNhVUpCTlVKRU8wRkJOa0ptT3pzN096czdPMEZCVDBGRExHOUNRVUZuUWl4bFFYQkRSRHRCUVhGRFpqczdPenM3TzBGQlRVRkRMRzFDUVVGbExHZENRVE5EUVR0QlFUUkRaanM3T3pzN08wRkJUVUUxUXl4alFVRlZMRWxCYkVSTE8wRkJiVVJtT3pzN096czdRVUZOUVUwc1owSkJRVmtzU1VGNlJFYzdRVUV3UkdZN096czdPenRCUVUxQk1rSXNhMEpCUVdNc1NVRm9SVU03UVVGcFJXWTdPenM3T3p0QlFVMUJja0lzVjBGQlR5eEpRWFpGVVR0QlFYZEZaanM3T3pzN08wRkJUVUZETEd0Q1FVRmpMRWxCT1VWRE8wRkJLMFZtT3pzN096czdRVUZOUVZnc1owSkJRVmtzU1VGeVJrYzdRVUZ6Um1ZN096czdPenRCUVUxQldpeHZRa0ZCWjBJc2FVSkJOVVpFTzBGQk5rWm1PenM3T3pzN1FVRk5RVVVzWjBKQlFWa3NZVUZ1UjBjN1FVRnZSMlk3T3pzN096dEJRVTFCV1N4clFrRkJZeXhsUVRGSFF6dEJRVEpIWmpzN096czdPMEZCVFVGaExHVkJRVmNzV1VGcVNFazdRVUZyU0dZN096czdPenRCUVUxQlF5eGxRVUZYTEdkQ1FYaElTVHRCUVhsSVpqczdPenM3TzBGQlRVRjJRaXhaUVVGUk8wRkJMMGhQTEVkQlFXcENPenRCUVd0SlFUdEJRVU5CYWtrc1lVRkJWMHNzVFVGQldDeERRVUZyUW05SUxFdEJRV3hDTEVWQlFYbENMRTlCUVhwQ08wRkJSVU1zUTBGNFowSkJMRU5CZDJkQ1F6ZElMRTFCZUdkQ1JDeERRVUZFTzBGRFNrRTdPMEZCUlVFN096czdPenM3TzBGQlVVRTdPMEZCUlVFc1EwRkJReXhWUVVGVkwyOUNMRU5CUVZZc1JVRkJZVHM3UVVGRldpeE5RVUZKY3pCQ0xGZEJRVmM3UVVGRFlpeFBRVUZITEV0QlJGVTdRVUZGWWl4UlFVRkpMRTlCUmxNN1FVRkhZaXhSUVVGSkxGRkJTRk03UVVGSllpeFJRVUZKTEU5QlNsTTdRVUZMWWl4UlFVRkpMRmxCVEZNN1FVRk5ZaXhSUVVGSkxGVkJUbE03UVVGUFlpeFJRVUZKTEdGQlVGTTdRVUZSWWl4UlFVRkpPMEZCVWxNc1IwRkJaanM3UVVGWFFTeE5RVUZKUXl4WFFVRlhMRVZCUVdZN08wRkJSVUVzVFVGQlNXeEhMRmRCUVZjN1FVRkRZakZFTEZWQlFVMDJTaXhaUVVGWlJpeFJRVUZhTEVOQlJFODdPMEZCUjJJN096czdPenRCUVUxQlJ5eGpRVUZWTEd0Q1FVRlZlR3RDTEV0QlFWWXNSVUZCYVVJN1FVRkRla0lzVlVGQlNUWkVMRTFCUVUxM1owSXNVMEZCVTNKclFpeE5RVUZOTWtVc1MwRkJUaXhKUVVGbE0wVXNUVUZCVFRoRUxFOUJRVGxDTEV0QlFUQkROVlFzVDBGQlQwTXNXVUZCVUN4RFFVRnZRalpRTEUxQlFVMHlSU3hMUVVFeFFpeEZRVUZwUXpGaExGZEJRV3BETEVWQlFYQkVPenRCUVVWQk8wRkJRMEUwV2l4WlFVRk5RU3hKUVVGSmFGa3NUMEZCU2l4RFFVRlpMRXRCUVZvc1JVRkJiVUlzUlVGQmJrSXNRMEZCVGpzN1FVRkZRU3hWUVVGSmJWVXNUVUZCVFRCRUxGRkJRVllzUlVGQmIwSkhMRTFCUVUwc1YwRkJWMEVzUjBGQmFrSTdRVUZEY0VJc1ZVRkJTVGRFTEUxQlFVMXZSQ3hQUVVGV0xFVkJRVzFDVXl4TlFVRk5MRlZCUVZWQkxFZEJRV2hDTzBGQlEyNUNMRlZCUVVrM1JDeE5RVUZOWjBRc1RVRkJWaXhGUVVGclFtRXNUVUZCVFN4VFFVRlRRU3hIUVVGbU96dEJRVVZzUWp0QlFVTkJRU3haUVVGTlFTeEpRVUZKYUZrc1QwRkJTaXhEUVVGWkxFbEJRVm9zUlVGQmEwSXNSVUZCYkVJc1EwRkJUanM3UVVGRlFTeGhRVUZQWjFrc1IwRkJVRHRCUVVORUxFdEJka0paT3p0QlFUQkNZanM3T3pzN08wRkJUVUV5WXl4bFFVRlhMRzFDUVVGVmVHZENMRXRCUVZZc1JVRkJhVUo1YTBJc1UwRkJha0lzUlVGQk5FSkRMRk5CUVRWQ0xFVkJRWFZETzBGQlEyaEVMRlZCUVVsRExHTkJRV05NTEZOQlFWTkhMRk5CUVZRc1EwRkJiRUk3UVVGQlFTeFZRVU5KTTJkQ0xGVkJRVlVzUzBGQlN6Qm5RaXhSUVVGTUxFTkJRV040YTBJc1MwRkJaQ3hEUVVSa08wRkJRVUVzVlVGRlNUUnJRaXhKUVVaS08wRkJRVUVzVlVGSFNVTXNUMEZJU2p0QlFVRkJMRlZCU1Vsc04wSXNSVUZLU2pzN1FVRk5RU3hWUVVGSkxFTkJRVU5uTjBJc1YwRkJUQ3hGUVVGclFpeFBRVUZQZEc5Q0xGRkJRVkZETEVsQlFWSXNRMEZCWVN4M1FrRkJZaXhEUVVGUU96dEJRVVZzUWl4VlFVRkpMRTlCUVU5eGIwSXNXVUZCV1M5Q0xFZEJRVzVDTEV0QlFUSkNMRmRCUVM5Q0xFVkJRVFJETzBGQlF6RkRPMEZCUTBGblF5eGxRVUZQUkN4WFFVRlFMRU5CUmpCRExFTkJSWFJDTzBGQlEzSkNMRTlCU0VRc1RVRkhUenRCUVVOTU8wRkJRMEVzV1VGQlNYcE1MRmRCUVZkSkxFZEJRVmdzUlVGQlNpeEZRVUZ6UW5OTUxFOUJRVTgzTUVJc1JVRkJSVEZGTEUxQlFVWXNRMEZCVXl4RlFVRlVMRVZCUVdGek5VSXNXVUZCV1M5Q0xFZEJRWHBDTEVWQlFUaENLMElzV1VGQldYSk1MRWRCUVRGRExFTkJRVkFzUTBGQmRFSXNTMEZCYVVaelRDeFBRVUZQTnpCQ0xFVkJRVVV4UlN4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaGN6VkNMRmxCUVZseVRDeEhRVUY2UWl4RlFVRTRRbkZNTEZsQlFWa3ZRaXhIUVVFeFF5eERRVUZRTzBGQlEyeEdPMEZCUTBScFF5eG5Ra0ZCVlVRc1MwRkJTemxuUWl4UFFVRk1MRU5CUVZZN08wRkJSVUZ1WVN4WFFVRkxLelpDTEZWQlFWVkhMRTlCUVZZc1EwRkJURHRCUVVOQkxGVkJRVWxzTjBJc1RVRkJUU3hQUVVGUFFTeEZRVUZRTEV0QlFXTXNWVUZCZUVJc1JVRkJiME03UVVGRGJFTTdRVUZEUVN4WlFVRkpPRmtzWTBGQll6bFpMRWRCUVVkclFpeExRVUZJTEVWQlFXeENPMEZCUTBFc1dVRkJTVFkxUWl4VlFVRlZha1VzVDBGQlZpeEpRVUZ4UWl4UFFVRlBhVVVzVlVGQlZXcEZMRTlCUVdwQ0xFdEJRVFpDTEZWQlFYUkVMRVZCUVd0Rk8wRkJRMmhGTzBGQlEwRnBSU3h2UWtGQlZXcEZMRTlCUVZZc1EwRkJhMEpvWlN4WFFVRnNRanRCUVVORU8wRkJRMFlzVDBGUVJDeE5RVTlQTzBGQlEwd3NXVUZCU1dscFFpeFZRVUZWU1N4VFFVRldMRWxCUVhWQ0xFOUJRVTlLTEZWQlFWVkpMRk5CUVdwQ0xFdEJRU3RDTEZWQlFURkVMRVZCUVhORk8wRkJRM0JGTzBGQlEwRktMRzlDUVVGVlNTeFRRVUZXTzBGQlEwUTdRVUZEUmp0QlFVTkdMRXRCYUVWWk96dEJRVzFGWWpzN096czdRVUZMUVVNc2JVSkJRV1VzZFVKQlFWVm9UQ3hSUVVGV0xFVkJRVzlDTzBGQlEycERMRlZCUVVrc1EwRkJRMEVzVVVGQlRDeEZRVUZsTzBGQlEySXNaVUZCVHl4TFFVRlFPMEZCUTBRN1FVRkRSQ3hoUVVGUFFTeFRRVUZUYm0xQ0xFbEJRVlFzUTBGQll5dzRTMEZCWkN4RlFVRTRURVFzVFVGQk9Vd3NRMEZCY1Uwc1dVRkJXVHRCUVVOMFRpeFpRVUZKTEVOQlFVTTFSQ3hGUVVGRkxFbEJRVVlzUlVGQlVXdEtMRVZCUVZJc1EwRkJWeXhWUVVGWUxFTkJRVVFzU1VGQk1rSnNTaXhGUVVGRkxFbEJRVVlzUlVGQlVUUkZMRWxCUVZJc1EwRkJZU3hWUVVGaUxFbEJRVEpDTEVOQlFURkVMRVZCUVRaRU8wRkJRek5FTEdsQ1FVRlBMRXRCUVZBN1FVRkRSQ3hUUVVoeFRpeERRVWR3VGp0QlFVTkdMR1ZCUVU4c1NVRkJVRHRCUVVORUxFOUJURTBzUTBGQlVEdEJRVTFFTEV0QmJFWlpPenRCUVhGR1lqczdPenM3TzBGQlRVRXdjRUlzWTBGQlZTeHJRa0ZCVlRKSExHRkJRVllzUlVGQmVVSktMRWxCUVhwQ0xFVkJRU3RDTzBGQlEzWkRUaXhsUVVGVFZTeGhRVUZVTEVsQlFUQkNTaXhKUVVFeFFqdEJRVU5FTEV0Qk4wWlpPenRCUVdkSFlqczdPenRCUVVsQmRrVXNaVUZCVnl4dFFrRkJWWFJITEZGQlFWWXNSVUZCYjBJN1FVRkROMElzVlVGQlNXdE1MR0ZCUVdFdlRDeFhRVUZYYTBZc1VVRkJXQ3hEUVVGdlFqSkhMR0ZCUVhCQ0xFTkJRV3REYUV3c1VVRkJiRU1zUTBGQmFrSTdRVUZCUVN4VlFVTkpiVXdzYTBKQlFXdENSQ3hYUVVGWGFqWkNMRVZCUVZnc1EwRkJZeXhEUVVGa0xFTkJSSFJDTzBGQlFVRXNWVUZGU1cwMlFpeHBRa0ZCYVVKR0xGZEJRVmRxTmtJc1JVRkJXQ3hEUVVGakxFTkJRVU1zUTBGQlppeERRVVp5UWpzN1FVRkpRU3QxUWl4bFFVRlRMMVVzUlVGQlZDeERRVUZaTEhOQ1FVRmFMRVZCUVc5RExGVkJRVlZvUml4TFFVRldMRVZCUVdsQ08wRkJRMjVFTEZsQlFVbEJMRTFCUVUwNVNpeE5RVUZPTEV0QlFXbENhWFpDTEdWQlFXVXNRMEZCWml4RFFVRnFRaXhKUVVGelEycE5MRmRCUVZkclJpeFJRVUZZTEVOQlFXOUNiMGNzVVVGQmNFSXNRMEZCTmtKNGEwSXNTMEZCTjBJc1RVRkJkME1zUzBGQmJFWXNSVUZCZVVZN1FVRkRka1pCTEdkQ1FVRk5Na0lzWTBGQlRqdEJRVU5CZFdwQ0xEQkNRVUZuUWpWMVFpeExRVUZvUWp0QlFVTkVMRk5CU0VRc1RVRkhUeXhKUVVGSk1Fb3NUVUZCVFRsS0xFMUJRVTRzUzBGQmFVSm5ka0lzWjBKQlFXZENMRU5CUVdoQ0xFTkJRV3BDTEVsQlFYVkRhRTBzVjBGQlYydEdMRkZCUVZnc1EwRkJiMEp2Unl4UlFVRndRaXhEUVVFMlFuaHJRaXhMUVVFM1FpeE5RVUYzUXl4WFFVRnVSaXhGUVVGblJ6dEJRVU55UjBFc1owSkJRVTB5UWl4alFVRk9PMEZCUTBGM2FrSXNlVUpCUVdVM2RVSXNTMEZCWmp0QlFVTkVPMEZCUTBZc1QwRlNSRHRCUVZORUxFdEJiRWhaT3p0QlFXOUlZanM3T3p0QlFVbEJaM0ZDTEd0Q1FVRmpMSE5DUVVGVmRrY3NVVUZCVml4RlFVRnZRanRCUVVOb1EwRXNaVUZCVTJoaExFZEJRVlFzUTBGQllTeHpRa0ZCWWp0QlFVTkVPMEZCTVVoWkxFZEJRV1k3TzBGQk5raEJPenM3TzBGQlNVRXNWMEZCVTNkclFpeFhRVUZVTEVOQlFYRkNZU3hIUVVGeVFpeEZRVUV3UWp0QlFVTjRRaXhSUVVGSk1UaENMRWxCUVVrc1JVRkJVanRCUVVOQkxGTkJRVXNzU1VGQlNUSTRRaXhGUVVGVUxFbEJRV1ZFTEVkQlFXWXNSVUZCYjBJN1FVRkRiRUl4T0VJc1VVRkJSVEE0UWl4SlFVRkpReXhGUVVGS0xFTkJRVVlzU1VGQllVUXNTVUZCU1VNc1JVRkJTaXhEUVVGaU8wRkJRMFFzV1VGQlR6TTRRaXhEUVVGUU8wRkJRMFk3TzBGQlJVUjNkMElzWVVGQlYydEdMRkZCUVZnc1IwRkJjMEpCTEZGQlFYUkNPMEZCUTBRc1EwRjRTa0VzUTBGM1NrTjBSaXhOUVhoS1JDeERRVUZFTzBGRFdrRTdPMEZCUlVFN096czdRVUZGUVN4RFFVRkRMRlZCUVZVdmIwSXNRMEZCVml4RlFVRmhPenRCUVVWYU8wRkJRMEVzVFVGQlNYVXhRaXhwUWtGQmFVSTdRVUZEYmtJc1pVRkJWeXhoUVVSUk8wRkJSVzVDUXl4bFFVRlhMREJEUVVaUk8wRkJSMjVDUXl4alFVRlZMSGxEUVVoVE8wRkJTVzVDUXl4WlFVRlJMSGxFUVVGNVJDeHRSRUZCZWtRc1IwRkJLMGNzYlVSQlFTOUhMRWRCUVhGTExEaERRVUZ5U3l4SFFVRnpUaXd5UTBGQmRFNHNSMEZCYjFFN1FVRktlbEFzUjBGQmNrSTdPMEZCVDBFc1RVRkJTVEZLTEdGQlFXRTdRVUZEWmpKS0xHRkJRVk1zUlVGRVRUczdRVUZIWmtNc1lVRkJVeXhGUVVoTk96dEJRVXRtT3pzN096dEJRVXRCZGt3c1YwRkJUeXhwUWtGQldUdEJRVU5xUWl4VlFVRkpkMHdzVDBGQlR5eEpRVUZZTzBGQlEwRXNWVUZCU1VNc2EwSkJRV3RDT1RGQ0xFVkJRVVVzWjBKQlFVWXNSVUZCYjBKeFR5eEhRVUZ3UWl4RFFVRjNRaXhoUVVGNFFpeERRVUYwUWp0QlFVTkJMRlZCUVVrd2JrSXNXVUZCU2pzN1FVRkZRVUVzY1VKQlFXVkRMRzFDUVVGdFFrWXNaVUZCYmtJc1EwRkJaanM3UVVGRlFTeFhRVUZMTEVsQlFVbG9hVUlzUjBGQlZDeEpRVUZuUW1scFFpeFpRVUZvUWl4RlFVRTRRanRCUVVNMVFpeFpRVUZKUVN4aFFVRmhhamxDTEdOQlFXSXNRMEZCTkVKbllpeEhRVUUxUWl4RFFVRktMRVZCUVhORE8wRkJRM0JESzJoQ0xHVkJRVXRHTEU5QlFVd3NRMEZCWVhBNVFpeEpRVUZpTEVOQlFXdENPMEZCUTJoQ2FWVXNhMEpCUVUxelNDeEhRVVJWTzBGQlJXaENMMUFzYlVKQlFVOHNhVU5CUVdsRFozbENMR0ZCUVdGcWFVSXNSMEZCWWl4RFFVRnFReXhIUVVGeFJEdEJRVVkxUXl4WFFVRnNRanRCUVVsRU8wRkJRMFk3TzBGQlJVUXNWMEZCU3pob1FpeFBRVUZNTEVkQlFXVXNTMEZCUzBzc1pVRkJUQ3hGUVVGbU96dEJRVVZCTEZkQlFVdERMRkZCUVV3N1FVRkRSQ3hMUVRkQ1l6czdRVUZuUTJZN096czdPenRCUVUxQk5VY3NZVUZCVXl4cFFrRkJWVFpITEVsQlFWWXNSVUZCWjBJN1FVRkRka0lzVlVGQlNVTXNVVUZCVVN4TFFVRkxOVGRDTEVkQlFVd3NRMEZCVXpJM1FpeEpRVUZVTEVOQlFWbzdPMEZCUlVFc1ZVRkJTVU1zUzBGQlNpeEZRVUZYTzBGQlExUXNaVUZCVDNnclFpeFBRVUZQZVN0Q0xGVkJRVkFzUTBGQmEwSkVMRXRCUVd4Q0xFVkJRWGxDYkhsQ0xFOUJRV2hETzBGQlEwUTdPMEZCUlVRc1lVRkJUeXhMUVVGUU8wRkJRMFFzUzBFNVEyTTdPMEZCYVVSbU96czdPenM3UVVGTlFXZEdMRkZCUVVrc1dVRkJWV2wwUWl4SlFVRldMRVZCUVdkQ08wRkJRMnhDUVN4aFFVRlBRU3hMUVVGTGVEVkNMRWxCUVV3c1IwRkJXVmNzUzBGQldpeERRVUZyUWl4SFFVRnNRaXhEUVVGUU8wRkJRMEVzVlVGQlNUWTBRaXhMUVVGTE56ZENMRTFCUVV3c1IwRkJZeXhEUVVGa0xFbEJRVzFDTmpkQ0xFdEJRVXNzUTBGQlRDeE5RVUZaTEUxQlFXNURMRVZCUVRKRE8wRkJRM3BETEZsQlFVbEJMRXRCUVVzc1EwRkJUQ3hOUVVGWkxFdEJRVXRHTEdWQlFVd3NSVUZCYUVJc1JVRkJkME1zVDBGQlR5eEpRVUZRTzBGQlEzcERMRTlCUmtRc1RVRkZUenRCUVVOTUxHVkJRVThzUzBGQlN6TkhMRTlCUVV3c1EwRkJZVFpITEV0QlFVc3NRMEZCVEN4RFFVRmlMRU5CUVZBN1FVRkRSRHRCUVVORUxHRkJRVThzUzBGQlVEdEJRVU5FTEV0QkwwUmpPenRCUVd0RlpqczdPenM3TzBGQlRVRXpOMElzVTBGQlN5eGhRVUZWTWpkQ0xFbEJRVllzUlVGQlowSTdRVUZEYmtJc1YwRkJTeXhKUVVGSk16bENMRU5CUVZRc1NVRkJZeXhMUVVGTGJUbENMRTlCUVc1Q0xFVkJRVFJDTzBGQlF6RkNMRmxCUVVrc1MwRkJTMEVzVDBGQlRDeERRVUZoTnpoQ0xHTkJRV0lzUTBGQk5FSk9MRU5CUVRWQ0xFTkJRVW9zUlVGQmIwTTdRVUZEYkVNc1kwRkJTVFE1UWl4UlFVRlJMRXRCUVV0VUxFOUJRVXdzUTBGQllXNDVRaXhEUVVGaUxFTkJRVm83UVVGRFFTeGpRVUZKTWpsQ0xGTkJRVk5ETEUxQlFVMDFjRUlzU1VGQmJrSXNSVUZCZVVJc1QwRkJUelJ3UWl4TlFVRk5jbmxDTEV0QlFXSTdRVUZETVVJN1FVRkRSanM3UVVGRlJDeGhRVUZQTEVsQlFWQTdRVUZEUkN4TFFXcEdZenM3UVVGdlJtWTdPenM3T3p0QlFVMUJhM2xDTEhGQ1FVRnBRaXd5UWtGQldUdEJRVU16UWl4VlFVRkpTeXhQUVVGS096dEJRVVZCTEZkQlFVc3NTVUZCU1RrNVFpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWtzUzBGQlMyMDVRaXhQUVVGTUxFTkJRV0Z5TjBJc1RVRkJha01zUlVGQmVVTTVRaXhIUVVGNlF5eEZRVUU0UXp0QlFVTTFReXhaUVVGSk5EbENMRkZCUVZFc1MwRkJTMVFzVDBGQlRDeERRVUZoYmpsQ0xFTkJRV0lzUTBGQldqczdRVUZGUVN4WlFVRkpXaXhQUVVGUGVTdENMRlZCUVZBc1EwRkJhMEpFTEUxQlFVMXllVUlzUzBGQmVFSXNSVUZCSzBKSExFOUJRVzVETEVWQlFUUkRPMEZCUXpGRGIzbENMRzlDUVVGVlJpeExRVUZXTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hWUVVGSkxGRkJRVTlGTEU5QlFWQXNlVU5CUVU5QkxFOUJRVkFzVDBGQmJVSXNVVUZCZGtJc1JVRkJhVU03UVVGREwwSXNaVUZCVDBFc1VVRkJVVGx3UWl4SlFVRm1PMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzWlVGQlR6aHdRaXhQUVVGUU8wRkJRMFE3UVVGRFJpeExRVEZIWXpzN1FVRTJSMlk3T3pzN08wRkJTMEZLTEdOQlFWVXNiMEpCUVZrN1FVRkRjRUlzVlVGQlNUVk1MRkZCUVZFc1NVRkJXanM3UVVGRlFYUnhRaXhSUVVGRmNFa3NUVUZCUml4RlFVRlZjV1FzUlVGQlZpeERRVUZoTEhOQ1FVRmlMRVZCUVhGRExGbEJRVms3UVVGREwwTXNXVUZCU1hOb1FpeFZRVUZWYWswc1RVRkJUVEpNTEdWQlFVNHNSVUZCWkR0QlFVRkJMRmxCUTBsUExHTkJRV05zVFN4TlFVRk5jMHdzVDBGRWVFSTdPMEZCUjBFc1dVRkJTVmNzV1VGQldVTXNWMEZCYUVJc1JVRkJOa0k3UVVGRE0wSTdRVUZEUVd4TkxHZENRVUZOYzB3c1QwRkJUaXhIUVVGblFsY3NUMEZCYUVJN08wRkJSVUU3UVVGRFFYWXlRaXhaUVVGRmNFa3NUVUZCUml4RlFVRlZNR0VzVDBGQlZpeERRVUZyUWl4MVFrRkJiRUlzUlVGQk1rTXNRMEZCUTJsclFpeFBRVUZFTEVWQlFWVkRMRmRCUVZZc1EwRkJNME03UVVGRFJEdEJRVU5HTEU5QldFUTdRVUZaUkR0QlFXcEpZeXhIUVVGcVFqczdRVUZ2U1VGeVRpeGhRVUZYTmtNc1ZVRkJXQ3hIUVVGM1FrRXNWVUZCZUVJN08wRkJSVUU3UVVGRFFUdEJRVU5CY0RCQ0xGTkJRVTk1SzBJc1ZVRkJVQ3hMUVVGelFub3JRaXhQUVVGUGVTdENMRlZCUVZBc1IwRkJiMElzV1VGQldUdEJRVU53UkRzN1FVRkZRVHM3UVVGRlFTeFJRVUZKU1N4aFFVRmhOeXRDTEU5QlFVODJLMElzVlVGQlVDeEpRVUZ4UWpjclFpeFBRVUZQT0N0Q0xFdEJRVGRET3p0QlFVVkJPMEZCUTBFc1VVRkJTU3hEUVVGRFJDeFZRVUZNTEVWQlFXbENPMEZCUTJZc1ZVRkJTWFJ2UWl4UlFVRlJlbGNzVTBGQlV6QkNMR0ZCUVZRc1EwRkJkVUlzVDBGQmRrSXNRMEZCV2p0QlFVRkJMRlZCUTBrMmRFSXNVMEZCVTNaMlFpeFRRVUZUTkVvc2IwSkJRVlFzUTBGQk9FSXNVVUZCT1VJc1JVRkJkME1zUTBGQmVFTXNRMEZFWWp0QlFVRkJMRlZCUlVseE1VSXNUMEZCVHl4SlFVWllPenRCUVVsQmVHOUNMRmxCUVUxcVV5eEpRVUZPTEVkQlFXRXNWVUZCWWp0QlFVTkJhVk1zV1VGQlRUbE5MRVZCUVU0c1IwRkJWeXh0UWtGQldEczdRVUZGUVRSc1FpeG5Ra0ZCVlVFc1QwRkJUM3AwUWl4VlFVRnFRaXhKUVVFclFubDBRaXhQUVVGUGVuUkNMRlZCUVZBc1EwRkJhMEk0WXl4WlFVRnNRaXhEUVVFclFtNUpMRXRCUVM5Q0xFVkJRWE5ET0Zrc1RVRkJkRU1zUTBGQkwwSTdPMEZCUlVFN1FVRkRRVEJRTEdGQlFVOHNjMEpCUVhOQ0x5dENMRTFCUVhSQ0xFbEJRV2REUVN4UFFVRlBkV1lzWjBKQlFWQXNRMEZCZDBKb1NpeExRVUY0UWl4RlFVRXJRaXhKUVVFdlFpeERRVUZvUXl4SlFVRjNSVUVzVFVGQlRYbHZRaXhaUVVGeVJqczdRVUZGUVVnc2JVSkJRV0U3UVVGRFdFa3NjVUpCUVdFc2NVSkJRVlZJTEV0QlFWWXNSVUZCYVVJN1FVRkROVUlzWTBGQlNYSTVRaXhQUVVGUExGbEJRVmx4T1VJc1MwRkJXaXhIUVVGdlFpeDNRMEZCTDBJN08wRkJSVUU3UVVGRFFTeGpRVUZKZG05Q0xFMUJRVTB5YjBJc1ZVRkJWaXhGUVVGelFqdEJRVU53UWpOdlFpeHJRa0ZCVFRKdlFpeFZRVUZPTEVOQlFXbENNV1lzVDBGQmFrSXNSMEZCTWtJdlpDeEpRVUV6UWp0QlFVTkVMRmRCUmtRc1RVRkZUenRCUVVOTU9GVXNhMEpCUVUxb1NpeFhRVUZPTEVkQlFXOUNPVXdzU1VGQmNFSTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHbENRVUZQY3psQ0xFdEJRVXR5Wml4TFFVRk1MRXRCUVdVc1MwRkJkRUk3UVVGRFJEdEJRV0pWTEU5QlFXSTdRVUZsUkRzN1FVRkZSQ3hYUVVGUExGVkJRVlZ2Wml4TFFVRldMRVZCUVdsQ08wRkJRM1JDTEdGQlFVODdRVUZEVEhoNVFpeHBRa0ZCVTNWNVFpeFhRVUZYU1N4WFFVRllMRU5CUVhWQ1NDeFRRVUZUTEV0QlFXaERMRU5CUkVvN1FVRkZURUVzWlVGQlQwRXNVMEZCVXp0QlFVWllMRTlCUVZBN1FVRkpSQ3hMUVV4RU8wRkJUVVFzUjBFMVEzbERMRVZCUVRGRE96dEJRVGhEUVR0QlFVTkJMRmRCUVZOV0xHdENRVUZVTEVOQlFUUkNNVWtzUjBGQk5VSXNSVUZCYVVNN1FVRkRMMElzVVVGQlNYbEtMR05CUVdNc1JVRkJiRUk3TzBGQlJVRXNVVUZCU1N4UFFVRlBla29zUjBGQlVDeExRVUZsTEZGQlFXNUNMRVZCUVRaQ08wRkJRek5DTEdGQlFVOTVTaXhYUVVGUU8wRkJRMFE3TzBGQlJVUjZTaXhWUVVGTlFTeEpRVUZKTTNkQ0xFbEJRVW9zUjBGQlYzaEZMRXRCUVZnc1EwRkJhVUlzUTBGQmFrSXNSVUZCYjBJc1EwRkJReXhEUVVGeVFpeERRVUZPTEVOQlVDdENMRU5CVDBFN08wRkJSUzlDTEZGQlFVa3NRMEZCUTIweFFpeEhRVUZNTEVWQlFWVTdRVUZEVWl4aFFVRlBlVW9zVjBGQlVEdEJRVU5FT3p0QlFVVkVRU3hyUWtGQlkzcEtMRWxCUVVsb2QwSXNTMEZCU2l4RFFVRlZMRWRCUVZZc1JVRkJaVEExUWl4TlFVRm1MRU5CUVhOQ0xGVkJRVlZETEVkQlFWWXNSVUZCWlRGV0xFdEJRV1lzUlVGQmMwSTdRVUZEZUVRc1ZVRkJTVEpXTEZGQlFWRXpWaXhOUVVGTmVteENMRTlCUVU0c1EwRkJZeXhMUVVGa0xFVkJRWEZDTEVkQlFYSkNMRVZCUVRCQ2QwSXNTMEZCTVVJc1EwRkJaME1zUjBGQmFFTXNRMEZCV2p0QlFVTkJMRlZCUVVsM1Z5eE5RVUZOYjJwQ0xFMUJRVTBzUTBGQlRpeERRVUZXTzBGQlEwRXNWVUZCU1M5WExFMUJRVTByVnl4TlFVRk5MRU5CUVU0c1EwRkJWanRCUVVOQmNHcENMRmxCUVUxeGFrSXNiVUpCUVcxQ2NtcENMRWRCUVc1Q0xFTkJRVTQ3TzBGQlJVRTdRVUZEUVR0QlFVTkJjVTBzV1VGQlRVRXNVVUZCVVN0TUxGTkJRVklzUjBGQmIwSXNTVUZCY0VJc1IwRkJNa0pwVEN4dFFrRkJiVUpvV0N4SFFVRnVRaXhEUVVGcVF6czdRVUZGUVN4VlFVRkpMRU5CUVVNNFZ5eEpRVUZKYml0Q0xHTkJRVW9zUTBGQmJVSm5ZaXhIUVVGdVFpeERRVUZNTEVWQlFUaENPMEZCUXpWQ2JXcENMRmxCUVVsdWFrSXNSMEZCU2l4SlFVRlhjVTBzUjBGQldEdEJRVU5FTEU5QlJrUXNUVUZGVHl4SlFVRkpNV3RDTEUxQlFVMURMRTlCUVU0c1EwRkJZM1UzUWl4SlFVRkpibXBDTEVkQlFVb3NRMEZCWkN4RFFVRktMRVZCUVRaQ08wRkJRMnhEYldwQ0xGbEJRVWx1YWtJc1IwRkJTaXhGUVVGVGRtSXNTVUZCVkN4RFFVRmpORzVDTEVkQlFXUTdRVUZEUkN4UFFVWk5MRTFCUlVFN1FVRkRURGhYTEZsQlFVbHVha0lzUjBGQlNpeEpRVUZYTEVOQlFVTnRha0lzU1VGQlNXNXFRaXhIUVVGS0xFTkJRVVFzUlVGQlYzRk5MRWRCUVZnc1EwRkJXRHRCUVVORU8wRkJRMFFzWVVGQlR6aFhMRWRCUVZBN1FVRkRSQ3hMUVd4Q1lTeEZRV3RDV0N4RlFXeENWeXhEUVVGa096dEJRVzlDUVN4WFFVRlBSaXhYUVVGUU8wRkJRMFE3TzBGQlJVUTFUaXhoUVVGWE5rTXNWVUZCV0N4SFFVRjNRa0VzVlVGQmVFSTdRVUZEUkN4RFFYUlBRU3hEUVhOUFEycEVMRTFCZEU5RUxFTkJRVVE3UVVOS1FUczdRVUZGUVRzN1FVRkZRU3hEUVVGRExGVkJRVlV2YjBJc1EwRkJWaXhGUVVGaE96dEJRVVZhT3pzN096dEJRVXRCTEUxQlFVbHZNMElzWTBGQll5eERRVUZETEZkQlFVUXNSVUZCWXl4WFFVRmtMRU5CUVd4Q08wRkJRMEVzVFVGQlNVTXNaMEpCUVdkQ0xFTkJRVU1zYTBKQlFVUXNSVUZCY1VJc2EwSkJRWEpDTEVOQlFYQkNPenRCUVVWQkxFMUJRVWt4UkN4VFFVRlRPMEZCUTFoRExHVkJRVmNzYlVKQlFWVTFSaXhQUVVGV0xFVkJRVzFDYzBvc1UwRkJia0lzUlVGQk9FSjZZaXhGUVVFNVFpeEZRVUZyUXp0QlFVTXpRM05ETEdOQlFWRXNTVUZCVWl4RlFVRmpObEFzVDBGQlpDeEZRVUYxUW5OS0xGTkJRWFpDTEVWQlFXdERlbUlzUlVGQmJFTTdRVUZEUkN4TFFVaFZPenRCUVV0WVoxa3NaMEpCUVZrc2IwSkJRVlUzUml4UFFVRldMRVZCUVcxQ2Mwb3NVMEZCYmtJc1JVRkJPRUo2WWl4RlFVRTVRaXhGUVVGclF6dEJRVU0xUTNORExHTkJRVkVzUzBGQlVpeEZRVUZsTmxBc1QwRkJaaXhGUVVGM1FuTktMRk5CUVhoQ0xFVkJRVzFEZW1Jc1JVRkJia003UVVGRFJEdEJRVkJWTEVkQlFXSTdPMEZCVlVFc1YwRkJVekJpTEVsQlFWUXNRMEZCWTNSakxGRkJRV1FzUlVGQmQwSXhTaXhKUVVGNFFpeEZRVUU0UWpOWUxFVkJRVGxDTEVWQlFXdERPMEZCUTJoRExGRkJRVWtyYWtJc1NVRkJTanRCUVVGQkxGRkJRMGsyV2l4SlFVUktPMEZCUVVFc1VVRkZTUzl2UWl4UlFVRlJMRWxCUmxvN1FVRkhRVHM3UVVGRlFTeFJRVUZKZDAwc1lVRkJZU3hEUVVGcVFpeEZRVUZ2UWp0QlFVTnNRbkpvUWl4VFFVRkhhMElzUzBGQlNDeERRVUZUZVZjc1NVRkJWRHRCUVVOQlFTeFhRVUZMWlN4UFFVRk1MRU5CUVdFc2NVSkJRV0lzUlVGQmIwTXNRMEZCUTJZc1NVRkJSQ3hEUVVGd1F5eEZRVUUwUTJ0UUxHTkJRVFZETEVOQlFUSkVMSEZDUVVFelJDeEZRVUZyUml4RFFVRkRiRkFzU1VGQlJDeERRVUZzUmp0QlFVTkJPMEZCUTBRN08wRkJSVVFzWVVGQlUydHRRaXhKUVVGVUxFTkJRV05ETEVWQlFXUXNSVUZCYTBJN1FVRkRhRUlzVlVGQlNTeERRVUZEYW5CQ0xFdEJRVXdzUlVGQldVRXNVVUZCVVdsd1FpeEZRVUZTTzBGQlExbzdRVUZEUVVZc1lVRkJUMFVzUzBGQlMycHdRaXhMUVVGYU8wRkJRMEUzVlN4VFFVRkhhMElzUzBGQlNDeERRVUZUZVZjc1NVRkJWRHM3UVVGRlFTeFZRVUZKYVcxQ0xFOUJRVTkyWXl4UlFVRllMRVZCUVhGQ08wRkJRMjVDTUVNc1pVRkJUeTlzUWl4UFFVRlBjV3RDTEhGQ1FVRlFMRU5CUVRaQ2QySXNTVUZCTjBJc1JVRkJiVU5zYlVJc1NVRkJia01zUTBGQlVEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1NMW9zWlVGQlR6SXdRaXh2UWtGQlVDeERRVUUwUWpWUExFbEJRVFZDTzBGQlEwRndUU3hoUVVGTFpTeFBRVUZNTEVOQlFXRXNjVUpCUVdJc1JVRkJiME1zUTBGQlEyWXNTVUZCUkN4RFFVRndReXhGUVVFMFEydFFMR05CUVRWRExFTkJRVEpFTEhGQ1FVRXpSQ3hGUVVGclJpeERRVUZEYkZBc1NVRkJSQ3hEUVVGc1JqdEJRVU5FTzBGQlEwWTdRVUZEUkc5TkxGZEJRVTh2YkVJc1QwRkJUM0ZyUWl4eFFrRkJVQ3hEUVVFMlFuZGlMRWxCUVRkQ0xFTkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3TzBGQlUwRXNWMEZCVTNSYUxFOUJRVlFzUTBGQmFVSjNXaXhKUVVGcVFpeEZRVUYxUWpOS0xFOUJRWFpDTEVWQlFXZERjMG9zVTBGQmFFTXNSVUZCTWtONllpeEZRVUV6UXl4RlFVRXJRenRCUVVNM1EyMVRMR05CUVZWb2RVSXNSVUZCUldkMVFpeFBRVUZHTEVWQlFWY3ZlVUlzUlVGQldDeERRVUZqTEVOQlFXUXNRMEZCVmpzN1FVRkZRU3hSUVVGSkxFTkJRVU1yZVVJc1VVRkJVVEY2UWl4TlFVRmlMRVZCUVhGQ096dEJRVVZ5UWl4UlFVRkpjemxDTEZsQlFWbEVMRTlCUVU5UUxGbEJRVmtzUTBGQldpeERRVUZRTEVkQlFYZENRU3haUVVGWkxFTkJRVm9zUTBGQmVFTTdRVUZEUVN4UlFVRkpVeXhqUVVGalJpeFBRVUZQVGl4alFVRmpMRU5CUVdRc1EwRkJVQ3hIUVVFd1FrRXNZMEZCWXl4RFFVRmtMRU5CUVRWRE96dEJRVVZCTzBGQlEwRnlka0k3TzBGQlJVRm5iVUlzV1VGQlVXeFBMRkZCUVZJc1EwRkJhVUozV0N4VFFVRnFRaXhGUVVFMFFtcHdRaXhIUVVFMVFpeERRVUZuUXl4WlFVRm9ReXhGUVVFNFF5eE5RVUU1UXpzN1FVRkZRVFJPTERCQ1FVRnpRaXhaUVVGWk8wRkJRMmhESzFJc1kwRkJVV3hQTEZGQlFWSXNRMEZCYVVJNFdDeFRRVUZxUWp0QlFVTkJMRlZCUVVsRUxFbEJRVW9zUlVGQlZUTktMRkZCUVZGeVppeEpRVUZTTzBGQlExZ3NTMEZJUkRzN1FVRkxRVHRCUVVOQmMwNHNNRUpCUVhOQ0xGbEJRVms3UVVGRGFFTXJVaXhqUVVGUkxFTkJRVklzUlVGQlYycEpMRmRCUVZnN1FVRkRRV2xKTEdOQlFWRXpaaXhIUVVGU0xFTkJRVmtzV1VGQldpeEZRVUV3UWl4RlFVRXhRaXhGUVVFNFFubFNMRkZCUVRsQ0xFTkJRWFZESzFnc1YwRkJka003UVVGRFJDeExRVWhFT3p0QlFVdEJPMEZCUTBFM1NpeFpRVUZST1Zrc1IwRkJVaXhEUVVGWmFWVXNWMEZCVjNGRExHRkJRVmdzUTBGQmVVSjNReXhQUVVGNlFpeERRVUZhTEVWQlFTdEROVkFzVFVGQkwwTTdPMEZCUlVFN1FVRkRRU3hoUVVGVFFTeE5RVUZVTEVkQlFXdENPMEZCUTJoQ0xGVkJRVWtzUTBGQlEzVmFMRWxCUVV3c1JVRkJWek5LTEZGQlFWRndaaXhKUVVGU08wRkJRMWcxUnp0QlFVTkJMRlZCUVVrMlZDeEZRVUZLTEVWQlFWRkJMRWRCUVVjdlowSXNTMEZCU0N4RFFVRlRhM3BDTEU5QlFWUTdRVUZEVkRzN1FVRkZSRHRCUVVOQkxHRkJRVk5vYlVJc1MwRkJWQ3hIUVVGcFFqdEJRVU5tWjIxQ0xHTkJRVkVzUTBGQlVpeEZRVUZYTjJZc1MwRkJXQ3hEUVVGcFFqaG5RaXhyUWtGQmFrSXNSMEZCYzBNc1EwRkJkRU03UVVGRFFXcENMR05CUVZGcVR5eFhRVUZTTEVOQlFXOUNObGdzV1VGQldTeEhRVUZhTEVkQlFXdENReXhYUVVGc1FpeEhRVUZuUXl4SFFVRm9ReXhIUVVGelExQXNVMEZCTVVRN1FVRkRSRHRCUVVOR096dEJRVVZFYms4c1lVRkJWMjlQTEVsQlFWZ3NSMEZCYTBKQkxFbEJRV3hDTzBGQlEwRndUeXhoUVVGWGQwc3NUVUZCV0N4SFFVRnZRa0VzVFVGQmNFSTdRVUZEUkN4RFFYQkhRU3hEUVc5SFF6VkxMRTFCY0VkRUxFTkJRVVE3UVVOS1FUczdRVUZGUVRzN1FVRkZRU3hEUVVGRExGVkJRVk12YjBJc1EwRkJWQ3hGUVVGWk96dEJRVVZpTEZkQlFWTTRlRUlzUzBGQlZDeERRVUZsZG1kQ0xFbEJRV1lzUlVGQmNVSjFTaXhQUVVGeVFpeEZRVUU0UW1Vc1JVRkJPVUlzUlVGQmEwTTdRVUZEYUVNc1VVRkJTWGxQTEZGQlFWRXNTVUZCV2p0QlFVRkJMRkZCUTBseVVDeFhRVUZYU0N4UlFVRlJSeXhSUVVSMlFqdEJRVUZCTEZGQlEyZERPMEZCUXpWQ05tTXNaMEpCUVZrNUwwSXNUMEZCVHpKNVFpeEpRVUZRTEVOQlFWbHdXaXhMUVVGTE9VUXNTVUZCVEN4RlFVRmFMRVZCUVhsQ0xFTkJRWHBDTEV0QlFTdENMRTlCUmk5RE8wRkJRVUVzVVVGSFNYTnhRaXhUUVVGVExFTkJRVU1zUTBGSVpEdEJRVUZCTEZGQlNVbDBjRUlzUzBGS1NqdEJRVUZCTEZGQlMwbHBVQ3hMUVV4S096dEJRVTlCTEZOQlFVdHZWeXhSUVVGTUxFZEJRV2RDTEV0QlFXaENPenRCUVVWQkxGTkJRVXRrTEU5QlFVd3NSMEZCWlN4WlFVRlhPMEZCUTNoQ0swVXNaVUZCVXl4RFFVRkRMRU5CUVZZN1FVRkRRV2hhTEcxQ1FVRmhja0lzUzBGQllqdEJRVU5CTEZkQlFVdHFVQ3hMUVVGTU8wRkJRMFFzUzBGS1JEczdRVUZOUVN4VFFVRkxRU3hMUVVGTUxFZEJRV0VzV1VGQlZ6dEJRVU4wUWl4WFFVRkxjV3hDTEZGQlFVd3NSMEZCWjBJc1MwRkJhRUk3UVVGRFFUdEJRVU5CTDFVc2JVSkJRV0Z5UWl4TFFVRmlPMEZCUTBGeFlTeGxRVUZUUVN4VlFVRlZMRU5CUVZZc1IwRkJZemxqTEZGQlFXUXNSMEZCZVVJNFl5eE5RVUZzUXp0QlFVTkJlRzFDTEZkQlFVczVSQ3hKUVVGTUxFTkJRVlVzVVVGQlZpeEZRVUZ2UWl4TFFVRndRanRCUVVOQlowSXNZMEZCVVhaU0xFdEJRVXRFTEVkQlFVd3NSVUZCVWp0QlFVTkJlV2RDTEdOQlFWRjBVaXhYUVVGWExGbEJRVlU3UVVGRE0wSXNXVUZCUnpCUExGRkJRVkZyV0N4UlFVRllMRVZCUVc5Q08wRkJRMnhDTVVnc1owSkJRVTB3U1N4UFFVRk9MRWRCUkd0Q0xFTkJRMFk3UVVGRGFrSTdRVUZEUkN4WlFVRkpibGdzVFVGQlRTeFBRVUZQUVN4RlFVRlFMRXRCUVdNc1ZVRkJlRUlzUlVGQmIwTTdRVUZCUlVFN1FVRkJUenRCUVVNNVF5eFBRVXhQTEVWQlMweHJZeXhOUVV4TExFTkJRVkk3UVVGTlFYaHRRaXhYUVVGTFpTeFBRVUZNTEc5Q1FVRTRRbmRzUWl4VFFVRTVRanRCUVVORUxFdEJaRVE3TzBGQlowSkJMRk5CUVV0MlJpeExRVUZNTEVkQlFXRXNXVUZCVnp0QlFVTjBRaXhYUVVGTGRVSXNVVUZCVEN4SFFVRm5RaXhKUVVGb1FqdEJRVU5CTzBGQlEwRXZWU3h0UWtGQllYSkNMRXRCUVdJN1FVRkRRVzVOTEZkQlFVczVSQ3hKUVVGTUxFTkJRVlVzVVVGQlZpeEZRVUZ2UWl4SlFVRndRanRCUVVOQkxGVkJRVWwwVXl4TlFVRk5LMElzUzBGQlMwUXNSMEZCVEN4RlFVRldPMEZCUTBFNE5rSXNaVUZCVTBFc1ZVRkJWVFU0UWl4TlFVRk5jMVFzUzBGQmFFSXNRMEZCVkR0QlFVTkJPRU1zVjBGQlMyVXNUMEZCVEN4eFFrRkJLMEozYkVJc1UwRkJMMEk3UVVGRFJDeExRVkpFTzBGQlUwUTdPMEZCUlVRN096czdPMEZCUzBFc1YwRkJVM3BITEdOQlFWUXNRMEZCZDBJeVJ5eE5RVUY0UWl4RlFVRm5RM0pNTEZGQlFXaERMRVZCUVhsRE8wRkJRM1pETEZGQlFVbHJTaXhQUVVGUExFbEJRVmc3UVVGQlFTeFJRVU5KYjBNc1YwRkJWMFFzVDBGQlR6RTVRaXhOUVVSMFFqczdRVUZIUVN4UlFVRkpNamxDTEdGQlFXRXNRMEZCYWtJc1JVRkJiMEk3UVVGRGJFSjBURHRCUVVORU96dEJRVVZFY1V3c1YwRkJUM0E1UWl4SlFVRlFMRU5CUVZrc1dVRkJWenRCUVVOeVFqdEJRVU5CTEZWQlFVa3NTMEZCU3pacFFpeFJRVUZNTEVsQlFXdENMRXRCUVVzelVTeFZRVUZNTEV0QlFXOUNMRU5CUVhSRExFbEJRVFpETEV0QlFVdEJMRlZCUVV3c1MwRkJiMElzVlVGQmNrVXNSVUZCYTBZN1FVRkRhRVp2Y2tJN1FVRkRSRHRCUVVORU8wRkJTRUVzVjBGSlN6dEJRVU5JTzBGQlEwRXNZMEZCU1c1cFFpeE5RVUZOTDFZc1JVRkJSU3hKUVVGR0xFVkJRVkUwUlN4SlFVRlNMRU5CUVdFc1MwRkJZaXhEUVVGV08wRkJRMEUxUlN4WlFVRkZMRWxCUVVZc1JVRkJVVFJGTEVsQlFWSXNRMEZCWVN4TFFVRmlMRVZCUVc5Q2JWSXNUMEZCVDBFc1NVRkJTWFJrTEU5QlFVb3NRMEZCV1N4SFFVRmFMRXRCUVc5Q0xFTkJRWEJDTEVkQlFYZENMRWRCUVhoQ0xFZEJRVGhDTEVkQlFYSkRMRWxCUVRaRExFbEJRVWw1UlN4SlFVRktMRWRCUVZkcmRrSXNUMEZCV0N4RlFVRnFSVHRCUVVOQmNITkNMRmxCUVVVc1NVRkJSaXhGUVVGUmExWXNSMEZCVWl4RFFVRlpMRTFCUVZvc1JVRkJiMElzV1VGQlZ6dEJRVU0zUW1kcVFqdEJRVU5FTEZkQlJrUTdRVUZIUkR0QlFVTkdMRXRCWkVRN08wRkJaMEpCTEdGQlFWTkJMR2xDUVVGVUxFZEJRVFpDTzBGQlF6TkNSRHRCUVVOQkxGVkJRVWxCTEdGQlFXRXNRMEZCYWtJc1JVRkJiMEk3UVVGRGJFSjBURHRCUVVORU8wRkJRMFk3UVVGRFJqczdRVUZGUkhoRUxHRkJRVmN5U1N4TFFVRllMRWRCUVcxQ1FTeExRVUZ1UWp0QlFVTkJNMGtzWVVGQlYydEpMR05CUVZnc1IwRkJORUpCTEdOQlFUVkNPMEZCUlVNc1EwRnlSa0VzUTBGeFJrTjBTU3hOUVhKR1JDeERRVUZFT3pzN1FVTktRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNc1ZVRkJVeTl2UWl4RFFVRlVMRVZCUVZrN08wRkJSVmhCTEVkQlFVVnRORUlzVTBGQlJpeEhRVUZqTzBGQlExb3ZUeXhYUVVGVExFOUJSRWM3UVVGRlduaHBRaXhYUVVGVExHdENRVUZyUW14UUxGTkJRVk4xVEN4bFFVWjRRanRCUVVkYU1rOHNhMEpCUVdkQ0xFdEJTRW83UVVGSlduZHRRaXhwUWtGQlpTeEZRVXBJTzBGQlMxcERMR2xDUVVGbE8wRkJURWdzUlVGQlpEczdRVUZSUVN4TFFVRk5ReXhUUVVGT08wRkJRVUVzUzBGRFRVTXNVMEZFVGp0QlFVRkJMRXRCUlUxMFlpeFRRVVpPTzBGQlFVRXNTMEZIVFhWaUxGZEJTRTQ3UVVGQlFTeExRVWxOUXl4WFFVRlhMRXRCU21wQ096dEJRVTFCTEZWQlFWTkRMRlZCUVZRc1IwRkJjMEk3UVVGRGNFSTdRVUZEUVN4UFFVRkxOM0pDTEcxQ1FVRk1MRU5CUVhsQ0xGZEJRWHBDTEVWQlFYTkRPSEpDTEZkQlFYUkRPMEZCUTBFc1QwRkJTemx5UWl4dFFrRkJUQ3hEUVVGNVFpeFZRVUY2UWl4RlFVRnhRelp5UWl4VlFVRnlRenRCUVVOQlJDeGhRVUZYTEV0QlFWZzdRVUZEUkRzN1FVRkZSQ3hWUVVGVFJTeFhRVUZVTEVOQlFYRkNOV2RETEVOQlFYSkNMRVZCUVhkQ08wRkJRM1JDTEUxQlFVbHBTU3hGUVVGRmJUUkNMRk5CUVVZc1EwRkJXWFp0UWl4alFVRm9RaXhGUVVGblF6dEJRVUZGTjFvc1MwRkJSVFphTEdOQlFVWTdRVUZCY1VJN1FVRkRka1FzVFVGQlJ6WnRRaXhSUVVGSUxFVkJRV0U3UVVGRFdDeFBRVUZKYWpkQ0xFbEJRVWw2Uml4RlFVRkZOR01zVDBGQlJpeERRVUZWTEVOQlFWWXNSVUZCWVd4Q0xFdEJRWEpDTzBGQlEwRXNUMEZCU1doWExFbEJRVWt4Uml4RlFVRkZOR01zVDBGQlJpeERRVUZWTEVOQlFWWXNSVUZCWVdwQ0xFdEJRWEpDTzBGQlEwRXNUMEZCU1d0c1FpeExRVUZMVGl4WlFVRlpPVFpDTEVOQlFYSkNPMEZCUTBFc1QwRkJTWEUzUWl4TFFVRkxUaXhaUVVGWk9UWkNMRU5CUVhKQ08wRkJRMEVzVDBGQlNXMUVMRWRCUVVvN1FVRkRRVFF6UWl4cFFrRkJZeXhKUVVGSmREZENMRWxCUVVvc1IwRkJWMnQyUWl4UFFVRllMRXRCUVhWQ2JsQXNVMEZCY2tNN1FVRkRRU3hQUVVGSGNtaENMRXRCUVV0ck9VSXNSMEZCVEN4RFFVRlRSaXhGUVVGVUxFdEJRV2RDTlRSQ0xFVkJRVVZ0TkVJc1UwRkJSaXhEUVVGWlF5eGhRVUUxUWl4SlFVRTJRMGtzWlVGQlpYZzBRaXhGUVVGRmJUUkNMRk5CUVVZc1EwRkJXVVVzWVVGQk0wVXNSVUZCTUVZN1FVRkRlRVo2TTBJc1ZVRkJUV2MwUWl4TFFVRkxMRU5CUVV3c1IwRkJVeXhOUVVGVUxFZEJRV3RDTEU5QlFYaENPMEZCUTBRN1FVRkRSRHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZIYURSQ0xFZEJRVWdzUlVGQlVUdEJRVU5PTjBrc1RVRkJSVFphTEdOQlFVWTdRVUZEUVRodFFpeGxRVUZYZWk5Q0xFbEJRVmdzUTBGQlowSXNTVUZCYUVJN1FVRkRRU3RITEUxQlFVVXNTVUZCUml4RlFVRlJjMU1zVDBGQlVpeERRVUZuUWl4UFFVRm9RaXhGUVVGNVFqRlNMRWRCUVhwQ0xFVkJRVGhDTUZJc1QwRkJPVUlzVjBGQk9FTXhVaXhIUVVFNVF6dEJRVU5FTzBGQlEwWTdRVUZEUmpzN1FVRkZSQ3hWUVVGVGJUUkNMRmxCUVZRc1EwRkJjMEpvYUVNc1EwRkJkRUlzUlVGQmVVSTdRVUZEZGtJc1RVRkJTVUVzUlVGQlJUUmpMRTlCUVVZc1EwRkJWWEpoTEUxQlFWWXNTVUZCYjBJc1EwRkJlRUlzUlVGQk1rSTdRVUZEZWtKbkswSXNaVUZCV1hablF5eEZRVUZGTkdNc1QwRkJSaXhEUVVGVkxFTkJRVllzUlVGQllXeENMRXRCUVhwQ08wRkJRMEU0YTBJc1pVRkJXWGhuUXl4RlFVRkZOR01zVDBGQlJpeERRVUZWTEVOQlFWWXNSVUZCWVdwQ0xFdEJRWHBDTzBGQlEwRXJhMElzWTBGQlZ5eEpRVUZZTzBGQlEwRjRZaXhsUVVGWkxFbEJRVWt2Wml4SlFVRktMRWRCUVZkcmRrSXNUMEZCV0N4RlFVRmFPMEZCUTBFc1VVRkJTeTl2UWl4blFrRkJUQ3hEUVVGelFpeFhRVUYwUWl4RlFVRnRRM014UWl4WFFVRnVReXhGUVVGblJDeExRVUZvUkR0QlFVTkJMRkZCUVV0ME1VSXNaMEpCUVV3c1EwRkJjMElzVlVGQmRFSXNSVUZCYTBOeE1VSXNWVUZCYkVNc1JVRkJPRU1zUzBGQk9VTTdRVUZEUkR0QlFVTkdPenRCUVVWRUxGVkJRVk0zSzBJc1NVRkJWQ3hIUVVGblFqdEJRVU5rTEU5QlFVdDNTaXhuUWtGQlRDeEpRVUY1UWl4TFFVRkxRU3huUWtGQlRDeERRVUZ6UWl4WlFVRjBRaXhGUVVGdlF6QXhRaXhaUVVGd1F5eEZRVUZyUkN4TFFVRnNSQ3hEUVVGNlFqdEJRVU5FT3p0QlFVVkVMRlZCUVZOb2IwSXNVVUZCVkN4SFFVRnZRanRCUVVOc1FpeFBRVUZMYkVVc2JVSkJRVXdzUTBGQmVVSXNXVUZCZWtJc1JVRkJkVU5yYzBJc1dVRkJka003UVVGRFJEczdRVUZGUkM4MFFpeEhRVUZGYVZFc1MwRkJSaXhEUVVGUlR5eFBRVUZTTEVOQlFXZENObWhDTEV0QlFXaENMRWRCUVhkQ0xFVkJRVVYyYUVJc1QwRkJUMnBZTEVsQlFWUXNSVUZCZUVJN08wRkJSVUZ0Unl4SFFVRkZjRVlzU1VGQlJpeERRVUZQTEVOQlFVTXNUVUZCUkN4RlFVRlRMRWxCUVZRc1JVRkJaU3hOUVVGbUxFVkJRWFZDTEU5QlFYWkNMRU5CUVZBc1JVRkJkME1zV1VGQldUdEJRVU5zUkc5R0xFbEJRVVZwVVN4TFFVRkdMRU5CUVZGUExFOUJRVklzVjBGQmQwSXNTVUZCZUVJc1NVRkJhME1zUlVGQlJVMHNUMEZCVHl4cFFrRkJWVHRCUVVOdVJEbFJMRTFCUVVVc1NVRkJSaXhGUVVGUmFWWXNSVUZCVWl4RFFVRlhMRTlCUVZnc1JVRkJiMEpxVml4RlFVRkZMMFFzU1VGQmRFSTdRVUZEUkN4SlFVWnBReXhGUVVGc1F6dEJRVWRFTEVWQlNrUTdRVUZMUkN4RFFYaEZSQ3hGUVhkRlJ6aHpRaXhOUVhoRlNEdEJRWGxGUVRzN08wRkJSMEVzUTBGQlF5eFZRVUZUTDI5Q0xFTkJRVlFzUlVGQlZ6dEJRVU5XUVN4SFFVRkZjRWNzUlVGQlJpeERRVUZMYnk5Q0xGRkJRVXdzUjBGQlowSXNXVUZCVlR0QlFVTjRRaXhQUVVGTGNDdENMRWxCUVV3c1EwRkJWU3hWUVVGVGNFTXNRMEZCVkN4RlFVRlhOSGxDTEVWQlFWZ3NSVUZCWXp0QlFVTjBRbkJ5UWl4TFFVRkZiM0pDTEVWQlFVWXNSVUZCVFRsRExFbEJRVTRzUTBGQlZ5d3lRMEZCV0N4RlFVRjFSQ3haUVVGVk8wRkJReTlFTzBGQlEwRTdRVUZEUVRKUkxHZENRVUZaYUhCQ0xFdEJRVm83UVVGRFJDeEpRVXBFTzBGQlMwUXNSMEZPUkRzN1FVRlJRU3hOUVVGSlozQkNMR05CUVdNc1UwRkJaRUVzVjBGQll5eERRVUZUYUhCQ0xFdEJRVlFzUlVGQlpUdEJRVU12UWl4UFFVRkpNRVVzVlVGQlZURkZMRTFCUVUxdFJDeGpRVUZ3UWp0QlFVRkJMRTlCUTBsd1dTeFJRVUZSTWxvc1VVRkJVU3hEUVVGU0xFTkJSRm83UVVGQlFTeFBRVVZKZFd0Q0xHRkJRV0U3UVVGRFdFTXNaMEpCUVZrc1YwRkVSRHRCUVVWWVF5eGxRVUZYTEZkQlJrRTdRVUZIV0VNc1kwRkJWVHRCUVVoRExFbEJSbXBDTzBGQlFVRXNUMEZQU1c0NVFpeFBRVUZQWnpsQ0xGZEJRVmRxY0VJc1RVRkJUUzlVTEVsQlFXcENMRU5CVUZnN1FVRkJRU3hQUVZGSmJ6bENMR05CVWtvN08wRkJWMEVzVDBGQlJ5eG5Ra0ZCWjBJeGFFTXNUVUZCYUVJc1NVRkJNRUlzVDBGQlQwRXNUMEZCVHpKb1F5eFZRVUZrTEV0QlFUWkNMRlZCUVRGRUxFVkJRWE5GTzBGQlEzQkZSQ3h4UWtGQmFVSXNTVUZCU1RGb1F5eFBRVUZQTW1oRExGVkJRVmdzUTBGQmMwSnlPVUlzU1VGQmRFSXNSVUZCTkVJN1FVRkRNME1zWjBKQlFWY3NTVUZFWjBNN1FVRkZNME1zYlVKQlFXTXNTVUZHTmtJN1FVRkhNME1zWjBKQlFWZHNRaXhOUVVGTmRWb3NUMEZJTUVJN1FVRkpNME1zWjBKQlFWZDJXaXhOUVVGTmQxb3NUMEZLTUVJN1FVRkxNME1zWjBKQlFWZDRXaXhOUVVGTmFWb3NUMEZNTUVJN1FVRk5NME1zWjBKQlFWZHFXaXhOUVVGTmExbzdRVUZPTUVJc1MwRkJOVUlzUTBGQmFrSTdRVUZSUkN4SlFWUkVMRTFCVTA4N1FVRkRURzlzUWl4eFFrRkJhVUkxYUVNc1UwRkJVemhvUXl4WFFVRlVMRU5CUVhGQ0xGbEJRWEpDTEVOQlFXcENPMEZCUTBGR0xHMUNRVUZsUnl4alFVRm1MRU5CUVRoQ2RqbENMRWxCUVRsQ0xFVkJRVzlETEVsQlFYQkRMRVZCUVRCRExFbEJRVEZETEVWQlFXZEVkRVVzVFVGQmFFUXNSVUZCZDBRc1EwRkJlRVFzUlVGQk1rUnZSQ3hOUVVGTmRWb3NUMEZCYWtVc1JVRkJNRVYyV2l4TlFVRk5kMW9zVDBGQmFFWXNSVUZCZVVaNFdpeE5RVUZOYVZvc1QwRkJMMFlzUlVGQmQwZHFXaXhOUVVGTmExb3NUMEZCT1Vjc1JVRkJkVWdzUzBGQmRrZ3NSVUZCT0Vnc1MwRkJPVWdzUlVGQmNVa3NTMEZCY2trc1JVRkJORWtzUzBGQk5Va3NSVUZCYlVvc1EwRkJia29zUTBGQmIwb3NVVUZCY0Vvc1JVRkJPRW9zU1VGQk9VbzdRVUZEUkR0QlFVTkViRm9zVTBGQlRXMU1MRTFCUVU0c1EwRkJZWFY2UWl4aFFVRmlMRU5CUVRKQ1NpeGpRVUV6UWp0QlFVTkVMRWRCTVVKRU8wRkJNa0pFTEVWQmNFTkVPMEZCY1VORUxFTkJkRU5CTEVOQmMwTkRkbEVzVFVGMFEwUXNRMEZCUkRzN1FVRjVRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYWtsQk96dEJRVVZCT3pzN08wRkJSVUVzUTBGQlF5eFZRVUZWTDI5Q0xFTkJRVllzUlVGQllUczdRVUZGV2l4TlFVRkpNalZDTEcxQ1FVRnRRaXhaUVVGWk8wRkJRMnBETEZGQlFVbERMRmRCUVZjc1EwRkJReXhSUVVGRUxFVkJRVmNzUzBGQldDeEZRVUZyUWl4SFFVRnNRaXhGUVVGMVFpeEpRVUYyUWl4RlFVRTJRaXhGUVVFM1FpeERRVUZtTzBGQlEwRXNVMEZCU3l4SlFVRkpjR2hETEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNXOW9ReXhUUVVGVGRDOUNMRTFCUVRkQ0xFVkJRWEZET1VJc1IwRkJja01zUlVGQk1FTTdRVUZEZUVNc1ZVRkJTVzlvUXl4VFFVRlRjR2hETEVOQlFWUXNTVUZCWXl4clFrRkJaQ3hKUVVGdlExb3NUVUZCZUVNc1JVRkJaMFE3UVVGRE9VTXNaVUZCVDBFc1QwRkJUMmRwUXl4VFFVRlRjR2hETEVOQlFWUXNTVUZCWXl4clFrRkJja0lzUTBGQlVEdEJRVU5FTzBGQlEwWTdRVUZEUkN4WFFVRlBMRXRCUVZBN1FVRkRSQ3hIUVZKelFpeEZRVUYyUWpzN1FVRlZRU3hOUVVGSmNXaERMRmRCUVZjc1UwRkJXRUVzVVVGQlZ5eERRVUZWZWs4c1JVRkJWaXhGUVVGamJIWkNMRWxCUVdRc1JVRkJiMEk3UVVGRGFrTnJka0lzVDBGQlJ6TmtMRWxCUVVnc1EwRkJVWFpTTEVsQlFWSXNSVUZCWTI5Q0xFdEJRV1FzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUp0ZEVJc1QwRkJla0lzUTBGQmFVTXNWVUZCVlhCd1FpeEZRVUZXTEVWQlFXTTdRVUZETjBOeVFpeFJRVUZGTEUxQlFVMXhRaXhGUVVGU0xFVkJRVmx1Uml4VFFVRlRMRTlCUVZRc1IwRkJiVUlzVTBGQmJrSXNSMEZCSzBJc1owSkJRVE5ETEVWQlFUWkVRU3hQUVVGUExHRkJRWEJGTEVWQlFXMUdMRU5CUVVOcmRrSXNSVUZCUkN4RFFVRnVSanRCUVVORUxFdEJSa1E3UVVGSFJDeEhRVXBFTzBGQlMwRTdRVUZEUVhCeVFpeEpRVUZGZEVrc1VVRkJSaXhGUVVGWmRXUXNSVUZCV2l4RFFVRmxMR3RDUVVGbUxFVkJRVzFETEdGQlFXNURMRVZCUVd0RUxGbEJRVms3UVVGRE5VUTBhMElzWVVGQlV6YzFRaXhGUVVGRkxFbEJRVVlzUTBGQlZDeEZRVUZyUWl4TlFVRnNRanRCUVVORUxFZEJSa1E3TzBGQlNVRTdRVUZEUVR0QlFVTkJRU3hKUVVGRmRFa3NVVUZCUml4RlFVRlpkV1FzUlVGQldpeERRVUZsTEd0Q1FVRm1MRVZCUVcxRExHTkJRVzVETEVWQlFXMUVMRmxCUVZrN1FVRkROMFFzVVVGQlNUVlVMRXRCUVV0eVFpeEZRVUZGTEVsQlFVWXNSVUZCVVhsT0xFbEJRVklzUTBGQllTeFBRVUZpTEVOQlFWUTdRVUZEUVN4UlFVRkpjRTBzUlVGQlNpeEZRVUZSTzBGQlEwNTNORUlzWlVGQlV6YzFRaXhGUVVGRkxFbEJRVVlzUTBGQlZDeEZRVUZyUWl4UFFVRnNRanRCUVVORUxFdEJSa1FzVFVGRlR6dEJRVU5NUVN4UlFVRkZMRWxCUVVZc1JVRkJVWE5UTEU5QlFWSXNRMEZCWjBJc2EwSkJRV2hDTzBGQlEwUTdRVUZEUml4SFFWQkVPenRCUVZOQk8wRkJRMEYwVXl4SlFVRkZkRWtzVVVGQlJpeEZRVUZaZFdRc1JVRkJXaXhEUVVGbExHdENRVUZtTEVWQlFXMURMR1ZCUVc1RExFVkJRVzlFTEZsQlFWazdRVUZET1VRc1VVRkJTVFZVTEV0QlFVdHlRaXhGUVVGRkxFbEJRVVlzUlVGQlVYbE9MRWxCUVZJc1EwRkJZU3hSUVVGaUxFTkJRVlE3UVVGRFFTeFJRVUZKY0Uwc1JVRkJTaXhGUVVGUk8wRkJRMDUzTkVJc1pVRkJVemMxUWl4RlFVRkZMRWxCUVVZc1EwRkJWQ3hGUVVGclFpeFJRVUZzUWp0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTVFTeFJRVUZGTEVsQlFVWXNSVUZCVVhOVExFOUJRVklzUTBGQlowSXNiVUpCUVdoQ08wRkJRMFE3UVVGRFJpeEhRVkJFT3p0QlFWTkJPMEZCUTBGMFV5eEpRVUZGZEVrc1VVRkJSaXhGUVVGWmRXUXNSVUZCV2l4RFFVRmxMR3RDUVVGbUxFVkJRVzFETEdsQ1FVRnVReXhGUVVGelJDeFZRVUZWYkdRc1EwRkJWaXhGUVVGaE8wRkJRMnBGUVN4TlFVRkZPRm9zWlVGQlJqdEJRVU5CTEZGQlFVbDViRUlzV1VGQldYUXpRaXhGUVVGRkxFbEJRVVlzUlVGQlVYbE9MRWxCUVZJc1EwRkJZU3hWUVVGaUxFTkJRV2hDT3p0QlFVVkJMRkZCUVVrMmNFSXNZMEZCWXl4RlFVRnNRaXhGUVVGelFqdEJRVU53UW01UExHbENRVUZYZDBzc1RVRkJXQ3hEUVVGclFrVXNWVUZCYkVJc1EwRkJOa0kzZWtJc1JVRkJSU3hKUVVGR0xFTkJRVGRDTEVWQlFYTkRjek5DTEZOQlFYUkRMRVZCUVdsRUxGbEJRVms3UVVGRE0wUjBNMElzVlVGQlJTeEpRVUZHTEVWQlFWRnpVeXhQUVVGU0xFTkJRV2RDTEZkQlFXaENPMEZCUTBRc1QwRkdSRHRCUVVkRUxFdEJTa1FzVFVGSlR6dEJRVU5NZEZNc1VVRkJSU3hKUVVGR0xFVkJRVkV3WlN4UFFVRlNMRWRCUVd0Q2NFMHNUMEZCYkVJc1EwRkJNRUlzVjBGQk1VSTdRVUZEUkR0QlFVTkdMRWRCV0VRN08wRkJZVUYwVXl4SlFVRkZkRWtzVVVGQlJpeEZRVUZaZFdRc1JVRkJXaXhEUVVGbExHdERRVUZtTEVWQlFXMUVMSEZDUVVGdVJDeEZRVUV3UlN4WlFVRlpPMEZCUTNCR0xGRkJRVWsxVkN4TFFVRkxja0lzUlVGQlJTeEpRVUZHTEVWQlFWRjVUaXhKUVVGU0xFTkJRV0VzWTBGQllpeERRVUZVTzBGQlEwRjZUaXhOUVVGRkxFMUJRVTF4UWl4RlFVRlNMRVZCUVZsdlppeGpRVUZhTEVOQlFUSkNMRzFDUVVFelFpeEZRVUZuUkN4RFFVRkRlbWRDTEVWQlFVVXNTVUZCUml4RFFVRkVMRU5CUVdoRU8wRkJRMFFzUjBGSVJEczdRVUZMUVRzN096czdRVUZMUVVFc1NVRkJSWEJKTEUxQlFVWXNSVUZCVlhGa0xFVkJRVllzUTBGQllTeE5RVUZpTEVWQlFYRkNMRmxCUVZrN1FVRkRMMEkyYTBJN1FVRkRSQ3hIUVVaRU96dEJRVWxCTEZkQlFWTkJMR05CUVZRc1IwRkJNRUk3UVVGRGVFSkRPMEZCUTBGRE8wRkJRMEZETzBGQlEwRkRPMEZCUTBGRE8wRkJRMFE3TzBGQlJVUTdRVUZEUVN4WFFVRlRRU3hsUVVGVUxFTkJRWGxDZEZFc1ZVRkJla0lzUlVGQmNVTTdRVUZEYmtNc1VVRkJTWFZSTEZsQlFWbHdOa0lzUlVGQlJTeHBRa0ZCUml4RFFVRm9RanRCUVVGQkxGRkJRMGx4TmtJc1dVRkJXU3hEUVVGRExGVkJRVVFzUlVGQllTeFRRVUZpTEVWQlFYZENMRkZCUVhoQ0xFTkJSR2hDT3p0QlFVZEJMRkZCUVVsNFVTeFZRVUZLTEVWQlFXZENPMEZCUTJRc1ZVRkJTU3hQUVVGUFFTeFZRVUZRTEV0QlFYTkNMRkZCUVRGQ0xFVkJRVzlETzBGQlEyeERkMUVzYTBKQlFWVTVhRU1zU1VGQlZpeERRVUZsYzNoQ0xGVkJRV1k3UVVGRFJDeFBRVVpFTEUxQlJVOHNTVUZCU1N4UlFVRlBRU3hWUVVGUUxIbERRVUZQUVN4VlFVRlFMRTlCUVhOQ0xGRkJRWFJDTEVsQlFXdERMRTlCUVU5QkxGZEJRVmNzUTBGQldDeERRVUZRTEV0QlFYbENMRkZCUVM5RUxFVkJRWGxGTzBGQlF6bEZkMUVzYTBKQlFWVm9hVU1zVFVGQlZpeERRVUZwUW5kNFFpeFZRVUZxUWp0QlFVTkVMRTlCUmswc1RVRkZRVHRCUVVOTWRtUXNaMEpCUVZGMFVTeExRVUZTTEVOQlFXTXNPRUpCUVdRN1FVRkRSRHRCUVVOR08wRkJRMFFzVVVGQlNXOHJRaXhWUVVGVk9TOUNMRTFCUVdRc1JVRkJjMEk3UVVGRGNFSXNWVUZCU1dkblF5eFpRVUZaUkN4VlFVRlZlQzlDTEVkQlFWWXNRMEZCWXl4VlFVRlZNbElzU1VGQlZpeEZRVUZuUWp0QlFVTTFReXhsUVVGUExHZENRVUZuUWtFc1NVRkJka0k3UVVGRFJDeFBRVVpsTEVWQlJXSXhTeXhKUVVaaExFTkJSVklzUjBGR1VTeERRVUZvUWpzN1FVRkpRVGxDTEZGQlFVVndTU3hOUVVGR0xFVkJRVlZ2V1N4SFFVRldMRU5CUVdOemNVSXNVMEZCWkN4RlFVRjVRbkpzUWl4RlFVRjZRaXhEUVVFMFFuRnNRaXhUUVVFMVFpeEZRVUYxUXl4VlFVRlZkbWxETEVOQlFWWXNSVUZCWVhkcFF5eFJRVUZpTEVWQlFYVkNPMEZCUXpWRUxGbEJRVWt2VVN4VFFVRlRlbmhDTEVWQlFVVTJXU3hUUVVGR0xFTkJRVmwwVkN4TFFVRmFMRU5CUVd0Q0xFZEJRV3hDTEVWQlFYVkNMRU5CUVhaQ0xFTkJRV0k3UVVGRFFTeFpRVUZKTm5OQ0xGVkJRVlZ1Y1VJc1JVRkJSU3hYUVVGWGQzQkNMRTFCUVZnc1IwRkJiMElzUjBGQmRFSXNSVUZCTWtKNmFrSXNSMEZCTTBJc1EwRkJLMElzY1VKQlFYRkNkekJDTEZGQlFYSkNMRWRCUVdkRExFbEJRUzlFTEVOQlFXUTdPMEZCUlVGd1VTeG5Ra0ZCVVhaMlFpeEpRVUZTTEVOQlFXRXNXVUZCV1R0QlFVTjJRaXhqUVVGSk1IWkNMRkZCUVZGMGNVSXNSVUZCUlN4SlFVRkdMRU5CUVZvN08wRkJSVUZ6Y1VJc1owSkJRVTAzU2l4alFVRk9MRU5CUVhGQ0xHdENRVUZ5UWl4RlFVRjVReXhEUVVGRE5rb3NTMEZCUkN4RFFVRjZRenRCUVVORUxGTkJTa1E3UVVGTFJDeFBRVlJFTzBGQlZVUTdRVUZEUmpzN1FVRkZSQ3hYUVVGVE1GQXNZMEZCVkN4RFFVRjNRbEVzVVVGQmVFSXNSVUZCYTBNN1FVRkRhRU1zVVVGQlNUbGpMRkZCUVZFc1MwRkJTeXhEUVVGcVFqdEJRVUZCTEZGQlEwa3JZeXhUUVVGVGVqWkNMRVZCUVVVc1pVRkJSaXhEUVVSaU8wRkJSVUVzVVVGQlNYazJRaXhQUVVGUGJtZERMRTFCUVZnc1JVRkJiVUk3UVVGRGFrSXdSaXhSUVVGRmNFa3NUVUZCUml4RlFVRlZiMWtzUjBGQlZpeERRVUZqTEcxQ1FVRmtMRVZCUVcxRGFVWXNSVUZCYmtNc1EwRkJjME1zYlVKQlFYUkRMRVZCUVRKRUxGVkJRVlZzWkN4RFFVRldMRVZCUVdFN1FVRkRkRVVzV1VGQlNUSnNRaXhMUVVGS0xFVkJRVmM3UVVGRFZIRkNMSFZDUVVGaGNrSXNTMEZCWWp0QlFVTkVPenRCUVVWRVFTeG5Ra0ZCVVhSU0xGZEJRVmNzV1VGQldUczdRVUZGTjBJc1kwRkJTU3hEUVVGRGRYUkNMR2RDUVVGTUxFVkJRWFZDTzBGQlEzSkNPMEZCUTBGakxHMUNRVUZQTnk5Q0xFbEJRVkFzUTBGQldTeFpRVUZaTzBGQlEzUkNiMFlzWjBKQlFVVXNTVUZCUml4RlFVRlJlV2RDTEdOQlFWSXNRMEZCZFVJc2NVSkJRWFpDTzBGQlEwUXNZVUZHUkR0QlFVZEVPMEZCUTBRN1FVRkRRV2RoTEdsQ1FVRlBOekZDTEVsQlFWQXNRMEZCV1N4aFFVRmFMRVZCUVRKQ0xGRkJRVE5DTzBGQlEwUXNVMEZXVHl4RlFWVk1OREZDTEZsQlFWa3NSVUZXVUN4RFFVRlNMRU5CVEhORkxFTkJaV3hFTzBGQlEzSkNMRTlCYUVKRU8wRkJhVUpFTzBGQlEwWTdPMEZCUlVRc1YwRkJVMUFzWTBGQlZDeERRVUYzUWs4c1VVRkJlRUlzUlVGQmEwTTdRVUZEYUVNc1VVRkJTVGxqTEZGQlFWRXNTMEZCU3l4RFFVRnFRanRCUVVGQkxGRkJRMGtyWXl4VFFVRlRlalpDTEVWQlFVVXNaVUZCUml4RFFVUmlPMEZCUlVFc1VVRkJTWGsyUWl4UFFVRlBibWRETEUxQlFWZ3NSVUZCYlVJN1FVRkRha0l3Uml4UlFVRkZjRWtzVFVGQlJpeEZRVUZWYjFrc1IwRkJWaXhEUVVGakxHMUNRVUZrTEVWQlFXMURhVVlzUlVGQmJrTXNRMEZCYzBNc2JVSkJRWFJETEVWQlFUSkVMRlZCUVZWc1pDeERRVUZXTEVWQlFXRTdRVUZEZEVVc1dVRkJTVEpzUWl4TFFVRktMRVZCUVZjN1FVRkRWSEZDTEhWQ1FVRmhja0lzUzBGQllqdEJRVU5FT3p0QlFVVkVRU3huUWtGQlVYUlNMRmRCUVZjc1dVRkJXVHM3UVVGRk4wSXNZMEZCU1N4RFFVRkRkWFJDTEdkQ1FVRk1MRVZCUVhWQ08wRkJRM0pDTzBGQlEwRmpMRzFDUVVGUE55OUNMRWxCUVZBc1EwRkJXU3haUVVGWk8wRkJRM1JDYjBZc1owSkJRVVVzU1VGQlJpeEZRVUZSZVdkQ0xHTkJRVklzUTBGQmRVSXNjVUpCUVhaQ08wRkJRMFFzWVVGR1JEdEJRVWRFTzBGQlEwUTdRVUZEUVdkaExHbENRVUZQTnpGQ0xFbEJRVkFzUTBGQldTeGhRVUZhTEVWQlFUSkNMRkZCUVROQ08wRkJRMFFzVTBGV1R5eEZRVlZNTkRGQ0xGbEJRVmtzUlVGV1VDeERRVUZTTEVOQlRITkZMRU5CWld4RU8wRkJRM0pDTEU5QmFFSkVPMEZCYVVKRU8wRkJRMFk3TzBGQlJVUXNWMEZCVTA0c1kwRkJWQ3hEUVVGM1FrMHNVVUZCZUVJc1JVRkJhME03UVVGRGFFTXNVVUZCU1VNc1UwRkJVM28yUWl4RlFVRkZMR1ZCUVVZc1EwRkJZanRCUVVOQkxGRkJRVWw1TmtJc1QwRkJUMjVuUXl4TlFVRlFMRWxCUVdsQ2NTOUNMR2RDUVVGeVFpeEZRVUYxUXp0QlFVTnlRenRCUVVOQk8wRkJRMEZqTEdGQlFVODNMMElzU1VGQlVDeERRVUZaTEZsQlFWazdRVUZEZEVKdlJpeFZRVUZGTEVsQlFVWXNSVUZCVVhsblFpeGpRVUZTTEVOQlFYVkNMSEZDUVVGMlFqdEJRVU5FTEU5QlJrUTdRVUZIUkR0QlFVTkdPenRCUVVWRUxGZEJRVk56V2l4alFVRlVMRWRCUVRCQ08wRkJRM2hDTEZGQlFVa3NRMEZCUTBvc1owSkJRVXdzUlVGQmRVSTdRVUZEY2tJc1lVRkJUeXhMUVVGUU8wRkJRMFE3UVVGRFJDeFJRVUZKWlN4UlFVRlJhR3BETEZOQlFWTnpTeXhuUWtGQlZDeERRVUV3UWl3MlEwRkJNVUlzUTBGQldqczdRVUZGUVR0QlFVTkJMRkZCUVVreU5FSXNORUpCUVRSQ0xGTkJRVFZDUVN4NVFrRkJORUlzUTBGQlZVTXNiVUpCUVZZc1JVRkJLMEk3UVVGRE4wUXNWVUZCU1haTUxGVkJRVlZ5ZGtJc1JVRkJSVFEyUWl4dlFrRkJiMElzUTBGQmNFSXNSVUZCZFVKNk1FSXNUVUZCZWtJc1EwRkJaRHM3UVVGRlFUdEJRVU5CTEdOQlFWRjVNRUlzYjBKQlFXOUNMRU5CUVhCQ0xFVkJRWFZDTVN0Q0xFbEJRUzlDT3p0QlFVVkZMR0ZCUVVzc1dVRkJURHRCUVVORkxHTkJRVWx0ZWtJc1VVRkJVWHB4UWl4SlFVRlNMRU5CUVdFc1lVRkJZaXhOUVVGblF5eFJRVUZvUXl4SlFVRTBRMmN5UWl4dlFrRkJiMElzUTBGQmNFSXNSVUZCZFVKRExHRkJRWFpDTEV0QlFYbERMR0ZCUVhwR0xFVkJRWGRITzBGQlEzUkhlRXdzYjBKQlFWRTFUeXhqUVVGU0xFTkJRWFZDTEhGQ1FVRjJRaXhGUVVFNFF5eERRVUZETkU4c1QwRkJSQ3hGUVVGVmVqTkNMRTlCUVU5cmQwSXNWMEZCYWtJc1EwRkJPVU03UVVGRFJEdEJRVU5FTEdOQlFVbDFTQ3hSUVVGUmVuRkNMRWxCUVZJc1EwRkJZU3hoUVVGaUxFMUJRV2RETEZGQlFXaERMRWxCUVRSRFp6SkNMRzlDUVVGdlFpeERRVUZ3UWl4RlFVRjFRa01zWVVGQmRrSXNTMEZCZVVNc1lVRkJla1lzUlVGQmQwYzdRVUZEZEVkNFRDeHZRa0ZCVVRWUExHTkJRVklzUTBGQmRVSXNjVUpCUVhaQ0xFVkJRVGhETEVOQlFVTTBUeXhQUVVGRUxFTkJRVGxETzBGQlEwUTdRVUZEUkN4alFVRkpkVXdzYjBKQlFXOUNMRU5CUVhCQ0xFVkJRWFZDUXl4aFFVRjJRaXhMUVVGNVF5eFBRVUUzUXl4RlFVRnpSRHRCUVVOd1JIaE1MRzlDUVVGUk4yeENMRTlCUVZJc1EwRkJaMElzWlVGQmFFSXNSVUZCYVVNMVJTeEpRVUZxUXl4RFFVRnpReXhoUVVGMFF5eEZRVUZ4UkN4UlFVRnlSRHRCUVVOQmVYRkNMRzlDUVVGUk4yeENMRTlCUVZJc1EwRkJaMElzWlVGQmFFSXNSVUZCYVVOcFdDeGpRVUZxUXl4RFFVRm5SQ3h4UWtGQmFFUXNSVUZCZFVVc1EwRkJRelJQTEZGQlFWRTNiRUlzVDBGQlVpeERRVUZuUWl4bFFVRm9RaXhEUVVGRUxFTkJRWFpGTzBGQlEwUTdRVUZEUkRzN1FVRkZSaXhoUVVGTExGZEJRVXc3UVVGRFJUWnNRaXhyUWtGQlVUZHNRaXhQUVVGU0xFTkJRV2RDTEdWQlFXaENMRVZCUVdsRE5VVXNTVUZCYWtNc1EwRkJjME1zWVVGQmRFTXNSVUZCY1VRc1VVRkJja1E3UVVGRFFYbHhRaXhyUWtGQlVUZHNRaXhQUVVGU0xFTkJRV2RDTEdWQlFXaENMRVZCUVdsRGFWZ3NZMEZCYWtNc1EwRkJaMFFzY1VKQlFXaEVMRVZCUVhWRkxFTkJRVU0wVHl4UlFVRlJOMnhDTEU5QlFWSXNRMEZCWjBJc1pVRkJhRUlzUTBGQlJDeERRVUYyUlR0QlFVTkJPenRCUVVWR08wRkJRMFVzYVVKQlFVOHNTMEZCVUR0QlFVTkdPMEZCZEVKR08wRkJkMEpFTEV0Qk5VSkVPenRCUVRoQ1FTeFJRVUZKYTNoQ0xFMUJRVTF3WjBNc1RVRkJWaXhGUVVGclFqdEJRVU5vUWp0QlFVTkJMRmRCUVVzc1NVRkJTVGxDTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzUzBGQlMydHBReXhOUVVGTmNHZERMRTFCUVU0c1IwRkJaU3hEUVVGd1F5eEZRVUYxUXpsQ0xFZEJRWFpETEVWQlFUUkRPMEZCUXpGRExGbEJRVWx6YVVNc2EwSkJRV3RDTEVsQlFVbHVRaXhuUWtGQlNpeERRVUZ4UW1kQ0xIbENRVUZ5UWl4RFFVRjBRanRCUVVOQlJ5eDNRa0ZCWjBKRExFOUJRV2hDTEVOQlFYZENUQ3hOUVVGTmJHbERMRU5CUVU0c1EwRkJlRUlzUlVGQmEwTXNSVUZCUlN0TExGbEJRVmtzU1VGQlpDeEZRVUZ2UW5relFpeFhRVUZYTEVsQlFTOUNMRVZCUVhGRFF5eGxRVUZsTEV0QlFYQkVMRVZCUVRKRVF5eFRRVUZUTEVsQlFYQkZMRVZCUVRCRlF5eHBRa0ZCYVVJc1EwRkJReXhoUVVGRUxFVkJRV2RDTEU5QlFXaENMRU5CUVROR0xFVkJRV3hETzBGQlEwUTdRVUZEUmp0QlFVTkdPenRCUVVWRU96dEJRVVZCTzBGQlEwRTdRVUZEUVdoVExHRkJRVmRwVXl4UlFVRllMRWRCUVhOQ2RFSXNZMEZCZEVJN1FVRkRRVHRCUVVOQk8wRkJRMFFzUTBFdlRrRXNRMEVyVGtNdlVTeE5RUzlPUkN4RFFVRkVPenRCUVdsUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGRGRGRkRMR0ZCUVZjN1FVRkJSUzl2UWl4SlFVRkZkRWtzVVVGQlJpeEZRVUZaWjNwQ0xGVkJRVm83UVVGQk1rSXNRMEZCZUVNc1IwRkJSRHM3T3pzN1FVTkJRU3hEUVVGRkxGZEJRVk53YTBJc1NVRkJWQ3hGUVVGbEt6QkNMRTlCUVdZc1JVRkJkMEk3UVVGRGVFSXNUVUZCU1N4UFFVRlBlbE1zVFVGQlVDeExRVUZyUWl4VlFVRnNRaXhKUVVGblEwRXNUMEZCVDBNc1IwRkJNME1zUlVGQlowUTdRVUZET1VORUxGZEJRVThzUTBGQlF5eFJRVUZFTEVOQlFWQXNSVUZCYlVKNVV5eFBRVUZ1UWp0QlFVTkVMRWRCUmtRc1RVRkZUeXhKUVVGSkxGRkJRVTgxYWtNc1QwRkJVQ3g1UTBGQlQwRXNUMEZCVUN4UFFVRnRRaXhSUVVGMlFpeEZRVUZwUXp0QlFVTjBRMFFzVjBGQlQwTXNUMEZCVUN4SFFVRnBRalJxUXl4UlFVRlJReXhSUVVGUkxGRkJRVklzUTBGQlVpeERRVUZxUWp0QlFVTkVMRWRCUmswc1RVRkZRVHRCUVVOTWFERkNMRk5CUVV0cE1VSXNVVUZCVEN4SFFVRm5Ra1lzVVVGQlVTOHdRaXhMUVVGTGVXbENMRTFCUVdJc1EwRkJhRUk3UVVGRFJEdEJRVU5HTEVOQlVrTXNZVUZSVFN4VlFVRlRMMjlDTEVOQlFWUXNSVUZCV1R0QlFVTndRanM3UVVGRlFUczdRVUZEUVN4SFFVRkRMRmxCUVZjN1FVRkRWaXhSUVVGSkxFTkJRVU01UXl4TFFVRkxSQ3hIUVVGV0xFVkJRMFZETEV0QlFVdEVMRWRCUVV3c1IwRkJWeXhaUVVGWE8wRkJRVVVzWVVGQlR5eEpRVUZKUXl4SlFVRktMRWRCUVZkcmRrSXNUMEZCV0N4RlFVRlFPMEZCUVRoQ0xFdEJRWFJFT3p0QlFVVkdMRkZCUVVsRExGVkJRVlVzUTBGQlF5eFJRVUZFTEVWQlFWY3NTMEZCV0N4RFFVRmtPMEZCUTBFc1UwRkJTeXhKUVVGSk4zcENMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1RaNlFpeFJRVUZSTDNoQ0xFMUJRVm9zU1VGQmMwSXNRMEZCUXpGRExFOUJRVTl4YTBJc2NVSkJRVGxETEVWQlFYRkZMRVZCUVVWNmFrSXNRMEZCZGtVc1JVRkJNRVU3UVVGRGRFVXNWVUZCU1RoNlFpeExRVUZMUkN4UlFVRlJOM3BDTEVOQlFWSXNRMEZCVkR0QlFVTkJXaXhoUVVGUGNXdENMSEZDUVVGUUxFZEJRU3RDY210Q0xFOUJRVTh3TUVJc1MwRkJSeXgxUWtGQlZpeERRVUV2UWp0QlFVTkJNVEJDTEdGQlFVOHlNRUlzYjBKQlFWQXNSMEZCSzBJek1FSXNUMEZCVHpBd1FpeExRVUZITEhOQ1FVRldMRXRCUTBReE1FSXNUMEZCVHpBd1FpeExRVUZITERaQ1FVRldMRU5CUkRsQ08wRkJSVWc3UVVGRFJDeFJRVUZKTEhWQ1FVRjFRamR4UWl4SlFVRjJRaXhEUVVFMFFqZEtMRTlCUVU4ME1FSXNVMEZCVUN4RFFVRnBRa01zVTBGQk4wTXNTMEZEUXl4RFFVRkROekJDTEU5QlFVOXhhMElzY1VKQlJGUXNTVUZEYTBNc1EwRkJRM0pyUWl4UFFVRlBNakJDTEc5Q1FVUTVReXhGUVVOdlJUdEJRVU5zUlN4VlFVRkpSeXhYUVVGWExFTkJRV1k3UVVGRFFUa3dRaXhoUVVGUGNXdENMSEZDUVVGUUxFZEJRU3RDTEZWQlFWTXdVU3hSUVVGVUxFVkJRVzFDTzBGQlF6bERMRmxCUVVreGRrSXNUVUZCVFVNc1MwRkJTMFFzUjBGQlRDeEZRVUZXTzBGQlEwRXNXVUZCU1RKMlFpeFhRVUZYYUhoQ0xFdEJRVXR4WkN4SFFVRk1MRU5CUVZONVZDeFhRVUZYTEVWQlFYQkNMRVZCUVhkQ2VuWkNMRWRCUVhoQ0xFTkJRV1k3UVVGRFFTeGxRVUZQYlZBc1YwRkJWeXhaUVVGWE8wRkJRVVYxWjBJc2JVSkJRVk5FTEZkQlFWZEZMRkZCUVhCQ08wRkJRV2RETEZOQlFYaEVMRVZCUTFkQkxGZEJRVmN6ZGtJc1IwRkVkRUlzUTBGQlVEdEJRVVZJTEU5QlRFUTdRVUZOUVhKR0xHRkJRVTh5TUVJc2IwSkJRVkFzUjBGQk9FSjRUaXhaUVVFNVFqdEJRVU5FTzBGQlEwWXNSMEYwUWtRN08wRkJkMEpCTEUxQlFVbHhXU3hqUVVGblFpeERRVUZETEZkQlFVUXNSVUZCWXl4WFFVRmtMRU5CUVhCQ08wRkJRMEVzVFVGQlNVTXNaMEpCUVdkQ0xFTkJRVU1zYTBKQlFVUXNSVUZCY1VJc2EwSkJRWEpDTEVOQlFYQkNPenRCUVVWQk8wRkJRMEVzVFVGQlNXMUZMRmRCUVZrc1dVRkJWenRCUVVONlFpeFJRVUZKTDFBc1kwRkJZenRCUVVOb1FpeHZRa0ZCWXl4bFFVUkZPMEZCUldoQ0xEQkNRVUZ2UWl4eFFrRkdTanRCUVVkb1FpeDFRa0ZCYVVJc1pVRklSRHRCUVVsb1FpeHhRa0ZCWlR0QlFVcERMRXRCUVd4Q08wRkJUVUVzVVVGQlNXeGhMRTlCUVU4eldpeFBRVUZQUml4UlFVRlFMRU5CUVdkQ01FSXNZVUZCYUVJc1EwRkJPRUlzUzBGQk9VSXNRMEZCV0RzN1FVRkZRU3hUUVVGTExFbEJRVWxYTEVOQlFWUXNTVUZCWXpCNFFpeFhRVUZrTEVWQlFUSkNPMEZCUTNwQ0xGVkJRVWtzVDBGQlQyeGhMRXRCUVV0d1JDeExRVUZNTEVOQlFWZHdWU3hEUVVGWUxFTkJRVkFzUzBGQmVVSXNWMEZCTjBJc1JVRkJNRU03UVVGRGVFTXNaVUZCVHpCNFFpeFpRVUZaTVhoQ0xFTkJRVm9zUTBGQlVEdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1YwRkJUeXhKUVVGUU8wRkJRMFFzUjBGb1FtTXNSVUZCWmpzN1FVRnJRa0VzVjBGQlUyOXJRaXhQUVVGVUxFTkJRV2xDZDFvc1NVRkJha0lzUlVGQmRVSXpTaXhQUVVGMlFpeEZRVUZuUTNOS0xGTkJRV2hETEVWQlFUSkRlbUlzUlVGQk0wTXNSVUZCSzBNN1FVRkROME50VXl4alFVRlZhSFZDTEVWQlFVVm5kVUlzVDBGQlJpeEZRVUZYTDNsQ0xFVkJRVmdzUTBGQll5eERRVUZrTEVOQlFWWTdPMEZCUlVFc1VVRkJTU3hEUVVGREszbENMRkZCUVZFeGVrSXNUVUZCWWl4RlFVRnhRanM3UVVGRmNrSXNVVUZCU1d0b1F5eGhRVUZoTEVsQlFXcENMRVZCUVhWQ08wRkJRM0pDTjBRc1lVRkJUek5LTEZGQlFWRnlaaXhKUVVGU0xFVkJRVkFzUjBGQmQwSnhaaXhSUVVGUmNHWXNTVUZCVWl4RlFVRjRRanRCUVVOQmFVNDdRVUZEUVR0QlFVTkVPenRCUVVWRUxGRkJRVWtyWWl4WlFVRlpSQ3hQUVVGUFVDeFpRVUZaTEVOQlFWb3NRMEZCVUN4SFFVRjNRa0VzV1VGQldTeERRVUZhTEVOQlFYaERPMEZCUTBFc1VVRkJTVk1zWTBGQlkwWXNUMEZCVDA0c1kwRkJZeXhEUVVGa0xFTkJRVkFzUjBGQk1FSkJMR05CUVdNc1EwRkJaQ3hEUVVFMVF6czdRVUZGUVR0QlFVTkJjblpDTzBGQlEwRm5iVUlzV1VGQlVXeFBMRkZCUVZJc1EwRkJhVUozV0N4VFFVRnFRanRCUVVOQmRFb3NXVUZCVVRObUxFZEJRVklzUTBGQldTeFpRVUZhTEVWQlFUQkNMRTFCUVRGQ08wRkJRMEUwVGl3d1FrRkJjMElzV1VGQlZ6dEJRVU12UWl0U0xHTkJRVkZzVHl4UlFVRlNMRU5CUVdsQ09GZ3NVMEZCYWtJN1FVRkRRU3hWUVVGSlJDeEpRVUZLTEVWQlFWVXpTaXhSUVVGUmNtWXNTVUZCVWp0QlFVTllMRXRCU0VRN08wRkJTMEU3UVVGRFFYTk9MREJDUVVGelFpeFpRVUZYTzBGQlF5OUNLMUlzWTBGQlVTeERRVUZTTEVWQlFWZHFTU3hYUVVGWU8wRkJRMEZwU1N4alFVRlJNMllzUjBGQlVpeERRVUZaTEZsQlFWb3NSVUZCTUVJc1JVRkJNVUk3UVVGRFFUSm1MR05CUVZGc1R5eFJRVUZTTEVOQlFXbENLMWdzVjBGQmFrSTdRVUZEUkN4TFFVcEVPenRCUVUxQk8wRkJRMEUzU2l4WlFVRlJPVmtzUjBGQlVpeERRVUZaTEdWQlFWb3NSVUZCTmtKclNpeE5RVUUzUWpzN1FVRkZRVHRCUVVOQkxHRkJRVk5CTEUxQlFWUXNSMEZCYTBJN1FVRkRhRUlzVlVGQlNTeERRVUZEZFZvc1NVRkJUQ3hGUVVGWE0wb3NVVUZCVVhCbUxFbEJRVkk3UVVGRFdEVkhPMEZCUTBFc1ZVRkJTVFpVTEVWQlFVb3NSVUZCVVVFc1IwRkJSeTluUWl4TFFVRklMRU5CUVZOcmVrSXNUMEZCVkR0QlFVTlVPenRCUVVWRU8wRkJRMEVzWVVGQlUyaHRRaXhMUVVGVUxFZEJRV2xDTzBGQlEyWm5iVUlzWTBGQlVTeERRVUZTTEVWQlFWYzNaaXhMUVVGWUxFTkJRV2xDT0dkQ0xHdENRVUZxUWl4SFFVRnpReXhEUVVGMFF6dEJRVU5CYWtJc1kwRkJVV3BQTEZkQlFWSXNRMEZCYjBJMldDeFpRVUZaTEVkQlFWb3NSMEZCYTBKRExGZEJRV3hDTEVkQlFXZERMRWRCUVdoRExFZEJRWE5EVUN4VFFVRXhSRHRCUVVORU8wRkJRMFk3TzBGQlJVUXNUVUZCU1dsRkxGZEJRVmM3UVVGRFlqTklMR1ZCUVZjc2JVSkJRVk0xUml4UFFVRlVMRVZCUVd0Q2Mwb3NVMEZCYkVJc1JVRkJOa0o2WWl4RlFVRTNRaXhGUVVGcFF6dEJRVU14UTNORExHTkJRVkVzU1VGQlVpeEZRVUZqTmxBc1QwRkJaQ3hGUVVGMVFuTktMRk5CUVhaQ0xFVkJRV3REZW1Jc1JVRkJiRU03UVVGRFJDeExRVWhaT3p0QlFVdGlaMWtzWjBKQlFWa3NiMEpCUVZNM1JpeFBRVUZVTEVWQlFXdENjMG9zVTBGQmJFSXNSVUZCTmtKNllpeEZRVUUzUWl4RlFVRnBRenRCUVVNelEzTkRMR05CUVZFc1MwRkJVaXhGUVVGbE5sQXNUMEZCWml4RlFVRjNRbk5LTEZOQlFYaENMRVZCUVcxRGVtSXNSVUZCYmtNN1FVRkRSRHRCUVZCWkxFZEJRV1k3TzBGQlZVRXNVMEZCVHpCbUxGRkJRVkE3UVVGRFF5eERRWEJJUXl4RFFVRkVJaXdpWm1sc1pTSTZJbUZzYkM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxSVNCcVVYVmxjbmtnZGpNdU1pNHhJSHdnS0dNcElFcFRJRVp2ZFc1a1lYUnBiMjRnWVc1a0lHOTBhR1Z5SUdOdmJuUnlhV0oxZEc5eWN5QjhJR3B4ZFdWeWVTNXZjbWN2YkdsalpXNXpaU0FxTDF4dUlXWjFibU4wYVc5dUtHRXNZaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JRzF2WkhWc1pTWW1YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JRzF2WkhWc1pTNWxlSEJ2Y25SelAyMXZaSFZzWlM1bGVIQnZjblJ6UFdFdVpHOWpkVzFsYm5RL1lpaGhMQ0V3S1RwbWRXNWpkR2x2YmloaEtYdHBaaWdoWVM1a2IyTjFiV1Z1ZENsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKcVVYVmxjbmtnY21WeGRXbHlaWE1nWVNCM2FXNWtiM2NnZDJsMGFDQmhJR1J2WTNWdFpXNTBYQ0lwTzNKbGRIVnliaUJpS0dFcGZUcGlLR0VwZlNoY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdkMmx1Wkc5M1AzZHBibVJ2ZHpwMGFHbHpMR1oxYm1OMGFXOXVLR0VzWWlsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3ZG1GeUlHTTlXMTBzWkQxaExtUnZZM1Z0Wlc1MExHVTlUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltTEdZOVl5NXpiR2xqWlN4blBXTXVZMjl1WTJGMExHZzlZeTV3ZFhOb0xHazlZeTVwYm1SbGVFOW1MR285ZTMwc2F6MXFMblJ2VTNSeWFXNW5MR3c5YWk1b1lYTlBkMjVRY205d1pYSjBlU3h0UFd3dWRHOVRkSEpwYm1jc2JqMXRMbU5oYkd3b1QySnFaV04wS1N4dlBYdDlPMloxYm1OMGFXOXVJSEFvWVN4aUtYdGlQV0o4ZkdRN2RtRnlJR005WWk1amNtVmhkR1ZGYkdWdFpXNTBLRndpYzJOeWFYQjBYQ0lwTzJNdWRHVjRkRDFoTEdJdWFHVmhaQzVoY0hCbGJtUkRhR2xzWkNoaktTNXdZWEpsYm5ST2IyUmxMbkpsYlc5MlpVTm9hV3hrS0dNcGZYWmhjaUJ4UFZ3aU15NHlMakZjSWl4eVBXWjFibU4wYVc5dUtHRXNZaWw3Y21WMGRYSnVJRzVsZHlCeUxtWnVMbWx1YVhRb1lTeGlLWDBzY3owdlhsdGNYSE5jWEhWR1JVWkdYRng0UVRCZEszeGJYRnh6WEZ4MVJrVkdSbHhjZUVFd1hTc2tMMmNzZEQwdlhpMXRjeTB2TEhVOUx5MG9XMkV0ZWwwcEwyY3NkajFtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCaUxuUnZWWEJ3WlhKRFlYTmxLQ2w5TzNJdVptNDljaTV3Y205MGIzUjVjR1U5ZTJweGRXVnllVHB4TEdOdmJuTjBjblZqZEc5eU9uSXNiR1Z1WjNSb09qQXNkRzlCY25KaGVUcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQm1MbU5oYkd3b2RHaHBjeWw5TEdkbGREcG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdiblZzYkQwOVlUOW1MbU5oYkd3b2RHaHBjeWs2WVR3d1AzUm9hWE5iWVN0MGFHbHpMbXhsYm1kMGFGMDZkR2hwYzF0aFhYMHNjSFZ6YUZOMFlXTnJPbVoxYm1OMGFXOXVLR0VwZTNaaGNpQmlQWEl1YldWeVoyVW9kR2hwY3k1amIyNXpkSEoxWTNSdmNpZ3BMR0VwTzNKbGRIVnliaUJpTG5CeVpYWlBZbXBsWTNROWRHaHBjeXhpZlN4bFlXTm9PbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJ5TG1WaFkyZ29kR2hwY3l4aEtYMHNiV0Z3T21aMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCMGFHbHpMbkIxYzJoVGRHRmpheWh5TG0xaGNDaDBhR2x6TEdaMWJtTjBhVzl1S0dJc1l5bDdjbVYwZFhKdUlHRXVZMkZzYkNoaUxHTXNZaWw5S1NsOUxITnNhV05sT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTXVjSFZ6YUZOMFlXTnJLR1l1WVhCd2JIa29kR2hwY3l4aGNtZDFiV1Z1ZEhNcEtYMHNabWx5YzNRNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjeTVsY1Nnd0tYMHNiR0Z6ZERwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMGFHbHpMbVZ4S0MweEtYMHNaWEU2Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5ZEdocGN5NXNaVzVuZEdnc1l6MHJZU3NvWVR3d1AySTZNQ2s3Y21WMGRYSnVJSFJvYVhNdWNIVnphRk4wWVdOcktHTStQVEFtSm1NOFlqOWJkR2hwYzF0alhWMDZXMTBwZlN4bGJtUTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkR2hwY3k1d2NtVjJUMkpxWldOMGZIeDBhR2x6TG1OdmJuTjBjblZqZEc5eUtDbDlMSEIxYzJnNmFDeHpiM0owT21NdWMyOXlkQ3h6Y0d4cFkyVTZZeTV6Y0d4cFkyVjlMSEl1WlhoMFpXNWtQWEl1Wm00dVpYaDBaVzVrUFdaMWJtTjBhVzl1S0NsN2RtRnlJR0VzWWl4akxHUXNaU3htTEdjOVlYSm5kVzFsYm5Seld6QmRmSHg3ZlN4b1BURXNhVDFoY21kMWJXVnVkSE11YkdWdVozUm9MR285SVRFN1ptOXlLRndpWW05dmJHVmhibHdpUFQxMGVYQmxiMllnWnlZbUtHbzlaeXhuUFdGeVozVnRaVzUwYzF0b1hYeDhlMzBzYUNzcktTeGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdaM3g4Y2k1cGMwWjFibU4wYVc5dUtHY3BmSHdvWnoxN2ZTa3NhRDA5UFdrbUppaG5QWFJvYVhNc2FDMHRLVHRvUEdrN2FDc3JLV2xtS0c1MWJHd2hQU2hoUFdGeVozVnRaVzUwYzF0b1hTa3BabTl5S0dJZ2FXNGdZU2xqUFdkYllsMHNaRDFoVzJKZExHY2hQVDFrSmlZb2FpWW1aQ1ltS0hJdWFYTlFiR0ZwYms5aWFtVmpkQ2hrS1h4OEtHVTlRWEp5WVhrdWFYTkJjbkpoZVNoa0tTa3BQeWhsUHlobFBTRXhMR1k5WXlZbVFYSnlZWGt1YVhOQmNuSmhlU2hqS1Q5ak9sdGRLVHBtUFdNbUpuSXVhWE5RYkdGcGJrOWlhbVZqZENoaktUOWpPbnQ5TEdkYllsMDljaTVsZUhSbGJtUW9haXhtTEdRcEtUcDJiMmxrSURBaFBUMWtKaVlvWjF0aVhUMWtLU2s3Y21WMGRYSnVJR2Q5TEhJdVpYaDBaVzVrS0h0bGVIQmhibVJ2T2x3aWFsRjFaWEo1WENJcktIRXJUV0YwYUM1eVlXNWtiMjBvS1NrdWNtVndiR0ZqWlNndlhGeEVMMmNzWENKY0lpa3NhWE5TWldGa2VUb2hNQ3hsY25KdmNqcG1kVzVqZEdsdmJpaGhLWHQwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZU2w5TEc1dmIzQTZablZ1WTNScGIyNG9LWHQ5TEdselJuVnVZM1JwYjI0NlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdVhDSm1kVzVqZEdsdmJsd2lQVDA5Y2k1MGVYQmxLR0VwZlN4cGMxZHBibVJ2ZHpwbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2JuVnNiQ0U5WVNZbVlUMDlQV0V1ZDJsdVpHOTNmU3hwYzA1MWJXVnlhV002Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5Y2k1MGVYQmxLR0VwTzNKbGRIVnliaWhjSW01MWJXSmxjbHdpUFQwOVlueDhYQ0p6ZEhKcGJtZGNJajA5UFdJcEppWWhhWE5PWVU0b1lTMXdZWEp6WlVac2IyRjBLR0VwS1gwc2FYTlFiR0ZwYms5aWFtVmpkRHBtZFc1amRHbHZiaWhoS1h0MllYSWdZaXhqTzNKbGRIVnliaUVvSVdGOGZGd2lXMjlpYW1WamRDQlBZbXBsWTNSZFhDSWhQVDFyTG1OaGJHd29ZU2twSmlZb0lTaGlQV1VvWVNrcGZId29ZejFzTG1OaGJHd29ZaXhjSW1OdmJuTjBjblZqZEc5eVhDSXBKaVppTG1OdmJuTjBjblZqZEc5eUxGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR01tSm0wdVkyRnNiQ2hqS1QwOVBXNHBLWDBzYVhORmJYQjBlVTlpYW1WamREcG1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqdG1iM0lvWWlCcGJpQmhLWEpsZEhWeWJpRXhPM0psZEhWeWJpRXdmU3gwZVhCbE9tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQnVkV3hzUFQxaFAyRXJYQ0pjSWpwY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1lYeDhYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWVQ5cVcyc3VZMkZzYkNoaEtWMThmRndpYjJKcVpXTjBYQ0k2ZEhsd1pXOW1JR0Y5TEdkc2IySmhiRVYyWVd3NlpuVnVZM1JwYjI0b1lTbDdjQ2hoS1gwc1kyRnRaV3hEWVhObE9tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQmhMbkpsY0d4aFkyVW9kQ3hjSW0xekxWd2lLUzV5WlhCc1lXTmxLSFVzZGlsOUxHVmhZMmc2Wm5WdVkzUnBiMjRvWVN4aUtYdDJZWElnWXl4a1BUQTdhV1lvZHloaEtTbDdabTl5S0dNOVlTNXNaVzVuZEdnN1pEeGpPMlFyS3lscFppaGlMbU5oYkd3b1lWdGtYU3hrTEdGYlpGMHBQVDA5SVRFcFluSmxZV3Q5Wld4elpTQm1iM0lvWkNCcGJpQmhLV2xtS0dJdVkyRnNiQ2hoVzJSZExHUXNZVnRrWFNrOVBUMGhNU2xpY21WaGF6dHlaWFIxY200Z1lYMHNkSEpwYlRwbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2JuVnNiRDA5WVQ5Y0lsd2lPaWhoSzF3aVhDSXBMbkpsY0d4aFkyVW9jeXhjSWx3aUtYMHNiV0ZyWlVGeWNtRjVPbVoxYm1OMGFXOXVLR0VzWWlsN2RtRnlJR005WW54OFcxMDdjbVYwZFhKdUlHNTFiR3doUFdFbUppaDNLRTlpYW1WamRDaGhLU2svY2k1dFpYSm5aU2hqTEZ3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCaFAxdGhYVHBoS1Rwb0xtTmhiR3dvWXl4aEtTa3NZMzBzYVc1QmNuSmhlVHBtZFc1amRHbHZiaWhoTEdJc1l5bDdjbVYwZFhKdUlHNTFiR3c5UFdJL0xURTZhUzVqWVd4c0tHSXNZU3hqS1gwc2JXVnlaMlU2Wm5WdVkzUnBiMjRvWVN4aUtYdG1iM0lvZG1GeUlHTTlLMkl1YkdWdVozUm9MR1E5TUN4bFBXRXViR1Z1WjNSb08yUThZenRrS3lzcFlWdGxLeXRkUFdKYlpGMDdjbVYwZFhKdUlHRXViR1Z1WjNSb1BXVXNZWDBzWjNKbGNEcG1kVzVqZEdsdmJpaGhMR0lzWXlsN1ptOXlLSFpoY2lCa0xHVTlXMTBzWmowd0xHYzlZUzVzWlc1bmRHZ3NhRDBoWXp0bVBHYzdaaXNyS1dROUlXSW9ZVnRtWFN4bUtTeGtJVDA5YUNZbVpTNXdkWE5vS0dGYlpsMHBPM0psZEhWeWJpQmxmU3h0WVhBNlpuVnVZM1JwYjI0b1lTeGlMR01wZTNaaGNpQmtMR1VzWmowd0xHZzlXMTA3YVdZb2R5aGhLU2xtYjNJb1pEMWhMbXhsYm1kMGFEdG1QR1E3WmlzcktXVTlZaWhoVzJaZExHWXNZeWtzYm5Wc2JDRTlaU1ltYUM1d2RYTm9LR1VwTzJWc2MyVWdabTl5S0dZZ2FXNGdZU2xsUFdJb1lWdG1YU3htTEdNcExHNTFiR3doUFdVbUptZ3VjSFZ6YUNobEtUdHlaWFIxY200Z1p5NWhjSEJzZVNoYlhTeG9LWDBzWjNWcFpEb3hMSEJ5YjNoNU9tWjFibU4wYVc5dUtHRXNZaWw3ZG1GeUlHTXNaQ3hsTzJsbUtGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmlKaVlvWXoxaFcySmRMR0k5WVN4aFBXTXBMSEl1YVhOR2RXNWpkR2x2YmloaEtTbHlaWFIxY200Z1pEMW1MbU5oYkd3b1lYSm5kVzFsYm5SekxESXBMR1U5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWVM1aGNIQnNlU2hpZkh4MGFHbHpMR1F1WTI5dVkyRjBLR1l1WTJGc2JDaGhjbWQxYldWdWRITXBLU2w5TEdVdVozVnBaRDFoTG1kMWFXUTlZUzVuZFdsa2ZIeHlMbWQxYVdRckt5eGxmU3h1YjNjNlJHRjBaUzV1YjNjc2MzVndjRzl5ZERwdmZTa3NYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnVTNsdFltOXNKaVlvY2k1bWJsdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZFBXTmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTa3NjaTVsWVdOb0tGd2lRbTl2YkdWaGJpQk9kVzFpWlhJZ1UzUnlhVzVuSUVaMWJtTjBhVzl1SUVGeWNtRjVJRVJoZEdVZ1VtVm5SWGh3SUU5aWFtVmpkQ0JGY25KdmNpQlRlVzFpYjJ4Y0lpNXpjR3hwZENoY0lpQmNJaWtzWm5WdVkzUnBiMjRvWVN4aUtYdHFXMXdpVzI5aWFtVmpkQ0JjSWl0aUsxd2lYVndpWFQxaUxuUnZURzkzWlhKRFlYTmxLQ2w5S1R0bWRXNWpkR2x2YmlCM0tHRXBlM1poY2lCaVBTRWhZU1ltWENKc1pXNW5kR2hjSW1sdUlHRW1KbUV1YkdWdVozUm9MR005Y2k1MGVYQmxLR0VwTzNKbGRIVnlibHdpWm5WdVkzUnBiMjVjSWlFOVBXTW1KaUZ5TG1selYybHVaRzkzS0dFcEppWW9YQ0poY25KaGVWd2lQVDA5WTN4OE1EMDlQV0o4ZkZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCaUppWmlQakFtSm1JdE1TQnBiaUJoS1gxMllYSWdlRDFtZFc1amRHbHZiaWhoS1h0MllYSWdZaXhqTEdRc1pTeG1MR2NzYUN4cExHb3NheXhzTEcwc2JpeHZMSEFzY1N4eUxITXNkQ3gxUFZ3aWMybDZlbXhsWENJck1TcHVaWGNnUkdGMFpTeDJQV0V1Wkc5amRXMWxiblFzZHowd0xIZzlNQ3g1UFdoaEtDa3NlajFvWVNncExFRTlhR0VvS1N4Q1BXWjFibU4wYVc5dUtHRXNZaWw3Y21WMGRYSnVJR0U5UFQxaUppWW9iRDBoTUNrc01IMHNRejE3ZlM1b1lYTlBkMjVRY205d1pYSjBlU3hFUFZ0ZExFVTlSQzV3YjNBc1JqMUVMbkIxYzJnc1J6MUVMbkIxYzJnc1NEMUVMbk5zYVdObExFazlablZ1WTNScGIyNG9ZU3hpS1h0bWIzSW9kbUZ5SUdNOU1DeGtQV0V1YkdWdVozUm9PMk04WkR0akt5c3BhV1lvWVZ0alhUMDlQV0lwY21WMGRYSnVJR003Y21WMGRYSnVMVEY5TEVvOVhDSmphR1ZqYTJWa2ZITmxiR1ZqZEdWa2ZHRnplVzVqZkdGMWRHOW1iMk4xYzN4aGRYUnZjR3hoZVh4amIyNTBjbTlzYzN4a1pXWmxjbnhrYVhOaFlteGxaSHhvYVdSa1pXNThhWE50WVhCOGJHOXZjSHh0ZFd4MGFYQnNaWHh2Y0dWdWZISmxZV1J2Ym14NWZISmxjWFZwY21Wa2ZITmpiM0JsWkZ3aUxFczlYQ0piWEZ4Y1hIZ3lNRnhjWEZ4MFhGeGNYSEpjWEZ4Y2JseGNYRnhtWFZ3aUxFdzlYQ0lvUHpwY1hGeGNYRnhjWEM1OFcxeGNYRngzTFYxOFcxNWNYREF0WEZ4Y1hIaGhNRjBwSzF3aUxFMDlYQ0pjWEZ4Y1cxd2lLMHNyWENJcUtGd2lLMHdyWENJcEtEODZYQ0lyU3l0Y0lpb29XeXBlSkh3aGZsMC9QU2xjSWl0TEsxd2lLaWcvT2ljb0tEODZYRnhjWEZ4Y1hGd3VmRnRlWEZ4Y1hGeGNYRnduWFNrcUtTZDhYRnhjSWlnb1B6cGNYRnhjWEZ4Y1hDNThXMTVjWEZ4Y1hGeGNYRnhjWENKZEtTb3BYRnhjSW53b1hDSXJUQ3RjSWlrcGZDbGNJaXRMSzF3aUtseGNYRnhkWENJc1RqMWNJam9vWENJclRDdGNJaWtvUHpwY1hGeGNLQ2dvSnlnb1B6cGNYRnhjWEZ4Y1hDNThXMTVjWEZ4Y1hGeGNYQ2RkS1NvcEozeGNYRndpS0NnL09seGNYRnhjWEZ4Y0xueGJYbHhjWEZ4Y1hGeGNYRnhjSWwwcEtpbGNYRndpS1h3b0tEODZYRnhjWEZ4Y1hGd3VmRnRlWEZ4Y1hGeGNYRndvS1Z0Y1hGeGNYVjE4WENJclRTdGNJaWtxS1h3dUtpbGNYRnhjS1h3cFhDSXNUejF1WlhjZ1VtVm5SWGh3S0VzclhDSXJYQ0lzWENKblhDSXBMRkE5Ym1WM0lGSmxaMFY0Y0NoY0lsNWNJaXRMSzF3aUszd29LRDg2WG54YlhseGNYRnhjWEZ4Y1hTa29QenBjWEZ4Y1hGeGNYQzRwS2lsY0lpdExLMXdpS3lSY0lpeGNJbWRjSWlrc1VUMXVaWGNnVW1WblJYaHdLRndpWGx3aUswc3JYQ0lxTEZ3aUswc3JYQ0lxWENJcExGSTlibVYzSUZKbFowVjRjQ2hjSWw1Y0lpdExLMXdpS2loYlBpdCtYWHhjSWl0TEsxd2lLVndpSzBzclhDSXFYQ0lwTEZNOWJtVjNJRkpsWjBWNGNDaGNJajFjSWl0TEsxd2lLaWhiWGx4Y1hGeGRKMXhjWENKZEtqOHBYQ0lyU3l0Y0lpcGNYRnhjWFZ3aUxGd2laMXdpS1N4VVBXNWxkeUJTWldkRmVIQW9UaWtzVlQxdVpYY2dVbVZuUlhod0tGd2lYbHdpSzB3clhDSWtYQ0lwTEZZOWUwbEVPbTVsZHlCU1pXZEZlSEFvWENKZUl5aGNJaXRNSzF3aUtWd2lLU3hEVEVGVFV6cHVaWGNnVW1WblJYaHdLRndpWGx4Y1hGd3VLRndpSzB3clhDSXBYQ0lwTEZSQlJ6cHVaWGNnVW1WblJYaHdLRndpWGloY0lpdE1LMXdpZkZzcVhTbGNJaWtzUVZSVVVqcHVaWGNnVW1WblJYaHdLRndpWGx3aUswMHBMRkJUUlZWRVR6cHVaWGNnVW1WblJYaHdLRndpWGx3aUswNHBMRU5JU1V4RU9tNWxkeUJTWldkRmVIQW9YQ0plT2lodmJteDVmR1pwY25OMGZHeGhjM1I4Ym5Sb2ZHNTBhQzFzWVhOMEtTMG9ZMmhwYkdSOGIyWXRkSGx3WlNrb1B6cGNYRnhjS0Z3aUswc3JYQ0lxS0dWMlpXNThiMlJrZkNnb1d5c3RYWHdwS0Z4Y1hGeGtLaWx1ZkNsY0lpdExLMXdpS2lnL09paGJLeTFkZkNsY0lpdExLMXdpS2loY1hGeGNaQ3NwZkNrcFhDSXJTeXRjSWlwY1hGeGNLWHdwWENJc1hDSnBYQ0lwTEdKdmIydzZibVYzSUZKbFowVjRjQ2hjSWw0b1B6cGNJaXRLSzF3aUtTUmNJaXhjSW1sY0lpa3NibVZsWkhORGIyNTBaWGgwT201bGR5QlNaV2RGZUhBb1hDSmVYQ0lyU3l0Y0lpcGJQaXQrWFh3NktHVjJaVzU4YjJSa2ZHVnhmR2QwZkd4MGZHNTBhSHhtYVhKemRIeHNZWE4wS1NnL09seGNYRndvWENJclN5dGNJaW9vS0Q4NkxWeGNYRnhrS1Q5Y1hGeGNaQ29wWENJclN5dGNJaXBjWEZ4Y0tYd3BLRDg5VzE0dFhYd2tLVndpTEZ3aWFWd2lLWDBzVnowdlhpZy9PbWx1Y0hWMGZITmxiR1ZqZEh4MFpYaDBZWEpsWVh4aWRYUjBiMjRwSkM5cExGZzlMMTVvWEZ4a0pDOXBMRms5TDE1YlhudGRLMXhjZTF4Y2N5cGNYRnR1WVhScGRtVWdYRngzTHl4YVBTOWVLRDg2SXloYlhGeDNMVjByS1h3b1hGeDNLeWw4WEZ3dUtGdGNYSGN0WFNzcEtTUXZMQ1E5TDFzcmZsMHZMRjg5Ym1WM0lGSmxaMFY0Y0NoY0lseGNYRnhjWEZ4Y0tGdGNYRnhjWkdFdFpsMTdNU3cyZlZ3aUswc3JYQ0kvZkNoY0lpdExLMXdpS1h3dUtWd2lMRndpYVdkY0lpa3NZV0U5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlM1poY2lCa1BWd2lNSGhjSWl0aUxUWTFOVE0yTzNKbGRIVnliaUJrSVQwOVpIeDhZejlpT21ROE1EOVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR1FyTmpVMU16WXBPbE4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWkQ0K01UQjhOVFV5T1RZc01UQXlNeVprZkRVMk16SXdLWDBzWW1FOUx5aGJYRnd3TFZ4Y2VERm1YRng0TjJaZGZGNHRQMXhjWkNsOFhpMGtmRnRlWEZ3d0xWeGNlREZtWEZ4NE4yWXRYRngxUmtaR1JseGNkeTFkTDJjc1kyRTlablZ1WTNScGIyNG9ZU3hpS1h0eVpYUjFjbTRnWWo5Y0lseGNNRndpUFQwOVlUOWNJbHhjZFdabVptUmNJanBoTG5Oc2FXTmxLREFzTFRFcEsxd2lYRnhjWEZ3aUsyRXVZMmhoY2tOdlpHVkJkQ2hoTG14bGJtZDBhQzB4S1M1MGIxTjBjbWx1WnlneE5pa3JYQ0lnWENJNlhDSmNYRnhjWENJcllYMHNaR0U5Wm5WdVkzUnBiMjRvS1h0dEtDbDlMR1ZoUFhSaEtHWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQmhMbVJwYzJGaWJHVmtQVDA5SVRBbUppaGNJbVp2Y20xY0ltbHVJR0Y4ZkZ3aWJHRmlaV3hjSW1sdUlHRXBmU3g3WkdseU9sd2ljR0Z5Wlc1MFRtOWtaVndpTEc1bGVIUTZYQ0pzWldkbGJtUmNJbjBwTzNSeWVYdEhMbUZ3Y0d4NUtFUTlTQzVqWVd4c0tIWXVZMmhwYkdST2IyUmxjeWtzZGk1amFHbHNaRTV2WkdWektTeEVXM1l1WTJocGJHUk9iMlJsY3k1c1pXNW5kR2hkTG01dlpHVlVlWEJsZldOaGRHTm9LR1poS1h0SFBYdGhjSEJzZVRwRUxteGxibWQwYUQ5bWRXNWpkR2x2YmloaExHSXBlMFl1WVhCd2JIa29ZU3hJTG1OaGJHd29ZaWtwZlRwbWRXNWpkR2x2YmloaExHSXBlM1poY2lCalBXRXViR1Z1WjNSb0xHUTlNRHQzYUdsc1pTaGhXMk1ySzEwOVlsdGtLeXRkS1R0aExteGxibWQwYUQxakxURjlmWDFtZFc1amRHbHZiaUJuWVNoaExHSXNaQ3hsS1h0MllYSWdaaXhvTEdvc2F5eHNMRzhzY2l4elBXSW1KbUl1YjNkdVpYSkViMk4xYldWdWRDeDNQV0kvWWk1dWIyUmxWSGx3WlRvNU8ybG1LR1E5Wkh4OFcxMHNYQ0p6ZEhKcGJtZGNJaUU5ZEhsd1pXOW1JR0Y4ZkNGaGZId3hJVDA5ZHlZbU9TRTlQWGNtSmpFeElUMDlkeWx5WlhSMWNtNGdaRHRwWmlnaFpTWW1LQ2hpUDJJdWIzZHVaWEpFYjJOMWJXVnVkSHg4WWpwMktTRTlQVzRtSm0wb1lpa3NZajFpZkh4dUxIQXBLWHRwWmlneE1TRTlQWGNtSmloc1BWb3VaWGhsWXloaEtTa3BhV1lvWmoxc1d6RmRLWHRwWmlnNVBUMDlkeWw3YVdZb0lTaHFQV0l1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9aaWtwS1hKbGRIVnliaUJrTzJsbUtHb3VhV1E5UFQxbUtYSmxkSFZ5YmlCa0xuQjFjMmdvYWlrc1pIMWxiSE5sSUdsbUtITW1KaWhxUFhNdVoyVjBSV3hsYldWdWRFSjVTV1FvWmlrcEppWjBLR0lzYWlrbUptb3VhV1E5UFQxbUtYSmxkSFZ5YmlCa0xuQjFjMmdvYWlrc1pIMWxiSE5sZTJsbUtHeGJNbDBwY21WMGRYSnVJRWN1WVhCd2JIa29aQ3hpTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtHRXBLU3hrTzJsbUtDaG1QV3hiTTEwcEppWmpMbWRsZEVWc1pXMWxiblJ6UW5sRGJHRnpjMDVoYldVbUptSXVaMlYwUld4bGJXVnVkSE5DZVVOc1lYTnpUbUZ0WlNseVpYUjFjbTRnUnk1aGNIQnNlU2hrTEdJdVoyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaU2htS1Nrc1pIMXBaaWhqTG5GellTWW1JVUZiWVN0Y0lpQmNJbDBtSmlnaGNYeDhJWEV1ZEdWemRDaGhLU2twZTJsbUtERWhQVDEzS1hNOVlpeHlQV0U3Wld4elpTQnBaaWhjSW05aWFtVmpkRndpSVQwOVlpNXViMlJsVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwS1hzb2F6MWlMbWRsZEVGMGRISnBZblYwWlNoY0ltbGtYQ0lwS1Q5clBXc3VjbVZ3YkdGalpTaGlZU3hqWVNrNllpNXpaWFJCZEhSeWFXSjFkR1VvWENKcFpGd2lMR3M5ZFNrc2J6MW5LR0VwTEdnOWJ5NXNaVzVuZEdnN2QyaHBiR1VvYUMwdEtXOWJhRjA5WENJalhDSXJheXRjSWlCY0lpdHpZU2h2VzJoZEtUdHlQVzh1YW05cGJpaGNJaXhjSWlrc2N6MGtMblJsYzNRb1lTa21KbkZoS0dJdWNHRnlaVzUwVG05a1pTbDhmR0o5YVdZb2NpbDBjbmw3Y21WMGRYSnVJRWN1WVhCd2JIa29aQ3h6TG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvY2lrcExHUjlZMkYwWTJnb2VDbDdmV1pwYm1Gc2JIbDdhejA5UFhVbUptSXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtGd2lhV1JjSWlsOWZYMXlaWFIxY200Z2FTaGhMbkpsY0d4aFkyVW9VQ3hjSWlReFhDSXBMR0lzWkN4bEtYMW1kVzVqZEdsdmJpQm9ZU2dwZTNaaGNpQmhQVnRkTzJaMWJtTjBhVzl1SUdJb1l5eGxLWHR5WlhSMWNtNGdZUzV3ZFhOb0tHTXJYQ0lnWENJcFBtUXVZMkZqYUdWTVpXNW5kR2dtSm1SbGJHVjBaU0JpVzJFdWMyaHBablFvS1Ywc1lsdGpLMXdpSUZ3aVhUMWxmWEpsZEhWeWJpQmlmV1oxYm1OMGFXOXVJR2xoS0dFcGUzSmxkSFZ5YmlCaFczVmRQU0V3TEdGOVpuVnVZM1JwYjI0Z2FtRW9ZU2w3ZG1GeUlHSTliaTVqY21WaGRHVkZiR1Z0Wlc1MEtGd2labWxsYkdSelpYUmNJaWs3ZEhKNWUzSmxkSFZ5YmlFaFlTaGlLWDFqWVhSamFDaGpLWHR5WlhSMWNtNGhNWDFtYVc1aGJHeDVlMkl1Y0dGeVpXNTBUbTlrWlNZbVlpNXdZWEpsYm5ST2IyUmxMbkpsYlc5MlpVTm9hV3hrS0dJcExHSTliblZzYkgxOVpuVnVZM1JwYjI0Z2EyRW9ZU3hpS1h0MllYSWdZejFoTG5Od2JHbDBLRndpZkZ3aUtTeGxQV011YkdWdVozUm9PM2RvYVd4bEtHVXRMU2xrTG1GMGRISklZVzVrYkdWYlkxdGxYVjA5WW4xbWRXNWpkR2x2YmlCc1lTaGhMR0lwZTNaaGNpQmpQV0ltSm1Fc1pEMWpKaVl4UFQwOVlTNXViMlJsVkhsd1pTWW1NVDA5UFdJdWJtOWtaVlI1Y0dVbUptRXVjMjkxY21ObFNXNWtaWGd0WWk1emIzVnlZMlZKYm1SbGVEdHBaaWhrS1hKbGRIVnliaUJrTzJsbUtHTXBkMmhwYkdVb1l6MWpMbTVsZUhSVGFXSnNhVzVuS1dsbUtHTTlQVDFpS1hKbGRIVnliaTB4TzNKbGRIVnliaUJoUHpFNkxURjlablZ1WTNScGIyNGdiV0VvWVNsN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dJcGUzWmhjaUJqUFdJdWJtOWtaVTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LVHR5WlhSMWNtNWNJbWx1Y0hWMFhDSTlQVDFqSmlaaUxuUjVjR1U5UFQxaGZYMW1kVzVqZEdsdmJpQnVZU2hoS1h0eVpYUjFjbTRnWm5WdVkzUnBiMjRvWWlsN2RtRnlJR005WWk1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BPM0psZEhWeWJpaGNJbWx1Y0hWMFhDSTlQVDFqZkh4Y0ltSjFkSFJ2Ymx3aVBUMDlZeWttSm1JdWRIbHdaVDA5UFdGOWZXWjFibU4wYVc5dUlHOWhLR0VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWhpS1h0eVpYUjFjbTVjSW1admNtMWNJbWx1SUdJL1lpNXdZWEpsYm5ST2IyUmxKaVppTG1ScGMyRmliR1ZrUFQwOUlURS9YQ0pzWVdKbGJGd2lhVzRnWWo5Y0lteGhZbVZzWENKcGJpQmlMbkJoY21WdWRFNXZaR1UvWWk1d1lYSmxiblJPYjJSbExtUnBjMkZpYkdWa1BUMDlZVHBpTG1ScGMyRmliR1ZrUFQwOVlUcGlMbWx6UkdsellXSnNaV1E5UFQxaGZIeGlMbWx6UkdsellXSnNaV1FoUFQwaFlTWW1aV0VvWWlrOVBUMWhPbUl1WkdsellXSnNaV1E5UFQxaE9sd2liR0ZpWld4Y0ltbHVJR0ltSm1JdVpHbHpZV0pzWldROVBUMWhmWDFtZFc1amRHbHZiaUJ3WVNoaEtYdHlaWFIxY200Z2FXRW9ablZ1WTNScGIyNG9ZaWw3Y21WMGRYSnVJR0k5SzJJc2FXRW9ablZ1WTNScGIyNG9ZeXhrS1h0MllYSWdaU3htUFdFb1cxMHNZeTVzWlc1bmRHZ3NZaWtzWnoxbUxteGxibWQwYUR0M2FHbHNaU2huTFMwcFkxdGxQV1piWjExZEppWW9ZMXRsWFQwaEtHUmJaVjA5WTF0bFhTa3BmU2w5S1gxbWRXNWpkR2x2YmlCeFlTaGhLWHR5WlhSMWNtNGdZU1ltWENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHRXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VtSm1GOVl6MW5ZUzV6ZFhCd2IzSjBQWHQ5TEdZOVoyRXVhWE5ZVFV3OVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOVlTWW1LR0V1YjNkdVpYSkViMk4xYldWdWRIeDhZU2t1Wkc5amRXMWxiblJGYkdWdFpXNTBPM0psZEhWeWJpRWhZaVltWENKSVZFMU1YQ0loUFQxaUxtNXZaR1ZPWVcxbGZTeHRQV2RoTG5ObGRFUnZZM1Z0Wlc1MFBXWjFibU4wYVc5dUtHRXBlM1poY2lCaUxHVXNaejFoUDJFdWIzZHVaWEpFYjJOMWJXVnVkSHg4WVRwMk8zSmxkSFZ5YmlCbklUMDliaVltT1QwOVBXY3VibTlrWlZSNWNHVW1KbWN1Wkc5amRXMWxiblJGYkdWdFpXNTBQeWh1UFdjc2J6MXVMbVJ2WTNWdFpXNTBSV3hsYldWdWRDeHdQU0ZtS0c0cExIWWhQVDF1SmlZb1pUMXVMbVJsWm1GMWJIUldhV1YzS1NZbVpTNTBiM0FoUFQxbEppWW9aUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlQMlV1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW5WdWJHOWhaRndpTEdSaExDRXhLVHBsTG1GMGRHRmphRVYyWlc1MEppWmxMbUYwZEdGamFFVjJaVzUwS0Z3aWIyNTFibXh2WVdSY0lpeGtZU2twTEdNdVlYUjBjbWxpZFhSbGN6MXFZU2htZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnWVM1amJHRnpjMDVoYldVOVhDSnBYQ0lzSVdFdVoyVjBRWFIwY21saWRYUmxLRndpWTJ4aGMzTk9ZVzFsWENJcGZTa3NZeTVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlQxcVlTaG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdZUzVoY0hCbGJtUkRhR2xzWkNodUxtTnlaV0YwWlVOdmJXMWxiblFvWENKY0lpa3BMQ0ZoTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtGd2lLbHdpS1M1c1pXNW5kR2g5S1N4akxtZGxkRVZzWlcxbGJuUnpRbmxEYkdGemMwNWhiV1U5V1M1MFpYTjBLRzR1WjJWMFJXeGxiV1Z1ZEhOQ2VVTnNZWE56VG1GdFpTa3NZeTVuWlhSQ2VVbGtQV3BoS0daMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCdkxtRndjR1Z1WkVOb2FXeGtLR0VwTG1sa1BYVXNJVzR1WjJWMFJXeGxiV1Z1ZEhOQ2VVNWhiV1Y4ZkNGdUxtZGxkRVZzWlcxbGJuUnpRbmxPWVcxbEtIVXBMbXhsYm1kMGFIMHBMR011WjJWMFFubEpaRDhvWkM1bWFXeDBaWEl1U1VROVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOVlTNXlaWEJzWVdObEtGOHNZV0VwTzNKbGRIVnliaUJtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnWVM1blpYUkJkSFJ5YVdKMWRHVW9YQ0pwWkZ3aUtUMDlQV0o5ZlN4a0xtWnBibVF1U1VROVpuVnVZM1JwYjI0b1lTeGlLWHRwWmloY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdZaTVuWlhSRmJHVnRaVzUwUW5sSlpDWW1jQ2w3ZG1GeUlHTTlZaTVuWlhSRmJHVnRaVzUwUW5sSlpDaGhLVHR5WlhSMWNtNGdZejliWTEwNlcxMTlmU2s2S0dRdVptbHNkR1Z5TGtsRVBXWjFibU4wYVc5dUtHRXBlM1poY2lCaVBXRXVjbVZ3YkdGalpTaGZMR0ZoS1R0eVpYUjFjbTRnWm5WdVkzUnBiMjRvWVNsN2RtRnlJR005WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHRXVaMlYwUVhSMGNtbGlkWFJsVG05a1pTWW1ZUzVuWlhSQmRIUnlhV0oxZEdWT2IyUmxLRndpYVdSY0lpazdjbVYwZFhKdUlHTW1KbU11ZG1Gc2RXVTlQVDFpZlgwc1pDNW1hVzVrTGtsRVBXWjFibU4wYVc5dUtHRXNZaWw3YVdZb1hDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JR0l1WjJWMFJXeGxiV1Z1ZEVKNVNXUW1KbkFwZTNaaGNpQmpMR1FzWlN4bVBXSXVaMlYwUld4bGJXVnVkRUo1U1dRb1lTazdhV1lvWmlsN2FXWW9ZejFtTG1kbGRFRjBkSEpwWW5WMFpVNXZaR1VvWENKcFpGd2lLU3hqSmlaakxuWmhiSFZsUFQwOVlTbHlaWFIxY201YlpsMDdaVDFpTG1kbGRFVnNaVzFsYm5SelFubE9ZVzFsS0dFcExHUTlNRHQzYUdsc1pTaG1QV1ZiWkNzclhTbHBaaWhqUFdZdVoyVjBRWFIwY21saWRYUmxUbTlrWlNoY0ltbGtYQ0lwTEdNbUptTXVkbUZzZFdVOVBUMWhLWEpsZEhWeWJsdG1YWDF5WlhSMWNtNWJYWDE5S1N4a0xtWnBibVF1VkVGSFBXTXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1UvWm5WdVkzUnBiMjRvWVN4aUtYdHlaWFIxY201Y0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdZaTVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlQ5aUxtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLR0VwT21NdWNYTmhQMkl1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2hoS1RwMmIybGtJREI5T21aMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdNc1pEMWJYU3hsUFRBc1pqMWlMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0dFcE8ybG1LRndpS2x3aVBUMDlZU2w3ZDJocGJHVW9ZejFtVzJVcksxMHBNVDA5UFdNdWJtOWtaVlI1Y0dVbUptUXVjSFZ6YUNoaktUdHlaWFIxY200Z1pIMXlaWFIxY200Z1puMHNaQzVtYVc1a0xrTk1RVk5UUFdNdVoyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaU1ltWm5WdVkzUnBiMjRvWVN4aUtYdHBaaWhjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ1lpNW5aWFJGYkdWdFpXNTBjMEo1UTJ4aGMzTk9ZVzFsSmlad0tYSmxkSFZ5YmlCaUxtZGxkRVZzWlcxbGJuUnpRbmxEYkdGemMwNWhiV1VvWVNsOUxISTlXMTBzY1QxYlhTd29ZeTV4YzJFOVdTNTBaWE4wS0c0dWNYVmxjbmxUWld4bFkzUnZja0ZzYkNrcEppWW9hbUVvWm5WdVkzUnBiMjRvWVNsN2J5NWhjSEJsYm1SRGFHbHNaQ2hoS1M1cGJtNWxja2hVVFV3OVhDSThZU0JwWkQwblhDSXJkU3RjSWljK1BDOWhQanh6Wld4bFkzUWdhV1E5SjF3aUszVXJYQ0l0WEZ4eVhGeGNYQ2NnYlhOaGJHeHZkMk5oY0hSMWNtVTlKeWMrUEc5d2RHbHZiaUJ6Wld4bFkzUmxaRDBuSno0OEwyOXdkR2x2Ymo0OEwzTmxiR1ZqZEQ1Y0lpeGhMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29YQ0piYlhOaGJHeHZkMk5oY0hSMWNtVmVQU2NuWFZ3aUtTNXNaVzVuZEdnbUpuRXVjSFZ6YUNoY0lsc3FYaVJkUFZ3aUswc3JYQ0lxS0Q4Nkp5ZDhYRnhjSWx4Y1hDSXBYQ0lwTEdFdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNoY0lsdHpaV3hsWTNSbFpGMWNJaWt1YkdWdVozUm9mSHh4TG5CMWMyZ29YQ0pjWEZ4Y1cxd2lLMHNyWENJcUtEODZkbUZzZFdWOFhDSXJTaXRjSWlsY0lpa3NZUzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLRndpVzJsa2ZqMWNJaXQxSzF3aUxWMWNJaWt1YkdWdVozUm9mSHh4TG5CMWMyZ29YQ0orUFZ3aUtTeGhMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29YQ0k2WTJobFkydGxaRndpS1M1c1pXNW5kR2g4ZkhFdWNIVnphQ2hjSWpwamFHVmphMlZrWENJcExHRXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGNJbUVqWENJcmRTdGNJaXNxWENJcExteGxibWQwYUh4OGNTNXdkWE5vS0Z3aUxpTXVLMXNyZmwxY0lpbDlLU3hxWVNobWRXNWpkR2x2YmloaEtYdGhMbWx1Ym1WeVNGUk5URDFjSWp4aElHaHlaV1k5SnljZ1pHbHpZV0pzWldROUoyUnBjMkZpYkdWa0p6NDhMMkUrUEhObGJHVmpkQ0JrYVhOaFlteGxaRDBuWkdsellXSnNaV1FuUGp4dmNIUnBiMjR2UGp3dmMyVnNaV04wUGx3aU8zWmhjaUJpUFc0dVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1sdWNIVjBYQ0lwTzJJdWMyVjBRWFIwY21saWRYUmxLRndpZEhsd1pWd2lMRndpYUdsa1pHVnVYQ0lwTEdFdVlYQndaVzVrUTJocGJHUW9ZaWt1YzJWMFFYUjBjbWxpZFhSbEtGd2libUZ0WlZ3aUxGd2lSRndpS1N4aExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b1hDSmJibUZ0WlQxa1hWd2lLUzVzWlc1bmRHZ21KbkV1Y0hWemFDaGNJbTVoYldWY0lpdExLMXdpS2xzcVhpUjhJWDVkUHoxY0lpa3NNaUU5UFdFdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNoY0lqcGxibUZpYkdWa1hDSXBMbXhsYm1kMGFDWW1jUzV3ZFhOb0tGd2lPbVZ1WVdKc1pXUmNJaXhjSWpwa2FYTmhZbXhsWkZ3aUtTeHZMbUZ3Y0dWdVpFTm9hV3hrS0dFcExtUnBjMkZpYkdWa1BTRXdMREloUFQxaExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b1hDSTZaR2x6WVdKc1pXUmNJaWt1YkdWdVozUm9KaVp4TG5CMWMyZ29YQ0k2Wlc1aFlteGxaRndpTEZ3aU9tUnBjMkZpYkdWa1hDSXBMR0V1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2hjSWlvc09uaGNJaWtzY1M1d2RYTm9LRndpTEM0cU9sd2lLWDBwS1N3b1l5NXRZWFJqYUdWelUyVnNaV04wYjNJOVdTNTBaWE4wS0hNOWJ5NXRZWFJqYUdWemZIeHZMbmRsWW10cGRFMWhkR05vWlhOVFpXeGxZM1J2Y254OGJ5NXRiM3BOWVhSamFHVnpVMlZzWldOMGIzSjhmRzh1YjAxaGRHTm9aWE5UWld4bFkzUnZjbng4Ynk1dGMwMWhkR05vWlhOVFpXeGxZM1J2Y2lrcEppWnFZU2htZFc1amRHbHZiaWhoS1h0akxtUnBjMk52Ym01bFkzUmxaRTFoZEdOb1BYTXVZMkZzYkNoaExGd2lLbHdpS1N4ekxtTmhiR3dvWVN4Y0lsdHpJVDBuSjEwNmVGd2lLU3h5TG5CMWMyZ29YQ0loUFZ3aUxFNHBmU2tzY1QxeExteGxibWQwYUNZbWJtVjNJRkpsWjBWNGNDaHhMbXB2YVc0b1hDSjhYQ0lwS1N4eVBYSXViR1Z1WjNSb0ppWnVaWGNnVW1WblJYaHdLSEl1YW05cGJpaGNJbnhjSWlrcExHSTlXUzUwWlhOMEtHOHVZMjl0Y0dGeVpVUnZZM1Z0Wlc1MFVHOXphWFJwYjI0cExIUTlZbng4V1M1MFpYTjBLRzh1WTI5dWRHRnBibk1wUDJaMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdNOU9UMDlQV0V1Ym05a1pWUjVjR1UvWVM1a2IyTjFiV1Z1ZEVWc1pXMWxiblE2WVN4a1BXSW1KbUl1Y0dGeVpXNTBUbTlrWlR0eVpYUjFjbTRnWVQwOVBXUjhmQ0VvSVdSOGZERWhQVDFrTG01dlpHVlVlWEJsZkh3aEtHTXVZMjl1ZEdGcGJuTS9ZeTVqYjI1MFlXbHVjeWhrS1RwaExtTnZiWEJoY21WRWIyTjFiV1Z1ZEZCdmMybDBhVzl1SmlZeE5pWmhMbU52YlhCaGNtVkViMk4xYldWdWRGQnZjMmwwYVc5dUtHUXBLU2w5T21aMWJtTjBhVzl1S0dFc1lpbDdhV1lvWWlsM2FHbHNaU2hpUFdJdWNHRnlaVzUwVG05a1pTbHBaaWhpUFQwOVlTbHlaWFIxY200aE1EdHlaWFIxY200aE1YMHNRajFpUDJaMWJtTjBhVzl1S0dFc1lpbDdhV1lvWVQwOVBXSXBjbVYwZFhKdUlHdzlJVEFzTUR0MllYSWdaRDBoWVM1amIyMXdZWEpsUkc5amRXMWxiblJRYjNOcGRHbHZiaTBoWWk1amIyMXdZWEpsUkc5amRXMWxiblJRYjNOcGRHbHZianR5WlhSMWNtNGdaRDlrT2loa1BTaGhMbTkzYm1WeVJHOWpkVzFsYm5SOGZHRXBQVDA5S0dJdWIzZHVaWEpFYjJOMWJXVnVkSHg4WWlrL1lTNWpiMjF3WVhKbFJHOWpkVzFsYm5SUWIzTnBkR2x2YmloaUtUb3hMREVtWkh4OElXTXVjMjl5ZEVSbGRHRmphR1ZrSmlaaUxtTnZiWEJoY21WRWIyTjFiV1Z1ZEZCdmMybDBhVzl1S0dFcFBUMDlaRDloUFQwOWJueDhZUzV2ZDI1bGNrUnZZM1Z0Wlc1MFBUMDlkaVltZENoMkxHRXBQeTB4T21JOVBUMXVmSHhpTG05M2JtVnlSRzlqZFcxbGJuUTlQVDEySmlaMEtIWXNZaWsvTVRwclAwa29heXhoS1MxSktHc3NZaWs2TURvMEptUS9MVEU2TVNsOU9tWjFibU4wYVc5dUtHRXNZaWw3YVdZb1lUMDlQV0lwY21WMGRYSnVJR3c5SVRBc01EdDJZWElnWXl4a1BUQXNaVDFoTG5CaGNtVnVkRTV2WkdVc1pqMWlMbkJoY21WdWRFNXZaR1VzWnoxYllWMHNhRDFiWWwwN2FXWW9JV1Y4ZkNGbUtYSmxkSFZ5YmlCaFBUMDliajh0TVRwaVBUMDliajh4T21VL0xURTZaajh4T21zL1NTaHJMR0VwTFVrb2F5eGlLVG93TzJsbUtHVTlQVDFtS1hKbGRIVnliaUJzWVNoaExHSXBPMk05WVR0M2FHbHNaU2hqUFdNdWNHRnlaVzUwVG05a1pTbG5MblZ1YzJocFpuUW9ZeWs3WXoxaU8zZG9hV3hsS0dNOVl5NXdZWEpsYm5ST2IyUmxLV2d1ZFc1emFHbG1kQ2hqS1R0M2FHbHNaU2huVzJSZFBUMDlhRnRrWFNsa0t5czdjbVYwZFhKdUlHUS9iR0VvWjF0a1hTeG9XMlJkS1RwblcyUmRQVDA5ZGo4dE1UcG9XMlJkUFQwOWRqOHhPakI5TEc0cE9tNTlMR2RoTG0xaGRHTm9aWE05Wm5WdVkzUnBiMjRvWVN4aUtYdHlaWFIxY200Z1oyRW9ZU3h1ZFd4c0xHNTFiR3dzWWlsOUxHZGhMbTFoZEdOb1pYTlRaV3hsWTNSdmNqMW1kVzVqZEdsdmJpaGhMR0lwZTJsbUtDaGhMbTkzYm1WeVJHOWpkVzFsYm5SOGZHRXBJVDA5YmlZbWJTaGhLU3hpUFdJdWNtVndiR0ZqWlNoVExGd2lQU2NrTVNkZFhDSXBMR011YldGMFkyaGxjMU5sYkdWamRHOXlKaVp3SmlZaFFWdGlLMXdpSUZ3aVhTWW1LQ0Z5Zkh3aGNpNTBaWE4wS0dJcEtTWW1LQ0Z4Zkh3aGNTNTBaWE4wS0dJcEtTbDBjbmw3ZG1GeUlHUTljeTVqWVd4c0tHRXNZaWs3YVdZb1pIeDhZeTVrYVhOamIyNXVaV04wWldSTllYUmphSHg4WVM1a2IyTjFiV1Z1ZENZbU1URWhQVDFoTG1SdlkzVnRaVzUwTG01dlpHVlVlWEJsS1hKbGRIVnliaUJrZldOaGRHTm9LR1VwZTMxeVpYUjFjbTRnWjJFb1lpeHVMRzUxYkd3c1cyRmRLUzVzWlc1bmRHZytNSDBzWjJFdVkyOXVkR0ZwYm5NOVpuVnVZM1JwYjI0b1lTeGlLWHR5WlhSMWNtNG9ZUzV2ZDI1bGNrUnZZM1Z0Wlc1MGZIeGhLU0U5UFc0bUptMG9ZU2tzZENoaExHSXBmU3huWVM1aGRIUnlQV1oxYm1OMGFXOXVLR0VzWWlsN0tHRXViM2R1WlhKRWIyTjFiV1Z1ZEh4OFlTa2hQVDF1SmladEtHRXBPM1poY2lCbFBXUXVZWFIwY2toaGJtUnNaVnRpTG5SdlRHOTNaWEpEWVhObEtDbGRMR1k5WlNZbVF5NWpZV3hzS0dRdVlYUjBja2hoYm1Sc1pTeGlMblJ2VEc5M1pYSkRZWE5sS0NrcFAyVW9ZU3hpTENGd0tUcDJiMmxrSURBN2NtVjBkWEp1SUhadmFXUWdNQ0U5UFdZL1pqcGpMbUYwZEhKcFluVjBaWE44ZkNGd1AyRXVaMlYwUVhSMGNtbGlkWFJsS0dJcE9paG1QV0V1WjJWMFFYUjBjbWxpZFhSbFRtOWtaU2hpS1NrbUptWXVjM0JsWTJsbWFXVmtQMll1ZG1Gc2RXVTZiblZzYkgwc1oyRXVaWE5qWVhCbFBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpaGhLMXdpWENJcExuSmxjR3hoWTJVb1ltRXNZMkVwZlN4bllTNWxjbkp2Y2oxbWRXNWpkR2x2YmloaEtYdDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlRlVzUwWVhnZ1pYSnliM0lzSUhWdWNtVmpiMmR1YVhwbFpDQmxlSEJ5WlhOemFXOXVPaUJjSWl0aEtYMHNaMkV1ZFc1cGNYVmxVMjl5ZEQxbWRXNWpkR2x2YmloaEtYdDJZWElnWWl4a1BWdGRMR1U5TUN4bVBUQTdhV1lvYkQwaFl5NWtaWFJsWTNSRWRYQnNhV05oZEdWekxHczlJV011YzI5eWRGTjBZV0pzWlNZbVlTNXpiR2xqWlNnd0tTeGhMbk52Y25Rb1Fpa3NiQ2w3ZDJocGJHVW9ZajFoVzJZcksxMHBZajA5UFdGYlpsMG1KaWhsUFdRdWNIVnphQ2htS1NrN2QyaHBiR1VvWlMwdEtXRXVjM0JzYVdObEtHUmJaVjBzTVNsOWNtVjBkWEp1SUdzOWJuVnNiQ3hoZlN4bFBXZGhMbWRsZEZSbGVIUTlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSXNZejFjSWx3aUxHUTlNQ3htUFdFdWJtOWtaVlI1Y0dVN2FXWW9aaWw3YVdZb01UMDlQV1o4ZkRrOVBUMW1mSHd4TVQwOVBXWXBlMmxtS0Z3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCaExuUmxlSFJEYjI1MFpXNTBLWEpsZEhWeWJpQmhMblJsZUhSRGIyNTBaVzUwTzJadmNpaGhQV0V1Wm1seWMzUkRhR2xzWkR0aE8yRTlZUzV1WlhoMFUybGliR2x1Wnlsakt6MWxLR0VwZldWc2MyVWdhV1lvTXowOVBXWjhmRFE5UFQxbUtYSmxkSFZ5YmlCaExtNXZaR1ZXWVd4MVpYMWxiSE5sSUhkb2FXeGxLR0k5WVZ0a0t5dGRLV01yUFdVb1lpazdjbVYwZFhKdUlHTjlMR1E5WjJFdWMyVnNaV04wYjNKelBYdGpZV05vWlV4bGJtZDBhRG8xTUN4amNtVmhkR1ZRYzJWMVpHODZhV0VzYldGMFkyZzZWaXhoZEhSeVNHRnVaR3hsT250OUxHWnBibVE2ZTMwc2NtVnNZWFJwZG1VNmUxd2lQbHdpT250a2FYSTZYQ0p3WVhKbGJuUk9iMlJsWENJc1ptbHljM1E2SVRCOUxGd2lJRndpT250a2FYSTZYQ0p3WVhKbGJuUk9iMlJsWENKOUxGd2lLMXdpT250a2FYSTZYQ0p3Y21WMmFXOTFjMU5wWW14cGJtZGNJaXhtYVhKemREb2hNSDBzWENKK1hDSTZlMlJwY2pwY0luQnlaWFpwYjNWelUybGliR2x1WjF3aWZYMHNjSEpsUm1sc2RHVnlPbnRCVkZSU09tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQmhXekZkUFdGYk1WMHVjbVZ3YkdGalpTaGZMR0ZoS1N4aFd6TmRQU2hoV3pOZGZIeGhXelJkZkh4aFd6VmRmSHhjSWx3aUtTNXlaWEJzWVdObEtGOHNZV0VwTEZ3aWZqMWNJajA5UFdGYk1sMG1KaWhoV3pOZFBWd2lJRndpSzJGYk0xMHJYQ0lnWENJcExHRXVjMnhwWTJVb01DdzBLWDBzUTBoSlRFUTZablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJR0ZiTVYwOVlWc3hYUzUwYjB4dmQyVnlRMkZ6WlNncExGd2liblJvWENJOVBUMWhXekZkTG5Oc2FXTmxLREFzTXlrL0tHRmJNMTE4ZkdkaExtVnljbTl5S0dGYk1GMHBMR0ZiTkYwOUt5aGhXelJkUDJGYk5WMHJLR0ZiTmwxOGZERXBPaklxS0Z3aVpYWmxibHdpUFQwOVlWc3pYWHg4WENKdlpHUmNJajA5UFdGYk0xMHBLU3hoV3pWZFBTc29ZVnMzWFN0aFd6aGRmSHhjSW05a1pGd2lQVDA5WVZzelhTa3BPbUZiTTEwbUptZGhMbVZ5Y205eUtHRmJNRjBwTEdGOUxGQlRSVlZFVHpwbWRXNWpkR2x2YmloaEtYdDJZWElnWWl4alBTRmhXelpkSmlaaFd6SmRPM0psZEhWeWJpQldMa05JU1V4RUxuUmxjM1FvWVZzd1hTay9iblZzYkRvb1lWc3pYVDloV3pKZFBXRmJORjE4ZkdGYk5WMThmRndpWENJNll5WW1WQzUwWlhOMEtHTXBKaVlvWWoxbktHTXNJVEFwS1NZbUtHSTlZeTVwYm1SbGVFOW1LRndpS1Z3aUxHTXViR1Z1WjNSb0xXSXBMV011YkdWdVozUm9LU1ltS0dGYk1GMDlZVnN3WFM1emJHbGpaU2d3TEdJcExHRmJNbDA5WXk1emJHbGpaU2d3TEdJcEtTeGhMbk5zYVdObEtEQXNNeWtwZlgwc1ptbHNkR1Z5T250VVFVYzZablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTlZUzV5WlhCc1lXTmxLRjhzWVdFcExuUnZURzkzWlhKRFlYTmxLQ2s3Y21WMGRYSnVYQ0lxWENJOVBUMWhQMloxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJVEI5T21aMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCaExtNXZaR1ZPWVcxbEppWmhMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrOVBUMWlmWDBzUTB4QlUxTTZablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTllVnRoSzF3aUlGd2lYVHR5WlhSMWNtNGdZbng4S0dJOWJtVjNJRkpsWjBWNGNDaGNJaWhlZkZ3aUswc3JYQ0lwWENJcllTdGNJaWhjSWl0TEsxd2lmQ1FwWENJcEtTWW1lU2hoTEdaMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCaUxuUmxjM1FvWENKemRISnBibWRjSWowOWRIbHdaVzltSUdFdVkyeGhjM05PWVcxbEppWmhMbU5zWVhOelRtRnRaWHg4WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHRXVaMlYwUVhSMGNtbGlkWFJsSmlaaExtZGxkRUYwZEhKcFluVjBaU2hjSW1Oc1lYTnpYQ0lwZkh4Y0lsd2lLWDBwZlN4QlZGUlNPbVoxYm1OMGFXOXVLR0VzWWl4aktYdHlaWFIxY200Z1puVnVZM1JwYjI0b1pDbDdkbUZ5SUdVOVoyRXVZWFIwY2loa0xHRXBPM0psZEhWeWJpQnVkV3hzUFQxbFAxd2lJVDFjSWowOVBXSTZJV0o4ZkNobEt6MWNJbHdpTEZ3aVBWd2lQVDA5WWo5bFBUMDlZenBjSWlFOVhDSTlQVDFpUDJVaFBUMWpPbHdpWGoxY0lqMDlQV0kvWXlZbU1EMDlQV1V1YVc1a1pYaFBaaWhqS1RwY0lpbzlYQ0k5UFQxaVAyTW1KbVV1YVc1a1pYaFBaaWhqS1Q0dE1UcGNJaVE5WENJOVBUMWlQMk1tSm1VdWMyeHBZMlVvTFdNdWJHVnVaM1JvS1QwOVBXTTZYQ0orUFZ3aVBUMDlZajhvWENJZ1hDSXJaUzV5WlhCc1lXTmxLRThzWENJZ1hDSXBLMXdpSUZ3aUtTNXBibVJsZUU5bUtHTXBQaTB4T2x3aWZEMWNJajA5UFdJbUppaGxQVDA5WTN4OFpTNXpiR2xqWlNnd0xHTXViR1Z1WjNSb0t6RXBQVDA5WXl0Y0lpMWNJaWtwZlgwc1EwaEpURVE2Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ3hsS1h0MllYSWdaajFjSW01MGFGd2lJVDA5WVM1emJHbGpaU2d3TERNcExHYzlYQ0pzWVhOMFhDSWhQVDFoTG5Oc2FXTmxLQzAwS1N4b1BWd2liMll0ZEhsd1pWd2lQVDA5WWp0eVpYUjFjbTRnTVQwOVBXUW1KakE5UFQxbFAyWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpRWhZUzV3WVhKbGJuUk9iMlJsZlRwbWRXNWpkR2x2YmloaUxHTXNhU2w3ZG1GeUlHb3NheXhzTEcwc2JpeHZMSEE5WmlFOVBXYy9YQ0p1WlhoMFUybGliR2x1WjF3aU9sd2ljSEpsZG1sdmRYTlRhV0pzYVc1blhDSXNjVDFpTG5CaGNtVnVkRTV2WkdVc2NqMW9KaVppTG01dlpHVk9ZVzFsTG5SdlRHOTNaWEpEWVhObEtDa3NjejBoYVNZbUlXZ3NkRDBoTVR0cFppaHhLWHRwWmlobUtYdDNhR2xzWlNod0tYdHRQV0k3ZDJocGJHVW9iVDF0VzNCZEtXbG1LR2cvYlM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BQVDA5Y2pveFBUMDliUzV1YjJSbFZIbHdaU2x5WlhSMWNtNGhNVHR2UFhBOVhDSnZibXg1WENJOVBUMWhKaVloYnlZbVhDSnVaWGgwVTJsaWJHbHVaMXdpZlhKbGRIVnliaUV3ZldsbUtHODlXMmMvY1M1bWFYSnpkRU5vYVd4a09uRXViR0Z6ZEVOb2FXeGtYU3huSmlaektYdHRQWEVzYkQxdFczVmRmSHdvYlZ0MVhUMTdmU2tzYXoxc1cyMHVkVzVwY1hWbFNVUmRmSHdvYkZ0dExuVnVhWEYxWlVsRVhUMTdmU2tzYWoxclcyRmRmSHhiWFN4dVBXcGJNRjA5UFQxM0ppWnFXekZkTEhROWJpWW1hbHN5WFN4dFBXNG1KbkV1WTJocGJHUk9iMlJsYzF0dVhUdDNhR2xzWlNodFBTc3JiaVltYlNZbWJWdHdYWHg4S0hROWJqMHdLWHg4Ynk1d2IzQW9LU2xwWmlneFBUMDliUzV1YjJSbFZIbHdaU1ltS3l0MEppWnRQVDA5WWlsN2ExdGhYVDFiZHl4dUxIUmRPMkp5WldGcmZYMWxiSE5sSUdsbUtITW1KaWh0UFdJc2JEMXRXM1ZkZkh3b2JWdDFYVDE3ZlNrc2F6MXNXMjB1ZFc1cGNYVmxTVVJkZkh3b2JGdHRMblZ1YVhGMVpVbEVYVDE3ZlNrc2FqMXJXMkZkZkh4YlhTeHVQV3BiTUYwOVBUMTNKaVpxV3pGZExIUTliaWtzZEQwOVBTRXhLWGRvYVd4bEtHMDlLeXR1SmladEppWnRXM0JkZkh3b2REMXVQVEFwZkh4dkxuQnZjQ2dwS1dsbUtDaG9QMjB1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUMDlQWEk2TVQwOVBXMHVibTlrWlZSNWNHVXBKaVlySzNRbUppaHpKaVlvYkQxdFczVmRmSHdvYlZ0MVhUMTdmU2tzYXoxc1cyMHVkVzVwY1hWbFNVUmRmSHdvYkZ0dExuVnVhWEYxWlVsRVhUMTdmU2tzYTF0aFhUMWJkeXgwWFNrc2JUMDlQV0lwS1dKeVpXRnJPM0psZEhWeWJpQjBMVDFsTEhROVBUMWtmSHgwSldROVBUMHdKaVowTDJRK1BUQjlmWDBzVUZORlZVUlBPbVoxYm1OMGFXOXVLR0VzWWlsN2RtRnlJR01zWlQxa0xuQnpaWFZrYjNOYllWMThmR1F1YzJWMFJtbHNkR1Z5YzF0aExuUnZURzkzWlhKRFlYTmxLQ2xkZkh4bllTNWxjbkp2Y2loY0luVnVjM1Z3Y0c5eWRHVmtJSEJ6WlhWa2J6b2dYQ0lyWVNrN2NtVjBkWEp1SUdWYmRWMC9aU2hpS1RwbExteGxibWQwYUQ0eFB5aGpQVnRoTEdFc1hDSmNJaXhpWFN4a0xuTmxkRVpwYkhSbGNuTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1lTNTBiMHh2ZDJWeVEyRnpaU2dwS1Q5cFlTaG1kVzVqZEdsdmJpaGhMR01wZTNaaGNpQmtMR1k5WlNoaExHSXBMR2M5Wmk1c1pXNW5kR2c3ZDJocGJHVW9aeTB0S1dROVNTaGhMR1piWjEwcExHRmJaRjA5SVNoalcyUmRQV1piWjEwcGZTazZablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJR1VvWVN3d0xHTXBmU2s2WlgxOUxIQnpaWFZrYjNNNmUyNXZkRHBwWVNobWRXNWpkR2x2YmloaEtYdDJZWElnWWoxYlhTeGpQVnRkTEdROWFDaGhMbkpsY0d4aFkyVW9VQ3hjSWlReFhDSXBLVHR5WlhSMWNtNGdaRnQxWFQ5cFlTaG1kVzVqZEdsdmJpaGhMR0lzWXl4bEtYdDJZWElnWml4blBXUW9ZU3h1ZFd4c0xHVXNXMTBwTEdnOVlTNXNaVzVuZEdnN2QyaHBiR1VvYUMwdEtTaG1QV2RiYUYwcEppWW9ZVnRvWFQwaEtHSmJhRjA5WmlrcGZTazZablZ1WTNScGIyNG9ZU3hsTEdZcGUzSmxkSFZ5YmlCaVd6QmRQV0VzWkNoaUxHNTFiR3dzWml4aktTeGlXekJkUFc1MWJHd3NJV011Y0c5d0tDbDlmU2tzYUdGek9tbGhLR1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWhpS1h0eVpYUjFjbTRnWjJFb1lTeGlLUzVzWlc1bmRHZytNSDE5S1N4amIyNTBZV2x1Y3pwcFlTaG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdZVDFoTG5KbGNHeGhZMlVvWHl4aFlTa3NablZ1WTNScGIyNG9ZaWw3Y21WMGRYSnVLR0l1ZEdWNGRFTnZiblJsYm5SOGZHSXVhVzV1WlhKVVpYaDBmSHhsS0dJcEtTNXBibVJsZUU5bUtHRXBQaTB4ZlgwcExHeGhibWM2YVdFb1puVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlGVXVkR1Z6ZENoaGZIeGNJbHdpS1h4OFoyRXVaWEp5YjNJb1hDSjFibk4xY0hCdmNuUmxaQ0JzWVc1bk9pQmNJaXRoS1N4aFBXRXVjbVZ3YkdGalpTaGZMR0ZoS1M1MGIweHZkMlZ5UTJGelpTZ3BMR1oxYm1OMGFXOXVLR0lwZTNaaGNpQmpPMlJ2SUdsbUtHTTljRDlpTG14aGJtYzZZaTVuWlhSQmRIUnlhV0oxZEdVb1hDSjRiV3c2YkdGdVoxd2lLWHg4WWk1blpYUkJkSFJ5YVdKMWRHVW9YQ0pzWVc1blhDSXBLWEpsZEhWeWJpQmpQV011ZEc5TWIzZGxja05oYzJVb0tTeGpQVDA5WVh4OE1EMDlQV011YVc1a1pYaFBaaWhoSzF3aUxWd2lLVHQzYUdsc1pTZ29ZajFpTG5CaGNtVnVkRTV2WkdVcEppWXhQVDA5WWk1dWIyUmxWSGx3WlNrN2NtVjBkWEp1SVRGOWZTa3NkR0Z5WjJWME9tWjFibU4wYVc5dUtHSXBlM1poY2lCalBXRXViRzlqWVhScGIyNG1KbUV1Ykc5allYUnBiMjR1YUdGemFEdHlaWFIxY200Z1l5WW1ZeTV6YkdsalpTZ3hLVDA5UFdJdWFXUjlMSEp2YjNRNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHRTlQVDF2ZlN4bWIyTjFjenBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnWVQwOVBXNHVZV04wYVhabFJXeGxiV1Z1ZENZbUtDRnVMbWhoYzBadlkzVnpmSHh1TG1oaGMwWnZZM1Z6S0NrcEppWWhJU2hoTG5SNWNHVjhmR0V1YUhKbFpueDhmbUV1ZEdGaVNXNWtaWGdwZlN4bGJtRmliR1ZrT205aEtDRXhLU3hrYVhOaFlteGxaRHB2WVNnaE1Da3NZMmhsWTJ0bFpEcG1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqMWhMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrN2NtVjBkWEp1WENKcGJuQjFkRndpUFQwOVlpWW1JU0ZoTG1Ob1pXTnJaV1I4ZkZ3aWIzQjBhVzl1WENJOVBUMWlKaVloSVdFdWMyVnNaV04wWldSOUxITmxiR1ZqZEdWa09tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQmhMbkJoY21WdWRFNXZaR1VtSm1FdWNHRnlaVzUwVG05a1pTNXpaV3hsWTNSbFpFbHVaR1Y0TEdFdWMyVnNaV04wWldROVBUMGhNSDBzWlcxd2RIazZablZ1WTNScGIyNG9ZU2w3Wm05eUtHRTlZUzVtYVhKemRFTm9hV3hrTzJFN1lUMWhMbTVsZUhSVGFXSnNhVzVuS1dsbUtHRXVibTlrWlZSNWNHVThOaWx5WlhSMWNtNGhNVHR5WlhSMWNtNGhNSDBzY0dGeVpXNTBPbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUZrTG5CelpYVmtiM011Wlcxd2RIa29ZU2w5TEdobFlXUmxjanBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnV0M1MFpYTjBLR0V1Ym05a1pVNWhiV1VwZlN4cGJuQjFkRHBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnVnk1MFpYTjBLR0V1Ym05a1pVNWhiV1VwZlN4aWRYUjBiMjQ2Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5WVM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BPM0psZEhWeWJsd2lhVzV3ZFhSY0lqMDlQV0ltSmx3aVluVjBkRzl1WENJOVBUMWhMblI1Y0dWOGZGd2lZblYwZEc5dVhDSTlQVDFpZlN4MFpYaDBPbVoxYm1OMGFXOXVLR0VwZTNaaGNpQmlPM0psZEhWeWJsd2lhVzV3ZFhSY0lqMDlQV0V1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTWW1YQ0owWlhoMFhDSTlQVDFoTG5SNWNHVW1KaWh1ZFd4c1BUMG9ZajFoTG1kbGRFRjBkSEpwWW5WMFpTaGNJblI1Y0dWY0lpa3BmSHhjSW5SbGVIUmNJajA5UFdJdWRHOU1iM2RsY2tOaGMyVW9LU2w5TEdacGNuTjBPbkJoS0daMWJtTjBhVzl1S0NsN2NtVjBkWEp1V3pCZGZTa3NiR0Z6ZERwd1lTaG1kVzVqZEdsdmJpaGhMR0lwZTNKbGRIVnlibHRpTFRGZGZTa3NaWEU2Y0dFb1puVnVZM1JwYjI0b1lTeGlMR01wZTNKbGRIVnlibHRqUERBL1l5dGlPbU5kZlNrc1pYWmxianB3WVNobWRXNWpkR2x2YmloaExHSXBlMlp2Y2loMllYSWdZejB3TzJNOFlqdGpLejB5S1dFdWNIVnphQ2hqS1R0eVpYUjFjbTRnWVgwcExHOWtaRHB3WVNobWRXNWpkR2x2YmloaExHSXBlMlp2Y2loMllYSWdZejB4TzJNOFlqdGpLejB5S1dFdWNIVnphQ2hqS1R0eVpYUjFjbTRnWVgwcExHeDBPbkJoS0daMWJtTjBhVzl1S0dFc1lpeGpLWHRtYjNJb2RtRnlJR1E5WXp3d1AyTXJZanBqT3kwdFpENDlNRHNwWVM1d2RYTm9LR1FwTzNKbGRIVnliaUJoZlNrc1ozUTZjR0VvWm5WdVkzUnBiMjRvWVN4aUxHTXBlMlp2Y2loMllYSWdaRDFqUERBL1l5dGlPbU03S3l0a1BHSTdLV0V1Y0hWemFDaGtLVHR5WlhSMWNtNGdZWDBwZlgwc1pDNXdjMlYxWkc5ekxtNTBhRDFrTG5CelpYVmtiM011WlhFN1ptOXlLR0lnYVc1N2NtRmthVzg2SVRBc1kyaGxZMnRpYjNnNklUQXNabWxzWlRvaE1DeHdZWE56ZDI5eVpEb2hNQ3hwYldGblpUb2hNSDBwWkM1d2MyVjFaRzl6VzJKZFBXMWhLR0lwTzJadmNpaGlJR2x1ZTNOMVltMXBkRG9oTUN4eVpYTmxkRG9oTUgwcFpDNXdjMlYxWkc5elcySmRQVzVoS0dJcE8yWjFibU4wYVc5dUlISmhLQ2w3ZlhKaExuQnliM1J2ZEhsd1pUMWtMbVpwYkhSbGNuTTlaQzV3YzJWMVpHOXpMR1F1YzJWMFJtbHNkR1Z5Y3oxdVpYY2djbUVzWnoxbllTNTBiMnRsYm1sNlpUMW1kVzVqZEdsdmJpaGhMR0lwZTNaaGNpQmpMR1VzWml4bkxHZ3NhU3hxTEdzOWVsdGhLMXdpSUZ3aVhUdHBaaWhyS1hKbGRIVnliaUJpUHpBNmF5NXpiR2xqWlNnd0tUdG9QV0VzYVQxYlhTeHFQV1F1Y0hKbFJtbHNkR1Z5TzNkb2FXeGxLR2dwZTJNbUppRW9aVDFSTG1WNFpXTW9hQ2twZkh3b1pTWW1LR2c5YUM1emJHbGpaU2hsV3pCZExteGxibWQwYUNsOGZHZ3BMR2t1Y0hWemFDaG1QVnRkS1Nrc1l6MGhNU3dvWlQxU0xtVjRaV01vYUNrcEppWW9ZejFsTG5Ob2FXWjBLQ2tzWmk1d2RYTm9LSHQyWVd4MVpUcGpMSFI1Y0dVNlpWc3dYUzV5WlhCc1lXTmxLRkFzWENJZ1hDSXBmU2tzYUQxb0xuTnNhV05sS0dNdWJHVnVaM1JvS1NrN1ptOXlLR2NnYVc0Z1pDNW1hV3gwWlhJcElTaGxQVlpiWjEwdVpYaGxZeWhvS1NsOGZHcGJaMTBtSmlFb1pUMXFXMmRkS0dVcEtYeDhLR005WlM1emFHbG1kQ2dwTEdZdWNIVnphQ2g3ZG1Gc2RXVTZZeXgwZVhCbE9tY3NiV0YwWTJobGN6cGxmU2tzYUQxb0xuTnNhV05sS0dNdWJHVnVaM1JvS1NrN2FXWW9JV01wWW5KbFlXdDljbVYwZFhKdUlHSS9hQzVzWlc1bmRHZzZhRDluWVM1bGNuSnZjaWhoS1RwNktHRXNhU2t1YzJ4cFkyVW9NQ2w5TzJaMWJtTjBhVzl1SUhOaEtHRXBlMlp2Y2loMllYSWdZajB3TEdNOVlTNXNaVzVuZEdnc1pEMWNJbHdpTzJJOFl6dGlLeXNwWkNzOVlWdGlYUzUyWVd4MVpUdHlaWFIxY200Z1pIMW1kVzVqZEdsdmJpQjBZU2hoTEdJc1l5bDdkbUZ5SUdROVlpNWthWElzWlQxaUxtNWxlSFFzWmoxbGZIeGtMR2M5WXlZbVhDSndZWEpsYm5ST2IyUmxYQ0k5UFQxbUxHZzllQ3NyTzNKbGRIVnliaUJpTG1acGNuTjBQMloxYm1OMGFXOXVLR0lzWXl4bEtYdDNhR2xzWlNoaVBXSmJaRjBwYVdZb01UMDlQV0l1Ym05a1pWUjVjR1Y4ZkdjcGNtVjBkWEp1SUdFb1lpeGpMR1VwTzNKbGRIVnliaUV4ZlRwbWRXNWpkR2x2YmloaUxHTXNhU2w3ZG1GeUlHb3NheXhzTEcwOVczY3NhRjA3YVdZb2FTbDdkMmhwYkdVb1lqMWlXMlJkS1dsbUtDZ3hQVDA5WWk1dWIyUmxWSGx3Wlh4OFp5a21KbUVvWWl4akxHa3BLWEpsZEhWeWJpRXdmV1ZzYzJVZ2QyaHBiR1VvWWoxaVcyUmRLV2xtS0RFOVBUMWlMbTV2WkdWVWVYQmxmSHhuS1dsbUtHdzlZbHQxWFh4OEtHSmJkVjA5ZTMwcExHczliRnRpTG5WdWFYRjFaVWxFWFh4OEtHeGJZaTUxYm1seGRXVkpSRjA5ZTMwcExHVW1KbVU5UFQxaUxtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2twWWoxaVcyUmRmSHhpTzJWc2MyVjdhV1lvS0dvOWExdG1YU2ttSm1wYk1GMDlQVDEzSmlacVd6RmRQVDA5YUNseVpYUjFjbTRnYlZzeVhUMXFXekpkTzJsbUtHdGJabDA5YlN4dFd6SmRQV0VvWWl4akxHa3BLWEpsZEhWeWJpRXdmWEpsZEhWeWJpRXhmWDFtZFc1amRHbHZiaUIxWVNoaEtYdHlaWFIxY200Z1lTNXNaVzVuZEdnK01UOW1kVzVqZEdsdmJpaGlMR01zWkNsN2RtRnlJR1U5WVM1c1pXNW5kR2c3ZDJocGJHVW9aUzB0S1dsbUtDRmhXMlZkS0dJc1l5eGtLU2x5WlhSMWNtNGhNVHR5WlhSMWNtNGhNSDA2WVZzd1hYMW1kVzVqZEdsdmJpQjJZU2hoTEdJc1l5bDdabTl5S0haaGNpQmtQVEFzWlQxaUxteGxibWQwYUR0a1BHVTdaQ3NyS1dkaEtHRXNZbHRrWFN4aktUdHlaWFIxY200Z1kzMW1kVzVqZEdsdmJpQjNZU2hoTEdJc1l5eGtMR1VwZTJadmNpaDJZWElnWml4blBWdGRMR2c5TUN4cFBXRXViR1Z1WjNSb0xHbzliblZzYkNFOVlqdG9QR2s3YUNzcktTaG1QV0ZiYUYwcEppWW9ZeVltSVdNb1ppeGtMR1VwZkh3b1p5NXdkWE5vS0dZcExHb21KbUl1Y0hWemFDaG9LU2twTzNKbGRIVnliaUJuZldaMWJtTjBhVzl1SUhoaEtHRXNZaXhqTEdRc1pTeG1LWHR5WlhSMWNtNGdaQ1ltSVdSYmRWMG1KaWhrUFhoaEtHUXBLU3hsSmlZaFpWdDFYU1ltS0dVOWVHRW9aU3htS1Nrc2FXRW9ablZ1WTNScGIyNG9aaXhuTEdnc2FTbDdkbUZ5SUdvc2F5eHNMRzA5VzEwc2JqMWJYU3h2UFdjdWJHVnVaM1JvTEhBOVpueDhkbUVvWW54OFhDSXFYQ0lzYUM1dWIyUmxWSGx3WlQ5YmFGMDZhQ3hiWFNrc2NUMGhZWHg4SVdZbUptSS9jRHAzWVNod0xHMHNZU3hvTEdrcExISTlZejlsZkh3b1pqOWhPbTk4ZkdRcFAxdGRPbWM2Y1R0cFppaGpKaVpqS0hFc2NpeG9MR2twTEdRcGUybzlkMkVvY2l4dUtTeGtLR29zVzEwc2FDeHBLU3hyUFdvdWJHVnVaM1JvTzNkb2FXeGxLR3N0TFNrb2JEMXFXMnRkS1NZbUtISmJibHRyWFYwOUlTaHhXMjViYTExZFBXd3BLWDFwWmlobUtYdHBaaWhsZkh4aEtYdHBaaWhsS1h0cVBWdGRMR3M5Y2k1c1pXNW5kR2c3ZDJocGJHVW9heTB0S1Noc1BYSmJhMTBwSmlacUxuQjFjMmdvY1Z0clhUMXNLVHRsS0c1MWJHd3NjajFiWFN4cUxHa3BmV3M5Y2k1c1pXNW5kR2c3ZDJocGJHVW9heTB0S1Noc1BYSmJhMTBwSmlZb2FqMWxQMGtvWml4c0tUcHRXMnRkS1Q0dE1TWW1LR1piYWwwOUlTaG5XMnBkUFd3cEtYMTlaV3h6WlNCeVBYZGhLSEk5UFQxblAzSXVjM0JzYVdObEtHOHNjaTVzWlc1bmRHZ3BPbklwTEdVL1pTaHVkV3hzTEdjc2NpeHBLVHBITG1Gd2NHeDVLR2NzY2lsOUtYMW1kVzVqZEdsdmJpQjVZU2hoS1h0bWIzSW9kbUZ5SUdJc1l5eGxMR1k5WVM1c1pXNW5kR2dzWnoxa0xuSmxiR0YwYVhabFcyRmJNRjB1ZEhsd1pWMHNhRDFuZkh4a0xuSmxiR0YwYVhabFcxd2lJRndpWFN4cFBXYy9NVG93TEdzOWRHRW9ablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJR0U5UFQxaWZTeG9MQ0V3S1N4c1BYUmhLR1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJKS0dJc1lTaytMVEY5TEdnc0lUQXBMRzA5VzJaMWJtTjBhVzl1S0dFc1l5eGtLWHQyWVhJZ1pUMGhaeVltS0dSOGZHTWhQVDFxS1h4OEtDaGlQV01wTG01dlpHVlVlWEJsUDJzb1lTeGpMR1FwT213b1lTeGpMR1FwS1R0eVpYUjFjbTRnWWoxdWRXeHNMR1Y5WFR0cFBHWTdhU3NyS1dsbUtHTTlaQzV5Wld4aGRHbDJaVnRoVzJsZExuUjVjR1ZkS1cwOVczUmhLSFZoS0cwcExHTXBYVHRsYkhObGUybG1LR005WkM1bWFXeDBaWEpiWVZ0cFhTNTBlWEJsWFM1aGNIQnNlU2h1ZFd4c0xHRmJhVjB1YldGMFkyaGxjeWtzWTF0MVhTbDdabTl5S0dVOUt5dHBPMlU4Wmp0bEt5c3BhV1lvWkM1eVpXeGhkR2wyWlZ0aFcyVmRMblI1Y0dWZEtXSnlaV0ZyTzNKbGRIVnliaUI0WVNocFBqRW1KblZoS0cwcExHaytNU1ltYzJFb1lTNXpiR2xqWlNnd0xHa3RNU2t1WTI5dVkyRjBLSHQyWVd4MVpUcGNJaUJjSWowOVBXRmJhUzB5WFM1MGVYQmxQMXdpS2x3aU9sd2lYQ0o5S1NrdWNtVndiR0ZqWlNoUUxGd2lKREZjSWlrc1l5eHBQR1VtSm5saEtHRXVjMnhwWTJVb2FTeGxLU2tzWlR4bUppWjVZU2hoUFdFdWMyeHBZMlVvWlNrcExHVThaaVltYzJFb1lTa3BmVzB1Y0hWemFDaGpLWDF5WlhSMWNtNGdkV0VvYlNsOVpuVnVZM1JwYjI0Z2VtRW9ZU3hpS1h0MllYSWdZejFpTG14bGJtZDBhRDR3TEdVOVlTNXNaVzVuZEdnK01DeG1QV1oxYm1OMGFXOXVLR1lzWnl4b0xHa3NheWw3ZG1GeUlHd3NieXh4TEhJOU1DeHpQVndpTUZ3aUxIUTlaaVltVzEwc2RUMWJYU3gyUFdvc2VEMW1mSHhsSmlaa0xtWnBibVF1VkVGSEtGd2lLbHdpTEdzcExIazlkeXM5Ym5Wc2JEMDlkajh4T2sxaGRHZ3VjbUZ1Wkc5dEtDbDhmQzR4TEhvOWVDNXNaVzVuZEdnN1ptOXlLR3NtSmlocVBXYzlQVDF1Zkh4bmZIeHJLVHR6SVQwOWVpWW1iblZzYkNFOUtHdzllRnR6WFNrN2N5c3JLWHRwWmlobEppWnNLWHR2UFRBc1ozeDhiQzV2ZDI1bGNrUnZZM1Z0Wlc1MFBUMDlibng4S0cwb2JDa3NhRDBoY0NrN2QyaHBiR1VvY1QxaFcyOHJLMTBwYVdZb2NTaHNMR2Q4Zkc0c2FDa3BlMmt1Y0hWemFDaHNLVHRpY21WaGEzMXJKaVlvZHoxNUtYMWpKaVlvS0d3OUlYRW1KbXdwSmlaeUxTMHNaaVltZEM1d2RYTm9LR3dwS1gxcFppaHlLejF6TEdNbUpuTWhQVDF5S1h0dlBUQTdkMmhwYkdVb2NUMWlXMjhySzEwcGNTaDBMSFVzWnl4b0tUdHBaaWhtS1h0cFppaHlQakFwZDJocGJHVW9jeTB0S1hSYmMxMThmSFZiYzExOGZDaDFXM05kUFVVdVkyRnNiQ2hwS1NrN2RUMTNZU2gxS1gxSExtRndjR3g1S0drc2RTa3NheVltSVdZbUpuVXViR1Z1WjNSb1BqQW1KbklyWWk1c1pXNW5kR2crTVNZbVoyRXVkVzVwY1hWbFUyOXlkQ2hwS1gxeVpYUjFjbTRnYXlZbUtIYzllU3hxUFhZcExIUjlPM0psZEhWeWJpQmpQMmxoS0dZcE9tWjljbVYwZFhKdUlHZzlaMkV1WTI5dGNHbHNaVDFtZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqTEdROVcxMHNaVDFiWFN4bVBVRmJZU3RjSWlCY0lsMDdhV1lvSVdZcGUySjhmQ2hpUFdjb1lTa3BMR005WWk1c1pXNW5kR2c3ZDJocGJHVW9ZeTB0S1dZOWVXRW9ZbHRqWFNrc1psdDFYVDlrTG5CMWMyZ29aaWs2WlM1d2RYTm9LR1lwTzJZOVFTaGhMSHBoS0dVc1pDa3BMR1l1YzJWc1pXTjBiM0k5WVgxeVpYUjFjbTRnWm4wc2FUMW5ZUzV6Wld4bFkzUTlablZ1WTNScGIyNG9ZU3hpTEdNc1pTbDdkbUZ5SUdZc2FTeHFMR3NzYkN4dFBWd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR0VtSm1Fc2JqMGhaU1ltWnloaFBXMHVjMlZzWldOMGIzSjhmR0VwTzJsbUtHTTlZM3g4VzEwc01UMDlQVzR1YkdWdVozUm9LWHRwWmlocFBXNWJNRjA5Ymxzd1hTNXpiR2xqWlNnd0tTeHBMbXhsYm1kMGFENHlKaVpjSWtsRVhDSTlQVDBvYWoxcFd6QmRLUzUwZVhCbEppWTVQVDA5WWk1dWIyUmxWSGx3WlNZbWNDWW1aQzV5Wld4aGRHbDJaVnRwV3pGZExuUjVjR1ZkS1h0cFppaGlQU2hrTG1acGJtUXVTVVFvYWk1dFlYUmphR1Z6V3pCZExuSmxjR3hoWTJVb1h5eGhZU2tzWWlsOGZGdGRLVnN3WFN3aFlpbHlaWFIxY200Z1l6dHRKaVlvWWoxaUxuQmhjbVZ1ZEU1dlpHVXBMR0U5WVM1emJHbGpaU2hwTG5Ob2FXWjBLQ2t1ZG1Gc2RXVXViR1Z1WjNSb0tYMW1QVll1Ym1WbFpITkRiMjUwWlhoMExuUmxjM1FvWVNrL01EcHBMbXhsYm1kMGFEdDNhR2xzWlNobUxTMHBlMmxtS0dvOWFWdG1YU3hrTG5KbGJHRjBhWFpsVzJzOWFpNTBlWEJsWFNsaWNtVmhhenRwWmlnb2JEMWtMbVpwYm1SYmExMHBKaVlvWlQxc0tHb3ViV0YwWTJobGMxc3dYUzV5WlhCc1lXTmxLRjhzWVdFcExDUXVkR1Z6ZENocFd6QmRMblI1Y0dVcEppWnhZU2hpTG5CaGNtVnVkRTV2WkdVcGZIeGlLU2twZTJsbUtHa3VjM0JzYVdObEtHWXNNU2tzWVQxbExteGxibWQwYUNZbWMyRW9hU2tzSVdFcGNtVjBkWEp1SUVjdVlYQndiSGtvWXl4bEtTeGpPMkp5WldGcmZYMTljbVYwZFhKdUtHMThmR2dvWVN4dUtTa29aU3hpTENGd0xHTXNJV0o4ZkNRdWRHVnpkQ2hoS1NZbWNXRW9ZaTV3WVhKbGJuUk9iMlJsS1h4OFlpa3NZMzBzWXk1emIzSjBVM1JoWW14bFBYVXVjM0JzYVhRb1hDSmNJaWt1YzI5eWRDaENLUzVxYjJsdUtGd2lYQ0lwUFQwOWRTeGpMbVJsZEdWamRFUjFjR3hwWTJGMFpYTTlJU0ZzTEcwb0tTeGpMbk52Y25SRVpYUmhZMmhsWkQxcVlTaG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdNU1poTG1OdmJYQmhjbVZFYjJOMWJXVnVkRkJ2YzJsMGFXOXVLRzR1WTNKbFlYUmxSV3hsYldWdWRDaGNJbVpwWld4a2MyVjBYQ0lwS1gwcExHcGhLR1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJoTG1sdWJtVnlTRlJOVEQxY0lqeGhJR2h5WldZOUp5TW5Qand2WVQ1Y0lpeGNJaU5jSWowOVBXRXVabWx5YzNSRGFHbHNaQzVuWlhSQmRIUnlhV0oxZEdVb1hDSm9jbVZtWENJcGZTbDhmR3RoS0Z3aWRIbHdaWHhvY21WbWZHaGxhV2RvZEh4M2FXUjBhRndpTEdaMWJtTjBhVzl1S0dFc1lpeGpLWHRwWmlnaFl5bHlaWFIxY200Z1lTNW5aWFJCZEhSeWFXSjFkR1VvWWl4Y0luUjVjR1ZjSWowOVBXSXVkRzlNYjNkbGNrTmhjMlVvS1Q4eE9qSXBmU2tzWXk1aGRIUnlhV0oxZEdWekppWnFZU2htZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnWVM1cGJtNWxja2hVVFV3OVhDSThhVzV3ZFhRdlBsd2lMR0V1Wm1seWMzUkRhR2xzWkM1elpYUkJkSFJ5YVdKMWRHVW9YQ0oyWVd4MVpWd2lMRndpWENJcExGd2lYQ0k5UFQxaExtWnBjbk4wUTJocGJHUXVaMlYwUVhSMGNtbGlkWFJsS0Z3aWRtRnNkV1ZjSWlsOUtYeDhhMkVvWENKMllXeDFaVndpTEdaMWJtTjBhVzl1S0dFc1lpeGpLWHRwWmlnaFl5WW1YQ0pwYm5CMWRGd2lQVDA5WVM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BLWEpsZEhWeWJpQmhMbVJsWm1GMWJIUldZV3gxWlgwcExHcGhLR1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJ1ZFd4c1BUMWhMbWRsZEVGMGRISnBZblYwWlNoY0ltUnBjMkZpYkdWa1hDSXBmU2w4Zkd0aEtFb3NablZ1WTNScGIyNG9ZU3hpTEdNcGUzWmhjaUJrTzJsbUtDRmpLWEpsZEhWeWJpQmhXMkpkUFQwOUlUQS9ZaTUwYjB4dmQyVnlRMkZ6WlNncE9paGtQV0V1WjJWMFFYUjBjbWxpZFhSbFRtOWtaU2hpS1NrbUptUXVjM0JsWTJsbWFXVmtQMlF1ZG1Gc2RXVTZiblZzYkgwcExHZGhmU2hoS1R0eUxtWnBibVE5ZUN4eUxtVjRjSEk5ZUM1elpXeGxZM1J2Y25Nc2NpNWxlSEJ5VzF3aU9sd2lYVDF5TG1WNGNISXVjSE5sZFdSdmN5eHlMblZ1YVhGMVpWTnZjblE5Y2k1MWJtbHhkV1U5ZUM1MWJtbHhkV1ZUYjNKMExISXVkR1Y0ZEQxNExtZGxkRlJsZUhRc2NpNXBjMWhOVEVSdll6MTRMbWx6V0UxTUxISXVZMjl1ZEdGcGJuTTllQzVqYjI1MFlXbHVjeXh5TG1WelkyRndaVk5sYkdWamRHOXlQWGd1WlhOallYQmxPM1poY2lCNVBXWjFibU4wYVc5dUtHRXNZaXhqS1h0MllYSWdaRDFiWFN4bFBYWnZhV1FnTUNFOVBXTTdkMmhwYkdVb0tHRTlZVnRpWFNrbUpqa2hQVDFoTG01dlpHVlVlWEJsS1dsbUtERTlQVDFoTG01dlpHVlVlWEJsS1h0cFppaGxKaVp5S0dFcExtbHpLR01wS1dKeVpXRnJPMlF1Y0hWemFDaGhLWDF5WlhSMWNtNGdaSDBzZWoxbWRXNWpkR2x2YmloaExHSXBlMlp2Y2loMllYSWdZejFiWFR0aE8yRTlZUzV1WlhoMFUybGliR2x1WnlreFBUMDlZUzV1YjJSbFZIbHdaU1ltWVNFOVBXSW1KbU11Y0hWemFDaGhLVHR5WlhSMWNtNGdZMzBzUVQxeUxtVjRjSEl1YldGMFkyZ3VibVZsWkhORGIyNTBaWGgwTzJaMWJtTjBhVzl1SUVJb1lTeGlLWHR5WlhSMWNtNGdZUzV1YjJSbFRtRnRaU1ltWVM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BQVDA5WWk1MGIweHZkMlZ5UTJGelpTZ3BmWFpoY2lCRFBTOWVQQ2hiWVMxNlhWdGVYRnd2WEZ3d1BqcGNYSGd5TUZ4Y2RGeGNjbHhjYmx4Y1psMHFLVnRjWEhneU1GeGNkRnhjY2x4Y2JseGNabDBxWEZ3dlB6NG9Qem84WEZ3dlhGd3hQbndwSkM5cExFUTlMMTR1VzE0NkkxeGNXMXhjTGl4ZEtpUXZPMloxYm1OMGFXOXVJRVVvWVN4aUxHTXBlM0psZEhWeWJpQnlMbWx6Um5WdVkzUnBiMjRvWWlrL2NpNW5jbVZ3S0dFc1puVnVZM1JwYjI0b1lTeGtLWHR5WlhSMWNtNGhJV0l1WTJGc2JDaGhMR1FzWVNraFBUMWpmU2s2WWk1dWIyUmxWSGx3WlQ5eUxtZHlaWEFvWVN4bWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z1lUMDlQV0loUFQxamZTazZYQ0p6ZEhKcGJtZGNJaUU5ZEhsd1pXOW1JR0kvY2k1bmNtVndLR0VzWm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUdrdVkyRnNiQ2hpTEdFcFBpMHhJVDA5WTMwcE9rUXVkR1Z6ZENoaUtUOXlMbVpwYkhSbGNpaGlMR0VzWXlrNktHSTljaTVtYVd4MFpYSW9ZaXhoS1N4eUxtZHlaWEFvWVN4bWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2FTNWpZV3hzS0dJc1lTaytMVEVoUFQxakppWXhQVDA5WVM1dWIyUmxWSGx3WlgwcEtYMXlMbVpwYkhSbGNqMW1kVzVqZEdsdmJpaGhMR0lzWXlsN2RtRnlJR1E5WWxzd1hUdHlaWFIxY200Z1l5WW1LR0U5WENJNmJtOTBLRndpSzJFclhDSXBYQ0lwTERFOVBUMWlMbXhsYm1kMGFDWW1NVDA5UFdRdWJtOWtaVlI1Y0dVL2NpNW1hVzVrTG0xaGRHTm9aWE5UWld4bFkzUnZjaWhrTEdFcFAxdGtYVHBiWFRweUxtWnBibVF1YldGMFkyaGxjeWhoTEhJdVozSmxjQ2hpTEdaMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlBeFBUMDlZUzV1YjJSbFZIbHdaWDBwS1gwc2NpNW1iaTVsZUhSbGJtUW9lMlpwYm1RNlpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJc1l5eGtQWFJvYVhNdWJHVnVaM1JvTEdVOWRHaHBjenRwWmloY0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1lTbHlaWFIxY200Z2RHaHBjeTV3ZFhOb1UzUmhZMnNvY2loaEtTNW1hV3gwWlhJb1puVnVZM1JwYjI0b0tYdG1iM0lvWWowd08ySThaRHRpS3lzcGFXWW9jaTVqYjI1MFlXbHVjeWhsVzJKZExIUm9hWE1wS1hKbGRIVnliaUV3ZlNrcE8yWnZjaWhqUFhSb2FYTXVjSFZ6YUZOMFlXTnJLRnRkS1N4aVBUQTdZanhrTzJJckt5bHlMbVpwYm1Rb1lTeGxXMkpkTEdNcE8zSmxkSFZ5YmlCa1BqRS9jaTUxYm1seGRXVlRiM0owS0dNcE9tTjlMR1pwYkhSbGNqcG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdkR2hwY3k1d2RYTm9VM1JoWTJzb1JTaDBhR2x6TEdGOGZGdGRMQ0V4S1NsOUxHNXZkRHBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnZEdocGN5NXdkWE5vVTNSaFkyc29SU2gwYUdsekxHRjhmRnRkTENFd0tTbDlMR2x6T21aMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlFaFJTaDBhR2x6TEZ3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCaEppWkJMblJsYzNRb1lTay9jaWhoS1RwaGZIeGJYU3doTVNrdWJHVnVaM1JvZlgwcE8zWmhjaUJHTEVjOUwxNG9QenBjWEhNcUtEeGJYRngzWEZ4WFhTcytLVnRlUGwwcWZDTW9XMXhjZHkxZEt5a3BKQzhzU0QxeUxtWnVMbWx1YVhROVpuVnVZM1JwYjI0b1lTeGlMR01wZTNaaGNpQmxMR1k3YVdZb0lXRXBjbVYwZFhKdUlIUm9hWE03YVdZb1l6MWpmSHhHTEZ3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCaEtYdHBaaWhsUFZ3aVBGd2lQVDA5WVZzd1hTWW1YQ0krWENJOVBUMWhXMkV1YkdWdVozUm9MVEZkSmlaaExteGxibWQwYUQ0OU16OWJiblZzYkN4aExHNTFiR3hkT2tjdVpYaGxZeWhoS1N3aFpYeDhJV1ZiTVYwbUptSXBjbVYwZFhKdUlXSjhmR0l1YW5GMVpYSjVQeWhpZkh4aktTNW1hVzVrS0dFcE9uUm9hWE11WTI5dWMzUnlkV04wYjNJb1lpa3VabWx1WkNoaEtUdHBaaWhsV3pGZEtYdHBaaWhpUFdJZ2FXNXpkR0Z1WTJWdlppQnlQMkpiTUYwNllpeHlMbTFsY21kbEtIUm9hWE1zY2k1d1lYSnpaVWhVVFV3b1pWc3hYU3hpSmlaaUxtNXZaR1ZVZVhCbFAySXViM2R1WlhKRWIyTjFiV1Z1ZEh4OFlqcGtMQ0V3S1Nrc1F5NTBaWE4wS0dWYk1WMHBKaVp5TG1selVHeGhhVzVQWW1wbFkzUW9ZaWtwWm05eUtHVWdhVzRnWWlseUxtbHpSblZ1WTNScGIyNG9kR2hwYzF0bFhTay9kR2hwYzF0bFhTaGlXMlZkS1RwMGFHbHpMbUYwZEhJb1pTeGlXMlZkS1R0eVpYUjFjbTRnZEdocGMzMXlaWFIxY200Z1pqMWtMbWRsZEVWc1pXMWxiblJDZVVsa0tHVmJNbDBwTEdZbUppaDBhR2x6V3pCZFBXWXNkR2hwY3k1c1pXNW5kR2c5TVNrc2RHaHBjMzF5WlhSMWNtNGdZUzV1YjJSbFZIbHdaVDhvZEdocGMxc3dYVDFoTEhSb2FYTXViR1Z1WjNSb1BURXNkR2hwY3lrNmNpNXBjMFoxYm1OMGFXOXVLR0VwUDNadmFXUWdNQ0U5UFdNdWNtVmhaSGsvWXk1eVpXRmtlU2hoS1RwaEtISXBPbkl1YldGclpVRnljbUY1S0dFc2RHaHBjeWw5TzBndWNISnZkRzkwZVhCbFBYSXVabTRzUmoxeUtHUXBPM1poY2lCSlBTOWVLRDg2Y0dGeVpXNTBjM3h3Y21WMktEODZWVzUwYVd4OFFXeHNLU2t2TEVvOWUyTm9hV3hrY21WdU9pRXdMR052Ym5SbGJuUnpPaUV3TEc1bGVIUTZJVEFzY0hKbGRqb2hNSDA3Y2k1bWJpNWxlSFJsYm1Rb2UyaGhjenBtZFc1amRHbHZiaWhoS1h0MllYSWdZajF5S0dFc2RHaHBjeWtzWXoxaUxteGxibWQwYUR0eVpYUjFjbTRnZEdocGN5NW1hV3gwWlhJb1puVnVZM1JwYjI0b0tYdG1iM0lvZG1GeUlHRTlNRHRoUEdNN1lTc3JLV2xtS0hJdVkyOXVkR0ZwYm5Nb2RHaHBjeXhpVzJGZEtTbHlaWFIxY200aE1IMHBmU3hqYkc5elpYTjBPbVoxYm1OMGFXOXVLR0VzWWlsN2RtRnlJR01zWkQwd0xHVTlkR2hwY3k1c1pXNW5kR2dzWmoxYlhTeG5QVndpYzNSeWFXNW5YQ0loUFhSNWNHVnZaaUJoSmlaeUtHRXBPMmxtS0NGQkxuUmxjM1FvWVNrcFptOXlLRHRrUEdVN1pDc3JLV1p2Y2loalBYUm9hWE5iWkYwN1l5WW1ZeUU5UFdJN1l6MWpMbkJoY21WdWRFNXZaR1VwYVdZb1l5NXViMlJsVkhsd1pUd3hNU1ltS0djL1p5NXBibVJsZUNoaktUNHRNVG94UFQwOVl5NXViMlJsVkhsd1pTWW1jaTVtYVc1a0xtMWhkR05vWlhOVFpXeGxZM1J2Y2loakxHRXBLU2w3Wmk1d2RYTm9LR01wTzJKeVpXRnJmWEpsZEhWeWJpQjBhR2x6TG5CMWMyaFRkR0ZqYXlobUxteGxibWQwYUQ0eFAzSXVkVzVwY1hWbFUyOXlkQ2htS1RwbUtYMHNhVzVrWlhnNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHRS9YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR0UvYVM1allXeHNLSElvWVNrc2RHaHBjMXN3WFNrNmFTNWpZV3hzS0hSb2FYTXNZUzVxY1hWbGNuay9ZVnN3WFRwaEtUcDBhR2x6V3pCZEppWjBhR2x6V3pCZExuQmhjbVZ1ZEU1dlpHVS9kR2hwY3k1bWFYSnpkQ2dwTG5CeVpYWkJiR3dvS1M1c1pXNW5kR2c2TFRGOUxHRmtaRHBtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCMGFHbHpMbkIxYzJoVGRHRmpheWh5TG5WdWFYRjFaVk52Y25Rb2NpNXRaWEpuWlNoMGFHbHpMbWRsZENncExISW9ZU3hpS1NrcEtYMHNZV1JrUW1GamF6cG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdkR2hwY3k1aFpHUW9iblZzYkQwOVlUOTBhR2x6TG5CeVpYWlBZbXBsWTNRNmRHaHBjeTV3Y21WMlQySnFaV04wTG1acGJIUmxjaWhoS1NsOWZTazdablZ1WTNScGIyNGdTeWhoTEdJcGUzZG9hV3hsS0NoaFBXRmJZbDBwSmlZeElUMDlZUzV1YjJSbFZIbHdaU2s3Y21WMGRYSnVJR0Y5Y2k1bFlXTm9LSHR3WVhKbGJuUTZablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTlZUzV3WVhKbGJuUk9iMlJsTzNKbGRIVnliaUJpSmlZeE1TRTlQV0l1Ym05a1pWUjVjR1UvWWpwdWRXeHNmU3h3WVhKbGJuUnpPbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUI1S0dFc1hDSndZWEpsYm5ST2IyUmxYQ0lwZlN4d1lYSmxiblJ6Vlc1MGFXdzZablZ1WTNScGIyNG9ZU3hpTEdNcGUzSmxkSFZ5YmlCNUtHRXNYQ0p3WVhKbGJuUk9iMlJsWENJc1l5bDlMRzVsZUhRNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlFc29ZU3hjSW01bGVIUlRhV0pzYVc1blhDSXBmU3h3Y21WMk9tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQkxLR0VzWENKd2NtVjJhVzkxYzFOcFlteHBibWRjSWlsOUxHNWxlSFJCYkd3NlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlIa29ZU3hjSW01bGVIUlRhV0pzYVc1blhDSXBmU3h3Y21WMlFXeHNPbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUI1S0dFc1hDSndjbVYyYVc5MWMxTnBZbXhwYm1kY0lpbDlMRzVsZUhSVmJuUnBiRHBtZFc1amRHbHZiaWhoTEdJc1l5bDdjbVYwZFhKdUlIa29ZU3hjSW01bGVIUlRhV0pzYVc1blhDSXNZeWw5TEhCeVpYWlZiblJwYkRwbWRXNWpkR2x2YmloaExHSXNZeWw3Y21WMGRYSnVJSGtvWVN4Y0luQnlaWFpwYjNWelUybGliR2x1WjF3aUxHTXBmU3h6YVdKc2FXNW5jenBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnZWlnb1lTNXdZWEpsYm5ST2IyUmxmSHg3ZlNrdVptbHljM1JEYUdsc1pDeGhLWDBzWTJocGJHUnlaVzQ2Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUhvb1lTNW1hWEp6ZEVOb2FXeGtLWDBzWTI5dWRHVnVkSE02Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUVJb1lTeGNJbWxtY21GdFpWd2lLVDloTG1OdmJuUmxiblJFYjJOMWJXVnVkRG9vUWloaExGd2lkR1Z0Y0d4aGRHVmNJaWttSmloaFBXRXVZMjl1ZEdWdWRIeDhZU2tzY2k1dFpYSm5aU2hiWFN4aExtTm9hV3hrVG05a1pYTXBLWDE5TEdaMWJtTjBhVzl1S0dFc1lpbDdjaTVtYmx0aFhUMW1kVzVqZEdsdmJpaGpMR1FwZTNaaGNpQmxQWEl1YldGd0tIUm9hWE1zWWl4aktUdHlaWFIxY201Y0lsVnVkR2xzWENJaFBUMWhMbk5zYVdObEtDMDFLU1ltS0dROVl5a3NaQ1ltWENKemRISnBibWRjSWowOWRIbHdaVzltSUdRbUppaGxQWEl1Wm1sc2RHVnlLR1FzWlNrcExIUm9hWE11YkdWdVozUm9QakVtSmloS1cyRmRmSHh5TG5WdWFYRjFaVk52Y25Rb1pTa3NTUzUwWlhOMEtHRXBKaVpsTG5KbGRtVnljMlVvS1Nrc2RHaHBjeTV3ZFhOb1UzUmhZMnNvWlNsOWZTazdkbUZ5SUV3OUwxdGVYRng0TWpCY1hIUmNYSEpjWEc1Y1hHWmRLeTluTzJaMWJtTjBhVzl1SUUwb1lTbDdkbUZ5SUdJOWUzMDdjbVYwZFhKdUlISXVaV0ZqYUNoaExtMWhkR05vS0V3cGZIeGJYU3htZFc1amRHbHZiaWhoTEdNcGUySmJZMTA5SVRCOUtTeGlmWEl1UTJGc2JHSmhZMnR6UFdaMWJtTjBhVzl1S0dFcGUyRTlYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR0UvVFNoaEtUcHlMbVY0ZEdWdVpDaDdmU3hoS1R0MllYSWdZaXhqTEdRc1pTeG1QVnRkTEdjOVcxMHNhRDB0TVN4cFBXWjFibU4wYVc5dUtDbDdabTl5S0dVOVpYeDhZUzV2Ym1ObExHUTlZajBoTUR0bkxteGxibWQwYUR0b1BTMHhLWHRqUFdjdWMyaHBablFvS1R0M2FHbHNaU2dySzJnOFppNXNaVzVuZEdncFpsdG9YUzVoY0hCc2VTaGpXekJkTEdOYk1WMHBQVDA5SVRFbUptRXVjM1J2Y0U5dVJtRnNjMlVtSmlob1BXWXViR1Z1WjNSb0xHTTlJVEVwZldFdWJXVnRiM0o1Zkh3b1l6MGhNU2tzWWowaE1TeGxKaVlvWmoxalAxdGRPbHdpWENJcGZTeHFQWHRoWkdRNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1ppWW1LR01tSmlGaUppWW9hRDFtTG14bGJtZDBhQzB4TEdjdWNIVnphQ2hqS1Nrc1puVnVZM1JwYjI0Z1pDaGlLWHR5TG1WaFkyZ29ZaXhtZFc1amRHbHZiaWhpTEdNcGUzSXVhWE5HZFc1amRHbHZiaWhqS1Q5aExuVnVhWEYxWlNZbWFpNW9ZWE1vWXlsOGZHWXVjSFZ6YUNoaktUcGpKaVpqTG14bGJtZDBhQ1ltWENKemRISnBibWRjSWlFOVBYSXVkSGx3WlNoaktTWW1aQ2hqS1gwcGZTaGhjbWQxYldWdWRITXBMR01tSmlGaUppWnBLQ2twTEhSb2FYTjlMSEpsYlc5MlpUcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQnlMbVZoWTJnb1lYSm5kVzFsYm5SekxHWjFibU4wYVc5dUtHRXNZaWw3ZG1GeUlHTTdkMmhwYkdVb0tHTTljaTVwYmtGeWNtRjVLR0lzWml4aktTaytMVEVwWmk1emNHeHBZMlVvWXl3eEtTeGpQRDFvSmlab0xTMTlLU3gwYUdsemZTeG9ZWE02Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUdFL2NpNXBia0Z5Y21GNUtHRXNaaWsrTFRFNlppNXNaVzVuZEdnK01IMHNaVzF3ZEhrNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1ppWW1LR1k5VzEwcExIUm9hWE45TEdScGMyRmliR1U2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWlQxblBWdGRMR1k5WXoxY0lsd2lMSFJvYVhOOUxHUnBjMkZpYkdWa09tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlXWjlMR3h2WTJzNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1pUMW5QVnRkTEdOOGZHSjhmQ2htUFdNOVhDSmNJaWtzZEdocGMzMHNiRzlqYTJWa09tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlTRmxmU3htYVhKbFYybDBhRHBtZFc1amRHbHZiaWhoTEdNcGUzSmxkSFZ5YmlCbGZId29ZejFqZkh4YlhTeGpQVnRoTEdNdWMyeHBZMlUvWXk1emJHbGpaU2dwT21OZExHY3VjSFZ6YUNoaktTeGlmSHhwS0NrcExIUm9hWE45TEdacGNtVTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdhaTVtYVhKbFYybDBhQ2gwYUdsekxHRnlaM1Z0Wlc1MGN5a3NkR2hwYzMwc1ptbHlaV1E2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRoSVdSOWZUdHlaWFIxY200Z2FuMDdablZ1WTNScGIyNGdUaWhoS1h0eVpYUjFjbTRnWVgxbWRXNWpkR2x2YmlCUEtHRXBlM1JvY205M0lHRjlablZ1WTNScGIyNGdVQ2hoTEdJc1l5eGtLWHQyWVhJZ1pUdDBjbmw3WVNZbWNpNXBjMFoxYm1OMGFXOXVLR1U5WVM1d2NtOXRhWE5sS1Q5bExtTmhiR3dvWVNrdVpHOXVaU2hpS1M1bVlXbHNLR01wT21FbUpuSXVhWE5HZFc1amRHbHZiaWhsUFdFdWRHaGxiaWsvWlM1allXeHNLR0VzWWl4aktUcGlMbUZ3Y0d4NUtIWnZhV1FnTUN4YllWMHVjMnhwWTJVb1pDa3BmV05oZEdOb0tHRXBlMk11WVhCd2JIa29kbTlwWkNBd0xGdGhYU2w5ZlhJdVpYaDBaVzVrS0h0RVpXWmxjbkpsWkRwbWRXNWpkR2x2YmloaUtYdDJZWElnWXoxYlcxd2libTkwYVdaNVhDSXNYQ0p3Y205bmNtVnpjMXdpTEhJdVEyRnNiR0poWTJ0ektGd2liV1Z0YjNKNVhDSXBMSEl1UTJGc2JHSmhZMnR6S0Z3aWJXVnRiM0o1WENJcExESmRMRnRjSW5KbGMyOXNkbVZjSWl4Y0ltUnZibVZjSWl4eUxrTmhiR3hpWVdOcmN5aGNJbTl1WTJVZ2JXVnRiM0o1WENJcExISXVRMkZzYkdKaFkydHpLRndpYjI1alpTQnRaVzF2Y25sY0lpa3NNQ3hjSW5KbGMyOXNkbVZrWENKZExGdGNJbkpsYW1WamRGd2lMRndpWm1GcGJGd2lMSEl1UTJGc2JHSmhZMnR6S0Z3aWIyNWpaU0J0WlcxdmNubGNJaWtzY2k1RFlXeHNZbUZqYTNNb1hDSnZibU5sSUcxbGJXOXllVndpS1N3eExGd2ljbVZxWldOMFpXUmNJbDFkTEdROVhDSndaVzVrYVc1blhDSXNaVDE3YzNSaGRHVTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdaSDBzWVd4M1lYbHpPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR1l1Wkc5dVpTaGhjbWQxYldWdWRITXBMbVpoYVd3b1lYSm5kVzFsYm5SektTeDBhR2x6ZlN4Y0ltTmhkR05vWENJNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHVXVkR2hsYmlodWRXeHNMR0VwZlN4d2FYQmxPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlZWEpuZFcxbGJuUnpPM0psZEhWeWJpQnlMa1JsWm1WeWNtVmtLR1oxYm1OMGFXOXVLR0lwZTNJdVpXRmphQ2hqTEdaMWJtTjBhVzl1S0dNc1pDbDdkbUZ5SUdVOWNpNXBjMFoxYm1OMGFXOXVLR0ZiWkZzMFhWMHBKaVpoVzJSYk5GMWRPMlpiWkZzeFhWMG9ablZ1WTNScGIyNG9LWHQyWVhJZ1lUMWxKaVpsTG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektUdGhKaVp5TG1selJuVnVZM1JwYjI0b1lTNXdjbTl0YVhObEtUOWhMbkJ5YjIxcGMyVW9LUzV3Y205bmNtVnpjeWhpTG01dmRHbG1lU2t1Wkc5dVpTaGlMbkpsYzI5c2RtVXBMbVpoYVd3b1lpNXlaV3BsWTNRcE9tSmJaRnN3WFN0Y0lsZHBkR2hjSWwwb2RHaHBjeXhsUDF0aFhUcGhjbWQxYldWdWRITXBmU2w5S1N4aFBXNTFiR3g5S1M1d2NtOXRhWE5sS0NsOUxIUm9aVzQ2Wm5WdVkzUnBiMjRvWWl4a0xHVXBlM1poY2lCbVBUQTdablZ1WTNScGIyNGdaeWhpTEdNc1pDeGxLWHR5WlhSMWNtNGdablZ1WTNScGIyNG9LWHQyWVhJZ2FEMTBhR2x6TEdrOVlYSm5kVzFsYm5SekxHbzlablZ1WTNScGIyNG9LWHQyWVhJZ1lTeHFPMmxtS0NFb1lqeG1LU2w3YVdZb1lUMWtMbUZ3Y0d4NUtHZ3NhU2tzWVQwOVBXTXVjSEp2YldselpTZ3BLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKVWFHVnVZV0pzWlNCelpXeG1MWEpsYzI5c2RYUnBiMjVjSWlrN2FqMWhKaVlvWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUdGOGZGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR0VwSmlaaExuUm9aVzRzY2k1cGMwWjFibU4wYVc5dUtHb3BQMlUvYWk1allXeHNLR0VzWnlobUxHTXNUaXhsS1N4bktHWXNZeXhQTEdVcEtUb29aaXNyTEdvdVkyRnNiQ2hoTEdjb1ppeGpMRTRzWlNrc1p5aG1MR01zVHl4bEtTeG5LR1lzWXl4T0xHTXVibTkwYVdaNVYybDBhQ2twS1Rvb1pDRTlQVTRtSmlob1BYWnZhV1FnTUN4cFBWdGhYU2tzS0dWOGZHTXVjbVZ6YjJ4MlpWZHBkR2dwS0dnc2FTa3BmWDBzYXoxbFAybzZablZ1WTNScGIyNG9LWHQwY25sN2FpZ3BmV05oZEdOb0tHRXBlM0l1UkdWbVpYSnlaV1F1WlhoalpYQjBhVzl1U0c5dmF5WW1jaTVFWldabGNuSmxaQzVsZUdObGNIUnBiMjVJYjI5cktHRXNheTV6ZEdGamExUnlZV05sS1N4aUt6RStQV1ltSmloa0lUMDlUeVltS0dnOWRtOXBaQ0F3TEdrOVcyRmRLU3hqTG5KbGFtVmpkRmRwZEdnb2FDeHBLU2w5ZlR0aVAyc29LVG9vY2k1RVpXWmxjbkpsWkM1blpYUlRkR0ZqYTBodmIyc21KaWhyTG5OMFlXTnJWSEpoWTJVOWNpNUVaV1psY25KbFpDNW5aWFJUZEdGamEwaHZiMnNvS1Nrc1lTNXpaWFJVYVcxbGIzVjBLR3NwS1gxOWNtVjBkWEp1SUhJdVJHVm1aWEp5WldRb1puVnVZM1JwYjI0b1lTbDdZMXN3WFZzelhTNWhaR1FvWnlnd0xHRXNjaTVwYzBaMWJtTjBhVzl1S0dVcFAyVTZUaXhoTG01dmRHbG1lVmRwZEdncEtTeGpXekZkV3pOZExtRmtaQ2huS0RBc1lTeHlMbWx6Um5WdVkzUnBiMjRvWWlrL1lqcE9LU2tzWTFzeVhWc3pYUzVoWkdRb1p5Z3dMR0VzY2k1cGMwWjFibU4wYVc5dUtHUXBQMlE2VHlrcGZTa3VjSEp2YldselpTZ3BmU3h3Y205dGFYTmxPbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJ1ZFd4c0lUMWhQM0l1WlhoMFpXNWtLR0VzWlNrNlpYMTlMR1k5ZTMwN2NtVjBkWEp1SUhJdVpXRmphQ2hqTEdaMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdjOVlsc3lYU3hvUFdKYk5WMDdaVnRpV3pGZFhUMW5MbUZrWkN4b0ppWm5MbUZrWkNobWRXNWpkR2x2YmlncGUyUTlhSDBzWTFzekxXRmRXekpkTG1ScGMyRmliR1VzWTFzd1hWc3lYUzVzYjJOcktTeG5MbUZrWkNoaVd6TmRMbVpwY21VcExHWmJZbHN3WFYwOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1psdGlXekJkSzF3aVYybDBhRndpWFNoMGFHbHpQVDA5Wmo5MmIybGtJREE2ZEdocGN5eGhjbWQxYldWdWRITXBMSFJvYVhOOUxHWmJZbHN3WFN0Y0lsZHBkR2hjSWwwOVp5NW1hWEpsVjJsMGFIMHBMR1V1Y0hKdmJXbHpaU2htS1N4aUppWmlMbU5oYkd3b1ppeG1LU3htZlN4M2FHVnVPbVoxYm1OMGFXOXVLR0VwZTNaaGNpQmlQV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3NZejFpTEdROVFYSnlZWGtvWXlrc1pUMW1MbU5oYkd3b1lYSm5kVzFsYm5SektTeG5QWEl1UkdWbVpYSnlaV1FvS1N4b1BXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQm1kVzVqZEdsdmJpaGpLWHRrVzJGZFBYUm9hWE1zWlZ0aFhUMWhjbWQxYldWdWRITXViR1Z1WjNSb1BqRS9aaTVqWVd4c0tHRnlaM1Z0Wlc1MGN5azZZeXd0TFdKOGZHY3VjbVZ6YjJ4MlpWZHBkR2dvWkN4bEtYMTlPMmxtS0dJOFBURW1KaWhRS0dFc1p5NWtiMjVsS0dnb1l5a3BMbkpsYzI5c2RtVXNaeTV5WldwbFkzUXNJV0lwTEZ3aWNHVnVaR2x1WjF3aVBUMDlaeTV6ZEdGMFpTZ3BmSHh5TG1selJuVnVZM1JwYjI0b1pWdGpYU1ltWlZ0alhTNTBhR1Z1S1NrcGNtVjBkWEp1SUdjdWRHaGxiaWdwTzNkb2FXeGxLR010TFNsUUtHVmJZMTBzYUNoaktTeG5MbkpsYW1WamRDazdjbVYwZFhKdUlHY3VjSEp2YldselpTZ3BmWDBwTzNaaGNpQlJQUzllS0VWMllXeDhTVzUwWlhKdVlXeDhVbUZ1WjJWOFVtVm1aWEpsYm1ObGZGTjViblJoZUh4VWVYQmxmRlZTU1NsRmNuSnZjaVF2TzNJdVJHVm1aWEp5WldRdVpYaGpaWEIwYVc5dVNHOXZhejFtZFc1amRHbHZiaWhpTEdNcGUyRXVZMjl1YzI5c1pTWW1ZUzVqYjI1emIyeGxMbmRoY200bUptSW1KbEV1ZEdWemRDaGlMbTVoYldVcEppWmhMbU52Ym5OdmJHVXVkMkZ5YmloY0ltcFJkV1Z5ZVM1RVpXWmxjbkpsWkNCbGVHTmxjSFJwYjI0NklGd2lLMkl1YldWemMyRm5aU3hpTG5OMFlXTnJMR01wZlN4eUxuSmxZV1I1UlhoalpYQjBhVzl1UFdaMWJtTjBhVzl1S0dJcGUyRXVjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwZTNSb2NtOTNJR0o5S1gwN2RtRnlJRkk5Y2k1RVpXWmxjbkpsWkNncE8zSXVabTR1Y21WaFpIazlablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJRkl1ZEdobGJpaGhLVnRjSW1OaGRHTm9YQ0pkS0daMWJtTjBhVzl1S0dFcGUzSXVjbVZoWkhsRmVHTmxjSFJwYjI0b1lTbDlLU3gwYUdsemZTeHlMbVY0ZEdWdVpDaDdhWE5TWldGa2VUb2hNU3h5WldGa2VWZGhhWFE2TVN4eVpXRmtlVHBtZFc1amRHbHZiaWhoS1hzb1lUMDlQU0V3UHkwdGNpNXlaV0ZrZVZkaGFYUTZjaTVwYzFKbFlXUjVLWHg4S0hJdWFYTlNaV0ZrZVQwaE1DeGhJVDA5SVRBbUppMHRjaTV5WldGa2VWZGhhWFErTUh4OFVpNXlaWE52YkhabFYybDBhQ2hrTEZ0eVhTa3BmWDBwTEhJdWNtVmhaSGt1ZEdobGJqMVNMblJvWlc0N1puVnVZM1JwYjI0Z1V5Z3BlMlF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loY0lrUlBUVU52Ym5SbGJuUk1iMkZrWldSY0lpeFRLU3hjYm1FdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGNJbXh2WVdSY0lpeFRLU3h5TG5KbFlXUjVLQ2w5WENKamIyMXdiR1YwWlZ3aVBUMDlaQzV5WldGa2VWTjBZWFJsZkh4Y0lteHZZV1JwYm1kY0lpRTlQV1F1Y21WaFpIbFRkR0YwWlNZbUlXUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExtUnZVMk55YjJ4c1AyRXVjMlYwVkdsdFpXOTFkQ2h5TG5KbFlXUjVLVG9vWkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVJFOU5RMjl1ZEdWdWRFeHZZV1JsWkZ3aUxGTXBMR0V1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW14dllXUmNJaXhUS1NrN2RtRnlJRlE5Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ3hsTEdZc1p5bDdkbUZ5SUdnOU1DeHBQV0V1YkdWdVozUm9MR285Ym5Wc2JEMDlZenRwWmloY0ltOWlhbVZqZEZ3aVBUMDljaTUwZVhCbEtHTXBLWHRsUFNFd08yWnZjaWhvSUdsdUlHTXBWQ2hoTEdJc2FDeGpXMmhkTENFd0xHWXNaeWw5Wld4elpTQnBaaWgyYjJsa0lEQWhQVDFrSmlZb1pUMGhNQ3h5TG1selJuVnVZM1JwYjI0b1pDbDhmQ2huUFNFd0tTeHFKaVlvWno4b1lpNWpZV3hzS0dFc1pDa3NZajF1ZFd4c0tUb29hajFpTEdJOVpuVnVZM1JwYjI0b1lTeGlMR01wZTNKbGRIVnliaUJxTG1OaGJHd29jaWhoS1N4aktYMHBLU3hpS1NsbWIzSW9PMmc4YVR0b0t5c3BZaWhoVzJoZExHTXNaejlrT21RdVkyRnNiQ2hoVzJoZExHZ3NZaWhoVzJoZExHTXBLU2s3Y21WMGRYSnVJR1UvWVRwcVAySXVZMkZzYkNoaEtUcHBQMklvWVZzd1hTeGpLVHBtZlN4VlBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQXhQVDA5WVM1dWIyUmxWSGx3Wlh4OE9UMDlQV0V1Ym05a1pWUjVjR1Y4ZkNFcllTNXViMlJsVkhsd1pYMDdablZ1WTNScGIyNGdWaWdwZTNSb2FYTXVaWGh3WVc1a2J6MXlMbVY0Y0dGdVpHOHJWaTUxYVdRckszMVdMblZwWkQweExGWXVjSEp2ZEc5MGVYQmxQWHRqWVdOb1pUcG1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqMWhXM1JvYVhNdVpYaHdZVzVrYjEwN2NtVjBkWEp1SUdKOGZDaGlQWHQ5TEZVb1lTa21KaWhoTG01dlpHVlVlWEJsUDJGYmRHaHBjeTVsZUhCaGJtUnZYVDFpT2s5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGhMSFJvYVhNdVpYaHdZVzVrYnl4N2RtRnNkV1U2WWl4amIyNW1hV2QxY21GaWJHVTZJVEI5S1NrcExHSjlMSE5sZERwbWRXNWpkR2x2YmloaExHSXNZeWw3ZG1GeUlHUXNaVDEwYUdsekxtTmhZMmhsS0dFcE8ybG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJpS1dWYmNpNWpZVzFsYkVOaGMyVW9ZaWxkUFdNN1pXeHpaU0JtYjNJb1pDQnBiaUJpS1dWYmNpNWpZVzFsYkVOaGMyVW9aQ2xkUFdKYlpGMDdjbVYwZFhKdUlHVjlMR2RsZERwbWRXNWpkR2x2YmloaExHSXBlM0psZEhWeWJpQjJiMmxrSURBOVBUMWlQM1JvYVhNdVkyRmphR1VvWVNrNllWdDBhR2x6TG1WNGNHRnVaRzlkSmlaaFczUm9hWE11Wlhod1lXNWtiMTFiY2k1allXMWxiRU5oYzJVb1lpbGRmU3hoWTJObGMzTTZablZ1WTNScGIyNG9ZU3hpTEdNcGUzSmxkSFZ5YmlCMmIybGtJREE5UFQxaWZIeGlKaVpjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWWlZbWRtOXBaQ0F3UFQwOVl6OTBhR2x6TG1kbGRDaGhMR0lwT2loMGFHbHpMbk5sZENoaExHSXNZeWtzZG05cFpDQXdJVDA5WXo5ak9tSXBmU3h5WlcxdmRtVTZablZ1WTNScGIyNG9ZU3hpS1h0MllYSWdZeXhrUFdGYmRHaHBjeTVsZUhCaGJtUnZYVHRwWmloMmIybGtJREFoUFQxa0tYdHBaaWgyYjJsa0lEQWhQVDFpS1h0QmNuSmhlUzVwYzBGeWNtRjVLR0lwUDJJOVlpNXRZWEFvY2k1allXMWxiRU5oYzJVcE9paGlQWEl1WTJGdFpXeERZWE5sS0dJcExHSTlZaUJwYmlCa1AxdGlYVHBpTG0xaGRHTm9LRXdwZkh4YlhTa3NZejFpTG14bGJtZDBhRHQzYUdsc1pTaGpMUzBwWkdWc1pYUmxJR1JiWWx0alhWMTlLSFp2YVdRZ01EMDlQV0o4ZkhJdWFYTkZiWEIwZVU5aWFtVmpkQ2hrS1NrbUppaGhMbTV2WkdWVWVYQmxQMkZiZEdocGN5NWxlSEJoYm1SdlhUMTJiMmxrSURBNlpHVnNaWFJsSUdGYmRHaHBjeTVsZUhCaGJtUnZYU2w5ZlN4b1lYTkVZWFJoT21aMWJtTjBhVzl1S0dFcGUzWmhjaUJpUFdGYmRHaHBjeTVsZUhCaGJtUnZYVHR5WlhSMWNtNGdkbTlwWkNBd0lUMDlZaVltSVhJdWFYTkZiWEIwZVU5aWFtVmpkQ2hpS1gxOU8zWmhjaUJYUFc1bGR5QldMRmc5Ym1WM0lGWXNXVDB2WGlnL09seGNlMXRjWEhkY1hGZGRLbHhjZlh4Y1hGdGJYRngzWEZ4WFhTcGNYRjBwSkM4c1dqMHZXMEV0V2wwdlp6dG1kVzVqZEdsdmJpQWtLR0VwZTNKbGRIVnlibHdpZEhKMVpWd2lQVDA5WVh4OFhDSm1ZV3h6WlZ3aUlUMDlZU1ltS0Z3aWJuVnNiRndpUFQwOVlUOXVkV3hzT21FOVBUMHJZU3RjSWx3aVB5dGhPbGt1ZEdWemRDaGhLVDlLVTA5T0xuQmhjbk5sS0dFcE9tRXBmV1oxYm1OMGFXOXVJRjhvWVN4aUxHTXBlM1poY2lCa08ybG1LSFp2YVdRZ01EMDlQV01tSmpFOVBUMWhMbTV2WkdWVWVYQmxLV2xtS0dROVhDSmtZWFJoTFZ3aUsySXVjbVZ3YkdGalpTaGFMRndpTFNRbVhDSXBMblJ2VEc5M1pYSkRZWE5sS0Nrc1l6MWhMbWRsZEVGMGRISnBZblYwWlNoa0tTeGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdZeWw3ZEhKNWUyTTlKQ2hqS1gxallYUmphQ2hsS1h0OVdDNXpaWFFvWVN4aUxHTXBmV1ZzYzJVZ1l6MTJiMmxrSURBN2NtVjBkWEp1SUdOOWNpNWxlSFJsYm1Rb2UyaGhjMFJoZEdFNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlGZ3VhR0Z6UkdGMFlTaGhLWHg4Vnk1b1lYTkVZWFJoS0dFcGZTeGtZWFJoT21aMWJtTjBhVzl1S0dFc1lpeGpLWHR5WlhSMWNtNGdXQzVoWTJObGMzTW9ZU3hpTEdNcGZTeHlaVzF2ZG1WRVlYUmhPbVoxYm1OMGFXOXVLR0VzWWlsN1dDNXlaVzF2ZG1Vb1lTeGlLWDBzWDJSaGRHRTZablZ1WTNScGIyNG9ZU3hpTEdNcGUzSmxkSFZ5YmlCWExtRmpZMlZ6Y3loaExHSXNZeWw5TEY5eVpXMXZkbVZFWVhSaE9tWjFibU4wYVc5dUtHRXNZaWw3Vnk1eVpXMXZkbVVvWVN4aUtYMTlLU3h5TG1adUxtVjRkR1Z1WkNoN1pHRjBZVHBtZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqTEdRc1pTeG1QWFJvYVhOYk1GMHNaejFtSmlabUxtRjBkSEpwWW5WMFpYTTdhV1lvZG05cFpDQXdQVDA5WVNsN2FXWW9kR2hwY3k1c1pXNW5kR2dtSmlobFBWZ3VaMlYwS0dZcExERTlQVDFtTG01dlpHVlVlWEJsSmlZaFZ5NW5aWFFvWml4Y0ltaGhjMFJoZEdGQmRIUnljMXdpS1NrcGUyTTlaeTVzWlc1bmRHZzdkMmhwYkdVb1l5MHRLV2RiWTEwbUppaGtQV2RiWTEwdWJtRnRaU3d3UFQwOVpDNXBibVJsZUU5bUtGd2laR0YwWVMxY0lpa21KaWhrUFhJdVkyRnRaV3hEWVhObEtHUXVjMnhwWTJVb05Ta3BMRjhvWml4a0xHVmJaRjBwS1NrN1Z5NXpaWFFvWml4Y0ltaGhjMFJoZEdGQmRIUnljMXdpTENFd0tYMXlaWFIxY200Z1pYMXlaWFIxY201Y0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1lUOTBhR2x6TG1WaFkyZ29ablZ1WTNScGIyNG9LWHRZTG5ObGRDaDBhR2x6TEdFcGZTazZWQ2gwYUdsekxHWjFibU4wYVc5dUtHSXBlM1poY2lCak8ybG1LR1ltSm5admFXUWdNRDA5UFdJcGUybG1LR005V0M1blpYUW9aaXhoS1N4MmIybGtJREFoUFQxaktYSmxkSFZ5YmlCak8ybG1LR005WHlobUxHRXBMSFp2YVdRZ01DRTlQV01wY21WMGRYSnVJR045Wld4elpTQjBhR2x6TG1WaFkyZ29ablZ1WTNScGIyNG9LWHRZTG5ObGRDaDBhR2x6TEdFc1lpbDlLWDBzYm5Wc2JDeGlMR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZytNU3h1ZFd4c0xDRXdLWDBzY21WdGIzWmxSR0YwWVRwbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtDbDdXQzV5WlcxdmRtVW9kR2hwY3l4aEtYMHBmWDBwTEhJdVpYaDBaVzVrS0h0eGRXVjFaVHBtZFc1amRHbHZiaWhoTEdJc1l5bDdkbUZ5SUdRN2FXWW9ZU2x5WlhSMWNtNGdZajBvWW54OFhDSm1lRndpS1N0Y0luRjFaWFZsWENJc1pEMVhMbWRsZENoaExHSXBMR01tSmlnaFpIeDhRWEp5WVhrdWFYTkJjbkpoZVNoaktUOWtQVmN1WVdOalpYTnpLR0VzWWl4eUxtMWhhMlZCY25KaGVTaGpLU2s2WkM1d2RYTm9LR01wS1N4a2ZIeGJYWDBzWkdWeGRXVjFaVHBtZFc1amRHbHZiaWhoTEdJcGUySTlZbng4WENKbWVGd2lPM1poY2lCalBYSXVjWFZsZFdVb1lTeGlLU3hrUFdNdWJHVnVaM1JvTEdVOVl5NXphR2xtZENncExHWTljaTVmY1hWbGRXVkliMjlyY3loaExHSXBMR2M5Wm5WdVkzUnBiMjRvS1h0eUxtUmxjWFZsZFdVb1lTeGlLWDA3WENKcGJuQnliMmR5WlhOelhDSTlQVDFsSmlZb1pUMWpMbk5vYVdaMEtDa3NaQzB0S1N4bEppWW9YQ0ptZUZ3aVBUMDlZaVltWXk1MWJuTm9hV1owS0Z3aWFXNXdjbTluY21WemMxd2lLU3hrWld4bGRHVWdaaTV6ZEc5d0xHVXVZMkZzYkNoaExHY3NaaWtwTENGa0ppWm1KaVptTG1WdGNIUjVMbVpwY21Vb0tYMHNYM0YxWlhWbFNHOXZhM002Wm5WdVkzUnBiMjRvWVN4aUtYdDJZWElnWXoxaUsxd2ljWFZsZFdWSWIyOXJjMXdpTzNKbGRIVnliaUJYTG1kbGRDaGhMR01wZkh4WExtRmpZMlZ6Y3loaExHTXNlMlZ0Y0hSNU9uSXVRMkZzYkdKaFkydHpLRndpYjI1alpTQnRaVzF2Y25sY0lpa3VZV1JrS0daMWJtTjBhVzl1S0NsN1Z5NXlaVzF2ZG1Vb1lTeGJZaXRjSW5GMVpYVmxYQ0lzWTEwcGZTbDlLWDE5S1N4eUxtWnVMbVY0ZEdWdVpDaDdjWFZsZFdVNlpuVnVZM1JwYjI0b1lTeGlLWHQyWVhJZ1l6MHlPM0psZEhWeWJsd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQmhKaVlvWWoxaExHRTlYQ0ptZUZ3aUxHTXRMU2tzWVhKbmRXMWxiblJ6TG14bGJtZDBhRHhqUDNJdWNYVmxkV1VvZEdocGMxc3dYU3hoS1RwMmIybGtJREE5UFQxaVAzUm9hWE02ZEdocGN5NWxZV05vS0daMWJtTjBhVzl1S0NsN2RtRnlJR005Y2k1eGRXVjFaU2gwYUdsekxHRXNZaWs3Y2k1ZmNYVmxkV1ZJYjI5cmN5aDBhR2x6TEdFcExGd2labmhjSWowOVBXRW1KbHdpYVc1d2NtOW5jbVZ6YzF3aUlUMDlZMXN3WFNZbWNpNWtaWEYxWlhWbEtIUm9hWE1zWVNsOUtYMHNaR1Z4ZFdWMVpUcG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLQ2w3Y2k1a1pYRjFaWFZsS0hSb2FYTXNZU2w5S1gwc1kyeGxZWEpSZFdWMVpUcG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdkR2hwY3k1eGRXVjFaU2hoZkh4Y0ltWjRYQ0lzVzEwcGZTeHdjbTl0YVhObE9tWjFibU4wYVc5dUtHRXNZaWw3ZG1GeUlHTXNaRDB4TEdVOWNpNUVaV1psY25KbFpDZ3BMR1k5ZEdocGN5eG5QWFJvYVhNdWJHVnVaM1JvTEdnOVpuVnVZM1JwYjI0b0tYc3RMV1I4ZkdVdWNtVnpiMngyWlZkcGRHZ29aaXhiWmwwcGZUdGNJbk4wY21sdVoxd2lJVDEwZVhCbGIyWWdZU1ltS0dJOVlTeGhQWFp2YVdRZ01Da3NZVDFoZkh4Y0ltWjRYQ0k3ZDJocGJHVW9aeTB0S1dNOVZ5NW5aWFFvWmx0blhTeGhLMXdpY1hWbGRXVkliMjlyYzF3aUtTeGpKaVpqTG1WdGNIUjVKaVlvWkNzckxHTXVaVzF3ZEhrdVlXUmtLR2dwS1R0eVpYUjFjbTRnYUNncExHVXVjSEp2YldselpTaGlLWDE5S1R0MllYSWdZV0U5TDFzckxWMC9LRDg2WEZ4a0tseGNMbndwWEZ4a0t5Zy9PbHRsUlYxYkt5MWRQMXhjWkN0OEtTOHVjMjkxY21ObExHSmhQVzVsZHlCU1pXZEZlSEFvWENKZUtEODZLRnNyTFYwcFBYd3BLRndpSzJGaEsxd2lLU2hiWVMxNkpWMHFLU1JjSWl4Y0ltbGNJaWtzWTJFOVcxd2lWRzl3WENJc1hDSlNhV2RvZEZ3aUxGd2lRbTkwZEc5dFhDSXNYQ0pNWldaMFhDSmRMR1JoUFdaMWJtTjBhVzl1S0dFc1lpbDdjbVYwZFhKdUlHRTlZbng4WVN4Y0ltNXZibVZjSWowOVBXRXVjM1I1YkdVdVpHbHpjR3hoZVh4OFhDSmNJajA5UFdFdWMzUjViR1V1WkdsemNHeGhlU1ltY2k1amIyNTBZV2x1Y3loaExtOTNibVZ5Ukc5amRXMWxiblFzWVNrbUpsd2libTl1WlZ3aVBUMDljaTVqYzNNb1lTeGNJbVJwYzNCc1lYbGNJaWw5TEdWaFBXWjFibU4wYVc5dUtHRXNZaXhqTEdRcGUzWmhjaUJsTEdZc1p6MTdmVHRtYjNJb1ppQnBiaUJpS1dkYlpsMDlZUzV6ZEhsc1pWdG1YU3hoTG5OMGVXeGxXMlpkUFdKYlpsMDdaVDFqTG1Gd2NHeDVLR0VzWkh4OFcxMHBPMlp2Y2lobUlHbHVJR0lwWVM1emRIbHNaVnRtWFQxblcyWmRPM0psZEhWeWJpQmxmVHRtZFc1amRHbHZiaUJtWVNoaExHSXNZeXhrS1h0MllYSWdaU3htUFRFc1p6MHlNQ3hvUFdRL1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z1pDNWpkWElvS1gwNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2NpNWpjM01vWVN4aUxGd2lYQ0lwZlN4cFBXZ29LU3hxUFdNbUptTmJNMTE4ZkNoeUxtTnpjMDUxYldKbGNsdGlYVDljSWx3aU9sd2ljSGhjSWlrc2F6MG9jaTVqYzNOT2RXMWlaWEpiWWwxOGZGd2ljSGhjSWlFOVBXb21KaXRwS1NZbVltRXVaWGhsWXloeUxtTnpjeWhoTEdJcEtUdHBaaWhySmlacld6TmRJVDA5YWlsN2FqMXFmSHhyV3pOZExHTTlZM3g4VzEwc2F6MHJhWHg4TVR0a2J5Qm1QV1o4ZkZ3aUxqVmNJaXhyTHoxbUxISXVjM1I1YkdVb1lTeGlMR3NyYWlrN2QyaHBiR1VvWmlFOVBTaG1QV2dvS1M5cEtTWW1NU0U5UFdZbUppMHRaeWw5Y21WMGRYSnVJR01tSmloclBTdHJmSHdyYVh4OE1DeGxQV05iTVYwL2F5c29ZMXN4WFNzeEtTcGpXekpkT2l0ald6SmRMR1FtSmloa0xuVnVhWFE5YWl4a0xuTjBZWEowUFdzc1pDNWxibVE5WlNrcExHVjlkbUZ5SUdkaFBYdDlPMloxYm1OMGFXOXVJR2hoS0dFcGUzWmhjaUJpTEdNOVlTNXZkMjVsY2tSdlkzVnRaVzUwTEdROVlTNXViMlJsVG1GdFpTeGxQV2RoVzJSZE8zSmxkSFZ5YmlCbFAyVTZLR0k5WXk1aWIyUjVMbUZ3Y0dWdVpFTm9hV3hrS0dNdVkzSmxZWFJsUld4bGJXVnVkQ2hrS1Nrc1pUMXlMbU56Y3loaUxGd2laR2x6Y0d4aGVWd2lLU3hpTG5CaGNtVnVkRTV2WkdVdWNtVnRiM1psUTJocGJHUW9ZaWtzWENKdWIyNWxYQ0k5UFQxbEppWW9aVDFjSW1Kc2IyTnJYQ0lwTEdkaFcyUmRQV1VzWlNsOVpuVnVZM1JwYjI0Z2FXRW9ZU3hpS1h0bWIzSW9kbUZ5SUdNc1pDeGxQVnRkTEdZOU1DeG5QV0V1YkdWdVozUm9PMlk4Wnp0bUt5c3BaRDFoVzJaZExHUXVjM1I1YkdVbUppaGpQV1F1YzNSNWJHVXVaR2x6Y0d4aGVTeGlQeWhjSW01dmJtVmNJajA5UFdNbUppaGxXMlpkUFZjdVoyVjBLR1FzWENKa2FYTndiR0Y1WENJcGZIeHVkV3hzTEdWYlpsMThmQ2hrTG5OMGVXeGxMbVJwYzNCc1lYazlYQ0pjSWlrcExGd2lYQ0k5UFQxa0xuTjBlV3hsTG1ScGMzQnNZWGttSm1SaEtHUXBKaVlvWlZ0bVhUMW9ZU2hrS1NrcE9sd2libTl1WlZ3aUlUMDlZeVltS0dWYlpsMDlYQ0p1YjI1bFhDSXNWeTV6WlhRb1pDeGNJbVJwYzNCc1lYbGNJaXhqS1NrcE8yWnZjaWhtUFRBN1pqeG5PMllyS3lsdWRXeHNJVDFsVzJaZEppWW9ZVnRtWFM1emRIbHNaUzVrYVhOd2JHRjVQV1ZiWmwwcE8zSmxkSFZ5YmlCaGZYSXVabTR1WlhoMFpXNWtLSHR6YUc5M09tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHbGhLSFJvYVhNc0lUQXBmU3hvYVdSbE9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHbGhLSFJvYVhNcGZTeDBiMmRuYkdVNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdVhDSmliMjlzWldGdVhDSTlQWFI1Y0dWdlppQmhQMkUvZEdocGN5NXphRzkzS0NrNmRHaHBjeTVvYVdSbEtDazZkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVLQ2w3WkdFb2RHaHBjeWsvY2loMGFHbHpLUzV6YUc5M0tDazZjaWgwYUdsektTNW9hV1JsS0NsOUtYMTlLVHQyWVhJZ2FtRTlMMTRvUHpwamFHVmphMkp2ZUh4eVlXUnBieWtrTDJrc2EyRTlMendvVzJFdGVsMWJYbHhjTDF4Y01ENWNYSGd5TUZ4Y2RGeGNjbHhjYmx4Y1psMHJLUzlwTEd4aFBTOWVKSHhjWEM4b1B6cHFZWFpoZkdWamJXRXBjMk55YVhCMEwya3NiV0U5ZTI5d2RHbHZianBiTVN4Y0lqeHpaV3hsWTNRZ2JYVnNkR2x3YkdVOUoyMTFiSFJwY0d4bEp6NWNJaXhjSWp3dmMyVnNaV04wUGx3aVhTeDBhR1ZoWkRwYk1TeGNJangwWVdKc1pUNWNJaXhjSWp3dmRHRmliR1UrWENKZExHTnZiRHBiTWl4Y0lqeDBZV0pzWlQ0OFkyOXNaM0p2ZFhBK1hDSXNYQ0k4TDJOdmJHZHliM1Z3UGp3dmRHRmliR1UrWENKZExIUnlPbHN5TEZ3aVBIUmhZbXhsUGp4MFltOWtlVDVjSWl4Y0lqd3ZkR0p2WkhrK1BDOTBZV0pzWlQ1Y0lsMHNkR1E2V3pNc1hDSThkR0ZpYkdVK1BIUmliMlI1UGp4MGNqNWNJaXhjSWp3dmRISStQQzkwWW05a2VUNDhMM1JoWW14bFBsd2lYU3hmWkdWbVlYVnNkRHBiTUN4Y0lsd2lMRndpWENKZGZUdHRZUzV2Y0hSbmNtOTFjRDF0WVM1dmNIUnBiMjRzYldFdWRHSnZaSGs5YldFdWRHWnZiM1E5YldFdVkyOXNaM0p2ZFhBOWJXRXVZMkZ3ZEdsdmJqMXRZUzUwYUdWaFpDeHRZUzUwYUQxdFlTNTBaRHRtZFc1amRHbHZiaUJ1WVNoaExHSXBlM1poY2lCak8zSmxkSFZ5YmlCalBWd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJoTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbFAyRXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvWW54OFhDSXFYQ0lwT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQmhMbkYxWlhKNVUyVnNaV04wYjNKQmJHdy9ZUzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLR0o4ZkZ3aUtsd2lLVHBiWFN4MmIybGtJREE5UFQxaWZIeGlKaVpDS0dFc1lpay9jaTV0WlhKblpTaGJZVjBzWXlrNlkzMW1kVzVqZEdsdmJpQnZZU2hoTEdJcGUyWnZjaWgyWVhJZ1l6MHdMR1E5WVM1c1pXNW5kR2c3WXp4a08yTXJLeWxYTG5ObGRDaGhXMk5kTEZ3aVoyeHZZbUZzUlhaaGJGd2lMQ0ZpZkh4WExtZGxkQ2hpVzJOZExGd2laMnh2WW1Gc1JYWmhiRndpS1NsOWRtRnlJSEJoUFM4OGZDWWpQMXhjZHlzN0x6dG1kVzVqZEdsdmJpQnhZU2hoTEdJc1l5eGtMR1VwZTJadmNpaDJZWElnWml4bkxHZ3NhU3hxTEdzc2JEMWlMbU55WldGMFpVUnZZM1Z0Wlc1MFJuSmhaMjFsYm5Rb0tTeHRQVnRkTEc0OU1DeHZQV0V1YkdWdVozUm9PMjQ4Ynp0dUt5c3BhV1lvWmoxaFcyNWRMR1o4ZkRBOVBUMW1LV2xtS0Z3aWIySnFaV04wWENJOVBUMXlMblI1Y0dVb1ppa3BjaTV0WlhKblpTaHRMR1l1Ym05a1pWUjVjR1UvVzJaZE9tWXBPMlZzYzJVZ2FXWW9jR0V1ZEdWemRDaG1LU2w3WnoxbmZIeHNMbUZ3Y0dWdVpFTm9hV3hrS0dJdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1ScGRsd2lLU2tzYUQwb2EyRXVaWGhsWXlobUtYeDhXMXdpWENJc1hDSmNJbDBwV3pGZExuUnZURzkzWlhKRFlYTmxLQ2tzYVQxdFlWdG9YWHg4YldFdVgyUmxabUYxYkhRc1p5NXBibTVsY2toVVRVdzlhVnN4WFN0eUxtaDBiV3hRY21WbWFXeDBaWElvWmlrcmFWc3lYU3hyUFdsYk1GMDdkMmhwYkdVb2F5MHRLV2M5Wnk1c1lYTjBRMmhwYkdRN2NpNXRaWEpuWlNodExHY3VZMmhwYkdST2IyUmxjeWtzWnoxc0xtWnBjbk4wUTJocGJHUXNaeTUwWlhoMFEyOXVkR1Z1ZEQxY0lsd2lmV1ZzYzJVZ2JTNXdkWE5vS0dJdVkzSmxZWFJsVkdWNGRFNXZaR1VvWmlrcE8yd3VkR1Y0ZEVOdmJuUmxiblE5WENKY0lpeHVQVEE3ZDJocGJHVW9aajF0VzI0cksxMHBhV1lvWkNZbWNpNXBia0Z5Y21GNUtHWXNaQ2srTFRFcFpTWW1aUzV3ZFhOb0tHWXBPMlZzYzJVZ2FXWW9hajF5TG1OdmJuUmhhVzV6S0dZdWIzZHVaWEpFYjJOMWJXVnVkQ3htS1N4blBXNWhLR3d1WVhCd1pXNWtRMmhwYkdRb1ppa3NYQ0p6WTNKcGNIUmNJaWtzYWlZbWIyRW9aeWtzWXlsN2F6MHdPM2RvYVd4bEtHWTlaMXRyS3l0ZEtXeGhMblJsYzNRb1ppNTBlWEJsZkh4Y0lsd2lLU1ltWXk1d2RYTm9LR1lwZlhKbGRIVnliaUJzZlNGbWRXNWpkR2x2YmlncGUzWmhjaUJoUFdRdVkzSmxZWFJsUkc5amRXMWxiblJHY21GbmJXVnVkQ2dwTEdJOVlTNWhjSEJsYm1SRGFHbHNaQ2hrTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0prYVhaY0lpa3BMR005WkM1amNtVmhkR1ZGYkdWdFpXNTBLRndpYVc1d2RYUmNJaWs3WXk1elpYUkJkSFJ5YVdKMWRHVW9YQ0owZVhCbFhDSXNYQ0p5WVdScGIxd2lLU3hqTG5ObGRFRjBkSEpwWW5WMFpTaGNJbU5vWldOclpXUmNJaXhjSW1Ob1pXTnJaV1JjSWlrc1l5NXpaWFJCZEhSeWFXSjFkR1VvWENKdVlXMWxYQ0lzWENKMFhDSXBMR0l1WVhCd1pXNWtRMmhwYkdRb1l5a3NieTVqYUdWamEwTnNiMjVsUFdJdVkyeHZibVZPYjJSbEtDRXdLUzVqYkc5dVpVNXZaR1VvSVRBcExteGhjM1JEYUdsc1pDNWphR1ZqYTJWa0xHSXVhVzV1WlhKSVZFMU1QVndpUEhSbGVIUmhjbVZoUG5nOEwzUmxlSFJoY21WaFBsd2lMRzh1Ym05RGJHOXVaVU5vWldOclpXUTlJU0ZpTG1Oc2IyNWxUbTlrWlNnaE1Da3ViR0Z6ZEVOb2FXeGtMbVJsWm1GMWJIUldZV3gxWlgwb0tUdDJZWElnY21FOVpDNWtiMk4xYldWdWRFVnNaVzFsYm5Rc2MyRTlMMTVyWlhrdkxIUmhQUzllS0Q4NmJXOTFjMlY4Y0c5cGJuUmxjbnhqYjI1MFpYaDBiV1Z1ZFh4a2NtRm5mR1J5YjNBcGZHTnNhV05yTHl4MVlUMHZYaWhiWGk1ZEtpa29QenBjWEM0b0xpc3BmQ2t2TzJaMWJtTjBhVzl1SUhaaEtDbDdjbVYwZFhKdUlUQjlablZ1WTNScGIyNGdkMkVvS1h0eVpYUjFjbTRoTVgxbWRXNWpkR2x2YmlCNFlTZ3BlM1J5ZVh0eVpYUjFjbTRnWkM1aFkzUnBkbVZGYkdWdFpXNTBmV05oZEdOb0tHRXBlMzE5Wm5WdVkzUnBiMjRnZVdFb1lTeGlMR01zWkN4bExHWXBlM1poY2lCbkxHZzdhV1lvWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUdJcGUxd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQmpKaVlvWkQxa2ZIeGpMR005ZG05cFpDQXdLVHRtYjNJb2FDQnBiaUJpS1hsaEtHRXNhQ3hqTEdRc1lsdG9YU3htS1R0eVpYUjFjbTRnWVgxcFppaHVkV3hzUFQxa0ppWnVkV3hzUFQxbFB5aGxQV01zWkQxalBYWnZhV1FnTUNrNmJuVnNiRDA5WlNZbUtGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmpQeWhsUFdRc1pEMTJiMmxrSURBcE9paGxQV1FzWkQxakxHTTlkbTlwWkNBd0tTa3NaVDA5UFNFeEtXVTlkMkU3Wld4elpTQnBaaWdoWlNseVpYUjFjbTRnWVR0eVpYUjFjbTRnTVQwOVBXWW1KaWhuUFdVc1pUMW1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdjaWdwTG05bVppaGhLU3huTG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektYMHNaUzVuZFdsa1BXY3VaM1ZwWkh4OEtHY3VaM1ZwWkQxeUxtZDFhV1FyS3lrcExHRXVaV0ZqYUNobWRXNWpkR2x2YmlncGUzSXVaWFpsYm5RdVlXUmtLSFJvYVhNc1lpeGxMR1FzWXlsOUtYMXlMbVYyWlc1MFBYdG5iRzlpWVd3NmUzMHNZV1JrT21aMWJtTjBhVzl1S0dFc1lpeGpMR1FzWlNsN2RtRnlJR1lzWnl4b0xHa3NhaXhyTEd3c2JTeHVMRzhzY0N4eFBWY3VaMlYwS0dFcE8ybG1LSEVwZTJNdWFHRnVaR3hsY2lZbUtHWTlZeXhqUFdZdWFHRnVaR3hsY2l4bFBXWXVjMlZzWldOMGIzSXBMR1VtSm5JdVptbHVaQzV0WVhSamFHVnpVMlZzWldOMGIzSW9jbUVzWlNrc1l5NW5kV2xrZkh3b1l5NW5kV2xrUFhJdVozVnBaQ3NyS1N3b2FUMXhMbVYyWlc1MGN5bDhmQ2hwUFhFdVpYWmxiblJ6UFh0OUtTd29aejF4TG1oaGJtUnNaU2w4ZkNoblBYRXVhR0Z1Wkd4bFBXWjFibU4wYVc5dUtHSXBlM0psZEhWeWJsd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJ5SmlaeUxtVjJaVzUwTG5SeWFXZG5aWEpsWkNFOVBXSXVkSGx3WlQ5eUxtVjJaVzUwTG1ScGMzQmhkR05vTG1Gd2NHeDVLR0VzWVhKbmRXMWxiblJ6S1RwMmIybGtJREI5S1N4aVBTaGlmSHhjSWx3aUtTNXRZWFJqYUNoTUtYeDhXMXdpWENKZExHbzlZaTVzWlc1bmRHZzdkMmhwYkdVb2FpMHRLV2c5ZFdFdVpYaGxZeWhpVzJwZEtYeDhXMTBzYmoxd1BXaGJNVjBzYnowb2FGc3lYWHg4WENKY0lpa3VjM0JzYVhRb1hDSXVYQ0lwTG5OdmNuUW9LU3h1SmlZb2JEMXlMbVYyWlc1MExuTndaV05wWVd4YmJsMThmSHQ5TEc0OUtHVS9iQzVrWld4bFoyRjBaVlI1Y0dVNmJDNWlhVzVrVkhsd1pTbDhmRzRzYkQxeUxtVjJaVzUwTG5Od1pXTnBZV3hiYmwxOGZIdDlMR3M5Y2k1bGVIUmxibVFvZTNSNWNHVTZiaXh2Y21sblZIbHdaVHB3TEdSaGRHRTZaQ3hvWVc1a2JHVnlPbU1zWjNWcFpEcGpMbWQxYVdRc2MyVnNaV04wYjNJNlpTeHVaV1ZrYzBOdmJuUmxlSFE2WlNZbWNpNWxlSEJ5TG0xaGRHTm9MbTVsWldSelEyOXVkR1Y0ZEM1MFpYTjBLR1VwTEc1aGJXVnpjR0ZqWlRwdkxtcHZhVzRvWENJdVhDSXBmU3htS1N3b2JUMXBXMjVkS1h4OEtHMDlhVnR1WFQxYlhTeHRMbVJsYkdWbllYUmxRMjkxYm5ROU1DeHNMbk5sZEhWd0ppWnNMbk5sZEhWd0xtTmhiR3dvWVN4a0xHOHNaeWtoUFQwaE1YeDhZUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlKaVpoTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvYml4bktTa3NiQzVoWkdRbUppaHNMbUZrWkM1allXeHNLR0VzYXlrc2F5NW9ZVzVrYkdWeUxtZDFhV1I4ZkNockxtaGhibVJzWlhJdVozVnBaRDFqTG1kMWFXUXBLU3hsUDIwdWMzQnNhV05sS0cwdVpHVnNaV2RoZEdWRGIzVnVkQ3NyTERBc2F5azZiUzV3ZFhOb0tHc3BMSEl1WlhabGJuUXVaMnh2WW1Gc1cyNWRQU0V3S1gxOUxISmxiVzkyWlRwbWRXNWpkR2x2YmloaExHSXNZeXhrTEdVcGUzWmhjaUJtTEdjc2FDeHBMR29zYXl4c0xHMHNiaXh2TEhBc2NUMVhMbWhoYzBSaGRHRW9ZU2ttSmxjdVoyVjBLR0VwTzJsbUtIRW1KaWhwUFhFdVpYWmxiblJ6S1NsN1lqMG9Zbng4WENKY0lpa3ViV0YwWTJnb1RDbDhmRnRjSWx3aVhTeHFQV0l1YkdWdVozUm9PM2RvYVd4bEtHb3RMU2xwWmlob1BYVmhMbVY0WldNb1lsdHFYU2w4ZkZ0ZExHNDljRDFvV3pGZExHODlLR2hiTWwxOGZGd2lYQ0lwTG5Od2JHbDBLRndpTGx3aUtTNXpiM0owS0Nrc2JpbDdiRDF5TG1WMlpXNTBMbk53WldOcFlXeGJibDE4Zkh0OUxHNDlLR1EvYkM1a1pXeGxaMkYwWlZSNWNHVTZiQzVpYVc1a1ZIbHdaU2w4Zkc0c2JUMXBXMjVkZkh4YlhTeG9QV2hiTWwwbUptNWxkeUJTWldkRmVIQW9YQ0lvWG54Y1hGeGNMaWxjSWl0dkxtcHZhVzRvWENKY1hGeGNMaWcvT2k0cVhGeGNYQzU4S1Z3aUtTdGNJaWhjWEZ4Y0xud2tLVndpS1N4blBXWTliUzVzWlc1bmRHZzdkMmhwYkdVb1ppMHRLV3M5YlZ0bVhTd2haU1ltY0NFOVBXc3ViM0pwWjFSNWNHVjhmR01tSm1NdVozVnBaQ0U5UFdzdVozVnBaSHg4YUNZbUlXZ3VkR1Z6ZENockxtNWhiV1Z6Y0dGalpTbDhmR1FtSm1RaFBUMXJMbk5sYkdWamRHOXlKaVlvWENJcUtsd2lJVDA5Wkh4OElXc3VjMlZzWldOMGIzSXBmSHdvYlM1emNHeHBZMlVvWml3eEtTeHJMbk5sYkdWamRHOXlKaVp0TG1SbGJHVm5ZWFJsUTI5MWJuUXRMU3hzTG5KbGJXOTJaU1ltYkM1eVpXMXZkbVV1WTJGc2JDaGhMR3NwS1R0bkppWWhiUzVzWlc1bmRHZ21KaWhzTG5SbFlYSmtiM2R1Smlac0xuUmxZWEprYjNkdUxtTmhiR3dvWVN4dkxIRXVhR0Z1Wkd4bEtTRTlQU0V4Zkh4eUxuSmxiVzkyWlVWMlpXNTBLR0VzYml4eExtaGhibVJzWlNrc1pHVnNaWFJsSUdsYmJsMHBmV1ZzYzJVZ1ptOXlLRzRnYVc0Z2FTbHlMbVYyWlc1MExuSmxiVzkyWlNoaExHNHJZbHRxWFN4akxHUXNJVEFwTzNJdWFYTkZiWEIwZVU5aWFtVmpkQ2hwS1NZbVZ5NXlaVzF2ZG1Vb1lTeGNJbWhoYm1Sc1pTQmxkbVZ1ZEhOY0lpbDlmU3hrYVhOd1lYUmphRHBtZFc1amRHbHZiaWhoS1h0MllYSWdZajF5TG1WMlpXNTBMbVpwZUNoaEtTeGpMR1FzWlN4bUxHY3NhQ3hwUFc1bGR5QkJjbkpoZVNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1N4cVBTaFhMbWRsZENoMGFHbHpMRndpWlhabGJuUnpYQ0lwZkh4N2ZTbGJZaTUwZVhCbFhYeDhXMTBzYXoxeUxtVjJaVzUwTG5Od1pXTnBZV3hiWWk1MGVYQmxYWHg4ZTMwN1ptOXlLR2xiTUYwOVlpeGpQVEU3WXp4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTzJNckt5bHBXMk5kUFdGeVozVnRaVzUwYzF0alhUdHBaaWhpTG1SbGJHVm5ZWFJsVkdGeVoyVjBQWFJvYVhNc0lXc3VjSEpsUkdsemNHRjBZMmg4ZkdzdWNISmxSR2x6Y0dGMFkyZ3VZMkZzYkNoMGFHbHpMR0lwSVQwOUlURXBlMmc5Y2k1bGRtVnVkQzVvWVc1a2JHVnljeTVqWVd4c0tIUm9hWE1zWWl4cUtTeGpQVEE3ZDJocGJHVW9LR1k5YUZ0akt5dGRLU1ltSVdJdWFYTlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUW9LU2w3WWk1amRYSnlaVzUwVkdGeVoyVjBQV1l1Wld4bGJTeGtQVEE3ZDJocGJHVW9LR2M5Wmk1b1lXNWtiR1Z5YzF0a0t5dGRLU1ltSVdJdWFYTkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUW9LU2xpTG5KdVlXMWxjM0JoWTJVbUppRmlMbkp1WVcxbGMzQmhZMlV1ZEdWemRDaG5MbTVoYldWemNHRmpaU2w4ZkNoaUxtaGhibVJzWlU5aWFqMW5MR0l1WkdGMFlUMW5MbVJoZEdFc1pUMG9LSEl1WlhabGJuUXVjM0JsWTJsaGJGdG5MbTl5YVdkVWVYQmxYWHg4ZTMwcExtaGhibVJzWlh4OFp5NW9ZVzVrYkdWeUtTNWhjSEJzZVNobUxtVnNaVzBzYVNrc2RtOXBaQ0F3SVQwOVpTWW1LR0l1Y21WemRXeDBQV1VwUFQwOUlURW1KaWhpTG5CeVpYWmxiblJFWldaaGRXeDBLQ2tzWWk1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1NrcGZYSmxkSFZ5YmlCckxuQnZjM1JFYVhOd1lYUmphQ1ltYXk1d2IzTjBSR2x6Y0dGMFkyZ3VZMkZzYkNoMGFHbHpMR0lwTEdJdWNtVnpkV3gwZlgwc2FHRnVaR3hsY25NNlpuVnVZM1JwYjI0b1lTeGlLWHQyWVhJZ1l5eGtMR1VzWml4bkxHZzlXMTBzYVQxaUxtUmxiR1ZuWVhSbFEyOTFiblFzYWoxaExuUmhjbWRsZER0cFppaHBKaVpxTG01dlpHVlVlWEJsSmlZaEtGd2lZMnhwWTJ0Y0lqMDlQV0V1ZEhsd1pTWW1ZUzVpZFhSMGIyNCtQVEVwS1dadmNpZzdhaUU5UFhSb2FYTTdhajFxTG5CaGNtVnVkRTV2WkdWOGZIUm9hWE1wYVdZb01UMDlQV291Ym05a1pWUjVjR1VtSmloY0ltTnNhV05yWENJaFBUMWhMblI1Y0dWOGZHb3VaR2x6WVdKc1pXUWhQVDBoTUNrcGUyWnZjaWhtUFZ0ZExHYzllMzBzWXowd08yTThhVHRqS3lzcFpEMWlXMk5kTEdVOVpDNXpaV3hsWTNSdmNpdGNJaUJjSWl4MmIybGtJREE5UFQxblcyVmRKaVlvWjF0bFhUMWtMbTVsWldSelEyOXVkR1Y0ZEQ5eUtHVXNkR2hwY3lrdWFXNWtaWGdvYWlrK0xURTZjaTVtYVc1a0tHVXNkR2hwY3l4dWRXeHNMRnRxWFNrdWJHVnVaM1JvS1N4blcyVmRKaVptTG5CMWMyZ29aQ2s3Wmk1c1pXNW5kR2dtSm1ndWNIVnphQ2g3Wld4bGJUcHFMR2hoYm1Sc1pYSnpPbVo5S1gxeVpYUjFjbTRnYWoxMGFHbHpMR2s4WWk1c1pXNW5kR2dtSm1ndWNIVnphQ2g3Wld4bGJUcHFMR2hoYm1Sc1pYSnpPbUl1YzJ4cFkyVW9hU2w5S1N4b2ZTeGhaR1JRY205d09tWjFibU4wYVc5dUtHRXNZaWw3VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtISXVSWFpsYm5RdWNISnZkRzkwZVhCbExHRXNlMlZ1ZFcxbGNtRmliR1U2SVRBc1kyOXVabWxuZFhKaFlteGxPaUV3TEdkbGREcHlMbWx6Um5WdVkzUnBiMjRvWWlrL1puVnVZM1JwYjI0b0tYdHBaaWgwYUdsekxtOXlhV2RwYm1Gc1JYWmxiblFwY21WMGRYSnVJR0lvZEdocGN5NXZjbWxuYVc1aGJFVjJaVzUwS1gwNlpuVnVZM1JwYjI0b0tYdHBaaWgwYUdsekxtOXlhV2RwYm1Gc1JYWmxiblFwY21WMGRYSnVJSFJvYVhNdWIzSnBaMmx1WVd4RmRtVnVkRnRoWFgwc2MyVjBPbVoxYm1OMGFXOXVLR0lwZTA5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBhR2x6TEdFc2UyVnVkVzFsY21GaWJHVTZJVEFzWTI5dVptbG5kWEpoWW14bE9pRXdMSGR5YVhSaFlteGxPaUV3TEhaaGJIVmxPbUo5S1gxOUtYMHNabWw0T21aMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCaFczSXVaWGh3WVc1a2IxMC9ZVHB1WlhjZ2NpNUZkbVZ1ZENoaEtYMHNjM0JsWTJsaGJEcDdiRzloWkRwN2JtOUNkV0ppYkdVNklUQjlMR1p2WTNWek9udDBjbWxuWjJWeU9tWjFibU4wYVc5dUtDbDdhV1lvZEdocGN5RTlQWGhoS0NrbUpuUm9hWE11Wm05amRYTXBjbVYwZFhKdUlIUm9hWE11Wm05amRYTW9LU3doTVgwc1pHVnNaV2RoZEdWVWVYQmxPbHdpWm05amRYTnBibHdpZlN4aWJIVnlPbnQwY21sbloyVnlPbVoxYm1OMGFXOXVLQ2w3YVdZb2RHaHBjejA5UFhoaEtDa21KblJvYVhNdVlteDFjaWx5WlhSMWNtNGdkR2hwY3k1aWJIVnlLQ2tzSVRGOUxHUmxiR1ZuWVhSbFZIbHdaVHBjSW1adlkzVnpiM1YwWENKOUxHTnNhV05yT250MGNtbG5aMlZ5T21aMWJtTjBhVzl1S0NsN2FXWW9YQ0pqYUdWamEySnZlRndpUFQwOWRHaHBjeTUwZVhCbEppWjBhR2x6TG1Oc2FXTnJKaVpDS0hSb2FYTXNYQ0pwYm5CMWRGd2lLU2x5WlhSMWNtNGdkR2hwY3k1amJHbGpheWdwTENFeGZTeGZaR1ZtWVhWc2REcG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdRaWhoTG5SaGNtZGxkQ3hjSW1GY0lpbDlmU3hpWldadmNtVjFibXh2WVdRNmUzQnZjM1JFYVhOd1lYUmphRHBtZFc1amRHbHZiaWhoS1h0MmIybGtJREFoUFQxaExuSmxjM1ZzZENZbVlTNXZjbWxuYVc1aGJFVjJaVzUwSmlZb1lTNXZjbWxuYVc1aGJFVjJaVzUwTG5KbGRIVnlibFpoYkhWbFBXRXVjbVZ6ZFd4MEtYMTlmWDBzY2k1eVpXMXZkbVZGZG1WdWREMW1kVzVqZEdsdmJpaGhMR0lzWXlsN1lTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlKaVpoTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb1lpeGpLWDBzY2k1RmRtVnVkRDFtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCMGFHbHpJR2x1YzNSaGJtTmxiMllnY2k1RmRtVnVkRDhvWVNZbVlTNTBlWEJsUHloMGFHbHpMbTl5YVdkcGJtRnNSWFpsYm5ROVlTeDBhR2x6TG5SNWNHVTlZUzUwZVhCbExIUm9hWE11YVhORVpXWmhkV3gwVUhKbGRtVnVkR1ZrUFdFdVpHVm1ZWFZzZEZCeVpYWmxiblJsWkh4OGRtOXBaQ0F3UFQwOVlTNWtaV1poZFd4MFVISmxkbVZ1ZEdWa0ppWmhMbkpsZEhWeWJsWmhiSFZsUFQwOUlURS9kbUU2ZDJFc2RHaHBjeTUwWVhKblpYUTlZUzUwWVhKblpYUW1Kak05UFQxaExuUmhjbWRsZEM1dWIyUmxWSGx3WlQ5aExuUmhjbWRsZEM1d1lYSmxiblJPYjJSbE9tRXVkR0Z5WjJWMExIUm9hWE11WTNWeWNtVnVkRlJoY21kbGREMWhMbU4xY25KbGJuUlVZWEpuWlhRc2RHaHBjeTV5Wld4aGRHVmtWR0Z5WjJWMFBXRXVjbVZzWVhSbFpGUmhjbWRsZENrNmRHaHBjeTUwZVhCbFBXRXNZaVltY2k1bGVIUmxibVFvZEdocGN5eGlLU3gwYUdsekxuUnBiV1ZUZEdGdGNEMWhKaVpoTG5ScGJXVlRkR0Z0Y0h4OGNpNXViM2NvS1N4MmIybGtLSFJvYVhOYmNpNWxlSEJoYm1SdlhUMGhNQ2twT201bGR5QnlMa1YyWlc1MEtHRXNZaWw5TEhJdVJYWmxiblF1Y0hKdmRHOTBlWEJsUFh0amIyNXpkSEoxWTNSdmNqcHlMa1YyWlc1MExHbHpSR1ZtWVhWc2RGQnlaWFpsYm5SbFpEcDNZU3hwYzFCeWIzQmhaMkYwYVc5dVUzUnZjSEJsWkRwM1lTeHBjMGx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1VTNSdmNIQmxaRHAzWVN4cGMxTnBiWFZzWVhSbFpEb2hNU3h3Y21WMlpXNTBSR1ZtWVhWc2REcG1kVzVqZEdsdmJpZ3BlM1poY2lCaFBYUm9hWE11YjNKcFoybHVZV3hGZG1WdWREdDBhR2x6TG1selJHVm1ZWFZzZEZCeVpYWmxiblJsWkQxMllTeGhKaVloZEdocGN5NXBjMU5wYlhWc1lYUmxaQ1ltWVM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwZlN4emRHOXdVSEp2Y0dGbllYUnBiMjQ2Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDEwYUdsekxtOXlhV2RwYm1Gc1JYWmxiblE3ZEdocGN5NXBjMUJ5YjNCaFoyRjBhVzl1VTNSdmNIQmxaRDEyWVN4aEppWWhkR2hwY3k1cGMxTnBiWFZzWVhSbFpDWW1ZUzV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LWDBzYzNSdmNFbHRiV1ZrYVdGMFpWQnliM0JoWjJGMGFXOXVPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlkR2hwY3k1dmNtbG5hVzVoYkVWMlpXNTBPM1JvYVhNdWFYTkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUTlkbUVzWVNZbUlYUm9hWE11YVhOVGFXMTFiR0YwWldRbUptRXVjM1J2Y0VsdGJXVmthV0YwWlZCeWIzQmhaMkYwYVc5dUtDa3NkR2hwY3k1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1gxOUxISXVaV0ZqYUNoN1lXeDBTMlY1T2lFd0xHSjFZbUpzWlhNNklUQXNZMkZ1WTJWc1lXSnNaVG9oTUN4amFHRnVaMlZrVkc5MVkyaGxjem9oTUN4amRISnNTMlY1T2lFd0xHUmxkR0ZwYkRvaE1DeGxkbVZ1ZEZCb1lYTmxPaUV3TEcxbGRHRkxaWGs2SVRBc2NHRm5aVmc2SVRBc2NHRm5aVms2SVRBc2MyaHBablJMWlhrNklUQXNkbWxsZHpvaE1DeGNJbU5vWVhKY0lqb2hNQ3hqYUdGeVEyOWtaVG9oTUN4clpYazZJVEFzYTJWNVEyOWtaVG9oTUN4aWRYUjBiMjQ2SVRBc1luVjBkRzl1Y3pvaE1DeGpiR2xsYm5SWU9pRXdMR05zYVdWdWRGazZJVEFzYjJabWMyVjBXRG9oTUN4dlptWnpaWFJaT2lFd0xIQnZhVzUwWlhKSlpEb2hNQ3h3YjJsdWRHVnlWSGx3WlRvaE1DeHpZM0psWlc1WU9pRXdMSE5qY21WbGJsazZJVEFzZEdGeVoyVjBWRzkxWTJobGN6b2hNQ3gwYjBWc1pXMWxiblE2SVRBc2RHOTFZMmhsY3pvaE1DeDNhR2xqYURwbWRXNWpkR2x2YmloaEtYdDJZWElnWWoxaExtSjFkSFJ2Ymp0eVpYUjFjbTRnYm5Wc2JEMDlZUzUzYUdsamFDWW1jMkV1ZEdWemRDaGhMblI1Y0dVcFAyNTFiR3doUFdFdVkyaGhja052WkdVL1lTNWphR0Z5UTI5a1pUcGhMbXRsZVVOdlpHVTZJV0V1ZDJocFkyZ21Kblp2YVdRZ01DRTlQV0ltSm5SaExuUmxjM1FvWVM1MGVYQmxLVDh4Sm1JL01Ub3lKbUkvTXpvMEptSS9Nam93T21FdWQyaHBZMmg5ZlN4eUxtVjJaVzUwTG1Ga1pGQnliM0FwTEhJdVpXRmphQ2g3Ylc5MWMyVmxiblJsY2pwY0ltMXZkWE5sYjNabGNsd2lMRzF2ZFhObGJHVmhkbVU2WENKdGIzVnpaVzkxZEZ3aUxIQnZhVzUwWlhKbGJuUmxjanBjSW5CdmFXNTBaWEp2ZG1WeVhDSXNjRzlwYm5SbGNteGxZWFpsT2x3aWNHOXBiblJsY205MWRGd2lmU3htZFc1amRHbHZiaWhoTEdJcGUzSXVaWFpsYm5RdWMzQmxZMmxoYkZ0aFhUMTdaR1ZzWldkaGRHVlVlWEJsT21Jc1ltbHVaRlI1Y0dVNllpeG9ZVzVrYkdVNlpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdNc1pEMTBhR2x6TEdVOVlTNXlaV3hoZEdWa1ZHRnlaMlYwTEdZOVlTNW9ZVzVrYkdWUFltbzdjbVYwZFhKdUlHVW1KaWhsUFQwOVpIeDhjaTVqYjI1MFlXbHVjeWhrTEdVcEtYeDhLR0V1ZEhsd1pUMW1MbTl5YVdkVWVYQmxMR005Wmk1b1lXNWtiR1Z5TG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektTeGhMblI1Y0dVOVlpa3NZMzE5ZlNrc2NpNW1iaTVsZUhSbGJtUW9lMjl1T21aMWJtTjBhVzl1S0dFc1lpeGpMR1FwZTNKbGRIVnliaUI1WVNoMGFHbHpMR0VzWWl4akxHUXBmU3h2Ym1VNlpuVnVZM1JwYjI0b1lTeGlMR01zWkNsN2NtVjBkWEp1SUhsaEtIUm9hWE1zWVN4aUxHTXNaQ3d4S1gwc2IyWm1PbVoxYm1OMGFXOXVLR0VzWWl4aktYdDJZWElnWkN4bE8ybG1LR0VtSm1FdWNISmxkbVZ1ZEVSbFptRjFiSFFtSm1FdWFHRnVaR3hsVDJKcUtYSmxkSFZ5YmlCa1BXRXVhR0Z1Wkd4bFQySnFMSElvWVM1a1pXeGxaMkYwWlZSaGNtZGxkQ2t1YjJabUtHUXVibUZ0WlhOd1lXTmxQMlF1YjNKcFoxUjVjR1VyWENJdVhDSXJaQzV1WVcxbGMzQmhZMlU2WkM1dmNtbG5WSGx3WlN4a0xuTmxiR1ZqZEc5eUxHUXVhR0Z1Wkd4bGNpa3NkR2hwY3p0cFppaGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdZU2w3Wm05eUtHVWdhVzRnWVNsMGFHbHpMbTltWmlobExHSXNZVnRsWFNrN2NtVjBkWEp1SUhSb2FYTjljbVYwZFhKdUlHSWhQVDBoTVNZbVhDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdZbng4S0dNOVlpeGlQWFp2YVdRZ01Da3NZejA5UFNFeEppWW9ZejEzWVNrc2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtDbDdjaTVsZG1WdWRDNXlaVzF2ZG1Vb2RHaHBjeXhoTEdNc1lpbDlLWDE5S1R0MllYSWdlbUU5THp3b1B5RmhjbVZoZkdKeWZHTnZiSHhsYldKbFpIeG9jbnhwYldkOGFXNXdkWFI4YkdsdWEzeHRaWFJoZkhCaGNtRnRLU2dvVzJFdGVsMWJYbHhjTDF4Y01ENWNYSGd5TUZ4Y2RGeGNjbHhjYmx4Y1psMHFLVnRlUGwwcUtWeGNMejR2WjJrc1FXRTlMenh6WTNKcGNIUjhQSE4wZVd4bGZEeHNhVzVyTDJrc1FtRTlMMk5vWldOclpXUmNYSE1xS0Q4NlcxNDlYWHc5WEZ4ektpNWphR1ZqYTJWa0xpa3ZhU3hEWVQwdlhuUnlkV1ZjWEM4b0xpb3BMeXhFWVQwdlhseGNjeW84SVNnL09seGNXME5FUVZSQlhGeGJmQzB0S1h3b1B6cGNYRjFjWEYxOExTMHBQbHhjY3lva0wyYzdablZ1WTNScGIyNGdSV0VvWVN4aUtYdHlaWFIxY200Z1FpaGhMRndpZEdGaWJHVmNJaWttSmtJb01URWhQVDFpTG01dlpHVlVlWEJsUDJJNllpNW1hWEp6ZEVOb2FXeGtMRndpZEhKY0lpay9jaWhjSWo1MFltOWtlVndpTEdFcFd6QmRmSHhoT21GOVpuVnVZM1JwYjI0Z1JtRW9ZU2w3Y21WMGRYSnVJR0V1ZEhsd1pUMG9iblZzYkNFOVBXRXVaMlYwUVhSMGNtbGlkWFJsS0Z3aWRIbHdaVndpS1NrclhDSXZYQ0lyWVM1MGVYQmxMR0Y5Wm5WdVkzUnBiMjRnUjJFb1lTbDdkbUZ5SUdJOVEyRXVaWGhsWXloaExuUjVjR1VwTzNKbGRIVnliaUJpUDJFdWRIbHdaVDFpV3pGZE9tRXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtGd2lkSGx3WlZ3aUtTeGhmV1oxYm1OMGFXOXVJRWhoS0dFc1lpbDdkbUZ5SUdNc1pDeGxMR1lzWnl4b0xHa3NhanRwWmlneFBUMDlZaTV1YjJSbFZIbHdaU2w3YVdZb1Z5NW9ZWE5FWVhSaEtHRXBKaVlvWmoxWExtRmpZMlZ6Y3loaEtTeG5QVmN1YzJWMEtHSXNaaWtzYWoxbUxtVjJaVzUwY3lrcGUyUmxiR1YwWlNCbkxtaGhibVJzWlN4bkxtVjJaVzUwY3oxN2ZUdG1iM0lvWlNCcGJpQnFLV1p2Y2loalBUQXNaRDFxVzJWZExteGxibWQwYUR0alBHUTdZeXNyS1hJdVpYWmxiblF1WVdSa0tHSXNaU3hxVzJWZFcyTmRLWDFZTG1oaGMwUmhkR0VvWVNrbUppaG9QVmd1WVdOalpYTnpLR0VwTEdrOWNpNWxlSFJsYm1Rb2UzMHNhQ2tzV0M1elpYUW9ZaXhwS1NsOWZXWjFibU4wYVc5dUlFbGhLR0VzWWlsN2RtRnlJR005WWk1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BPMXdpYVc1d2RYUmNJajA5UFdNbUptcGhMblJsYzNRb1lTNTBlWEJsS1Q5aUxtTm9aV05yWldROVlTNWphR1ZqYTJWa09sd2lhVzV3ZFhSY0lpRTlQV01tSmx3aWRHVjRkR0Z5WldGY0lpRTlQV044ZkNoaUxtUmxabUYxYkhSV1lXeDFaVDFoTG1SbFptRjFiSFJXWVd4MVpTbDlablZ1WTNScGIyNGdTbUVvWVN4aUxHTXNaQ2w3WWoxbkxtRndjR3g1S0Z0ZExHSXBPM1poY2lCbExHWXNhQ3hwTEdvc2F5eHNQVEFzYlQxaExteGxibWQwYUN4dVBXMHRNU3h4UFdKYk1GMHNjejF5TG1selJuVnVZM1JwYjI0b2NTazdhV1lvYzN4OGJUNHhKaVpjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnY1NZbUlXOHVZMmhsWTJ0RGJHOXVaU1ltUW1FdWRHVnpkQ2h4S1NseVpYUjFjbTRnWVM1bFlXTm9LR1oxYm1OMGFXOXVLR1VwZTNaaGNpQm1QV0V1WlhFb1pTazdjeVltS0dKYk1GMDljUzVqWVd4c0tIUm9hWE1zWlN4bUxtaDBiV3dvS1NrcExFcGhLR1lzWWl4akxHUXBmU2s3YVdZb2JTWW1LR1U5Y1dFb1lpeGhXekJkTG05M2JtVnlSRzlqZFcxbGJuUXNJVEVzWVN4a0tTeG1QV1V1Wm1seWMzUkRhR2xzWkN3eFBUMDlaUzVqYUdsc1pFNXZaR1Z6TG14bGJtZDBhQ1ltS0dVOVppa3Nabng4WkNrcGUyWnZjaWhvUFhJdWJXRndLRzVoS0dVc1hDSnpZM0pwY0hSY0lpa3NSbUVwTEdrOWFDNXNaVzVuZEdnN2JEeHRPMndyS3lscVBXVXNiQ0U5UFc0bUppaHFQWEl1WTJ4dmJtVW9haXdoTUN3aE1Da3NhU1ltY2k1dFpYSm5aU2hvTEc1aEtHb3NYQ0p6WTNKcGNIUmNJaWtwS1N4akxtTmhiR3dvWVZ0c1hTeHFMR3dwTzJsbUtHa3BabTl5S0dzOWFGdG9MbXhsYm1kMGFDMHhYUzV2ZDI1bGNrUnZZM1Z0Wlc1MExISXViV0Z3S0dnc1IyRXBMR3c5TUR0c1BHazdiQ3NyS1dvOWFGdHNYU3hzWVM1MFpYTjBLR291ZEhsd1pYeDhYQ0pjSWlrbUppRlhMbUZqWTJWemN5aHFMRndpWjJ4dlltRnNSWFpoYkZ3aUtTWW1jaTVqYjI1MFlXbHVjeWhyTEdvcEppWW9haTV6Y21NL2NpNWZaWFpoYkZWeWJDWW1jaTVmWlhaaGJGVnliQ2hxTG5OeVl5azZjQ2hxTG5SbGVIUkRiMjUwWlc1MExuSmxjR3hoWTJVb1JHRXNYQ0pjSWlrc2F5a3BmWEpsZEhWeWJpQmhmV1oxYm1OMGFXOXVJRXRoS0dFc1lpeGpLWHRtYjNJb2RtRnlJR1FzWlQxaVAzSXVabWxzZEdWeUtHSXNZU2s2WVN4bVBUQTdiblZzYkNFOUtHUTlaVnRtWFNrN1ppc3JLV044ZkRFaFBUMWtMbTV2WkdWVWVYQmxmSHh5TG1Oc1pXRnVSR0YwWVNodVlTaGtLU2tzWkM1d1lYSmxiblJPYjJSbEppWW9ZeVltY2k1amIyNTBZV2x1Y3loa0xtOTNibVZ5Ukc5amRXMWxiblFzWkNrbUptOWhLRzVoS0dRc1hDSnpZM0pwY0hSY0lpa3BMR1F1Y0dGeVpXNTBUbTlrWlM1eVpXMXZkbVZEYUdsc1pDaGtLU2s3Y21WMGRYSnVJR0Y5Y2k1bGVIUmxibVFvZTJoMGJXeFFjbVZtYVd4MFpYSTZablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJR0V1Y21Wd2JHRmpaU2g2WVN4Y0lqd2tNVDQ4THlReVBsd2lLWDBzWTJ4dmJtVTZablZ1WTNScGIyNG9ZU3hpTEdNcGUzWmhjaUJrTEdVc1ppeG5MR2c5WVM1amJHOXVaVTV2WkdVb0lUQXBMR2s5Y2k1amIyNTBZV2x1Y3loaExtOTNibVZ5Ukc5amRXMWxiblFzWVNrN2FXWW9JU2h2TG01dlEyeHZibVZEYUdWamEyVmtmSHd4SVQwOVlTNXViMlJsVkhsd1pTWW1NVEVoUFQxaExtNXZaR1ZVZVhCbGZIeHlMbWx6V0UxTVJHOWpLR0VwS1NsbWIzSW9aejF1WVNob0tTeG1QVzVoS0dFcExHUTlNQ3hsUFdZdWJHVnVaM1JvTzJROFpUdGtLeXNwU1dFb1psdGtYU3huVzJSZEtUdHBaaWhpS1dsbUtHTXBabTl5S0dZOVpueDhibUVvWVNrc1p6MW5mSHh1WVNob0tTeGtQVEFzWlQxbUxteGxibWQwYUR0a1BHVTdaQ3NyS1VoaEtHWmJaRjBzWjF0a1hTazdaV3h6WlNCSVlTaGhMR2dwTzNKbGRIVnliaUJuUFc1aEtHZ3NYQ0p6WTNKcGNIUmNJaWtzWnk1c1pXNW5kR2crTUNZbWIyRW9aeXdoYVNZbWJtRW9ZU3hjSW5OamNtbHdkRndpS1Nrc2FIMHNZMnhsWVc1RVlYUmhPbVoxYm1OMGFXOXVLR0VwZTJadmNpaDJZWElnWWl4akxHUXNaVDF5TG1WMlpXNTBMbk53WldOcFlXd3NaajB3TzNadmFXUWdNQ0U5UFNoalBXRmJabDBwTzJZckt5bHBaaWhWS0dNcEtYdHBaaWhpUFdOYlZ5NWxlSEJoYm1SdlhTbDdhV1lvWWk1bGRtVnVkSE1wWm05eUtHUWdhVzRnWWk1bGRtVnVkSE1wWlZ0a1hUOXlMbVYyWlc1MExuSmxiVzkyWlNoakxHUXBPbkl1Y21WdGIzWmxSWFpsYm5Rb1l5eGtMR0l1YUdGdVpHeGxLVHRqVzFjdVpYaHdZVzVrYjEwOWRtOXBaQ0F3ZldOYldDNWxlSEJoYm1SdlhTWW1LR05iV0M1bGVIQmhibVJ2WFQxMmIybGtJREFwZlgxOUtTeHlMbVp1TG1WNGRHVnVaQ2g3WkdWMFlXTm9PbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJMWVNoMGFHbHpMR0VzSVRBcGZTeHlaVzF2ZG1VNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlFdGhLSFJvYVhNc1lTbDlMSFJsZUhRNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlGUW9kR2hwY3l4bWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2RtOXBaQ0F3UFQwOVlUOXlMblJsZUhRb2RHaHBjeWs2ZEdocGN5NWxiWEIwZVNncExtVmhZMmdvWm5WdVkzUnBiMjRvS1hzeElUMDlkR2hwY3k1dWIyUmxWSGx3WlNZbU1URWhQVDEwYUdsekxtNXZaR1ZVZVhCbEppWTVJVDA5ZEdocGN5NXViMlJsVkhsd1pYeDhLSFJvYVhNdWRHVjRkRU52Ym5SbGJuUTlZU2w5S1gwc2JuVnNiQ3hoTEdGeVozVnRaVzUwY3k1c1pXNW5kR2dwZlN4aGNIQmxibVE2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnU21Fb2RHaHBjeXhoY21kMWJXVnVkSE1zWm5WdVkzUnBiMjRvWVNsN2FXWW9NVDA5UFhSb2FYTXVibTlrWlZSNWNHVjhmREV4UFQwOWRHaHBjeTV1YjJSbFZIbHdaWHg4T1QwOVBYUm9hWE11Ym05a1pWUjVjR1VwZTNaaGNpQmlQVVZoS0hSb2FYTXNZU2s3WWk1aGNIQmxibVJEYUdsc1pDaGhLWDE5S1gwc2NISmxjR1Z1WkRwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCS1lTaDBhR2x6TEdGeVozVnRaVzUwY3l4bWRXNWpkR2x2YmloaEtYdHBaaWd4UFQwOWRHaHBjeTV1YjJSbFZIbHdaWHg4TVRFOVBUMTBhR2x6TG01dlpHVlVlWEJsZkh3NVBUMDlkR2hwY3k1dWIyUmxWSGx3WlNsN2RtRnlJR0k5UldFb2RHaHBjeXhoS1R0aUxtbHVjMlZ5ZEVKbFptOXlaU2hoTEdJdVptbHljM1JEYUdsc1pDbDlmU2w5TEdKbFptOXlaVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJLWVNoMGFHbHpMR0Z5WjNWdFpXNTBjeXhtZFc1amRHbHZiaWhoS1h0MGFHbHpMbkJoY21WdWRFNXZaR1VtSm5Sb2FYTXVjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb1lTeDBhR2x6S1gwcGZTeGhablJsY2pwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCS1lTaDBhR2x6TEdGeVozVnRaVzUwY3l4bWRXNWpkR2x2YmloaEtYdDBhR2x6TG5CaGNtVnVkRTV2WkdVbUpuUm9hWE11Y0dGeVpXNTBUbTlrWlM1cGJuTmxjblJDWldadmNtVW9ZU3gwYUdsekxtNWxlSFJUYVdKc2FXNW5LWDBwZlN4bGJYQjBlVHBtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnWVN4aVBUQTdiblZzYkNFOUtHRTlkR2hwYzF0aVhTazdZaXNyS1RFOVBUMWhMbTV2WkdWVWVYQmxKaVlvY2k1amJHVmhia1JoZEdFb2JtRW9ZU3doTVNrcExHRXVkR1Y0ZEVOdmJuUmxiblE5WENKY0lpazdjbVYwZFhKdUlIUm9hWE45TEdOc2IyNWxPbVoxYm1OMGFXOXVLR0VzWWlsN2NtVjBkWEp1SUdFOWJuVnNiQ0U5WVNZbVlTeGlQVzUxYkd3OVBXSS9ZVHBpTEhSb2FYTXViV0Z3S0daMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhJdVkyeHZibVVvZEdocGN5eGhMR0lwZlNsOUxHaDBiV3c2Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUZRb2RHaHBjeXhtZFc1amRHbHZiaWhoS1h0MllYSWdZajEwYUdseld6QmRmSHg3ZlN4alBUQXNaRDEwYUdsekxteGxibWQwYUR0cFppaDJiMmxrSURBOVBUMWhKaVl4UFQwOVlpNXViMlJsVkhsd1pTbHlaWFIxY200Z1lpNXBibTVsY2toVVRVdzdhV1lvWENKemRISnBibWRjSWowOWRIbHdaVzltSUdFbUppRkJZUzUwWlhOMEtHRXBKaVloYldGYktHdGhMbVY0WldNb1lTbDhmRnRjSWx3aUxGd2lYQ0pkS1ZzeFhTNTBiMHh2ZDJWeVEyRnpaU2dwWFNsN1lUMXlMbWgwYld4UWNtVm1hV3gwWlhJb1lTazdkSEo1ZTJadmNpZzdZenhrTzJNckt5bGlQWFJvYVhOYlkxMThmSHQ5TERFOVBUMWlMbTV2WkdWVWVYQmxKaVlvY2k1amJHVmhia1JoZEdFb2JtRW9ZaXdoTVNrcExHSXVhVzV1WlhKSVZFMU1QV0VwTzJJOU1IMWpZWFJqYUNobEtYdDlmV0ltSm5Sb2FYTXVaVzF3ZEhrb0tTNWhjSEJsYm1Rb1lTbDlMRzUxYkd3c1lTeGhjbWQxYldWdWRITXViR1Z1WjNSb0tYMHNjbVZ3YkdGalpWZHBkR2c2Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDFiWFR0eVpYUjFjbTRnU21Fb2RHaHBjeXhoY21kMWJXVnVkSE1zWm5WdVkzUnBiMjRvWWlsN2RtRnlJR005ZEdocGN5NXdZWEpsYm5ST2IyUmxPM0l1YVc1QmNuSmhlU2gwYUdsekxHRXBQREFtSmloeUxtTnNaV0Z1UkdGMFlTaHVZU2gwYUdsektTa3NZeVltWXk1eVpYQnNZV05sUTJocGJHUW9ZaXgwYUdsektTbDlMR0VwZlgwcExISXVaV0ZqYUNoN1lYQndaVzVrVkc4NlhDSmhjSEJsYm1SY0lpeHdjbVZ3Wlc1a1ZHODZYQ0p3Y21Wd1pXNWtYQ0lzYVc1elpYSjBRbVZtYjNKbE9sd2lZbVZtYjNKbFhDSXNhVzV6WlhKMFFXWjBaWEk2WENKaFpuUmxjbHdpTEhKbGNHeGhZMlZCYkd3NlhDSnlaWEJzWVdObFYybDBhRndpZlN4bWRXNWpkR2x2YmloaExHSXBlM0l1Wm01YllWMDlablZ1WTNScGIyNG9ZU2w3Wm05eUtIWmhjaUJqTEdROVcxMHNaVDF5S0dFcExHWTlaUzVzWlc1bmRHZ3RNU3huUFRBN1p6dzlaanRuS3lzcFl6MW5QVDA5Wmo5MGFHbHpPblJvYVhNdVkyeHZibVVvSVRBcExISW9aVnRuWFNsYllsMG9ZeWtzYUM1aGNIQnNlU2hrTEdNdVoyVjBLQ2twTzNKbGRIVnliaUIwYUdsekxuQjFjMmhUZEdGamF5aGtLWDE5S1R0MllYSWdUR0U5TDE1dFlYSm5hVzR2TEUxaFBXNWxkeUJTWldkRmVIQW9YQ0plS0Z3aUsyRmhLMXdpS1NnL0lYQjRLVnRoTFhvbFhTc2tYQ0lzWENKcFhDSXBMRTVoUFdaMWJtTjBhVzl1S0dJcGUzWmhjaUJqUFdJdWIzZHVaWEpFYjJOMWJXVnVkQzVrWldaaGRXeDBWbWxsZHp0eVpYUjFjbTRnWXlZbVl5NXZjR1Z1WlhKOGZDaGpQV0VwTEdNdVoyVjBRMjl0Y0hWMFpXUlRkSGxzWlNoaUtYMDdJV1oxYm1OMGFXOXVLQ2w3Wm5WdVkzUnBiMjRnWWlncGUybG1LR2twZTJrdWMzUjViR1V1WTNOelZHVjRkRDFjSW1KdmVDMXphWHBwYm1jNlltOXlaR1Z5TFdKdmVEdHdiM05wZEdsdmJqcHlaV3hoZEdsMlpUdGthWE53YkdGNU9tSnNiMk5yTzIxaGNtZHBianBoZFhSdk8ySnZjbVJsY2pveGNIZzdjR0ZrWkdsdVp6b3hjSGc3ZEc5d09qRWxPM2RwWkhSb09qVXdKVndpTEdrdWFXNXVaWEpJVkUxTVBWd2lYQ0lzY21FdVlYQndaVzVrUTJocGJHUW9hQ2s3ZG1GeUlHSTlZUzVuWlhSRGIyMXdkWFJsWkZOMGVXeGxLR2twTzJNOVhDSXhKVndpSVQwOVlpNTBiM0FzWnoxY0lqSndlRndpUFQwOVlpNXRZWEpuYVc1TVpXWjBMR1U5WENJMGNIaGNJajA5UFdJdWQybGtkR2dzYVM1emRIbHNaUzV0WVhKbmFXNVNhV2RvZEQxY0lqVXdKVndpTEdZOVhDSTBjSGhjSWowOVBXSXViV0Z5WjJsdVVtbG5hSFFzY21FdWNtVnRiM1psUTJocGJHUW9hQ2tzYVQxdWRXeHNmWDEyWVhJZ1l5eGxMR1lzWnl4b1BXUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltUnBkbHdpS1N4cFBXUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltUnBkbHdpS1R0cExuTjBlV3hsSmlZb2FTNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a1EyeHBjRDFjSW1OdmJuUmxiblF0WW05NFhDSXNhUzVqYkc5dVpVNXZaR1VvSVRBcExuTjBlV3hsTG1KaFkydG5jbTkxYm1SRGJHbHdQVndpWENJc2J5NWpiR1ZoY2tOc2IyNWxVM1I1YkdVOVhDSmpiMjUwWlc1MExXSnZlRndpUFQwOWFTNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a1EyeHBjQ3hvTG5OMGVXeGxMbU56YzFSbGVIUTlYQ0ppYjNKa1pYSTZNRHQzYVdSMGFEbzRjSGc3YUdWcFoyaDBPakE3ZEc5d09qQTdiR1ZtZERvdE9UazVPWEI0TzNCaFpHUnBibWM2TUR0dFlYSm5hVzR0ZEc5d09qRndlRHR3YjNOcGRHbHZianBoWW5OdmJIVjBaVndpTEdndVlYQndaVzVrUTJocGJHUW9hU2tzY2k1bGVIUmxibVFvYnl4N2NHbDRaV3hRYjNOcGRHbHZianBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJpS0Nrc1kzMHNZbTk0VTJsNmFXNW5VbVZzYVdGaWJHVTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdZaWdwTEdWOUxIQnBlR1ZzVFdGeVoybHVVbWxuYUhRNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1lpZ3BMR1o5TEhKbGJHbGhZbXhsVFdGeVoybHVUR1ZtZERwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCaUtDa3NaMzE5S1NsOUtDazdablZ1WTNScGIyNGdUMkVvWVN4aUxHTXBlM1poY2lCa0xHVXNaaXhuTEdnOVlTNXpkSGxzWlR0eVpYUjFjbTRnWXoxamZIeE9ZU2hoS1N4akppWW9aejFqTG1kbGRGQnliM0JsY25SNVZtRnNkV1VvWWlsOGZHTmJZbDBzWENKY0lpRTlQV2Q4ZkhJdVkyOXVkR0ZwYm5Nb1lTNXZkMjVsY2tSdlkzVnRaVzUwTEdFcGZId29aejF5TG5OMGVXeGxLR0VzWWlrcExDRnZMbkJwZUdWc1RXRnlaMmx1VW1sbmFIUW9LU1ltVFdFdWRHVnpkQ2huS1NZbVRHRXVkR1Z6ZENoaUtTWW1LR1E5YUM1M2FXUjBhQ3hsUFdndWJXbHVWMmxrZEdnc1pqMW9MbTFoZUZkcFpIUm9MR2d1YldsdVYybGtkR2c5YUM1dFlYaFhhV1IwYUQxb0xuZHBaSFJvUFdjc1p6MWpMbmRwWkhSb0xHZ3VkMmxrZEdnOVpDeG9MbTFwYmxkcFpIUm9QV1VzYUM1dFlYaFhhV1IwYUQxbUtTa3NkbTlwWkNBd0lUMDlaejluSzF3aVhDSTZaMzFtZFc1amRHbHZiaUJRWVNoaExHSXBlM0psZEhWeWJudG5aWFE2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWVNncFAzWnZhV1FnWkdWc1pYUmxJSFJvYVhNdVoyVjBPaWgwYUdsekxtZGxkRDFpS1M1aGNIQnNlU2gwYUdsekxHRnlaM1Z0Wlc1MGN5bDlmWDEyWVhJZ1VXRTlMMTRvYm05dVpYeDBZV0pzWlNnL0lTMWpXMlZoWFNrdUt5a3ZMRkpoUFM5ZUxTMHZMRk5oUFh0d2IzTnBkR2x2YmpwY0ltRmljMjlzZFhSbFhDSXNkbWx6YVdKcGJHbDBlVHBjSW1ocFpHUmxibHdpTEdScGMzQnNZWGs2WENKaWJHOWphMXdpZlN4VVlUMTdiR1YwZEdWeVUzQmhZMmx1WnpwY0lqQmNJaXhtYjI1MFYyVnBaMmgwT2x3aU5EQXdYQ0o5TEZWaFBWdGNJbGRsWW10cGRGd2lMRndpVFc5NlhDSXNYQ0p0YzF3aVhTeFdZVDFrTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0prYVhaY0lpa3VjM1I1YkdVN1puVnVZM1JwYjI0Z1YyRW9ZU2w3YVdZb1lTQnBiaUJXWVNseVpYUjFjbTRnWVR0MllYSWdZajFoV3pCZExuUnZWWEJ3WlhKRFlYTmxLQ2tyWVM1emJHbGpaU2d4S1N4alBWVmhMbXhsYm1kMGFEdDNhR2xzWlNoakxTMHBhV1lvWVQxVllWdGpYU3RpTEdFZ2FXNGdWbUVwY21WMGRYSnVJR0Y5Wm5WdVkzUnBiMjRnV0dFb1lTbDdkbUZ5SUdJOWNpNWpjM05RY205d2MxdGhYVHR5WlhSMWNtNGdZbng4S0dJOWNpNWpjM05RY205d2MxdGhYVDFYWVNoaEtYeDhZU2tzWW4xbWRXNWpkR2x2YmlCWllTaGhMR0lzWXlsN2RtRnlJR1E5WW1FdVpYaGxZeWhpS1R0eVpYUjFjbTRnWkQ5TllYUm9MbTFoZUNnd0xHUmJNbDB0S0dOOGZEQXBLU3NvWkZzelhYeDhYQ0p3ZUZ3aUtUcGlmV1oxYm1OMGFXOXVJRnBoS0dFc1lpeGpMR1FzWlNsN2RtRnlJR1lzWnowd08yWnZjaWhtUFdNOVBUMG9aRDljSW1KdmNtUmxjbHdpT2x3aVkyOXVkR1Z1ZEZ3aUtUODBPbHdpZDJsa2RHaGNJajA5UFdJL01Ub3dPMlk4TkR0bUt6MHlLVndpYldGeVoybHVYQ0k5UFQxakppWW9aeXM5Y2k1amMzTW9ZU3hqSzJOaFcyWmRMQ0V3TEdVcEtTeGtQeWhjSW1OdmJuUmxiblJjSWowOVBXTW1KaWhuTFQxeUxtTnpjeWhoTEZ3aWNHRmtaR2x1WjF3aUsyTmhXMlpkTENFd0xHVXBLU3hjSW0xaGNtZHBibHdpSVQwOVl5WW1LR2N0UFhJdVkzTnpLR0VzWENKaWIzSmtaWEpjSWl0allWdG1YU3RjSWxkcFpIUm9YQ0lzSVRBc1pTa3BLVG9vWnlzOWNpNWpjM01vWVN4Y0luQmhaR1JwYm1kY0lpdGpZVnRtWFN3aE1DeGxLU3hjSW5CaFpHUnBibWRjSWlFOVBXTW1KaWhuS3oxeUxtTnpjeWhoTEZ3aVltOXlaR1Z5WENJclkyRmJabDByWENKWGFXUjBhRndpTENFd0xHVXBLU2s3Y21WMGRYSnVJR2Q5Wm5WdVkzUnBiMjRnSkdFb1lTeGlMR01wZTNaaGNpQmtMR1U5VG1Fb1lTa3NaajFQWVNoaExHSXNaU2tzWnoxY0ltSnZjbVJsY2kxaWIzaGNJajA5UFhJdVkzTnpLR0VzWENKaWIzaFRhWHBwYm1kY0lpd2hNU3hsS1R0eVpYUjFjbTRnVFdFdWRHVnpkQ2htS1Q5bU9paGtQV2NtSmlodkxtSnZlRk5wZW1sdVoxSmxiR2xoWW14bEtDbDhmR1k5UFQxaExuTjBlV3hsVzJKZEtTeGNJbUYxZEc5Y0lqMDlQV1ltSmlobVBXRmJYQ0p2Wm1aelpYUmNJaXRpV3pCZExuUnZWWEJ3WlhKRFlYTmxLQ2tyWWk1emJHbGpaU2d4S1YwcExHWTljR0Z5YzJWR2JHOWhkQ2htS1h4OE1DeG1LMXBoS0dFc1lpeGpmSHdvWno5Y0ltSnZjbVJsY2x3aU9sd2lZMjl1ZEdWdWRGd2lLU3hrTEdVcEsxd2ljSGhjSWlsOWNpNWxlSFJsYm1Rb2UyTnpjMGh2YjJ0ek9udHZjR0ZqYVhSNU9udG5aWFE2Wm5WdVkzUnBiMjRvWVN4aUtYdHBaaWhpS1h0MllYSWdZejFQWVNoaExGd2liM0JoWTJsMGVWd2lLVHR5WlhSMWNtNWNJbHdpUFQwOVl6OWNJakZjSWpwamZYMTlmU3hqYzNOT2RXMWlaWEk2ZTJGdWFXMWhkR2x2YmtsMFpYSmhkR2x2YmtOdmRXNTBPaUV3TEdOdmJIVnRia052ZFc1ME9pRXdMR1pwYkd4UGNHRmphWFI1T2lFd0xHWnNaWGhIY205M09pRXdMR1pzWlhoVGFISnBibXM2SVRBc1ptOXVkRmRsYVdkb2REb2hNQ3hzYVc1bFNHVnBaMmgwT2lFd0xHOXdZV05wZEhrNklUQXNiM0prWlhJNklUQXNiM0p3YUdGdWN6b2hNQ3gzYVdSdmQzTTZJVEFzZWtsdVpHVjRPaUV3TEhwdmIyMDZJVEI5TEdOemMxQnliM0J6T250Y0ltWnNiMkYwWENJNlhDSmpjM05HYkc5aGRGd2lmU3h6ZEhsc1pUcG1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdHBaaWhoSmlZeklUMDlZUzV1YjJSbFZIbHdaU1ltT0NFOVBXRXVibTlrWlZSNWNHVW1KbUV1YzNSNWJHVXBlM1poY2lCbExHWXNaeXhvUFhJdVkyRnRaV3hEWVhObEtHSXBMR2s5VW1FdWRHVnpkQ2hpS1N4cVBXRXVjM1I1YkdVN2NtVjBkWEp1SUdsOGZDaGlQVmhoS0dncEtTeG5QWEl1WTNOelNHOXZhM05iWWwxOGZISXVZM056U0c5dmEzTmJhRjBzZG05cFpDQXdQVDA5WXo5bkppWmNJbWRsZEZ3aWFXNGdaeVltZG05cFpDQXdJVDA5S0dVOVp5NW5aWFFvWVN3aE1TeGtLU2svWlRwcVcySmRPaWhtUFhSNWNHVnZaaUJqTEZ3aWMzUnlhVzVuWENJOVBUMW1KaVlvWlQxaVlTNWxlR1ZqS0dNcEtTWW1aVnN4WFNZbUtHTTlabUVvWVN4aUxHVXBMR1k5WENKdWRXMWlaWEpjSWlrc2JuVnNiQ0U5WXlZbVl6MDlQV01tSmloY0ltNTFiV0psY2x3aVBUMDlaaVltS0dNclBXVW1KbVZiTTExOGZDaHlMbU56YzA1MWJXSmxjbHRvWFQ5Y0lsd2lPbHdpY0hoY0lpa3BMRzh1WTJ4bFlYSkRiRzl1WlZOMGVXeGxmSHhjSWx3aUlUMDlZM3g4TUNFOVBXSXVhVzVrWlhoUFppaGNJbUpoWTJ0bmNtOTFibVJjSWlsOGZDaHFXMkpkUFZ3aWFXNW9aWEpwZEZ3aUtTeG5KaVpjSW5ObGRGd2lhVzRnWnlZbWRtOXBaQ0F3UFQwOUtHTTlaeTV6WlhRb1lTeGpMR1FwS1h4OEtHay9haTV6WlhSUWNtOXdaWEowZVNoaUxHTXBPbXBiWWwwOVl5a3BMSFp2YVdRZ01DbDlmU3hqYzNNNlpuVnVZM1JwYjI0b1lTeGlMR01zWkNsN2RtRnlJR1VzWml4bkxHZzljaTVqWVcxbGJFTmhjMlVvWWlrc2FUMVNZUzUwWlhOMEtHSXBPM0psZEhWeWJpQnBmSHdvWWoxWVlTaG9LU2tzWnoxeUxtTnpjMGh2YjJ0elcySmRmSHh5TG1OemMwaHZiMnR6VzJoZExHY21KbHdpWjJWMFhDSnBiaUJuSmlZb1pUMW5MbWRsZENoaExDRXdMR01wS1N4MmIybGtJREE5UFQxbEppWW9aVDFQWVNoaExHSXNaQ2twTEZ3aWJtOXliV0ZzWENJOVBUMWxKaVppSUdsdUlGUmhKaVlvWlQxVVlWdGlYU2tzWENKY0lqMDlQV044ZkdNL0tHWTljR0Z5YzJWR2JHOWhkQ2hsS1N4alBUMDlJVEI4ZkdselJtbHVhWFJsS0dZcFAyWjhmREE2WlNrNlpYMTlLU3h5TG1WaFkyZ29XMXdpYUdWcFoyaDBYQ0lzWENKM2FXUjBhRndpWFN4bWRXNWpkR2x2YmloaExHSXBlM0l1WTNOelNHOXZhM05iWWwwOWUyZGxkRHBtZFc1amRHbHZiaWhoTEdNc1pDbDdhV1lvWXlseVpYUjFjbTRoVVdFdWRHVnpkQ2h5TG1OemN5aGhMRndpWkdsemNHeGhlVndpS1NsOGZHRXVaMlYwUTJ4cFpXNTBVbVZqZEhNb0tTNXNaVzVuZEdnbUptRXVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrdWQybGtkR2cvSkdFb1lTeGlMR1FwT21WaEtHRXNVMkVzWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnSkdFb1lTeGlMR1FwZlNsOUxITmxkRHBtZFc1amRHbHZiaWhoTEdNc1pDbDdkbUZ5SUdVc1pqMWtKaVpPWVNoaEtTeG5QV1FtSmxwaEtHRXNZaXhrTEZ3aVltOXlaR1Z5TFdKdmVGd2lQVDA5Y2k1amMzTW9ZU3hjSW1KdmVGTnBlbWx1WjF3aUxDRXhMR1lwTEdZcE8zSmxkSFZ5YmlCbkppWW9aVDFpWVM1bGVHVmpLR01wS1NZbVhDSndlRndpSVQwOUtHVmJNMTE4ZkZ3aWNIaGNJaWttSmloaExuTjBlV3hsVzJKZFBXTXNZejF5TG1OemN5aGhMR0lwS1N4WllTaGhMR01zWnlsOWZYMHBMSEl1WTNOelNHOXZhM011YldGeVoybHVUR1ZtZEQxUVlTaHZMbkpsYkdsaFlteGxUV0Z5WjJsdVRHVm1kQ3htZFc1amRHbHZiaWhoTEdJcGUybG1LR0lwY21WMGRYSnVLSEJoY25ObFJteHZZWFFvVDJFb1lTeGNJbTFoY21kcGJreGxablJjSWlrcGZIeGhMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncExteGxablF0WldFb1lTeDdiV0Z5WjJsdVRHVm1kRG93ZlN4bWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCaExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG14bFpuUjlLU2tyWENKd2VGd2lmU2tzY2k1bFlXTm9LSHR0WVhKbmFXNDZYQ0pjSWl4d1lXUmthVzVuT2x3aVhDSXNZbTl5WkdWeU9sd2lWMmxrZEdoY0luMHNablZ1WTNScGIyNG9ZU3hpS1h0eUxtTnpjMGh2YjJ0elcyRXJZbDA5ZTJWNGNHRnVaRHBtZFc1amRHbHZiaWhqS1h0bWIzSW9kbUZ5SUdROU1DeGxQWHQ5TEdZOVhDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHTS9ZeTV6Y0d4cGRDaGNJaUJjSWlrNlcyTmRPMlE4TkR0a0t5c3BaVnRoSzJOaFcyUmRLMkpkUFdaYlpGMThmR1piWkMweVhYeDhabHN3WFR0eVpYUjFjbTRnWlgxOUxFeGhMblJsYzNRb1lTbDhmQ2h5TG1OemMwaHZiMnR6VzJFcllsMHVjMlYwUFZsaEtYMHBMSEl1Wm00dVpYaDBaVzVrS0h0amMzTTZablZ1WTNScGIyNG9ZU3hpS1h0eVpYUjFjbTRnVkNoMGFHbHpMR1oxYm1OMGFXOXVLR0VzWWl4aktYdDJZWElnWkN4bExHWTllMzBzWnowd08ybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb1lpa3BlMlp2Y2loa1BVNWhLR0VwTEdVOVlpNXNaVzVuZEdnN1p6eGxPMmNyS3lsbVcySmJaMTFkUFhJdVkzTnpLR0VzWWx0blhTd2hNU3hrS1R0eVpYUjFjbTRnWm4xeVpYUjFjbTRnZG05cFpDQXdJVDA5WXo5eUxuTjBlV3hsS0dFc1lpeGpLVHB5TG1OemN5aGhMR0lwZlN4aExHSXNZWEpuZFcxbGJuUnpMbXhsYm1kMGFENHhLWDE5S1R0bWRXNWpkR2x2YmlCZllTaGhMR0lzWXl4a0xHVXBlM0psZEhWeWJpQnVaWGNnWDJFdWNISnZkRzkwZVhCbExtbHVhWFFvWVN4aUxHTXNaQ3hsS1gxeUxsUjNaV1Z1UFY5aExGOWhMbkJ5YjNSdmRIbHdaVDE3WTI5dWMzUnlkV04wYjNJNlgyRXNhVzVwZERwbWRXNWpkR2x2YmloaExHSXNZeXhrTEdVc1ppbDdkR2hwY3k1bGJHVnRQV0VzZEdocGN5NXdjbTl3UFdNc2RHaHBjeTVsWVhOcGJtYzlaWHg4Y2k1bFlYTnBibWN1WDJSbFptRjFiSFFzZEdocGN5NXZjSFJwYjI1elBXSXNkR2hwY3k1emRHRnlkRDEwYUdsekxtNXZkejEwYUdsekxtTjFjaWdwTEhSb2FYTXVaVzVrUFdRc2RHaHBjeTUxYm1sMFBXWjhmQ2h5TG1OemMwNTFiV0psY2x0alhUOWNJbHdpT2x3aWNIaGNJaWw5TEdOMWNqcG1kVzVqZEdsdmJpZ3BlM1poY2lCaFBWOWhMbkJ5YjNCSWIyOXJjMXQwYUdsekxuQnliM0JkTzNKbGRIVnliaUJoSmlaaExtZGxkRDloTG1kbGRDaDBhR2x6S1RwZllTNXdjbTl3U0c5dmEzTXVYMlJsWm1GMWJIUXVaMlYwS0hSb2FYTXBmU3h5ZFc0NlpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJc1l6MWZZUzV3Y205d1NHOXZhM05iZEdocGN5NXdjbTl3WFR0eVpYUjFjbTRnZEdocGN5NXZjSFJwYjI1ekxtUjFjbUYwYVc5dVAzUm9hWE11Y0c5elBXSTljaTVsWVhOcGJtZGJkR2hwY3k1bFlYTnBibWRkS0dFc2RHaHBjeTV2Y0hScGIyNXpMbVIxY21GMGFXOXVLbUVzTUN3eExIUm9hWE11YjNCMGFXOXVjeTVrZFhKaGRHbHZiaWs2ZEdocGN5NXdiM005WWoxaExIUm9hWE11Ym05M1BTaDBhR2x6TG1WdVpDMTBhR2x6TG5OMFlYSjBLU3BpSzNSb2FYTXVjM1JoY25Rc2RHaHBjeTV2Y0hScGIyNXpMbk4wWlhBbUpuUm9hWE11YjNCMGFXOXVjeTV6ZEdWd0xtTmhiR3dvZEdocGN5NWxiR1Z0TEhSb2FYTXVibTkzTEhSb2FYTXBMR01tSm1NdWMyVjBQMk11YzJWMEtIUm9hWE1wT2w5aExuQnliM0JJYjI5cmN5NWZaR1ZtWVhWc2RDNXpaWFFvZEdocGN5a3NkR2hwYzMxOUxGOWhMbkJ5YjNSdmRIbHdaUzVwYm1sMExuQnliM1J2ZEhsd1pUMWZZUzV3Y205MGIzUjVjR1VzWDJFdWNISnZjRWh2YjJ0elBYdGZaR1ZtWVhWc2REcDdaMlYwT21aMWJtTjBhVzl1S0dFcGUzWmhjaUJpTzNKbGRIVnliaUF4SVQwOVlTNWxiR1Z0TG01dlpHVlVlWEJsZkh4dWRXeHNJVDFoTG1Wc1pXMWJZUzV3Y205d1hTWW1iblZzYkQwOVlTNWxiR1Z0TG5OMGVXeGxXMkV1Y0hKdmNGMC9ZUzVsYkdWdFcyRXVjSEp2Y0YwNktHSTljaTVqYzNNb1lTNWxiR1Z0TEdFdWNISnZjQ3hjSWx3aUtTeGlKaVpjSW1GMWRHOWNJaUU5UFdJL1lqb3dLWDBzYzJWME9tWjFibU4wYVc5dUtHRXBlM0l1Wm5ndWMzUmxjRnRoTG5CeWIzQmRQM0l1Wm5ndWMzUmxjRnRoTG5CeWIzQmRLR0VwT2pFaFBUMWhMbVZzWlcwdWJtOWtaVlI1Y0dWOGZHNTFiR3c5UFdFdVpXeGxiUzV6ZEhsc1pWdHlMbU56YzFCeWIzQnpXMkV1Y0hKdmNGMWRKaVloY2k1amMzTkliMjlyYzF0aExuQnliM0JkUDJFdVpXeGxiVnRoTG5CeWIzQmRQV0V1Ym05M09uSXVjM1I1YkdVb1lTNWxiR1Z0TEdFdWNISnZjQ3hoTG01dmR5dGhMblZ1YVhRcGZYMTlMRjloTG5CeWIzQkliMjlyY3k1elkzSnZiR3hVYjNBOVgyRXVjSEp2Y0VodmIydHpMbk5qY205c2JFeGxablE5ZTNObGREcG1kVzVqZEdsdmJpaGhLWHRoTG1Wc1pXMHVibTlrWlZSNWNHVW1KbUV1Wld4bGJTNXdZWEpsYm5ST2IyUmxKaVlvWVM1bGJHVnRXMkV1Y0hKdmNGMDlZUzV1YjNjcGZYMHNjaTVsWVhOcGJtYzllMnhwYm1WaGNqcG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdZWDBzYzNkcGJtYzZablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVMalV0VFdGMGFDNWpiM01vWVNwTllYUm9MbEJKS1M4eWZTeGZaR1ZtWVhWc2REcGNJbk4zYVc1blhDSjlMSEl1Wm5nOVgyRXVjSEp2ZEc5MGVYQmxMbWx1YVhRc2NpNW1lQzV6ZEdWd1BYdDlPM1poY2lCaFlpeGlZaXhqWWowdlhpZy9PblJ2WjJkc1pYeHphRzkzZkdocFpHVXBKQzhzWkdJOUwzRjFaWFZsU0c5dmEzTWtMenRtZFc1amRHbHZiaUJsWWlncGUySmlKaVlvWkM1b2FXUmtaVzQ5UFQwaE1TWW1ZUzV5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVL1lTNXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvWldJcE9tRXVjMlYwVkdsdFpXOTFkQ2hsWWl4eUxtWjRMbWx1ZEdWeWRtRnNLU3h5TG1aNExuUnBZMnNvS1NsOVpuVnVZM1JwYjI0Z1ptSW9LWHR5WlhSMWNtNGdZUzV6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1lXSTlkbTlwWkNBd2ZTa3NZV0k5Y2k1dWIzY29LWDFtZFc1amRHbHZiaUJuWWloaExHSXBlM1poY2lCakxHUTlNQ3hsUFh0b1pXbG5hSFE2WVgwN1ptOXlLR0k5WWo4eE9qQTdaRHcwTzJRclBUSXRZaWxqUFdOaFcyUmRMR1ZiWENKdFlYSm5hVzVjSWl0alhUMWxXMXdpY0dGa1pHbHVaMXdpSzJOZFBXRTdjbVYwZFhKdUlHSW1KaWhsTG05d1lXTnBkSGs5WlM1M2FXUjBhRDFoS1N4bGZXWjFibU4wYVc5dUlHaGlLR0VzWWl4aktYdG1iM0lvZG1GeUlHUXNaVDBvYTJJdWRIZGxaVzVsY25OYllsMThmRnRkS1M1amIyNWpZWFFvYTJJdWRIZGxaVzVsY25OYlhDSXFYQ0pkS1N4bVBUQXNaejFsTG14bGJtZDBhRHRtUEdjN1ppc3JLV2xtS0dROVpWdG1YUzVqWVd4c0tHTXNZaXhoS1NseVpYUjFjbTRnWkgxbWRXNWpkR2x2YmlCcFlpaGhMR0lzWXlsN2RtRnlJR1FzWlN4bUxHY3NhQ3hwTEdvc2F5eHNQVndpZDJsa2RHaGNJbWx1SUdKOGZGd2lhR1ZwWjJoMFhDSnBiaUJpTEcwOWRHaHBjeXh1UFh0OUxHODlZUzV6ZEhsc1pTeHdQV0V1Ym05a1pWUjVjR1VtSm1SaEtHRXBMSEU5Vnk1blpYUW9ZU3hjSW1aNGMyaHZkMXdpS1R0akxuRjFaWFZsZkh3b1p6MXlMbDl4ZFdWMVpVaHZiMnR6S0dFc1hDSm1lRndpS1N4dWRXeHNQVDFuTG5WdWNYVmxkV1ZrSmlZb1p5NTFibkYxWlhWbFpEMHdMR2c5Wnk1bGJYQjBlUzVtYVhKbExHY3VaVzF3ZEhrdVptbHlaVDFtZFc1amRHbHZiaWdwZTJjdWRXNXhkV1YxWldSOGZHZ29LWDBwTEdjdWRXNXhkV1YxWldRckt5eHRMbUZzZDJGNWN5aG1kVzVqZEdsdmJpZ3BlMjB1WVd4M1lYbHpLR1oxYm1OMGFXOXVLQ2w3Wnk1MWJuRjFaWFZsWkMwdExISXVjWFZsZFdVb1lTeGNJbVo0WENJcExteGxibWQwYUh4OFp5NWxiWEIwZVM1bWFYSmxLQ2w5S1gwcEtUdG1iM0lvWkNCcGJpQmlLV2xtS0dVOVlsdGtYU3hqWWk1MFpYTjBLR1VwS1h0cFppaGtaV3hsZEdVZ1lsdGtYU3htUFdaOGZGd2lkRzluWjJ4bFhDSTlQVDFsTEdVOVBUMG9jRDljSW1ocFpHVmNJanBjSW5Ob2IzZGNJaWtwZTJsbUtGd2ljMmh2ZDF3aUlUMDlaWHg4SVhGOGZIWnZhV1FnTUQwOVBYRmJaRjBwWTI5dWRHbHVkV1U3Y0QwaE1IMXVXMlJkUFhFbUpuRmJaRjE4ZkhJdWMzUjViR1VvWVN4a0tYMXBaaWhwUFNGeUxtbHpSVzF3ZEhsUFltcGxZM1FvWWlrc2FYeDhJWEl1YVhORmJYQjBlVTlpYW1WamRDaHVLU2w3YkNZbU1UMDlQV0V1Ym05a1pWUjVjR1VtSmloakxtOTJaWEptYkc5M1BWdHZMbTkyWlhKbWJHOTNMRzh1YjNabGNtWnNiM2RZTEc4dWIzWmxjbVpzYjNkWlhTeHFQWEVtSm5FdVpHbHpjR3hoZVN4dWRXeHNQVDFxSmlZb2FqMVhMbWRsZENoaExGd2laR2x6Y0d4aGVWd2lLU2tzYXoxeUxtTnpjeWhoTEZ3aVpHbHpjR3hoZVZ3aUtTeGNJbTV2Ym1WY0lqMDlQV3NtSmlocVAyczlham9vYVdFb1cyRmRMQ0V3S1N4cVBXRXVjM1I1YkdVdVpHbHpjR3hoZVh4OGFpeHJQWEl1WTNOektHRXNYQ0prYVhOd2JHRjVYQ0lwTEdsaEtGdGhYU2twS1N3b1hDSnBibXhwYm1WY0lqMDlQV3Q4ZkZ3aWFXNXNhVzVsTFdKc2IyTnJYQ0k5UFQxckppWnVkV3hzSVQxcUtTWW1YQ0p1YjI1bFhDSTlQVDF5TG1OemN5aGhMRndpWm14dllYUmNJaWttSmlocGZId29iUzVrYjI1bEtHWjFibU4wYVc5dUtDbDdieTVrYVhOd2JHRjVQV3A5S1N4dWRXeHNQVDFxSmlZb2F6MXZMbVJwYzNCc1lYa3NhajFjSW01dmJtVmNJajA5UFdzL1hDSmNJanByS1Nrc2J5NWthWE53YkdGNVBWd2lhVzVzYVc1bExXSnNiMk5yWENJcEtTeGpMbTkyWlhKbWJHOTNKaVlvYnk1dmRtVnlabXh2ZHoxY0ltaHBaR1JsYmx3aUxHMHVZV3gzWVhsektHWjFibU4wYVc5dUtDbDdieTV2ZG1WeVpteHZkejFqTG05MlpYSm1iRzkzV3pCZExHOHViM1psY21ac2IzZFlQV011YjNabGNtWnNiM2RiTVYwc2J5NXZkbVZ5Wm14dmQxazlZeTV2ZG1WeVpteHZkMXN5WFgwcEtTeHBQU0V4TzJadmNpaGtJR2x1SUc0cGFYeDhLSEUvWENKb2FXUmtaVzVjSW1sdUlIRW1KaWh3UFhFdWFHbGtaR1Z1S1RweFBWY3VZV05qWlhOektHRXNYQ0ptZUhOb2IzZGNJaXg3WkdsemNHeGhlVHBxZlNrc1ppWW1LSEV1YUdsa1pHVnVQU0Z3S1N4d0ppWnBZU2hiWVYwc0lUQXBMRzB1Wkc5dVpTaG1kVzVqZEdsdmJpZ3BlM0I4ZkdsaEtGdGhYU2tzVnk1eVpXMXZkbVVvWVN4Y0ltWjRjMmh2ZDF3aUtUdG1iM0lvWkNCcGJpQnVLWEl1YzNSNWJHVW9ZU3hrTEc1YlpGMHBmU2twTEdrOWFHSW9jRDl4VzJSZE9qQXNaQ3h0S1N4a0lHbHVJSEY4ZkNoeFcyUmRQV2t1YzNSaGNuUXNjQ1ltS0drdVpXNWtQV2t1YzNSaGNuUXNhUzV6ZEdGeWREMHdLU2w5ZldaMWJtTjBhVzl1SUdwaUtHRXNZaWw3ZG1GeUlHTXNaQ3hsTEdZc1p6dG1iM0lvWXlCcGJpQmhLV2xtS0dROWNpNWpZVzFsYkVOaGMyVW9ZeWtzWlQxaVcyUmRMR1k5WVZ0alhTeEJjbkpoZVM1cGMwRnljbUY1S0dZcEppWW9aVDFtV3pGZExHWTlZVnRqWFQxbVd6QmRLU3hqSVQwOVpDWW1LR0ZiWkYwOVppeGtaV3hsZEdVZ1lWdGpYU2tzWnoxeUxtTnpjMGh2YjJ0elcyUmRMR2NtSmx3aVpYaHdZVzVrWENKcGJpQm5LWHRtUFdjdVpYaHdZVzVrS0dZcExHUmxiR1YwWlNCaFcyUmRPMlp2Y2loaklHbHVJR1lwWXlCcGJpQmhmSHdvWVZ0alhUMW1XMk5kTEdKYlkxMDlaU2w5Wld4elpTQmlXMlJkUFdWOVpuVnVZM1JwYjI0Z2EySW9ZU3hpTEdNcGUzWmhjaUJrTEdVc1pqMHdMR2M5YTJJdWNISmxabWxzZEdWeWN5NXNaVzVuZEdnc2FEMXlMa1JsWm1WeWNtVmtLQ2t1WVd4M1lYbHpLR1oxYm1OMGFXOXVLQ2w3WkdWc1pYUmxJR2t1Wld4bGJYMHBMR2s5Wm5WdVkzUnBiMjRvS1h0cFppaGxLWEpsZEhWeWJpRXhPMlp2Y2loMllYSWdZajFoWW54OFptSW9LU3hqUFUxaGRHZ3ViV0Y0S0RBc2FpNXpkR0Z5ZEZScGJXVXJhaTVrZFhKaGRHbHZiaTFpS1N4a1BXTXZhaTVrZFhKaGRHbHZibng4TUN4bVBURXRaQ3huUFRBc2FUMXFMblIzWldWdWN5NXNaVzVuZEdnN1p6eHBPMmNyS3lscUxuUjNaV1Z1YzF0blhTNXlkVzRvWmlrN2NtVjBkWEp1SUdndWJtOTBhV1o1VjJsMGFDaGhMRnRxTEdZc1kxMHBMR1k4TVNZbWFUOWpPaWhwZkh4b0xtNXZkR2xtZVZkcGRHZ29ZU3hiYWl3eExEQmRLU3hvTG5KbGMyOXNkbVZYYVhSb0tHRXNXMnBkS1N3aE1TbDlMR285YUM1d2NtOXRhWE5sS0h0bGJHVnRPbUVzY0hKdmNITTZjaTVsZUhSbGJtUW9lMzBzWWlrc2IzQjBjenB5TG1WNGRHVnVaQ2doTUN4N2MzQmxZMmxoYkVWaGMybHVaenA3ZlN4bFlYTnBibWM2Y2k1bFlYTnBibWN1WDJSbFptRjFiSFI5TEdNcExHOXlhV2RwYm1Gc1VISnZjR1Z5ZEdsbGN6cGlMRzl5YVdkcGJtRnNUM0IwYVc5dWN6cGpMSE4wWVhKMFZHbHRaVHBoWW54OFptSW9LU3hrZFhKaGRHbHZianBqTG1SMWNtRjBhVzl1TEhSM1pXVnVjenBiWFN4amNtVmhkR1ZVZDJWbGJqcG1kVzVqZEdsdmJpaGlMR01wZTNaaGNpQmtQWEl1VkhkbFpXNG9ZU3hxTG05d2RITXNZaXhqTEdvdWIzQjBjeTV6Y0dWamFXRnNSV0Z6YVc1blcySmRmSHhxTG05d2RITXVaV0Z6YVc1bktUdHlaWFIxY200Z2FpNTBkMlZsYm5NdWNIVnphQ2hrS1N4a2ZTeHpkRzl3T21aMWJtTjBhVzl1S0dJcGUzWmhjaUJqUFRBc1pEMWlQMm91ZEhkbFpXNXpMbXhsYm1kMGFEb3dPMmxtS0dVcGNtVjBkWEp1SUhSb2FYTTdabTl5S0dVOUlUQTdZenhrTzJNckt5bHFMblIzWldWdWMxdGpYUzV5ZFc0b01TazdjbVYwZFhKdUlHSS9LR2d1Ym05MGFXWjVWMmwwYUNoaExGdHFMREVzTUYwcExHZ3VjbVZ6YjJ4MlpWZHBkR2dvWVN4YmFpeGlYU2twT21ndWNtVnFaV04wVjJsMGFDaGhMRnRxTEdKZEtTeDBhR2x6ZlgwcExHczlhaTV3Y205d2N6dG1iM0lvYW1Jb2F5eHFMbTl3ZEhNdWMzQmxZMmxoYkVWaGMybHVaeWs3Wmp4bk8yWXJLeWxwWmloa1BXdGlMbkJ5WldacGJIUmxjbk5iWmwwdVkyRnNiQ2hxTEdFc2F5eHFMbTl3ZEhNcEtYSmxkSFZ5YmlCeUxtbHpSblZ1WTNScGIyNG9aQzV6ZEc5d0tTWW1LSEl1WDNGMVpYVmxTRzl2YTNNb2FpNWxiR1Z0TEdvdWIzQjBjeTV4ZFdWMVpTa3VjM1J2Y0QxeUxuQnliM2g1S0dRdWMzUnZjQ3hrS1Nrc1pEdHlaWFIxY200Z2NpNXRZWEFvYXl4b1lpeHFLU3h5TG1selJuVnVZM1JwYjI0b2FpNXZjSFJ6TG5OMFlYSjBLU1ltYWk1dmNIUnpMbk4wWVhKMExtTmhiR3dvWVN4cUtTeHFMbkJ5YjJkeVpYTnpLR291YjNCMGN5NXdjbTluY21WemN5a3VaRzl1WlNocUxtOXdkSE11Wkc5dVpTeHFMbTl3ZEhNdVkyOXRjR3hsZEdVcExtWmhhV3dvYWk1dmNIUnpMbVpoYVd3cExtRnNkMkY1Y3locUxtOXdkSE11WVd4M1lYbHpLU3h5TG1aNExuUnBiV1Z5S0hJdVpYaDBaVzVrS0drc2UyVnNaVzA2WVN4aGJtbHRPbW9zY1hWbGRXVTZhaTV2Y0hSekxuRjFaWFZsZlNrcExHcDljaTVCYm1sdFlYUnBiMjQ5Y2k1bGVIUmxibVFvYTJJc2UzUjNaV1Z1WlhKek9udGNJaXBjSWpwYlpuVnVZM1JwYjI0b1lTeGlLWHQyWVhJZ1l6MTBhR2x6TG1OeVpXRjBaVlIzWldWdUtHRXNZaWs3Y21WMGRYSnVJR1poS0dNdVpXeGxiU3hoTEdKaExtVjRaV01vWWlrc1l5a3NZMzFkZlN4MGQyVmxibVZ5T21aMWJtTjBhVzl1S0dFc1lpbDdjaTVwYzBaMWJtTjBhVzl1S0dFcFB5aGlQV0VzWVQxYlhDSXFYQ0pkS1RwaFBXRXViV0YwWTJnb1RDazdabTl5S0haaGNpQmpMR1E5TUN4bFBXRXViR1Z1WjNSb08yUThaVHRrS3lzcFl6MWhXMlJkTEd0aUxuUjNaV1Z1WlhKelcyTmRQV3RpTG5SM1pXVnVaWEp6VzJOZGZIeGJYU3hyWWk1MGQyVmxibVZ5YzF0alhTNTFibk5vYVdaMEtHSXBmU3h3Y21WbWFXeDBaWEp6T2x0cFlsMHNjSEpsWm1sc2RHVnlPbVoxYm1OMGFXOXVLR0VzWWlsN1lqOXJZaTV3Y21WbWFXeDBaWEp6TG5WdWMyaHBablFvWVNrNmEySXVjSEpsWm1sc2RHVnljeTV3ZFhOb0tHRXBmWDBwTEhJdWMzQmxaV1E5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlM1poY2lCa1BXRW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJoUDNJdVpYaDBaVzVrS0h0OUxHRXBPbnRqYjIxd2JHVjBaVHBqZkh3aFl5WW1Zbng4Y2k1cGMwWjFibU4wYVc5dUtHRXBKaVpoTEdSMWNtRjBhVzl1T21Fc1pXRnphVzVuT21NbUptSjhmR0ltSmlGeUxtbHpSblZ1WTNScGIyNG9ZaWttSm1KOU8zSmxkSFZ5YmlCeUxtWjRMbTltWmo5a0xtUjFjbUYwYVc5dVBUQTZYQ0p1ZFcxaVpYSmNJaUU5ZEhsd1pXOW1JR1F1WkhWeVlYUnBiMjRtSmloa0xtUjFjbUYwYVc5dUlHbHVJSEl1Wm5ndWMzQmxaV1J6UDJRdVpIVnlZWFJwYjI0OWNpNW1lQzV6Y0dWbFpITmJaQzVrZFhKaGRHbHZibDA2WkM1a2RYSmhkR2x2YmoxeUxtWjRMbk53WldWa2N5NWZaR1ZtWVhWc2RDa3NiblZzYkNFOVpDNXhkV1YxWlNZbVpDNXhkV1YxWlNFOVBTRXdmSHdvWkM1eGRXVjFaVDFjSW1aNFhDSXBMR1F1YjJ4a1BXUXVZMjl0Y0d4bGRHVXNaQzVqYjIxd2JHVjBaVDFtZFc1amRHbHZiaWdwZTNJdWFYTkdkVzVqZEdsdmJpaGtMbTlzWkNrbUptUXViMnhrTG1OaGJHd29kR2hwY3lrc1pDNXhkV1YxWlNZbWNpNWtaWEYxWlhWbEtIUm9hWE1zWkM1eGRXVjFaU2w5TEdSOUxISXVabTR1WlhoMFpXNWtLSHRtWVdSbFZHODZablZ1WTNScGIyNG9ZU3hpTEdNc1pDbDdjbVYwZFhKdUlIUm9hWE11Wm1sc2RHVnlLR1JoS1M1amMzTW9YQ0p2Y0dGamFYUjVYQ0lzTUNrdWMyaHZkeWdwTG1WdVpDZ3BMbUZ1YVcxaGRHVW9lMjl3WVdOcGRIazZZbjBzWVN4akxHUXBmU3hoYm1sdFlYUmxPbVoxYm1OMGFXOXVLR0VzWWl4akxHUXBlM1poY2lCbFBYSXVhWE5GYlhCMGVVOWlhbVZqZENoaEtTeG1QWEl1YzNCbFpXUW9ZaXhqTEdRcExHYzlablZ1WTNScGIyNG9LWHQyWVhJZ1lqMXJZaWgwYUdsekxISXVaWGgwWlc1a0tIdDlMR0VwTEdZcE95aGxmSHhYTG1kbGRDaDBhR2x6TEZ3aVptbHVhWE5vWENJcEtTWW1ZaTV6ZEc5d0tDRXdLWDA3Y21WMGRYSnVJR2N1Wm1sdWFYTm9QV2NzWlh4OFppNXhkV1YxWlQwOVBTRXhQM1JvYVhNdVpXRmphQ2huS1RwMGFHbHpMbkYxWlhWbEtHWXVjWFZsZFdVc1p5bDlMSE4wYjNBNlpuVnVZM1JwYjI0b1lTeGlMR01wZTNaaGNpQmtQV1oxYm1OMGFXOXVLR0VwZTNaaGNpQmlQV0V1YzNSdmNEdGtaV3hsZEdVZ1lTNXpkRzl3TEdJb1l5bDlPM0psZEhWeWJsd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQmhKaVlvWXoxaUxHSTlZU3hoUFhadmFXUWdNQ2tzWWlZbVlTRTlQU0V4SmlaMGFHbHpMbkYxWlhWbEtHRjhmRndpWm5oY0lpeGJYU2tzZEdocGN5NWxZV05vS0daMWJtTjBhVzl1S0NsN2RtRnlJR0k5SVRBc1pUMXVkV3hzSVQxaEppWmhLMXdpY1hWbGRXVkliMjlyYzF3aUxHWTljaTUwYVcxbGNuTXNaejFYTG1kbGRDaDBhR2x6S1R0cFppaGxLV2RiWlYwbUptZGJaVjB1YzNSdmNDWW1aQ2huVzJWZEtUdGxiSE5sSUdadmNpaGxJR2x1SUdjcFoxdGxYU1ltWjF0bFhTNXpkRzl3Smlaa1lpNTBaWE4wS0dVcEppWmtLR2RiWlYwcE8yWnZjaWhsUFdZdWJHVnVaM1JvTzJVdExUc3BabHRsWFM1bGJHVnRJVDA5ZEdocGMzeDhiblZzYkNFOVlTWW1abHRsWFM1eGRXVjFaU0U5UFdGOGZDaG1XMlZkTG1GdWFXMHVjM1J2Y0NoaktTeGlQU0V4TEdZdWMzQnNhV05sS0dVc01Ta3BPeUZpSmlaamZIeHlMbVJsY1hWbGRXVW9kR2hwY3l4aEtYMHBmU3htYVc1cGMyZzZablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJR0VoUFQwaE1TWW1LR0U5WVh4OFhDSm1lRndpS1N4MGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b0tYdDJZWElnWWl4alBWY3VaMlYwS0hSb2FYTXBMR1E5WTF0aEsxd2ljWFZsZFdWY0lsMHNaVDFqVzJFclhDSnhkV1YxWlVodmIydHpYQ0pkTEdZOWNpNTBhVzFsY25Nc1p6MWtQMlF1YkdWdVozUm9PakE3Wm05eUtHTXVabWx1YVhOb1BTRXdMSEl1Y1hWbGRXVW9kR2hwY3l4aExGdGRLU3hsSmlabExuTjBiM0FtSm1VdWMzUnZjQzVqWVd4c0tIUm9hWE1zSVRBcExHSTlaaTVzWlc1bmRHZzdZaTB0T3lsbVcySmRMbVZzWlcwOVBUMTBhR2x6SmlabVcySmRMbkYxWlhWbFBUMDlZU1ltS0daYllsMHVZVzVwYlM1emRHOXdLQ0V3S1N4bUxuTndiR2xqWlNoaUxERXBLVHRtYjNJb1lqMHdPMkk4Wnp0aUt5c3BaRnRpWFNZbVpGdGlYUzVtYVc1cGMyZ21KbVJiWWwwdVptbHVhWE5vTG1OaGJHd29kR2hwY3lrN1pHVnNaWFJsSUdNdVptbHVhWE5vZlNsOWZTa3NjaTVsWVdOb0tGdGNJblJ2WjJkc1pWd2lMRndpYzJodmQxd2lMRndpYUdsa1pWd2lYU3htZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqUFhJdVptNWJZbDA3Y2k1bWJsdGlYVDFtZFc1amRHbHZiaWhoTEdRc1pTbDdjbVYwZFhKdUlHNTFiR3c5UFdGOGZGd2lZbTl2YkdWaGJsd2lQVDEwZVhCbGIyWWdZVDlqTG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektUcDBhR2x6TG1GdWFXMWhkR1VvWjJJb1lpd2hNQ2tzWVN4a0xHVXBmWDBwTEhJdVpXRmphQ2g3YzJ4cFpHVkViM2R1T21kaUtGd2ljMmh2ZDF3aUtTeHpiR2xrWlZWd09tZGlLRndpYUdsa1pWd2lLU3h6Ykdsa1pWUnZaMmRzWlRwbllpaGNJblJ2WjJkc1pWd2lLU3htWVdSbFNXNDZlMjl3WVdOcGRIazZYQ0p6YUc5M1hDSjlMR1poWkdWUGRYUTZlMjl3WVdOcGRIazZYQ0pvYVdSbFhDSjlMR1poWkdWVWIyZG5iR1U2ZTI5d1lXTnBkSGs2WENKMGIyZG5iR1ZjSW4xOUxHWjFibU4wYVc5dUtHRXNZaWw3Y2k1bWJsdGhYVDFtZFc1amRHbHZiaWhoTEdNc1pDbDdjbVYwZFhKdUlIUm9hWE11WVc1cGJXRjBaU2hpTEdFc1l5eGtLWDE5S1N4eUxuUnBiV1Z5Y3oxYlhTeHlMbVo0TG5ScFkyczlablZ1WTNScGIyNG9LWHQyWVhJZ1lTeGlQVEFzWXoxeUxuUnBiV1Z5Y3p0bWIzSW9ZV0k5Y2k1dWIzY29LVHRpUEdNdWJHVnVaM1JvTzJJckt5bGhQV05iWWwwc1lTZ3BmSHhqVzJKZElUMDlZWHg4WXk1emNHeHBZMlVvWWkwdExERXBPMk11YkdWdVozUm9mSHh5TG1aNExuTjBiM0FvS1N4aFlqMTJiMmxrSURCOUxISXVabmd1ZEdsdFpYSTlablZ1WTNScGIyNG9ZU2w3Y2k1MGFXMWxjbk11Y0hWemFDaGhLU3h5TG1aNExuTjBZWEowS0NsOUxISXVabmd1YVc1MFpYSjJZV3c5TVRNc2NpNW1lQzV6ZEdGeWREMW1kVzVqZEdsdmJpZ3BlMkppZkh3b1ltSTlJVEFzWldJb0tTbDlMSEl1Wm5ndWMzUnZjRDFtZFc1amRHbHZiaWdwZTJKaVBXNTFiR3g5TEhJdVpuZ3VjM0JsWldSelBYdHpiRzkzT2pZd01DeG1ZWE4wT2pJd01DeGZaR1ZtWVhWc2REbzBNREI5TEhJdVptNHVaR1ZzWVhrOVpuVnVZM1JwYjI0b1lpeGpLWHR5WlhSMWNtNGdZajF5TG1aNFAzSXVabmd1YzNCbFpXUnpXMkpkZkh4aU9tSXNZejFqZkh4Y0ltWjRYQ0lzZEdocGN5NXhkV1YxWlNoakxHWjFibU4wYVc5dUtHTXNaQ2w3ZG1GeUlHVTlZUzV6WlhSVWFXMWxiM1YwS0dNc1lpazdaQzV6ZEc5d1BXWjFibU4wYVc5dUtDbDdZUzVqYkdWaGNsUnBiV1Z2ZFhRb1pTbDlmU2w5TEdaMWJtTjBhVzl1S0NsN2RtRnlJR0U5WkM1amNtVmhkR1ZGYkdWdFpXNTBLRndpYVc1d2RYUmNJaWtzWWoxa0xtTnlaV0YwWlVWc1pXMWxiblFvWENKelpXeGxZM1JjSWlrc1l6MWlMbUZ3Y0dWdVpFTm9hV3hrS0dRdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW05d2RHbHZibHdpS1NrN1lTNTBlWEJsUFZ3aVkyaGxZMnRpYjNoY0lpeHZMbU5vWldOclQyNDlYQ0pjSWlFOVBXRXVkbUZzZFdVc2J5NXZjSFJUWld4bFkzUmxaRDFqTG5ObGJHVmpkR1ZrTEdFOVpDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWFXNXdkWFJjSWlrc1lTNTJZV3gxWlQxY0luUmNJaXhoTG5SNWNHVTlYQ0p5WVdScGIxd2lMRzh1Y21Ga2FXOVdZV3gxWlQxY0luUmNJajA5UFdFdWRtRnNkV1Y5S0NrN2RtRnlJR3hpTEcxaVBYSXVaWGh3Y2k1aGRIUnlTR0Z1Wkd4bE8zSXVabTR1WlhoMFpXNWtLSHRoZEhSeU9tWjFibU4wYVc5dUtHRXNZaWw3Y21WMGRYSnVJRlFvZEdocGN5eHlMbUYwZEhJc1lTeGlMR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZytNU2w5TEhKbGJXOTJaVUYwZEhJNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlIUm9hWE11WldGamFDaG1kVzVqZEdsdmJpZ3BlM0l1Y21WdGIzWmxRWFIwY2loMGFHbHpMR0VwZlNsOWZTa3NjaTVsZUhSbGJtUW9lMkYwZEhJNlpuVnVZM1JwYjI0b1lTeGlMR01wZTNaaGNpQmtMR1VzWmoxaExtNXZaR1ZVZVhCbE8ybG1LRE1oUFQxbUppWTRJVDA5WmlZbU1pRTlQV1lwY21WMGRYSnVYQ0oxYm1SbFptbHVaV1JjSWowOWRIbHdaVzltSUdFdVoyVjBRWFIwY21saWRYUmxQM0l1Y0hKdmNDaGhMR0lzWXlrNktERTlQVDFtSmlaeUxtbHpXRTFNUkc5aktHRXBmSHdvWlQxeUxtRjBkSEpJYjI5cmMxdGlMblJ2VEc5M1pYSkRZWE5sS0NsZGZId29jaTVsZUhCeUxtMWhkR05vTG1KdmIyd3VkR1Z6ZENoaUtUOXNZanAyYjJsa0lEQXBLU3gyYjJsa0lEQWhQVDFqUDI1MWJHdzlQVDFqUDNadmFXUWdjaTV5WlcxdmRtVkJkSFJ5S0dFc1lpazZaU1ltWENKelpYUmNJbWx1SUdVbUpuWnZhV1FnTUNFOVBTaGtQV1V1YzJWMEtHRXNZeXhpS1NrL1pEb29ZUzV6WlhSQmRIUnlhV0oxZEdVb1lpeGpLMXdpWENJcExHTXBPbVVtSmx3aVoyVjBYQ0pwYmlCbEppWnVkV3hzSVQwOUtHUTlaUzVuWlhRb1lTeGlLU2svWkRvb1pEMXlMbVpwYm1RdVlYUjBjaWhoTEdJcExGeHViblZzYkQwOVpEOTJiMmxrSURBNlpDa3BmU3hoZEhSeVNHOXZhM002ZTNSNWNHVTZlM05sZERwbWRXNWpkR2x2YmloaExHSXBlMmxtS0NGdkxuSmhaR2x2Vm1Gc2RXVW1KbHdpY21Ga2FXOWNJajA5UFdJbUprSW9ZU3hjSW1sdWNIVjBYQ0lwS1h0MllYSWdZejFoTG5aaGJIVmxPM0psZEhWeWJpQmhMbk5sZEVGMGRISnBZblYwWlNoY0luUjVjR1ZjSWl4aUtTeGpKaVlvWVM1MllXeDFaVDFqS1N4aWZYMTlmU3h5WlcxdmRtVkJkSFJ5T21aMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdNc1pEMHdMR1U5WWlZbVlpNXRZWFJqYUNoTUtUdHBaaWhsSmlZeFBUMDlZUzV1YjJSbFZIbHdaU2wzYUdsc1pTaGpQV1ZiWkNzclhTbGhMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaGpLWDE5S1N4c1lqMTdjMlYwT21aMWJtTjBhVzl1S0dFc1lpeGpLWHR5WlhSMWNtNGdZajA5UFNFeFAzSXVjbVZ0YjNabFFYUjBjaWhoTEdNcE9tRXVjMlYwUVhSMGNtbGlkWFJsS0dNc1l5a3NZMzE5TEhJdVpXRmphQ2h5TG1WNGNISXViV0YwWTJndVltOXZiQzV6YjNWeVkyVXViV0YwWTJnb0wxeGNkeXN2Wnlrc1puVnVZM1JwYjI0b1lTeGlLWHQyWVhJZ1l6MXRZbHRpWFh4OGNpNW1hVzVrTG1GMGRISTdiV0piWWwwOVpuVnVZM1JwYjI0b1lTeGlMR1FwZTNaaGNpQmxMR1lzWnoxaUxuUnZURzkzWlhKRFlYTmxLQ2s3Y21WMGRYSnVJR1I4ZkNobVBXMWlXMmRkTEcxaVcyZGRQV1VzWlQxdWRXeHNJVDFqS0dFc1lpeGtLVDluT201MWJHd3NiV0piWjEwOVppa3NaWDE5S1R0MllYSWdibUk5TDE0b1B6cHBibkIxZEh4elpXeGxZM1I4ZEdWNGRHRnlaV0Y4WW5WMGRHOXVLU1F2YVN4dllqMHZYaWcvT21GOFlYSmxZU2trTDJrN2NpNW1iaTVsZUhSbGJtUW9lM0J5YjNBNlpuVnVZM1JwYjI0b1lTeGlLWHR5WlhSMWNtNGdWQ2gwYUdsekxISXVjSEp2Y0N4aExHSXNZWEpuZFcxbGJuUnpMbXhsYm1kMGFENHhLWDBzY21WdGIzWmxVSEp2Y0RwbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtDbDdaR1ZzWlhSbElIUm9hWE5iY2k1d2NtOXdSbWw0VzJGZGZIeGhYWDBwZlgwcExISXVaWGgwWlc1a0tIdHdjbTl3T21aMWJtTjBhVzl1S0dFc1lpeGpLWHQyWVhJZ1pDeGxMR1k5WVM1dWIyUmxWSGx3WlR0cFppZ3pJVDA5WmlZbU9DRTlQV1ltSmpJaFBUMW1LWEpsZEhWeWJpQXhQVDA5WmlZbWNpNXBjMWhOVEVSdll5aGhLWHg4S0dJOWNpNXdjbTl3Um1sNFcySmRmSHhpTEdVOWNpNXdjbTl3U0c5dmEzTmJZbDBwTEhadmFXUWdNQ0U5UFdNL1pTWW1YQ0p6WlhSY0ltbHVJR1VtSm5admFXUWdNQ0U5UFNoa1BXVXVjMlYwS0dFc1l5eGlLU2svWkRwaFcySmRQV002WlNZbVhDSm5aWFJjSW1sdUlHVW1KbTUxYkd3aFBUMG9aRDFsTG1kbGRDaGhMR0lwS1Q5a09tRmJZbDE5TEhCeWIzQkliMjlyY3pwN2RHRmlTVzVrWlhnNmUyZGxkRHBtZFc1amRHbHZiaWhoS1h0MllYSWdZajF5TG1acGJtUXVZWFIwY2loaExGd2lkR0ZpYVc1a1pYaGNJaWs3Y21WMGRYSnVJR0kvY0dGeWMyVkpiblFvWWl3eE1DazZibUl1ZEdWemRDaGhMbTV2WkdWT1lXMWxLWHg4YjJJdWRHVnpkQ2hoTG01dlpHVk9ZVzFsS1NZbVlTNW9jbVZtUHpBNkxURjlmWDBzY0hKdmNFWnBlRHA3WENKbWIzSmNJanBjSW1oMGJXeEdiM0pjSWl4Y0ltTnNZWE56WENJNlhDSmpiR0Z6YzA1aGJXVmNJbjE5S1N4dkxtOXdkRk5sYkdWamRHVmtmSHdvY2k1d2NtOXdTRzl2YTNNdWMyVnNaV04wWldROWUyZGxkRHBtZFc1amRHbHZiaWhoS1h0MllYSWdZajFoTG5CaGNtVnVkRTV2WkdVN2NtVjBkWEp1SUdJbUptSXVjR0Z5Wlc1MFRtOWtaU1ltWWk1d1lYSmxiblJPYjJSbExuTmxiR1ZqZEdWa1NXNWtaWGdzYm5Wc2JIMHNjMlYwT21aMWJtTjBhVzl1S0dFcGUzWmhjaUJpUFdFdWNHRnlaVzUwVG05a1pUdGlKaVlvWWk1elpXeGxZM1JsWkVsdVpHVjRMR0l1Y0dGeVpXNTBUbTlrWlNZbVlpNXdZWEpsYm5ST2IyUmxMbk5sYkdWamRHVmtTVzVrWlhncGZYMHBMSEl1WldGamFDaGJYQ0owWVdKSmJtUmxlRndpTEZ3aWNtVmhaRTl1YkhsY0lpeGNJbTFoZUV4bGJtZDBhRndpTEZ3aVkyVnNiRk53WVdOcGJtZGNJaXhjSW1ObGJHeFFZV1JrYVc1blhDSXNYQ0p5YjNkVGNHRnVYQ0lzWENKamIyeFRjR0Z1WENJc1hDSjFjMlZOWVhCY0lpeGNJbVp5WVcxbFFtOXlaR1Z5WENJc1hDSmpiMjUwWlc1MFJXUnBkR0ZpYkdWY0lsMHNablZ1WTNScGIyNG9LWHR5TG5CeWIzQkdhWGhiZEdocGN5NTBiMHh2ZDJWeVEyRnpaU2dwWFQxMGFHbHpmU2s3Wm5WdVkzUnBiMjRnY0dJb1lTbDdkbUZ5SUdJOVlTNXRZWFJqYUNoTUtYeDhXMTA3Y21WMGRYSnVJR0l1YW05cGJpaGNJaUJjSWlsOVpuVnVZM1JwYjI0Z2NXSW9ZU2w3Y21WMGRYSnVJR0V1WjJWMFFYUjBjbWxpZFhSbEppWmhMbWRsZEVGMGRISnBZblYwWlNoY0ltTnNZWE56WENJcGZIeGNJbHdpZlhJdVptNHVaWGgwWlc1a0tIdGhaR1JEYkdGemN6cG1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lpeGpMR1FzWlN4bUxHY3NhQ3hwUFRBN2FXWW9jaTVwYzBaMWJtTjBhVzl1S0dFcEtYSmxkSFZ5YmlCMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b1lpbDdjaWgwYUdsektTNWhaR1JEYkdGemN5aGhMbU5oYkd3b2RHaHBjeXhpTEhGaUtIUm9hWE1wS1NsOUtUdHBaaWhjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWVNZbVlTbDdZajFoTG0xaGRHTm9LRXdwZkh4YlhUdDNhR2xzWlNoalBYUm9hWE5iYVNzclhTbHBaaWhsUFhGaUtHTXBMR1E5TVQwOVBXTXVibTlrWlZSNWNHVW1KbHdpSUZ3aUszQmlLR1VwSzF3aUlGd2lLWHRuUFRBN2QyaHBiR1VvWmoxaVcyY3JLMTBwWkM1cGJtUmxlRTltS0Z3aUlGd2lLMllyWENJZ1hDSXBQREFtSmloa0t6MW1LMXdpSUZ3aUtUdG9QWEJpS0dRcExHVWhQVDFvSmlaakxuTmxkRUYwZEhKcFluVjBaU2hjSW1Oc1lYTnpYQ0lzYUNsOWZYSmxkSFZ5YmlCMGFHbHpmU3h5WlcxdmRtVkRiR0Z6Y3pwbWRXNWpkR2x2YmloaEtYdDJZWElnWWl4akxHUXNaU3htTEdjc2FDeHBQVEE3YVdZb2NpNXBjMFoxYm1OMGFXOXVLR0VwS1hKbGRIVnliaUIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRvWWlsN2NpaDBhR2x6S1M1eVpXMXZkbVZEYkdGemN5aGhMbU5oYkd3b2RHaHBjeXhpTEhGaUtIUm9hWE1wS1NsOUtUdHBaaWdoWVhKbmRXMWxiblJ6TG14bGJtZDBhQ2x5WlhSMWNtNGdkR2hwY3k1aGRIUnlLRndpWTJ4aGMzTmNJaXhjSWx3aUtUdHBaaWhjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWVNZbVlTbDdZajFoTG0xaGRHTm9LRXdwZkh4YlhUdDNhR2xzWlNoalBYUm9hWE5iYVNzclhTbHBaaWhsUFhGaUtHTXBMR1E5TVQwOVBXTXVibTlrWlZSNWNHVW1KbHdpSUZ3aUszQmlLR1VwSzF3aUlGd2lLWHRuUFRBN2QyaHBiR1VvWmoxaVcyY3JLMTBwZDJocGJHVW9aQzVwYm1SbGVFOW1LRndpSUZ3aUsyWXJYQ0lnWENJcFBpMHhLV1E5WkM1eVpYQnNZV05sS0Z3aUlGd2lLMllyWENJZ1hDSXNYQ0lnWENJcE8yZzljR0lvWkNrc1pTRTlQV2dtSm1NdWMyVjBRWFIwY21saWRYUmxLRndpWTJ4aGMzTmNJaXhvS1gxOWNtVjBkWEp1SUhSb2FYTjlMSFJ2WjJkc1pVTnNZWE56T21aMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdNOWRIbHdaVzltSUdFN2NtVjBkWEp1WENKaWIyOXNaV0Z1WENJOVBYUjVjR1Z2WmlCaUppWmNJbk4wY21sdVoxd2lQVDA5WXo5aVAzUm9hWE11WVdSa1EyeGhjM01vWVNrNmRHaHBjeTV5WlcxdmRtVkRiR0Z6Y3loaEtUcHlMbWx6Um5WdVkzUnBiMjRvWVNrL2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtHTXBlM0lvZEdocGN5a3VkRzluWjJ4bFEyeGhjM01vWVM1allXeHNLSFJvYVhNc1l5eHhZaWgwYUdsektTeGlLU3hpS1gwcE9uUm9hWE11WldGamFDaG1kVzVqZEdsdmJpZ3BlM1poY2lCaUxHUXNaU3htTzJsbUtGd2ljM1J5YVc1blhDSTlQVDFqS1h0a1BUQXNaVDF5S0hSb2FYTXBMR1k5WVM1dFlYUmphQ2hNS1h4OFcxMDdkMmhwYkdVb1lqMW1XMlFySzEwcFpTNW9ZWE5EYkdGemN5aGlLVDlsTG5KbGJXOTJaVU5zWVhOektHSXBPbVV1WVdSa1EyeGhjM01vWWlsOVpXeHpaU0IyYjJsa0lEQWhQVDFoSmlaY0ltSnZiMnhsWVc1Y0lpRTlQV044ZkNoaVBYRmlLSFJvYVhNcExHSW1KbGN1YzJWMEtIUm9hWE1zWENKZlgyTnNZWE56VG1GdFpWOWZYQ0lzWWlrc2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVbUpuUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtGd2lZMnhoYzNOY0lpeGlmSHhoUFQwOUlURS9YQ0pjSWpwWExtZGxkQ2gwYUdsekxGd2lYMTlqYkdGemMwNWhiV1ZmWDF3aUtYeDhYQ0pjSWlrcGZTbDlMR2hoYzBOc1lYTnpPbVoxYm1OMGFXOXVLR0VwZTNaaGNpQmlMR01zWkQwd08ySTlYQ0lnWENJcllTdGNJaUJjSWp0M2FHbHNaU2hqUFhSb2FYTmJaQ3NyWFNscFppZ3hQVDA5WXk1dWIyUmxWSGx3WlNZbUtGd2lJRndpSzNCaUtIRmlLR01wS1N0Y0lpQmNJaWt1YVc1a1pYaFBaaWhpS1Q0dE1TbHlaWFIxY200aE1EdHlaWFIxY200aE1YMTlLVHQyWVhJZ2NtSTlMMXhjY2k5bk8zSXVabTR1WlhoMFpXNWtLSHQyWVd3NlpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJc1l5eGtMR1U5ZEdocGMxc3dYVHQ3YVdZb1lYSm5kVzFsYm5SekxteGxibWQwYUNseVpYUjFjbTRnWkQxeUxtbHpSblZ1WTNScGIyNG9ZU2tzZEdocGN5NWxZV05vS0daMWJtTjBhVzl1S0dNcGUzWmhjaUJsT3pFOVBUMTBhR2x6TG01dlpHVlVlWEJsSmlZb1pUMWtQMkV1WTJGc2JDaDBhR2x6TEdNc2NpaDBhR2x6S1M1MllXd29LU2s2WVN4dWRXeHNQVDFsUDJVOVhDSmNJanBjSW01MWJXSmxjbHdpUFQxMGVYQmxiMllnWlQ5bEt6MWNJbHdpT2tGeWNtRjVMbWx6UVhKeVlYa29aU2ttSmlobFBYSXViV0Z3S0dVc1puVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHNTFiR3c5UFdFL1hDSmNJanBoSzF3aVhDSjlLU2tzWWoxeUxuWmhiRWh2YjJ0elczUm9hWE11ZEhsd1pWMThmSEl1ZG1Gc1NHOXZhM05iZEdocGN5NXViMlJsVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFN4aUppWmNJbk5sZEZ3aWFXNGdZaVltZG05cFpDQXdJVDA5WWk1elpYUW9kR2hwY3l4bExGd2lkbUZzZFdWY0lpbDhmQ2gwYUdsekxuWmhiSFZsUFdVcEtYMHBPMmxtS0dVcGNtVjBkWEp1SUdJOWNpNTJZV3hJYjI5cmMxdGxMblI1Y0dWZGZIeHlMblpoYkVodmIydHpXMlV1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tWMHNZaVltWENKblpYUmNJbWx1SUdJbUpuWnZhV1FnTUNFOVBTaGpQV0l1WjJWMEtHVXNYQ0oyWVd4MVpWd2lLU2svWXpvb1l6MWxMblpoYkhWbExGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmpQMk11Y21Wd2JHRmpaU2h5WWl4Y0lsd2lLVHB1ZFd4c1BUMWpQMXdpWENJNll5bDlmWDBwTEhJdVpYaDBaVzVrS0h0MllXeEliMjlyY3pwN2IzQjBhVzl1T250blpYUTZablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTljaTVtYVc1a0xtRjBkSElvWVN4Y0luWmhiSFZsWENJcE8zSmxkSFZ5YmlCdWRXeHNJVDFpUDJJNmNHSW9jaTUwWlhoMEtHRXBLWDE5TEhObGJHVmpkRHA3WjJWME9tWjFibU4wYVc5dUtHRXBlM1poY2lCaUxHTXNaQ3hsUFdFdWIzQjBhVzl1Y3l4bVBXRXVjMlZzWldOMFpXUkpibVJsZUN4blBWd2ljMlZzWldOMExXOXVaVndpUFQwOVlTNTBlWEJsTEdnOVp6OXVkV3hzT2x0ZExHazlaejltS3pFNlpTNXNaVzVuZEdnN1ptOXlLR1E5Wmp3d1AyazZaejltT2pBN1pEeHBPMlFyS3lscFppaGpQV1ZiWkYwc0tHTXVjMlZzWldOMFpXUjhmR1E5UFQxbUtTWW1JV011WkdsellXSnNaV1FtSmlnaFl5NXdZWEpsYm5ST2IyUmxMbVJwYzJGaWJHVmtmSHdoUWloakxuQmhjbVZ1ZEU1dlpHVXNYQ0p2Y0hSbmNtOTFjRndpS1NrcGUybG1LR0k5Y2loaktTNTJZV3dvS1N4bktYSmxkSFZ5YmlCaU8yZ3VjSFZ6YUNoaUtYMXlaWFIxY200Z2FIMHNjMlYwT21aMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdNc1pDeGxQV0V1YjNCMGFXOXVjeXhtUFhJdWJXRnJaVUZ5Y21GNUtHSXBMR2M5WlM1c1pXNW5kR2c3ZDJocGJHVW9aeTB0S1dROVpWdG5YU3dvWkM1elpXeGxZM1JsWkQxeUxtbHVRWEp5WVhrb2NpNTJZV3hJYjI5cmN5NXZjSFJwYjI0dVoyVjBLR1FwTEdZcFBpMHhLU1ltS0dNOUlUQXBPM0psZEhWeWJpQmpmSHdvWVM1elpXeGxZM1JsWkVsdVpHVjRQUzB4S1N4bWZYMTlmU2tzY2k1bFlXTm9LRnRjSW5KaFpHbHZYQ0lzWENKamFHVmphMkp2ZUZ3aVhTeG1kVzVqZEdsdmJpZ3BlM0l1ZG1Gc1NHOXZhM05iZEdocGMxMDllM05sZERwbWRXNWpkR2x2YmloaExHSXBlMmxtS0VGeWNtRjVMbWx6UVhKeVlYa29ZaWtwY21WMGRYSnVJR0V1WTJobFkydGxaRDF5TG1sdVFYSnlZWGtvY2loaEtTNTJZV3dvS1N4aUtUNHRNWDE5TEc4dVkyaGxZMnRQYm54OEtISXVkbUZzU0c5dmEzTmJkR2hwYzEwdVoyVjBQV1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJ1ZFd4c1BUMDlZUzVuWlhSQmRIUnlhV0oxZEdVb1hDSjJZV3gxWlZ3aUtUOWNJbTl1WENJNllTNTJZV3gxWlgwcGZTazdkbUZ5SUhOaVBTOWVLRDg2Wm05amRYTnBibVp2WTNWemZHWnZZM1Z6YjNWMFlteDFjaWtrTHp0eUxtVjRkR1Z1WkNoeUxtVjJaVzUwTEh0MGNtbG5aMlZ5T21aMWJtTjBhVzl1S0dJc1l5eGxMR1lwZTNaaGNpQm5MR2dzYVN4cUxHc3NiU3h1TEc4OVcyVjhmR1JkTEhBOWJDNWpZV3hzS0dJc1hDSjBlWEJsWENJcFAySXVkSGx3WlRwaUxIRTliQzVqWVd4c0tHSXNYQ0p1WVcxbGMzQmhZMlZjSWlrL1lpNXVZVzFsYzNCaFkyVXVjM0JzYVhRb1hDSXVYQ0lwT2x0ZE8ybG1LR2c5YVQxbFBXVjhmR1FzTXlFOVBXVXVibTlrWlZSNWNHVW1KamdoUFQxbExtNXZaR1ZVZVhCbEppWWhjMkl1ZEdWemRDaHdLM0l1WlhabGJuUXVkSEpwWjJkbGNtVmtLU1ltS0hBdWFXNWtaWGhQWmloY0lpNWNJaWsrTFRFbUppaHhQWEF1YzNCc2FYUW9YQ0l1WENJcExIQTljUzV6YUdsbWRDZ3BMSEV1YzI5eWRDZ3BLU3hyUFhBdWFXNWtaWGhQWmloY0lqcGNJaWs4TUNZbVhDSnZibHdpSzNBc1lqMWlXM0l1Wlhod1lXNWtiMTAvWWpwdVpYY2djaTVGZG1WdWRDaHdMRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJpSmlaaUtTeGlMbWx6VkhKcFoyZGxjajFtUHpJNk15eGlMbTVoYldWemNHRmpaVDF4TG1wdmFXNG9YQ0l1WENJcExHSXVjbTVoYldWemNHRmpaVDFpTG01aGJXVnpjR0ZqWlQ5dVpYY2dVbVZuUlhod0tGd2lLRjU4WEZ4Y1hDNHBYQ0lyY1M1cWIybHVLRndpWEZ4Y1hDNG9Qem91S2x4Y1hGd3VmQ2xjSWlrclhDSW9YRnhjWEM1OEpDbGNJaWs2Ym5Wc2JDeGlMbkpsYzNWc2REMTJiMmxrSURBc1lpNTBZWEpuWlhSOGZDaGlMblJoY21kbGREMWxLU3hqUFc1MWJHdzlQV00vVzJKZE9uSXViV0ZyWlVGeWNtRjVLR01zVzJKZEtTeHVQWEl1WlhabGJuUXVjM0JsWTJsaGJGdHdYWHg4ZTMwc1pueDhJVzR1ZEhKcFoyZGxjbng4Ymk1MGNtbG5aMlZ5TG1Gd2NHeDVLR1VzWXlraFBUMGhNU2twZTJsbUtDRm1KaVloYmk1dWIwSjFZbUpzWlNZbUlYSXVhWE5YYVc1a2IzY29aU2twZTJadmNpaHFQVzR1WkdWc1pXZGhkR1ZVZVhCbGZIeHdMSE5pTG5SbGMzUW9haXR3S1h4OEtHZzlhQzV3WVhKbGJuUk9iMlJsS1R0b08yZzlhQzV3WVhKbGJuUk9iMlJsS1c4dWNIVnphQ2hvS1N4cFBXZzdhVDA5UFNobExtOTNibVZ5Ukc5amRXMWxiblI4ZkdRcEppWnZMbkIxYzJnb2FTNWtaV1poZFd4MFZtbGxkM3g4YVM1d1lYSmxiblJYYVc1a2IzZDhmR0VwZldjOU1EdDNhR2xzWlNnb2FEMXZXMmNySzEwcEppWWhZaTVwYzFCeWIzQmhaMkYwYVc5dVUzUnZjSEJsWkNncEtXSXVkSGx3WlQxblBqRS9hanB1TG1KcGJtUlVlWEJsZkh4d0xHMDlLRmN1WjJWMEtHZ3NYQ0psZG1WdWRITmNJaWw4Zkh0OUtWdGlMblI1Y0dWZEppWlhMbWRsZENob0xGd2lhR0Z1Wkd4bFhDSXBMRzBtSm0wdVlYQndiSGtvYUN4aktTeHRQV3NtSm1oYmExMHNiU1ltYlM1aGNIQnNlU1ltVlNob0tTWW1LR0l1Y21WemRXeDBQVzB1WVhCd2JIa29hQ3hqS1N4aUxuSmxjM1ZzZEQwOVBTRXhKaVppTG5CeVpYWmxiblJFWldaaGRXeDBLQ2twTzNKbGRIVnliaUJpTG5SNWNHVTljQ3htZkh4aUxtbHpSR1ZtWVhWc2RGQnlaWFpsYm5SbFpDZ3BmSHh1TGw5a1pXWmhkV3gwSmladUxsOWtaV1poZFd4MExtRndjR3g1S0c4dWNHOXdLQ2tzWXlraFBUMGhNWHg4SVZVb1pTbDhmR3NtSm5JdWFYTkdkVzVqZEdsdmJpaGxXM0JkS1NZbUlYSXVhWE5YYVc1a2IzY29aU2ttSmlocFBXVmJhMTBzYVNZbUtHVmJhMTA5Ym5Wc2JDa3NjaTVsZG1WdWRDNTBjbWxuWjJWeVpXUTljQ3hsVzNCZEtDa3NjaTVsZG1WdWRDNTBjbWxuWjJWeVpXUTlkbTlwWkNBd0xHa21KaWhsVzJ0ZFBXa3BLU3hpTG5KbGMzVnNkSDE5TEhOcGJYVnNZWFJsT21aMWJtTjBhVzl1S0dFc1lpeGpLWHQyWVhJZ1pEMXlMbVY0ZEdWdVpDaHVaWGNnY2k1RmRtVnVkQ3hqTEh0MGVYQmxPbUVzYVhOVGFXMTFiR0YwWldRNklUQjlLVHR5TG1WMlpXNTBMblJ5YVdkblpYSW9aQ3h1ZFd4c0xHSXBmWDBwTEhJdVptNHVaWGgwWlc1a0tIdDBjbWxuWjJWeU9tWjFibU4wYVc5dUtHRXNZaWw3Y21WMGRYSnVJSFJvYVhNdVpXRmphQ2htZFc1amRHbHZiaWdwZTNJdVpYWmxiblF1ZEhKcFoyZGxjaWhoTEdJc2RHaHBjeWw5S1gwc2RISnBaMmRsY2toaGJtUnNaWEk2Wm5WdVkzUnBiMjRvWVN4aUtYdDJZWElnWXoxMGFHbHpXekJkTzJsbUtHTXBjbVYwZFhKdUlISXVaWFpsYm5RdWRISnBaMmRsY2loaExHSXNZeXdoTUNsOWZTa3NjaTVsWVdOb0tGd2lZbXgxY2lCbWIyTjFjeUJtYjJOMWMybHVJR1p2WTNWemIzVjBJSEpsYzJsNlpTQnpZM0p2Ykd3Z1kyeHBZMnNnWkdKc1kyeHBZMnNnYlc5MWMyVmtiM2R1SUcxdmRYTmxkWEFnYlc5MWMyVnRiM1psSUcxdmRYTmxiM1psY2lCdGIzVnpaVzkxZENCdGIzVnpaV1Z1ZEdWeUlHMXZkWE5sYkdWaGRtVWdZMmhoYm1kbElITmxiR1ZqZENCemRXSnRhWFFnYTJWNVpHOTNiaUJyWlhsd2NtVnpjeUJyWlhsMWNDQmpiMjUwWlhoMGJXVnVkVndpTG5Od2JHbDBLRndpSUZ3aUtTeG1kVzVqZEdsdmJpaGhMR0lwZTNJdVptNWJZbDA5Wm5WdVkzUnBiMjRvWVN4aktYdHlaWFIxY200Z1lYSm5kVzFsYm5SekxteGxibWQwYUQ0d1AzUm9hWE11YjI0b1lpeHVkV3hzTEdFc1l5azZkR2hwY3k1MGNtbG5aMlZ5S0dJcGZYMHBMSEl1Wm00dVpYaDBaVzVrS0h0b2IzWmxjanBtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCMGFHbHpMbTF2ZFhObFpXNTBaWElvWVNrdWJXOTFjMlZzWldGMlpTaGlmSHhoS1gxOUtTeHZMbVp2WTNWemFXNDlYQ0p2Ym1adlkzVnphVzVjSW1sdUlHRXNieTVtYjJOMWMybHVmSHh5TG1WaFkyZ29lMlp2WTNWek9sd2labTlqZFhOcGJsd2lMR0pzZFhJNlhDSm1iMk4xYzI5MWRGd2lmU3htZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqUFdaMWJtTjBhVzl1S0dFcGUzSXVaWFpsYm5RdWMybHRkV3hoZEdVb1lpeGhMblJoY21kbGRDeHlMbVYyWlc1MExtWnBlQ2hoS1NsOU8zSXVaWFpsYm5RdWMzQmxZMmxoYkZ0aVhUMTdjMlYwZFhBNlpuVnVZM1JwYjI0b0tYdDJZWElnWkQxMGFHbHpMbTkzYm1WeVJHOWpkVzFsYm5SOGZIUm9hWE1zWlQxWExtRmpZMlZ6Y3loa0xHSXBPMlY4ZkdRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loaExHTXNJVEFwTEZjdVlXTmpaWE56S0dRc1lpd29aWHg4TUNrck1TbDlMSFJsWVhKa2IzZHVPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHUTlkR2hwY3k1dmQyNWxja1J2WTNWdFpXNTBmSHgwYUdsekxHVTlWeTVoWTJObGMzTW9aQ3hpS1MweE8yVS9WeTVoWTJObGMzTW9aQ3hpTEdVcE9paGtMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvWVN4akxDRXdLU3hYTG5KbGJXOTJaU2hrTEdJcEtYMTlmU2s3ZG1GeUlIUmlQV0V1Ykc5allYUnBiMjRzZFdJOWNpNXViM2NvS1N4MllqMHZYRncvTHp0eUxuQmhjbk5sV0UxTVBXWjFibU4wYVc5dUtHSXBlM1poY2lCak8ybG1LQ0ZpZkh4Y0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1lpbHlaWFIxY200Z2JuVnNiRHQwY25sN1l6MG9ibVYzSUdFdVJFOU5VR0Z5YzJWeUtTNXdZWEp6WlVaeWIyMVRkSEpwYm1jb1lpeGNJblJsZUhRdmVHMXNYQ0lwZldOaGRHTm9LR1FwZTJNOWRtOXBaQ0F3ZlhKbGRIVnliaUJqSmlZaFl5NW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU2hjSW5CaGNuTmxjbVZ5Y205eVhDSXBMbXhsYm1kMGFIeDhjaTVsY25KdmNpaGNJa2x1ZG1Gc2FXUWdXRTFNT2lCY0lpdGlLU3hqZlR0MllYSWdkMkk5TDF4Y1cxeGNYU1F2TEhoaVBTOWNYSEkvWEZ4dUwyY3NlV0k5TDE0b1B6cHpkV0p0YVhSOFluVjBkRzl1ZkdsdFlXZGxmSEpsYzJWMGZHWnBiR1VwSkM5cExIcGlQUzllS0Q4NmFXNXdkWFI4YzJWc1pXTjBmSFJsZUhSaGNtVmhmR3RsZVdkbGJpa3ZhVHRtZFc1amRHbHZiaUJCWWloaExHSXNZeXhrS1h0MllYSWdaVHRwWmloQmNuSmhlUzVwYzBGeWNtRjVLR0lwS1hJdVpXRmphQ2hpTEdaMWJtTjBhVzl1S0dJc1pTbDdZM3g4ZDJJdWRHVnpkQ2hoS1Q5a0tHRXNaU2s2UVdJb1lTdGNJbHRjSWlzb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVW1KbTUxYkd3aFBXVS9ZanBjSWx3aUtTdGNJbDFjSWl4bExHTXNaQ2w5S1R0bGJITmxJR2xtS0dOOGZGd2liMkpxWldOMFhDSWhQVDF5TG5SNWNHVW9ZaWtwWkNoaExHSXBPMlZzYzJVZ1ptOXlLR1VnYVc0Z1lpbEJZaWhoSzF3aVcxd2lLMlVyWENKZFhDSXNZbHRsWFN4akxHUXBmWEl1Y0dGeVlXMDlablZ1WTNScGIyNG9ZU3hpS1h0MllYSWdZeXhrUFZ0ZExHVTlablZ1WTNScGIyNG9ZU3hpS1h0MllYSWdZejF5TG1selJuVnVZM1JwYjI0b1lpay9ZaWdwT21JN1pGdGtMbXhsYm1kMGFGMDlaVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLR0VwSzF3aVBWd2lLMlZ1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2h1ZFd4c1BUMWpQMXdpWENJNll5bDlPMmxtS0VGeWNtRjVMbWx6UVhKeVlYa29ZU2w4ZkdFdWFuRjFaWEo1SmlZaGNpNXBjMUJzWVdsdVQySnFaV04wS0dFcEtYSXVaV0ZqYUNoaExHWjFibU4wYVc5dUtDbDdaU2gwYUdsekxtNWhiV1VzZEdocGN5NTJZV3gxWlNsOUtUdGxiSE5sSUdadmNpaGpJR2x1SUdFcFFXSW9ZeXhoVzJOZExHSXNaU2s3Y21WMGRYSnVJR1F1YW05cGJpaGNJaVpjSWlsOUxISXVabTR1WlhoMFpXNWtLSHR6WlhKcFlXeHBlbVU2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnY2k1d1lYSmhiU2gwYUdsekxuTmxjbWxoYkdsNlpVRnljbUY1S0NrcGZTeHpaWEpwWVd4cGVtVkJjbkpoZVRwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMGFHbHpMbTFoY0NobWRXNWpkR2x2YmlncGUzWmhjaUJoUFhJdWNISnZjQ2gwYUdsekxGd2laV3hsYldWdWRITmNJaWs3Y21WMGRYSnVJR0UvY2k1dFlXdGxRWEp5WVhrb1lTazZkR2hwYzMwcExtWnBiSFJsY2lobWRXNWpkR2x2YmlncGUzWmhjaUJoUFhSb2FYTXVkSGx3WlR0eVpYUjFjbTRnZEdocGN5NXVZVzFsSmlZaGNpaDBhR2x6S1M1cGN5aGNJanBrYVhOaFlteGxaRndpS1NZbWVtSXVkR1Z6ZENoMGFHbHpMbTV2WkdWT1lXMWxLU1ltSVhsaUxuUmxjM1FvWVNrbUppaDBhR2x6TG1Ob1pXTnJaV1I4ZkNGcVlTNTBaWE4wS0dFcEtYMHBMbTFoY0NobWRXNWpkR2x2YmloaExHSXBlM1poY2lCalBYSW9kR2hwY3lrdWRtRnNLQ2s3Y21WMGRYSnVJRzUxYkd3OVBXTS9iblZzYkRwQmNuSmhlUzVwYzBGeWNtRjVLR01wUDNJdWJXRndLR01zWm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1ZTI1aGJXVTZZaTV1WVcxbExIWmhiSFZsT21FdWNtVndiR0ZqWlNoNFlpeGNJbHhjY2x4Y2Jsd2lLWDE5S1RwN2JtRnRaVHBpTG01aGJXVXNkbUZzZFdVNll5NXlaWEJzWVdObEtIaGlMRndpWEZ4eVhGeHVYQ0lwZlgwcExtZGxkQ2dwZlgwcE8zWmhjaUJDWWowdkpUSXdMMmNzUTJJOUx5TXVLaVF2TEVSaVBTOG9XejhtWFNsZlBWdGVKbDBxTHl4RllqMHZYaWd1S2o4cE9sc2dYRngwWFNvb1cxNWNYSEpjWEc1ZEtpa2tMMmR0TEVaaVBTOWVLRDg2WVdKdmRYUjhZWEJ3ZkdGd2NDMXpkRzl5WVdkbGZDNHJMV1Y0ZEdWdWMybHZibnhtYVd4bGZISmxjM3gzYVdSblpYUXBPaVF2TEVkaVBTOWVLRDg2UjBWVWZFaEZRVVFwSkM4c1NHSTlMMTVjWEM5Y1hDOHZMRWxpUFh0OUxFcGlQWHQ5TEV0aVBWd2lLaTljSWk1amIyNWpZWFFvWENJcVhDSXBMRXhpUFdRdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1GY0lpazdUR0l1YUhKbFpqMTBZaTVvY21WbU8yWjFibU4wYVc5dUlFMWlLR0VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWhpTEdNcGUxd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQmlKaVlvWXoxaUxHSTlYQ0lxWENJcE8zWmhjaUJrTEdVOU1DeG1QV0l1ZEc5TWIzZGxja05oYzJVb0tTNXRZWFJqYUNoTUtYeDhXMTA3YVdZb2NpNXBjMFoxYm1OMGFXOXVLR01wS1hkb2FXeGxLR1E5Wmx0bEt5dGRLVndpSzF3aVBUMDlaRnN3WFQ4b1pEMWtMbk5zYVdObEtERXBmSHhjSWlwY0lpd29ZVnRrWFQxaFcyUmRmSHhiWFNrdWRXNXphR2xtZENoaktTazZLR0ZiWkYwOVlWdGtYWHg4VzEwcExuQjFjMmdvWXlsOWZXWjFibU4wYVc5dUlFNWlLR0VzWWl4akxHUXBlM1poY2lCbFBYdDlMR1k5WVQwOVBVcGlPMloxYm1OMGFXOXVJR2NvYUNsN2RtRnlJR2s3Y21WMGRYSnVJR1ZiYUYwOUlUQXNjaTVsWVdOb0tHRmJhRjE4ZkZ0ZExHWjFibU4wYVc5dUtHRXNhQ2w3ZG1GeUlHbzlhQ2hpTEdNc1pDazdjbVYwZFhKdVhDSnpkSEpwYm1kY0lpRTlkSGx3Wlc5bUlHcDhmR1o4ZkdWYmFsMC9aajhoS0drOWFpazZkbTlwWkNBd09paGlMbVJoZEdGVWVYQmxjeTUxYm5Ob2FXWjBLR29wTEdjb2Fpa3NJVEVwZlNrc2FYMXlaWFIxY200Z1p5aGlMbVJoZEdGVWVYQmxjMXN3WFNsOGZDRmxXMXdpS2x3aVhTWW1aeWhjSWlwY0lpbDlablZ1WTNScGIyNGdUMklvWVN4aUtYdDJZWElnWXl4a0xHVTljaTVoYW1GNFUyVjBkR2x1WjNNdVpteGhkRTl3ZEdsdmJuTjhmSHQ5TzJadmNpaGpJR2x1SUdJcGRtOXBaQ0F3SVQwOVlsdGpYU1ltS0NobFcyTmRQMkU2Wkh4OEtHUTllMzBwS1Z0alhUMWlXMk5kS1R0eVpYUjFjbTRnWkNZbWNpNWxlSFJsYm1Rb0lUQXNZU3hrS1N4aGZXWjFibU4wYVc5dUlGQmlLR0VzWWl4aktYdDJZWElnWkN4bExHWXNaeXhvUFdFdVkyOXVkR1Z1ZEhNc2FUMWhMbVJoZEdGVWVYQmxjenQzYUdsc1pTaGNJaXBjSWowOVBXbGJNRjBwYVM1emFHbG1kQ2dwTEhadmFXUWdNRDA5UFdRbUppaGtQV0V1YldsdFpWUjVjR1Y4ZkdJdVoyVjBVbVZ6Y0c5dWMyVklaV0ZrWlhJb1hDSkRiMjUwWlc1MExWUjVjR1ZjSWlrcE8ybG1LR1FwWm05eUtHVWdhVzRnYUNscFppaG9XMlZkSmlab1cyVmRMblJsYzNRb1pDa3BlMmt1ZFc1emFHbG1kQ2hsS1R0aWNtVmhhMzFwWmlocFd6QmRhVzRnWXlsbVBXbGJNRjA3Wld4elpYdG1iM0lvWlNCcGJpQmpLWHRwWmlnaGFWc3dYWHg4WVM1amIyNTJaWEowWlhKelcyVXJYQ0lnWENJcmFWc3dYVjBwZTJZOVpUdGljbVZoYTMxbmZId29aejFsS1gxbVBXWjhmR2Q5YVdZb1ppbHlaWFIxY200Z1ppRTlQV2xiTUYwbUpta3VkVzV6YUdsbWRDaG1LU3hqVzJaZGZXWjFibU4wYVc5dUlGRmlLR0VzWWl4akxHUXBlM1poY2lCbExHWXNaeXhvTEdrc2FqMTdmU3hyUFdFdVpHRjBZVlI1Y0dWekxuTnNhV05sS0NrN2FXWW9hMXN4WFNsbWIzSW9aeUJwYmlCaExtTnZiblpsY25SbGNuTXBhbHRuTG5SdlRHOTNaWEpEWVhObEtDbGRQV0V1WTI5dWRtVnlkR1Z5YzF0blhUdG1QV3N1YzJocFpuUW9LVHQzYUdsc1pTaG1LV2xtS0dFdWNtVnpjRzl1YzJWR2FXVnNaSE5iWmwwbUppaGpXMkV1Y21WemNHOXVjMlZHYVdWc1pITmJabDFkUFdJcExDRnBKaVprSmlaaExtUmhkR0ZHYVd4MFpYSW1KaWhpUFdFdVpHRjBZVVpwYkhSbGNpaGlMR0V1WkdGMFlWUjVjR1VwS1N4cFBXWXNaajFyTG5Ob2FXWjBLQ2twYVdZb1hDSXFYQ0k5UFQxbUtXWTlhVHRsYkhObElHbG1LRndpS2x3aUlUMDlhU1ltYVNFOVBXWXBlMmxtS0djOWFsdHBLMXdpSUZ3aUsyWmRmSHhxVzF3aUtpQmNJaXRtWFN3aFp5bG1iM0lvWlNCcGJpQnFLV2xtS0dnOVpTNXpjR3hwZENoY0lpQmNJaWtzYUZzeFhUMDlQV1ltSmloblBXcGJhU3RjSWlCY0lpdG9XekJkWFh4OGFsdGNJaW9nWENJcmFGc3dYVjBwS1h0blBUMDlJVEEvWnoxcVcyVmRPbXBiWlYwaFBUMGhNQ1ltS0dZOWFGc3dYU3hyTG5WdWMyaHBablFvYUZzeFhTa3BPMkp5WldGcmZXbG1LR2NoUFQwaE1DbHBaaWhuSmlaaFcxd2lkR2h5YjNkelhDSmRLV0k5WnloaUtUdGxiSE5sSUhSeWVYdGlQV2NvWWlsOVkyRjBZMmdvYkNsN2NtVjBkWEp1ZTNOMFlYUmxPbHdpY0dGeWMyVnlaWEp5YjNKY0lpeGxjbkp2Y2pwblAydzZYQ0pPYnlCamIyNTJaWEp6YVc5dUlHWnliMjBnWENJcmFTdGNJaUIwYnlCY0lpdG1mWDE5Y21WMGRYSnVlM04wWVhSbE9sd2ljM1ZqWTJWemMxd2lMR1JoZEdFNlluMTljaTVsZUhSbGJtUW9lMkZqZEdsMlpUb3dMR3hoYzNSTmIyUnBabWxsWkRwN2ZTeGxkR0ZuT250OUxHRnFZWGhUWlhSMGFXNW5jenA3ZFhKc09uUmlMbWh5WldZc2RIbHdaVHBjSWtkRlZGd2lMR2x6VEc5allXdzZSbUl1ZEdWemRDaDBZaTV3Y205MGIyTnZiQ2tzWjJ4dlltRnNPaUV3TEhCeWIyTmxjM05FWVhSaE9pRXdMR0Z6ZVc1ak9pRXdMR052Ym5SbGJuUlVlWEJsT2x3aVlYQndiR2xqWVhScGIyNHZlQzEzZDNjdFptOXliUzExY214bGJtTnZaR1ZrT3lCamFHRnljMlYwUFZWVVJpMDRYQ0lzWVdOalpYQjBjenA3WENJcVhDSTZTMklzZEdWNGREcGNJblJsZUhRdmNHeGhhVzVjSWl4b2RHMXNPbHdpZEdWNGRDOW9kRzFzWENJc2VHMXNPbHdpWVhCd2JHbGpZWFJwYjI0dmVHMXNMQ0IwWlhoMEwzaHRiRndpTEdwemIyNDZYQ0poY0hCc2FXTmhkR2x2Ymk5cWMyOXVMQ0IwWlhoMEwycGhkbUZ6WTNKcGNIUmNJbjBzWTI5dWRHVnVkSE02ZTNodGJEb3ZYRnhpZUcxc1hGeGlMeXhvZEcxc09pOWNYR0pvZEcxc0x5eHFjMjl1T2k5Y1hHSnFjMjl1WEZ4aUwzMHNjbVZ6Y0c5dWMyVkdhV1ZzWkhNNmUzaHRiRHBjSW5KbGMzQnZibk5sV0UxTVhDSXNkR1Y0ZERwY0luSmxjM0J2Ym5ObFZHVjRkRndpTEdwemIyNDZYQ0p5WlhOd2IyNXpaVXBUVDA1Y0luMHNZMjl1ZG1WeWRHVnljenA3WENJcUlIUmxlSFJjSWpwVGRISnBibWNzWENKMFpYaDBJR2gwYld4Y0lqb2hNQ3hjSW5SbGVIUWdhbk52Ymx3aU9rcFRUMDR1Y0dGeWMyVXNYQ0owWlhoMElIaHRiRndpT25JdWNHRnljMlZZVFV4OUxHWnNZWFJQY0hScGIyNXpPbnQxY213NklUQXNZMjl1ZEdWNGREb2hNSDE5TEdGcVlYaFRaWFIxY0RwbWRXNWpkR2x2YmloaExHSXBlM0psZEhWeWJpQmlQMDlpS0U5aUtHRXNjaTVoYW1GNFUyVjBkR2x1WjNNcExHSXBPazlpS0hJdVlXcGhlRk5sZEhScGJtZHpMR0VwZlN4aGFtRjRVSEpsWm1sc2RHVnlPazFpS0VsaUtTeGhhbUY0VkhKaGJuTndiM0owT2sxaUtFcGlLU3hoYW1GNE9tWjFibU4wYVc5dUtHSXNZeWw3WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUdJbUppaGpQV0lzWWoxMmIybGtJREFwTEdNOVkzeDhlMzA3ZG1GeUlHVXNaaXhuTEdnc2FTeHFMR3NzYkN4dExHNHNiejF5TG1GcVlYaFRaWFIxY0NoN2ZTeGpLU3h3UFc4dVkyOXVkR1Y0ZEh4OGJ5eHhQVzh1WTI5dWRHVjRkQ1ltS0hBdWJtOWtaVlI1Y0dWOGZIQXVhbkYxWlhKNUtUOXlLSEFwT25JdVpYWmxiblFzY3oxeUxrUmxabVZ5Y21Wa0tDa3NkRDF5TGtOaGJHeGlZV05yY3loY0ltOXVZMlVnYldWdGIzSjVYQ0lwTEhVOWJ5NXpkR0YwZFhORGIyUmxmSHg3ZlN4MlBYdDlMSGM5ZTMwc2VEMWNJbU5oYm1ObGJHVmtYQ0lzZVQxN2NtVmhaSGxUZEdGMFpUb3dMR2RsZEZKbGMzQnZibk5sU0dWaFpHVnlPbVoxYm1OMGFXOXVLR0VwZTNaaGNpQmlPMmxtS0dzcGUybG1LQ0ZvS1h0b1BYdDlPM2RvYVd4bEtHSTlSV0l1WlhobFl5aG5LU2xvVzJKYk1WMHVkRzlNYjNkbGNrTmhjMlVvS1YwOVlsc3lYWDFpUFdoYllTNTBiMHh2ZDJWeVEyRnpaU2dwWFgxeVpYUjFjbTRnYm5Wc2JEMDlZajl1ZFd4c09tSjlMR2RsZEVGc2JGSmxjM0J2Ym5ObFNHVmhaR1Z5Y3pwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCclAyYzZiblZzYkgwc2MyVjBVbVZ4ZFdWemRFaGxZV1JsY2pwbWRXNWpkR2x2YmloaExHSXBlM0psZEhWeWJpQnVkV3hzUFQxckppWW9ZVDEzVzJFdWRHOU1iM2RsY2tOaGMyVW9LVjA5ZDF0aExuUnZURzkzWlhKRFlYTmxLQ2xkZkh4aExIWmJZVjA5WWlrc2RHaHBjMzBzYjNabGNuSnBaR1ZOYVcxbFZIbHdaVHBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnYm5Wc2JEMDlheVltS0c4dWJXbHRaVlI1Y0dVOVlTa3NkR2hwYzMwc2MzUmhkSFZ6UTI5a1pUcG1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqdHBaaWhoS1dsbUtHc3BlUzVoYkhkaGVYTW9ZVnQ1TG5OMFlYUjFjMTBwTzJWc2MyVWdabTl5S0dJZ2FXNGdZU2wxVzJKZFBWdDFXMkpkTEdGYllsMWRPM0psZEhWeWJpQjBhR2x6ZlN4aFltOXlkRHBtZFc1amRHbHZiaWhoS1h0MllYSWdZajFoZkh4NE8zSmxkSFZ5YmlCbEppWmxMbUZpYjNKMEtHSXBMRUVvTUN4aUtTeDBhR2x6ZlgwN2FXWW9jeTV3Y205dGFYTmxLSGtwTEc4dWRYSnNQU2dvWW54OGJ5NTFjbXg4ZkhSaUxtaHlaV1lwSzF3aVhDSXBMbkpsY0d4aFkyVW9TR0lzZEdJdWNISnZkRzlqYjJ3clhDSXZMMXdpS1N4dkxuUjVjR1U5WXk1dFpYUm9iMlI4ZkdNdWRIbHdaWHg4Ynk1dFpYUm9iMlI4Zkc4dWRIbHdaU3h2TG1SaGRHRlVlWEJsY3owb2J5NWtZWFJoVkhsd1pYeDhYQ0lxWENJcExuUnZURzkzWlhKRFlYTmxLQ2t1YldGMFkyZ29UQ2w4ZkZ0Y0lsd2lYU3h1ZFd4c1BUMXZMbU55YjNOelJHOXRZV2x1S1h0cVBXUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltRmNJaWs3ZEhKNWUyb3VhSEpsWmoxdkxuVnliQ3hxTG1oeVpXWTlhaTVvY21WbUxHOHVZM0p2YzNORWIyMWhhVzQ5VEdJdWNISnZkRzlqYjJ3clhDSXZMMXdpSzB4aUxtaHZjM1FoUFdvdWNISnZkRzlqYjJ3clhDSXZMMXdpSzJvdWFHOXpkSDFqWVhSamFDaDZLWHR2TG1OeWIzTnpSRzl0WVdsdVBTRXdmWDFwWmlodkxtUmhkR0VtSm04dWNISnZZMlZ6YzBSaGRHRW1KbHdpYzNSeWFXNW5YQ0loUFhSNWNHVnZaaUJ2TG1SaGRHRW1KaWh2TG1SaGRHRTljaTV3WVhKaGJTaHZMbVJoZEdFc2J5NTBjbUZrYVhScGIyNWhiQ2twTEU1aUtFbGlMRzhzWXl4NUtTeHJLWEpsZEhWeWJpQjVPMnc5Y2k1bGRtVnVkQ1ltYnk1bmJHOWlZV3dzYkNZbU1EMDlQWEl1WVdOMGFYWmxLeXNtSm5JdVpYWmxiblF1ZEhKcFoyZGxjaWhjSW1GcVlYaFRkR0Z5ZEZ3aUtTeHZMblI1Y0dVOWJ5NTBlWEJsTG5SdlZYQndaWEpEWVhObEtDa3NieTVvWVhORGIyNTBaVzUwUFNGSFlpNTBaWE4wS0c4dWRIbHdaU2tzWmoxdkxuVnliQzV5WlhCc1lXTmxLRU5pTEZ3aVhDSXBMRzh1YUdGelEyOXVkR1Z1ZEQ5dkxtUmhkR0VtSm04dWNISnZZMlZ6YzBSaGRHRW1KakE5UFQwb2J5NWpiMjUwWlc1MFZIbHdaWHg4WENKY0lpa3VhVzVrWlhoUFppaGNJbUZ3Y0d4cFkyRjBhVzl1TDNndGQzZDNMV1p2Y20wdGRYSnNaVzVqYjJSbFpGd2lLU1ltS0c4dVpHRjBZVDF2TG1SaGRHRXVjbVZ3YkdGalpTaENZaXhjSWl0Y0lpa3BPaWh1UFc4dWRYSnNMbk5zYVdObEtHWXViR1Z1WjNSb0tTeHZMbVJoZEdFbUppaG1LejBvZG1JdWRHVnpkQ2htS1Q5Y0lpWmNJanBjSWo5Y0lpa3JieTVrWVhSaExHUmxiR1YwWlNCdkxtUmhkR0VwTEc4dVkyRmphR1U5UFQwaE1TWW1LR1k5Wmk1eVpYQnNZV05sS0VSaUxGd2lKREZjSWlrc2JqMG9kbUl1ZEdWemRDaG1LVDljSWlaY0lqcGNJajljSWlrclhDSmZQVndpSzNWaUt5c2dLMjRwTEc4dWRYSnNQV1lyYmlrc2J5NXBaazF2WkdsbWFXVmtKaVlvY2k1c1lYTjBUVzlrYVdacFpXUmJabDBtSm5rdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loY0lrbG1MVTF2WkdsbWFXVmtMVk5wYm1ObFhDSXNjaTVzWVhOMFRXOWthV1pwWldSYlpsMHBMSEl1WlhSaFoxdG1YU1ltZVM1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0Z3aVNXWXRUbTl1WlMxTllYUmphRndpTEhJdVpYUmhaMXRtWFNrcExDaHZMbVJoZEdFbUptOHVhR0Z6UTI5dWRHVnVkQ1ltYnk1amIyNTBaVzUwVkhsd1pTRTlQU0V4Zkh4akxtTnZiblJsYm5SVWVYQmxLU1ltZVM1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0Z3aVEyOXVkR1Z1ZEMxVWVYQmxYQ0lzYnk1amIyNTBaVzUwVkhsd1pTa3NlUzV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLRndpUVdOalpYQjBYQ0lzYnk1a1lYUmhWSGx3WlhOYk1GMG1KbTh1WVdOalpYQjBjMXR2TG1SaGRHRlVlWEJsYzFzd1hWMC9ieTVoWTJObGNIUnpXMjh1WkdGMFlWUjVjR1Z6V3pCZFhTc29YQ0lxWENJaFBUMXZMbVJoZEdGVWVYQmxjMXN3WFQ5Y0lpd2dYQ0lyUzJJclhDSTdJSEU5TUM0d01Wd2lPbHdpWENJcE9tOHVZV05qWlhCMGMxdGNJaXBjSWwwcE8yWnZjaWh0SUdsdUlHOHVhR1ZoWkdWeWN5bDVMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9iU3h2TG1obFlXUmxjbk5iYlYwcE8ybG1LRzh1WW1WbWIzSmxVMlZ1WkNZbUtHOHVZbVZtYjNKbFUyVnVaQzVqWVd4c0tIQXNlU3h2S1QwOVBTRXhmSHhyS1NseVpYUjFjbTRnZVM1aFltOXlkQ2dwTzJsbUtIZzlYQ0poWW05eWRGd2lMSFF1WVdSa0tHOHVZMjl0Y0d4bGRHVXBMSGt1Wkc5dVpTaHZMbk4xWTJObGMzTXBMSGt1Wm1GcGJDaHZMbVZ5Y205eUtTeGxQVTVpS0VwaUxHOHNZeXg1S1NsN2FXWW9lUzV5WldGa2VWTjBZWFJsUFRFc2JDWW1jUzUwY21sbloyVnlLRndpWVdwaGVGTmxibVJjSWl4YmVTeHZYU2tzYXlseVpYUjFjbTRnZVR0dkxtRnplVzVqSmladkxuUnBiV1Z2ZFhRK01DWW1LR2s5WVM1elpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdlUzVoWW05eWRDaGNJblJwYldWdmRYUmNJaWw5TEc4dWRHbHRaVzkxZENrcE8zUnllWHRyUFNFeExHVXVjMlZ1WkNoMkxFRXBmV05oZEdOb0tIb3BlMmxtS0dzcGRHaHliM2NnZWp0QktDMHhMSG9wZlgxbGJITmxJRUVvTFRFc1hDSk9ieUJVY21GdWMzQnZjblJjSWlrN1puVnVZM1JwYjI0Z1FTaGlMR01zWkN4b0tYdDJZWElnYWl4dExHNHNkaXgzTEhnOVl6dHJmSHdvYXowaE1DeHBKaVpoTG1Oc1pXRnlWR2x0Wlc5MWRDaHBLU3hsUFhadmFXUWdNQ3huUFdoOGZGd2lYQ0lzZVM1eVpXRmtlVk4wWVhSbFBXSStNRDgwT2pBc2FqMWlQajB5TURBbUptSThNekF3Zkh3ek1EUTlQVDFpTEdRbUppaDJQVkJpS0c4c2VTeGtLU2tzZGoxUllpaHZMSFlzZVN4cUtTeHFQeWh2TG1sbVRXOWthV1pwWldRbUppaDNQWGt1WjJWMFVtVnpjRzl1YzJWSVpXRmtaWElvWENKTVlYTjBMVTF2WkdsbWFXVmtYQ0lwTEhjbUppaHlMbXhoYzNSTmIyUnBabWxsWkZ0bVhUMTNLU3gzUFhrdVoyVjBVbVZ6Y0c5dWMyVklaV0ZrWlhJb1hDSmxkR0ZuWENJcExIY21KaWh5TG1WMFlXZGJabDA5ZHlrcExESXdORDA5UFdKOGZGd2lTRVZCUkZ3aVBUMDlieTUwZVhCbFAzZzlYQ0p1YjJOdmJuUmxiblJjSWpvek1EUTlQVDFpUDNnOVhDSnViM1J0YjJScFptbGxaRndpT2loNFBYWXVjM1JoZEdVc2JUMTJMbVJoZEdFc2JqMTJMbVZ5Y205eUxHbzlJVzRwS1Rvb2JqMTRMQ0ZpSmlaNGZId29lRDFjSW1WeWNtOXlYQ0lzWWp3d0ppWW9ZajB3S1NrcExIa3VjM1JoZEhWelBXSXNlUzV6ZEdGMGRYTlVaWGgwUFNoamZIeDRLU3RjSWx3aUxHby9jeTV5WlhOdmJIWmxWMmwwYUNod0xGdHRMSGdzZVYwcE9uTXVjbVZxWldOMFYybDBhQ2h3TEZ0NUxIZ3NibDBwTEhrdWMzUmhkSFZ6UTI5a1pTaDFLU3gxUFhadmFXUWdNQ3hzSmlaeExuUnlhV2RuWlhJb2FqOWNJbUZxWVhoVGRXTmpaWE56WENJNlhDSmhhbUY0UlhKeWIzSmNJaXhiZVN4dkxHby9iVHB1WFNrc2RDNW1hWEpsVjJsMGFDaHdMRnQ1TEhoZEtTeHNKaVlvY1M1MGNtbG5aMlZ5S0Z3aVlXcGhlRU52YlhCc1pYUmxYQ0lzVzNrc2IxMHBMQzB0Y2k1aFkzUnBkbVY4ZkhJdVpYWmxiblF1ZEhKcFoyZGxjaWhjSW1GcVlYaFRkRzl3WENJcEtTbDljbVYwZFhKdUlIbDlMR2RsZEVwVFQwNDZablZ1WTNScGIyNG9ZU3hpTEdNcGUzSmxkSFZ5YmlCeUxtZGxkQ2hoTEdJc1l5eGNJbXB6YjI1Y0lpbDlMR2RsZEZOamNtbHdkRHBtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCeUxtZGxkQ2hoTEhadmFXUWdNQ3hpTEZ3aWMyTnlhWEIwWENJcGZYMHBMSEl1WldGamFDaGJYQ0puWlhSY0lpeGNJbkJ2YzNSY0lsMHNablZ1WTNScGIyNG9ZU3hpS1h0eVcySmRQV1oxYm1OMGFXOXVLR0VzWXl4a0xHVXBlM0psZEhWeWJpQnlMbWx6Um5WdVkzUnBiMjRvWXlrbUppaGxQV1Y4ZkdRc1pEMWpMR005ZG05cFpDQXdLU3h5TG1GcVlYZ29jaTVsZUhSbGJtUW9lM1Z5YkRwaExIUjVjR1U2WWl4a1lYUmhWSGx3WlRwbExHUmhkR0U2WXl4emRXTmpaWE56T21SOUxISXVhWE5RYkdGcGJrOWlhbVZqZENoaEtTWW1ZU2twZlgwcExISXVYMlYyWVd4VmNtdzlablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJSEl1WVdwaGVDaDdkWEpzT21Fc2RIbHdaVHBjSWtkRlZGd2lMR1JoZEdGVWVYQmxPbHdpYzJOeWFYQjBYQ0lzWTJGamFHVTZJVEFzWVhONWJtTTZJVEVzWjJ4dlltRnNPaUV4TEZ3aWRHaHliM2R6WENJNklUQjlLWDBzY2k1bWJpNWxlSFJsYm1Rb2UzZHlZWEJCYkd3NlpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJN2NtVjBkWEp1SUhSb2FYTmJNRjBtSmloeUxtbHpSblZ1WTNScGIyNG9ZU2ttSmloaFBXRXVZMkZzYkNoMGFHbHpXekJkS1Nrc1lqMXlLR0VzZEdocGMxc3dYUzV2ZDI1bGNrUnZZM1Z0Wlc1MEtTNWxjU2d3S1M1amJHOXVaU2doTUNrc2RHaHBjMXN3WFM1d1lYSmxiblJPYjJSbEppWmlMbWx1YzJWeWRFSmxabTl5WlNoMGFHbHpXekJkS1N4aUxtMWhjQ2htZFc1amRHbHZiaWdwZTNaaGNpQmhQWFJvYVhNN2QyaHBiR1VvWVM1bWFYSnpkRVZzWlcxbGJuUkRhR2xzWkNsaFBXRXVabWx5YzNSRmJHVnRaVzUwUTJocGJHUTdjbVYwZFhKdUlHRjlLUzVoY0hCbGJtUW9kR2hwY3lrcExIUm9hWE45TEhkeVlYQkpibTVsY2pwbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2NpNXBjMFoxYm1OMGFXOXVLR0VwUDNSb2FYTXVaV0ZqYUNobWRXNWpkR2x2YmloaUtYdHlLSFJvYVhNcExuZHlZWEJKYm01bGNpaGhMbU5oYkd3b2RHaHBjeXhpS1NsOUtUcDBhR2x6TG1WaFkyZ29ablZ1WTNScGIyNG9LWHQyWVhJZ1lqMXlLSFJvYVhNcExHTTlZaTVqYjI1MFpXNTBjeWdwTzJNdWJHVnVaM1JvUDJNdWQzSmhjRUZzYkNoaEtUcGlMbUZ3Y0dWdVpDaGhLWDBwZlN4M2NtRndPbVoxYm1OMGFXOXVLR0VwZTNaaGNpQmlQWEl1YVhOR2RXNWpkR2x2YmloaEtUdHlaWFIxY200Z2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtHTXBlM0lvZEdocGN5a3VkM0poY0VGc2JDaGlQMkV1WTJGc2JDaDBhR2x6TEdNcE9tRXBmU2w5TEhWdWQzSmhjRHBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnZEdocGN5NXdZWEpsYm5Rb1lTa3VibTkwS0Z3aVltOWtlVndpS1M1bFlXTm9LR1oxYm1OMGFXOXVLQ2w3Y2loMGFHbHpLUzV5WlhCc1lXTmxWMmwwYUNoMGFHbHpMbU5vYVd4a1RtOWtaWE1wZlNrc2RHaHBjMzE5S1N4eUxtVjRjSEl1Y0hObGRXUnZjeTVvYVdSa1pXNDlablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJWEl1Wlhod2NpNXdjMlYxWkc5ekxuWnBjMmxpYkdVb1lTbDlMSEl1Wlhod2NpNXdjMlYxWkc5ekxuWnBjMmxpYkdVOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlTRW9ZUzV2Wm1aelpYUlhhV1IwYUh4OFlTNXZabVp6WlhSSVpXbG5hSFI4ZkdFdVoyVjBRMnhwWlc1MFVtVmpkSE1vS1M1c1pXNW5kR2dwZlN4eUxtRnFZWGhUWlhSMGFXNW5jeTU0YUhJOVpuVnVZM1JwYjI0b0tYdDBjbmw3Y21WMGRYSnVJRzVsZHlCaExsaE5URWgwZEhCU1pYRjFaWE4wZldOaGRHTm9LR0lwZTMxOU8zWmhjaUJTWWoxN01Eb3lNREFzTVRJeU16b3lNRFI5TEZOaVBYSXVZV3BoZUZObGRIUnBibWR6TG5ob2NpZ3BPMjh1WTI5eWN6MGhJVk5pSmlaY0luZHBkR2hEY21Wa1pXNTBhV0ZzYzF3aWFXNGdVMklzYnk1aGFtRjRQVk5pUFNFaFUySXNjaTVoYW1GNFZISmhibk53YjNKMEtHWjFibU4wYVc5dUtHSXBlM1poY2lCakxHUTdhV1lvYnk1amIzSnpmSHhUWWlZbUlXSXVZM0p2YzNORWIyMWhhVzRwY21WMGRYSnVlM05sYm1RNlpuVnVZM1JwYjI0b1pTeG1LWHQyWVhJZ1p5eG9QV0l1ZUdoeUtDazdhV1lvYUM1dmNHVnVLR0l1ZEhsd1pTeGlMblZ5YkN4aUxtRnplVzVqTEdJdWRYTmxjbTVoYldVc1lpNXdZWE56ZDI5eVpDa3NZaTU0YUhKR2FXVnNaSE1wWm05eUtHY2dhVzRnWWk1NGFISkdhV1ZzWkhNcGFGdG5YVDFpTG5ob2NrWnBaV3hrYzF0blhUdGlMbTFwYldWVWVYQmxKaVpvTG05MlpYSnlhV1JsVFdsdFpWUjVjR1VtSm1ndWIzWmxjbkpwWkdWTmFXMWxWSGx3WlNoaUxtMXBiV1ZVZVhCbEtTeGlMbU55YjNOelJHOXRZV2x1Zkh4bFcxd2lXQzFTWlhGMVpYTjBaV1F0VjJsMGFGd2lYWHg4S0dWYlhDSllMVkpsY1hWbGMzUmxaQzFYYVhSb1hDSmRQVndpV0UxTVNIUjBjRkpsY1hWbGMzUmNJaWs3Wm05eUtHY2dhVzRnWlNsb0xuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb1p5eGxXMmRkS1R0alBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQm1kVzVqZEdsdmJpZ3BlMk1tSmloalBXUTlhQzV2Ym14dllXUTlhQzV2Ym1WeWNtOXlQV2d1YjI1aFltOXlkRDFvTG05dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlQxdWRXeHNMRndpWVdKdmNuUmNJajA5UFdFL2FDNWhZbTl5ZENncE9sd2laWEp5YjNKY0lqMDlQV0UvWENKdWRXMWlaWEpjSWlFOWRIbHdaVzltSUdndWMzUmhkSFZ6UDJZb01DeGNJbVZ5Y205eVhDSXBPbVlvYUM1emRHRjBkWE1zYUM1emRHRjBkWE5VWlhoMEtUcG1LRkppVzJndWMzUmhkSFZ6WFh4OGFDNXpkR0YwZFhNc2FDNXpkR0YwZFhOVVpYaDBMRndpZEdWNGRGd2lJVDA5S0dndWNtVnpjRzl1YzJWVWVYQmxmSHhjSW5SbGVIUmNJaWw4ZkZ3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCb0xuSmxjM0J2Ym5ObFZHVjRkRDk3WW1sdVlYSjVPbWd1Y21WemNHOXVjMlY5T250MFpYaDBPbWd1Y21WemNHOXVjMlZVWlhoMGZTeG9MbWRsZEVGc2JGSmxjM0J2Ym5ObFNHVmhaR1Z5Y3lncEtTbDlmU3hvTG05dWJHOWhaRDFqS0Nrc1pEMW9MbTl1WlhKeWIzSTlZeWhjSW1WeWNtOXlYQ0lwTEhadmFXUWdNQ0U5UFdndWIyNWhZbTl5ZEQ5b0xtOXVZV0p2Y25ROVpEcG9MbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aVDFtZFc1amRHbHZiaWdwZXpROVBUMW9MbkpsWVdSNVUzUmhkR1VtSm1FdWMyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMk1tSm1Rb0tYMHBmU3hqUFdNb1hDSmhZbTl5ZEZ3aUtUdDBjbmw3YUM1elpXNWtLR0l1YUdGelEyOXVkR1Z1ZENZbVlpNWtZWFJoZkh4dWRXeHNLWDFqWVhSamFDaHBLWHRwWmloaktYUm9jbTkzSUdsOWZTeGhZbTl5ZERwbWRXNWpkR2x2YmlncGUyTW1KbU1vS1gxOWZTa3NjaTVoYW1GNFVISmxabWxzZEdWeUtHWjFibU4wYVc5dUtHRXBlMkV1WTNKdmMzTkViMjFoYVc0bUppaGhMbU52Ym5SbGJuUnpMbk5qY21sd2REMGhNU2w5S1N4eUxtRnFZWGhUWlhSMWNDaDdZV05qWlhCMGN6cDdjMk55YVhCME9sd2lkR1Y0ZEM5cVlYWmhjMk55YVhCMExDQmhjSEJzYVdOaGRHbHZiaTlxWVhaaGMyTnlhWEIwTENCaGNIQnNhV05oZEdsdmJpOWxZMjFoYzJOeWFYQjBMQ0JoY0hCc2FXTmhkR2x2Ymk5NExXVmpiV0Z6WTNKcGNIUmNJbjBzWTI5dWRHVnVkSE02ZTNOamNtbHdkRG92WEZ4aUtEODZhbUYyWVh4bFkyMWhLWE5qY21sd2RGeGNZaTk5TEdOdmJuWmxjblJsY25NNmUxd2lkR1Y0ZENCelkzSnBjSFJjSWpwbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2NpNW5iRzlpWVd4RmRtRnNLR0VwTEdGOWZYMHBMSEl1WVdwaGVGQnlaV1pwYkhSbGNpaGNJbk5qY21sd2RGd2lMR1oxYm1OMGFXOXVLR0VwZTNadmFXUWdNRDA5UFdFdVkyRmphR1VtSmloaExtTmhZMmhsUFNFeEtTeGhMbU55YjNOelJHOXRZV2x1SmlZb1lTNTBlWEJsUFZ3aVIwVlVYQ0lwZlNrc2NpNWhhbUY0VkhKaGJuTndiM0owS0Z3aWMyTnlhWEIwWENJc1puVnVZM1JwYjI0b1lTbDdhV1lvWVM1amNtOXpjMFJ2YldGcGJpbDdkbUZ5SUdJc1l6dHlaWFIxY201N2MyVnVaRHBtZFc1amRHbHZiaWhsTEdZcGUySTljaWhjSWp4elkzSnBjSFErWENJcExuQnliM0FvZTJOb1lYSnpaWFE2WVM1elkzSnBjSFJEYUdGeWMyVjBMSE55WXpwaExuVnliSDBwTG05dUtGd2liRzloWkNCbGNuSnZjbHdpTEdNOVpuVnVZM1JwYjI0b1lTbDdZaTV5WlcxdmRtVW9LU3hqUFc1MWJHd3NZU1ltWmloY0ltVnljbTl5WENJOVBUMWhMblI1Y0dVL05EQTBPakl3TUN4aExuUjVjR1VwZlNrc1pDNW9aV0ZrTG1Gd2NHVnVaRU5vYVd4a0tHSmJNRjBwZlN4aFltOXlkRHBtZFc1amRHbHZiaWdwZTJNbUptTW9LWDE5ZlgwcE8zWmhjaUJVWWoxYlhTeFZZajB2S0QwcFhGdy9LRDg5Sm53a0tYeGNYRDljWEQ4dk8zSXVZV3BoZUZObGRIVndLSHRxYzI5dWNEcGNJbU5oYkd4aVlXTnJYQ0lzYW5OdmJuQkRZV3hzWW1GamF6cG1kVzVqZEdsdmJpZ3BlM1poY2lCaFBWUmlMbkJ2Y0NncGZIeHlMbVY0Y0dGdVpHOHJYQ0pmWENJcmRXSXJLenR5WlhSMWNtNGdkR2hwYzF0aFhUMGhNQ3hoZlgwcExISXVZV3BoZUZCeVpXWnBiSFJsY2loY0ltcHpiMjRnYW5OdmJuQmNJaXhtZFc1amRHbHZiaWhpTEdNc1pDbDdkbUZ5SUdVc1ppeG5MR2c5WWk1cWMyOXVjQ0U5UFNFeEppWW9WV0l1ZEdWemRDaGlMblZ5YkNrL1hDSjFjbXhjSWpwY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ1lpNWtZWFJoSmlZd1BUMDlLR0l1WTI5dWRHVnVkRlI1Y0dWOGZGd2lYQ0lwTG1sdVpHVjRUMllvWENKaGNIQnNhV05oZEdsdmJpOTRMWGQzZHkxbWIzSnRMWFZ5YkdWdVkyOWtaV1JjSWlrbUpsVmlMblJsYzNRb1lpNWtZWFJoS1NZbVhDSmtZWFJoWENJcE8ybG1LR2g4ZkZ3aWFuTnZibkJjSWowOVBXSXVaR0YwWVZSNWNHVnpXekJkS1hKbGRIVnliaUJsUFdJdWFuTnZibkJEWVd4c1ltRmphejF5TG1selJuVnVZM1JwYjI0b1lpNXFjMjl1Y0VOaGJHeGlZV05yS1Q5aUxtcHpiMjV3UTJGc2JHSmhZMnNvS1RwaUxtcHpiMjV3UTJGc2JHSmhZMnNzYUQ5aVcyaGRQV0piYUYwdWNtVndiR0ZqWlNoVllpeGNJaVF4WENJclpTazZZaTVxYzI5dWNDRTlQU0V4SmlZb1lpNTFjbXdyUFNoMllpNTBaWE4wS0dJdWRYSnNLVDljSWlaY0lqcGNJajljSWlrcllpNXFjMjl1Y0N0Y0lqMWNJaXRsS1N4aUxtTnZiblpsY25SbGNuTmJYQ0p6WTNKcGNIUWdhbk52Ymx3aVhUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQm5mSHh5TG1WeWNtOXlLR1VyWENJZ2QyRnpJRzV2ZENCallXeHNaV1JjSWlrc1oxc3dYWDBzWWk1a1lYUmhWSGx3WlhOYk1GMDlYQ0pxYzI5dVhDSXNaajFoVzJWZExHRmJaVjA5Wm5WdVkzUnBiMjRvS1h0blBXRnlaM1Z0Wlc1MGMzMHNaQzVoYkhkaGVYTW9ablZ1WTNScGIyNG9LWHQyYjJsa0lEQTlQVDFtUDNJb1lTa3VjbVZ0YjNabFVISnZjQ2hsS1RwaFcyVmRQV1lzWWx0bFhTWW1LR0l1YW5OdmJuQkRZV3hzWW1GamF6MWpMbXB6YjI1d1EyRnNiR0poWTJzc1ZHSXVjSFZ6YUNobEtTa3NaeVltY2k1cGMwWjFibU4wYVc5dUtHWXBKaVptS0dkYk1GMHBMR2M5WmoxMmIybGtJREI5S1N4Y0luTmpjbWx3ZEZ3aWZTa3NieTVqY21WaGRHVklWRTFNUkc5amRXMWxiblE5Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDFrTG1sdGNHeGxiV1Z1ZEdGMGFXOXVMbU55WldGMFpVaFVUVXhFYjJOMWJXVnVkQ2hjSWx3aUtTNWliMlI1TzNKbGRIVnliaUJoTG1sdWJtVnlTRlJOVEQxY0lqeG1iM0p0UGp3dlptOXliVDQ4Wm05eWJUNDhMMlp2Y20wK1hDSXNNajA5UFdFdVkyaHBiR1JPYjJSbGN5NXNaVzVuZEdoOUtDa3NjaTV3WVhKelpVaFVUVXc5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMmxtS0Z3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCaEtYSmxkSFZ5Ymx0ZE8xd2lZbTl2YkdWaGJsd2lQVDEwZVhCbGIyWWdZaVltS0dNOVlpeGlQU0V4S1R0MllYSWdaU3htTEdjN2NtVjBkWEp1SUdKOGZDaHZMbU55WldGMFpVaFVUVXhFYjJOMWJXVnVkRDhvWWoxa0xtbHRjR3hsYldWdWRHRjBhVzl1TG1OeVpXRjBaVWhVVFV4RWIyTjFiV1Z1ZENoY0lsd2lLU3hsUFdJdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1KaGMyVmNJaWtzWlM1b2NtVm1QV1F1Ykc5allYUnBiMjR1YUhKbFppeGlMbWhsWVdRdVlYQndaVzVrUTJocGJHUW9aU2twT21JOVpDa3NaajFETG1WNFpXTW9ZU2tzWnowaFl5WW1XMTBzWmo5YllpNWpjbVZoZEdWRmJHVnRaVzUwS0daYk1WMHBYVG9vWmoxeFlTaGJZVjBzWWl4bktTeG5KaVpuTG14bGJtZDBhQ1ltY2lobktTNXlaVzF2ZG1Vb0tTeHlMbTFsY21kbEtGdGRMR1l1WTJocGJHUk9iMlJsY3lrcGZTeHlMbVp1TG14dllXUTlablZ1WTNScGIyNG9ZU3hpTEdNcGUzWmhjaUJrTEdVc1ppeG5QWFJvYVhNc2FEMWhMbWx1WkdWNFQyWW9YQ0lnWENJcE8zSmxkSFZ5YmlCb1BpMHhKaVlvWkQxd1lpaGhMbk5zYVdObEtHZ3BLU3hoUFdFdWMyeHBZMlVvTUN4b0tTa3NjaTVwYzBaMWJtTjBhVzl1S0dJcFB5aGpQV0lzWWoxMmIybGtJREFwT21JbUpsd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQmlKaVlvWlQxY0lsQlBVMVJjSWlrc1p5NXNaVzVuZEdnK01DWW1jaTVoYW1GNEtIdDFjbXc2WVN4MGVYQmxPbVY4ZkZ3aVIwVlVYQ0lzWkdGMFlWUjVjR1U2WENKb2RHMXNYQ0lzWkdGMFlUcGlmU2t1Wkc5dVpTaG1kVzVqZEdsdmJpaGhLWHRtUFdGeVozVnRaVzUwY3l4bkxtaDBiV3dvWkQ5eUtGd2lQR1JwZGo1Y0lpa3VZWEJ3Wlc1a0tISXVjR0Z5YzJWSVZFMU1LR0VwS1M1bWFXNWtLR1FwT21FcGZTa3VZV3gzWVhsektHTW1KbVoxYm1OMGFXOXVLR0VzWWlsN1p5NWxZV05vS0daMWJtTjBhVzl1S0NsN1l5NWhjSEJzZVNoMGFHbHpMR1o4ZkZ0aExuSmxjM0J2Ym5ObFZHVjRkQ3hpTEdGZEtYMHBmU2tzZEdocGMzMHNjaTVsWVdOb0tGdGNJbUZxWVhoVGRHRnlkRndpTEZ3aVlXcGhlRk4wYjNCY0lpeGNJbUZxWVhoRGIyMXdiR1YwWlZ3aUxGd2lZV3BoZUVWeWNtOXlYQ0lzWENKaGFtRjRVM1ZqWTJWemMxd2lMRndpWVdwaGVGTmxibVJjSWwwc1puVnVZM1JwYjI0b1lTeGlLWHR5TG1adVcySmRQV1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUIwYUdsekxtOXVLR0lzWVNsOWZTa3NjaTVsZUhCeUxuQnpaWFZrYjNNdVlXNXBiV0YwWldROVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlISXVaM0psY0NoeUxuUnBiV1Z5Y3l4bWRXNWpkR2x2YmloaUtYdHlaWFIxY200Z1lUMDlQV0l1Wld4bGJYMHBMbXhsYm1kMGFIMHNjaTV2Wm1aelpYUTllM05sZEU5bVpuTmxkRHBtZFc1amRHbHZiaWhoTEdJc1l5bDdkbUZ5SUdRc1pTeG1MR2NzYUN4cExHb3NhejF5TG1OemN5aGhMRndpY0c5emFYUnBiMjVjSWlrc2JEMXlLR0VwTEcwOWUzMDdYQ0p6ZEdGMGFXTmNJajA5UFdzbUppaGhMbk4wZVd4bExuQnZjMmwwYVc5dVBWd2ljbVZzWVhScGRtVmNJaWtzYUQxc0xtOW1abk5sZENncExHWTljaTVqYzNNb1lTeGNJblJ2Y0Z3aUtTeHBQWEl1WTNOektHRXNYQ0pzWldaMFhDSXBMR285S0Z3aVlXSnpiMngxZEdWY0lqMDlQV3Q4ZkZ3aVptbDRaV1JjSWowOVBXc3BKaVlvWml0cEtTNXBibVJsZUU5bUtGd2lZWFYwYjF3aUtUNHRNU3hxUHloa1BXd3VjRzl6YVhScGIyNG9LU3huUFdRdWRHOXdMR1U5WkM1c1pXWjBLVG9vWnoxd1lYSnpaVVpzYjJGMEtHWXBmSHd3TEdVOWNHRnljMlZHYkc5aGRDaHBLWHg4TUNrc2NpNXBjMFoxYm1OMGFXOXVLR0lwSmlZb1lqMWlMbU5oYkd3b1lTeGpMSEl1WlhoMFpXNWtLSHQ5TEdncEtTa3NiblZzYkNFOVlpNTBiM0FtSmlodExuUnZjRDFpTG5SdmNDMW9MblJ2Y0N0bktTeHVkV3hzSVQxaUxteGxablFtSmlodExteGxablE5WWk1c1pXWjBMV2d1YkdWbWRDdGxLU3hjSW5WemFXNW5YQ0pwYmlCaVAySXVkWE5wYm1jdVkyRnNiQ2hoTEcwcE9td3VZM056S0cwcGZYMHNjaTVtYmk1bGVIUmxibVFvZTI5bVpuTmxkRHBtZFc1amRHbHZiaWhoS1h0cFppaGhjbWQxYldWdWRITXViR1Z1WjNSb0tYSmxkSFZ5YmlCMmIybGtJREE5UFQxaFAzUm9hWE02ZEdocGN5NWxZV05vS0daMWJtTjBhVzl1S0dJcGUzSXViMlptYzJWMExuTmxkRTltWm5ObGRDaDBhR2x6TEdFc1lpbDlLVHQyWVhJZ1lpeGpMR1FzWlN4bVBYUm9hWE5iTUYwN2FXWW9aaWx5WlhSMWNtNGdaaTVuWlhSRGJHbGxiblJTWldOMGN5Z3BMbXhsYm1kMGFEOG9aRDFtTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMR0k5Wmk1dmQyNWxja1J2WTNWdFpXNTBMR005WWk1a2IyTjFiV1Z1ZEVWc1pXMWxiblFzWlQxaUxtUmxabUYxYkhSV2FXVjNMSHQwYjNBNlpDNTBiM0FyWlM1d1lXZGxXVTltWm5ObGRDMWpMbU5zYVdWdWRGUnZjQ3hzWldaME9tUXViR1ZtZEN0bExuQmhaMlZZVDJabWMyVjBMV011WTJ4cFpXNTBUR1ZtZEgwcE9udDBiM0E2TUN4c1pXWjBPakI5ZlN4d2IzTnBkR2x2YmpwbWRXNWpkR2x2YmlncGUybG1LSFJvYVhOYk1GMHBlM1poY2lCaExHSXNZejEwYUdseld6QmRMR1E5ZTNSdmNEb3dMR3hsWm5RNk1IMDdjbVYwZFhKdVhDSm1hWGhsWkZ3aVBUMDljaTVqYzNNb1l5eGNJbkJ2YzJsMGFXOXVYQ0lwUDJJOVl5NW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1Rvb1lUMTBhR2x6TG05bVpuTmxkRkJoY21WdWRDZ3BMR0k5ZEdocGN5NXZabVp6WlhRb0tTeENLR0ZiTUYwc1hDSm9kRzFzWENJcGZId29aRDFoTG05bVpuTmxkQ2dwS1N4a1BYdDBiM0E2WkM1MGIzQXJjaTVqYzNNb1lWc3dYU3hjSW1KdmNtUmxjbFJ2Y0ZkcFpIUm9YQ0lzSVRBcExHeGxablE2WkM1c1pXWjBLM0l1WTNOektHRmJNRjBzWENKaWIzSmtaWEpNWldaMFYybGtkR2hjSWl3aE1DbDlLU3g3ZEc5d09tSXVkRzl3TFdRdWRHOXdMWEl1WTNOektHTXNYQ0p0WVhKbmFXNVViM0JjSWl3aE1Da3NiR1ZtZERwaUxteGxablF0WkM1c1pXWjBMWEl1WTNOektHTXNYQ0p0WVhKbmFXNU1aV1owWENJc0lUQXBmWDE5TEc5bVpuTmxkRkJoY21WdWREcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG0xaGNDaG1kVzVqZEdsdmJpZ3BlM1poY2lCaFBYUm9hWE11YjJabWMyVjBVR0Z5Wlc1ME8zZG9hV3hsS0dFbUpsd2ljM1JoZEdsalhDSTlQVDF5TG1OemN5aGhMRndpY0c5emFYUnBiMjVjSWlrcFlUMWhMbTltWm5ObGRGQmhjbVZ1ZER0eVpYUjFjbTRnWVh4OGNtRjlLWDE5S1N4eUxtVmhZMmdvZTNOamNtOXNiRXhsWm5RNlhDSndZV2RsV0U5bVpuTmxkRndpTEhOamNtOXNiRlJ2Y0RwY0luQmhaMlZaVDJabWMyVjBYQ0o5TEdaMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdNOVhDSndZV2RsV1U5bVpuTmxkRndpUFQwOVlqdHlMbVp1VzJGZFBXWjFibU4wYVc5dUtHUXBlM0psZEhWeWJpQlVLSFJvYVhNc1puVnVZM1JwYjI0b1lTeGtMR1VwZTNaaGNpQm1PM0psZEhWeWJpQnlMbWx6VjJsdVpHOTNLR0VwUDJZOVlUbzVQVDA5WVM1dWIyUmxWSGx3WlNZbUtHWTlZUzVrWldaaGRXeDBWbWxsZHlrc2RtOXBaQ0F3UFQwOVpUOW1QMlpiWWwwNllWdGtYVHAyYjJsa0tHWS9aaTV6WTNKdmJHeFVieWhqUDJZdWNHRm5aVmhQWm1aelpYUTZaU3hqUDJVNlppNXdZV2RsV1U5bVpuTmxkQ2s2WVZ0a1hUMWxLWDBzWVN4a0xHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdncGZYMHBMSEl1WldGamFDaGJYQ0owYjNCY0lpeGNJbXhsWm5SY0lsMHNablZ1WTNScGIyNG9ZU3hpS1h0eUxtTnpjMGh2YjJ0elcySmRQVkJoS0c4dWNHbDRaV3hRYjNOcGRHbHZiaXhtZFc1amRHbHZiaWhoTEdNcGUybG1LR01wY21WMGRYSnVJR005VDJFb1lTeGlLU3hOWVM1MFpYTjBLR01wUDNJb1lTa3VjRzl6YVhScGIyNG9LVnRpWFN0Y0luQjRYQ0k2WTMwcGZTa3NjaTVsWVdOb0tIdElaV2xuYUhRNlhDSm9aV2xuYUhSY0lpeFhhV1IwYURwY0luZHBaSFJvWENKOUxHWjFibU4wYVc5dUtHRXNZaWw3Y2k1bFlXTm9LSHR3WVdSa2FXNW5PbHdpYVc1dVpYSmNJaXRoTEdOdmJuUmxiblE2WWl4Y0lsd2lPbHdpYjNWMFpYSmNJaXRoZlN4bWRXNWpkR2x2YmloakxHUXBlM0l1Wm01YlpGMDlablZ1WTNScGIyNG9aU3htS1h0MllYSWdaejFoY21kMWJXVnVkSE11YkdWdVozUm9KaVlvWTN4OFhDSmliMjlzWldGdVhDSWhQWFI1Y0dWdlppQmxLU3hvUFdOOGZDaGxQVDA5SVRCOGZHWTlQVDBoTUQ5Y0ltMWhjbWRwYmx3aU9sd2lZbTl5WkdWeVhDSXBPM0psZEhWeWJpQlVLSFJvYVhNc1puVnVZM1JwYjI0b1lpeGpMR1VwZTNaaGNpQm1PM0psZEhWeWJpQnlMbWx6VjJsdVpHOTNLR0lwUHpBOVBUMWtMbWx1WkdWNFQyWW9YQ0p2ZFhSbGNsd2lLVDlpVzF3aWFXNXVaWEpjSWl0aFhUcGlMbVJ2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRGdGNJbU5zYVdWdWRGd2lLMkZkT2prOVBUMWlMbTV2WkdWVWVYQmxQeWhtUFdJdVpHOWpkVzFsYm5SRmJHVnRaVzUwTEUxaGRHZ3ViV0Y0S0dJdVltOWtlVnRjSW5OamNtOXNiRndpSzJGZExHWmJYQ0p6WTNKdmJHeGNJaXRoWFN4aUxtSnZaSGxiWENKdlptWnpaWFJjSWl0aFhTeG1XMXdpYjJabWMyVjBYQ0lyWVYwc1psdGNJbU5zYVdWdWRGd2lLMkZkS1NrNmRtOXBaQ0F3UFQwOVpUOXlMbU56Y3loaUxHTXNhQ2s2Y2k1emRIbHNaU2hpTEdNc1pTeG9LWDBzWWl4blAyVTZkbTlwWkNBd0xHY3BmWDBwZlNrc2NpNW1iaTVsZUhSbGJtUW9lMkpwYm1RNlpuVnVZM1JwYjI0b1lTeGlMR01wZTNKbGRIVnliaUIwYUdsekxtOXVLR0VzYm5Wc2JDeGlMR01wZlN4MWJtSnBibVE2Wm5WdVkzUnBiMjRvWVN4aUtYdHlaWFIxY200Z2RHaHBjeTV2Wm1Zb1lTeHVkV3hzTEdJcGZTeGtaV3hsWjJGMFpUcG1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdHlaWFIxY200Z2RHaHBjeTV2YmloaUxHRXNZeXhrS1gwc2RXNWtaV3hsWjJGMFpUcG1kVzVqZEdsdmJpaGhMR0lzWXlsN2NtVjBkWEp1SURFOVBUMWhjbWQxYldWdWRITXViR1Z1WjNSb1AzUm9hWE11YjJabUtHRXNYQ0lxS2x3aUtUcDBhR2x6TG05bVppaGlMR0Y4ZkZ3aUtpcGNJaXhqS1gxOUtTeHlMbWh2YkdSU1pXRmtlVDFtZFc1amRHbHZiaWhoS1h0aFAzSXVjbVZoWkhsWFlXbDBLeXM2Y2k1eVpXRmtlU2doTUNsOUxISXVhWE5CY25KaGVUMUJjbkpoZVM1cGMwRnljbUY1TEhJdWNHRnljMlZLVTA5T1BVcFRUMDR1Y0dGeWMyVXNjaTV1YjJSbFRtRnRaVDFDTEZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHUmxabWx1WlNZbVpHVm1hVzVsTG1GdFpDWW1aR1ZtYVc1bEtGd2lhbkYxWlhKNVhDSXNXMTBzWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnY24wcE8zWmhjaUJXWWoxaExtcFJkV1Z5ZVN4WFlqMWhMaVE3Y21WMGRYSnVJSEl1Ym05RGIyNW1iR2xqZEQxbWRXNWpkR2x2YmloaUtYdHlaWFIxY200Z1lTNGtQVDA5Y2lZbUtHRXVKRDFYWWlrc1lpWW1ZUzVxVVhWbGNuazlQVDF5SmlZb1lTNXFVWFZsY25rOVZtSXBMSEo5TEdKOGZDaGhMbXBSZFdWeWVUMWhMaVE5Y2lrc2NuMHBPMXh1SWl3aUx5b2dhbk5vYVc1MElHbG5ibTl5WlRwemRHRnlkQ0FxTDF4dVhHNGhablZ1WTNScGIyNGdLQ1FwSUh0Y2JseHVJQ0JjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1SUNCMllYSWdSazlWVGtSQlZFbFBUbDlXUlZKVFNVOU9JRDBnSnpZdU15NHhKenRjYmx4dUlDQXZMeUJIYkc5aVlXd2dSbTkxYm1SaGRHbHZiaUJ2WW1wbFkzUmNiaUFnTHk4Z1ZHaHBjeUJwY3lCaGRIUmhZMmhsWkNCMGJ5QjBhR1VnZDJsdVpHOTNMQ0J2Y2lCMWMyVmtJR0Z6SUdFZ2JXOWtkV3hsSUdadmNpQkJUVVF2UW5KdmQzTmxjbWxtZVZ4dUlDQjJZWElnUm05MWJtUmhkR2x2YmlBOUlIdGNiaUFnSUNCMlpYSnphVzl1T2lCR1QxVk9SRUZVU1U5T1gxWkZVbE5KVDA0c1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRkRzl5WlhNZ2FXNXBkR2xoYkdsNlpXUWdjR3gxWjJsdWN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmNHeDFaMmx1Y3pvZ2UzMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUZEc5eVpYTWdaMlZ1WlhKaGRHVmtJSFZ1YVhGMVpTQnBaSE1nWm05eUlIQnNkV2RwYmlCcGJuTjBZVzVqWlhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmZFhWcFpITTZJRnRkTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCaElHSnZiMnhsWVc0Z1ptOXlJRkpVVENCemRYQndiM0owWEc0Z0lDQWdJQ292WEc0Z0lDQWdjblJzT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0pDZ25hSFJ0YkNjcExtRjBkSElvSjJScGNpY3BJRDA5UFNBbmNuUnNKenRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVJsWm1sdVpYTWdZU0JHYjNWdVpHRjBhVzl1SUhCc2RXZHBiaXdnWVdSa2FXNW5JR2wwSUhSdklIUm9aU0JnUm05MWJtUmhkR2x2Ym1BZ2JtRnRaWE53WVdObElHRnVaQ0IwYUdVZ2JHbHpkQ0J2WmlCd2JIVm5hVzV6SUhSdklHbHVhWFJwWVd4cGVtVWdkMmhsYmlCeVpXWnNiM2RwYm1jdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhCc2RXZHBiaUF0SUZSb1pTQmpiMjV6ZEhKMVkzUnZjaUJ2WmlCMGFHVWdjR3gxWjJsdUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCc2RXZHBiam9nWm5WdVkzUnBiMjRnS0hCc2RXZHBiaXdnYm1GdFpTa2dlMXh1SUNBZ0lDQWdMeThnVDJKcVpXTjBJR3RsZVNCMGJ5QjFjMlVnZDJobGJpQmhaR1JwYm1jZ2RHOGdaMnh2WW1Gc0lFWnZkVzVrWVhScGIyNGdiMkpxWldOMFhHNGdJQ0FnSUNBdkx5QkZlR0Z0Y0d4bGN6b2dSbTkxYm1SaGRHbHZiaTVTWlhabFlXd3NJRVp2ZFc1a1lYUnBiMjR1VDJabVEyRnVkbUZ6WEc0Z0lDQWdJQ0IyWVhJZ1kyeGhjM05PWVcxbElEMGdibUZ0WlNCOGZDQm1kVzVqZEdsdmJrNWhiV1VvY0d4MVoybHVLVHRjYmlBZ0lDQWdJQzh2SUU5aWFtVmpkQ0JyWlhrZ2RHOGdkWE5sSUhkb1pXNGdjM1J2Y21sdVp5QjBhR1VnY0d4MVoybHVMQ0JoYkhOdklIVnpaV1FnZEc4Z1kzSmxZWFJsSUhSb1pTQnBaR1Z1ZEdsbWVXbHVaeUJrWVhSaElHRjBkSEpwWW5WMFpTQm1iM0lnZEdobElIQnNkV2RwYmx4dUlDQWdJQ0FnTHk4Z1JYaGhiWEJzWlhNNklHUmhkR0V0Y21WMlpXRnNMQ0JrWVhSaExXOW1aaTFqWVc1MllYTmNiaUFnSUNBZ0lIWmhjaUJoZEhSeVRtRnRaU0E5SUdoNWNHaGxibUYwWlNoamJHRnpjMDVoYldVcE8xeHVYRzRnSUNBZ0lDQXZMeUJCWkdRZ2RHOGdkR2hsSUVadmRXNWtZWFJwYjI0Z2IySnFaV04wSUdGdVpDQjBhR1VnY0d4MVoybHVjeUJzYVhOMElDaG1iM0lnY21WbWJHOTNhVzVuS1Z4dUlDQWdJQ0FnZEdocGN5NWZjR3gxWjJsdWMxdGhkSFJ5VG1GdFpWMGdQU0IwYUdselcyTnNZWE56VG1GdFpWMGdQU0J3YkhWbmFXNDdYRzRnSUNBZ2ZTeGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNBZ0tpQlFiM0IxYkdGMFpYTWdkR2hsSUY5MWRXbGtjeUJoY25KaGVTQjNhWFJvSUhCdmFXNTBaWEp6SUhSdklHVmhZMmdnYVc1a2FYWnBaSFZoYkNCd2JIVm5hVzRnYVc1emRHRnVZMlV1WEc0Z0lDQWdJQ29nUVdSa2N5QjBhR1VnWUhwbVVHeDFaMmx1WUNCa1lYUmhMV0YwZEhKcFluVjBaU0IwYnlCd2NtOW5jbUZ0YldGMGFXTmhiR3g1SUdOeVpXRjBaV1FnY0d4MVoybHVjeUIwYnlCaGJHeHZkeUIxYzJVZ2IyWWdKQ2h6Wld4bFkzUnZjaWt1Wm05MWJtUmhkR2x2YmlodFpYUm9iMlFwSUdOaGJHeHpMbHh1SUNBZ0lDQXFJRUZzYzI4Z1ptbHlaWE1nZEdobElHbHVhWFJwWVd4cGVtRjBhVzl1SUdWMlpXNTBJR1p2Y2lCbFlXTm9JSEJzZFdkcGJpd2dZMjl1YzI5c2FXUmhkR2x1WnlCeVpYQmxkR2wwYVhabElHTnZaR1V1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEJzZFdkcGJpQXRJR0Z1SUdsdWMzUmhibU5sSUc5bUlHRWdjR3gxWjJsdUxDQjFjM1ZoYkd4NUlHQjBhR2x6WUNCcGJpQmpiMjUwWlhoMExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdVlXMWxJQzBnZEdobElHNWhiV1VnYjJZZ2RHaGxJSEJzZFdkcGJpd2djR0Z6YzJWa0lHRnpJR0VnWTJGdFpXeERZWE5sWkNCemRISnBibWN1WEc0Z0lDQWdJQ29nUUdacGNtVnpJRkJzZFdkcGJpTnBibWwwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZuYVhOMFpYSlFiSFZuYVc0NklHWjFibU4wYVc5dUlDaHdiSFZuYVc0c0lHNWhiV1VwSUh0Y2JpQWdJQ0FnSUhaaGNpQndiSFZuYVc1T1lXMWxJRDBnYm1GdFpTQS9JR2g1Y0dobGJtRjBaU2h1WVcxbEtTQTZJR1oxYm1OMGFXOXVUbUZ0WlNod2JIVm5hVzR1WTI5dWMzUnlkV04wYjNJcExuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0J3YkhWbmFXNHVkWFZwWkNBOUlIUm9hWE11UjJWMFdXOUVhV2RwZEhNb05pd2djR3gxWjJsdVRtRnRaU2s3WEc1Y2JpQWdJQ0FnSUdsbUlDZ2hjR3gxWjJsdUxpUmxiR1Z0Wlc1MExtRjBkSElvSjJSaGRHRXRKeUFySUhCc2RXZHBiazVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJSEJzZFdkcGJpNGtaV3hsYldWdWRDNWhkSFJ5S0Nka1lYUmhMU2NnS3lCd2JIVm5hVzVPWVcxbExDQndiSFZuYVc0dWRYVnBaQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb0lYQnNkV2RwYmk0a1pXeGxiV1Z1ZEM1a1lYUmhLQ2Q2WmxCc2RXZHBiaWNwS1NCN1hHNGdJQ0FnSUNBZ0lIQnNkV2RwYmk0a1pXeGxiV1Z1ZEM1a1lYUmhLQ2Q2WmxCc2RXZHBiaWNzSUhCc2RXZHBiaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBcUlFWnBjbVZ6SUhkb1pXNGdkR2hsSUhCc2RXZHBiaUJvWVhNZ2FXNXBkR2xoYkdsNlpXUXVYRzRnSUNBZ0lDQWdLaUJBWlhabGJuUWdVR3gxWjJsdUkybHVhWFJjYmlBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnY0d4MVoybHVMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KMmx1YVhRdWVtWXVKeUFySUhCc2RXZHBiazVoYldVcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5MWRXbGtjeTV3ZFhOb0tIQnNkV2RwYmk1MWRXbGtLVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMHNYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBZ0lDb2dVbVZ0YjNabGN5QjBhR1VnY0d4MVoybHVjeUIxZFdsa0lHWnliMjBnZEdobElGOTFkV2xrY3lCaGNuSmhlUzVjYmlBZ0lDQWdLaUJTWlcxdmRtVnpJSFJvWlNCNlpsQnNkV2RwYmlCa1lYUmhJR0YwZEhKcFluVjBaU3dnWVhNZ2QyVnNiQ0JoY3lCMGFHVWdaR0YwWVMxd2JIVm5hVzR0Ym1GdFpTQmhkSFJ5YVdKMWRHVXVYRzRnSUNBZ0lDb2dRV3h6YnlCbWFYSmxjeUIwYUdVZ1pHVnpkSEp2ZVdWa0lHVjJaVzUwSUdadmNpQjBhR1VnY0d4MVoybHVMQ0JqYjI1emIyeHBaR0YwYVc1bklISmxjR1YwYVhScGRtVWdZMjlrWlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnY0d4MVoybHVJQzBnWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdZU0J3YkhWbmFXNHNJSFZ6ZFdGc2JIa2dZSFJvYVhOZ0lHbHVJR052Ym5SbGVIUXVYRzRnSUNBZ0lDb2dRR1pwY21WeklGQnNkV2RwYmlOa1pYTjBjbTk1WldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxYm5KbFoybHpkR1Z5VUd4MVoybHVPaUJtZFc1amRHbHZiaUFvY0d4MVoybHVLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NHeDFaMmx1VG1GdFpTQTlJR2g1Y0dobGJtRjBaU2htZFc1amRHbHZiazVoYldVb2NHeDFaMmx1TGlSbGJHVnRaVzUwTG1SaGRHRW9KM3BtVUd4MVoybHVKeWt1WTI5dWMzUnlkV04wYjNJcEtUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZmRYVnBaSE11YzNCc2FXTmxLSFJvYVhNdVgzVjFhV1J6TG1sdVpHVjRUMllvY0d4MVoybHVMblYxYVdRcExDQXhLVHRjYmlBZ0lDQWdJSEJzZFdkcGJpNGtaV3hsYldWdWRDNXlaVzF2ZG1WQmRIUnlLQ2RrWVhSaExTY2dLeUJ3YkhWbmFXNU9ZVzFsS1M1eVpXMXZkbVZFWVhSaEtDZDZabEJzZFdkcGJpY3BYRzRnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FxSUVacGNtVnpJSGRvWlc0Z2RHaGxJSEJzZFdkcGJpQm9ZWE1nWW1WbGJpQmtaWE4wY205NVpXUXVYRzRnSUNBZ0lDQWdLaUJBWlhabGJuUWdVR3gxWjJsdUkyUmxjM1J5YjNsbFpGeHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQXVkSEpwWjJkbGNpZ25aR1Z6ZEhKdmVXVmtMbnBtTGljZ0t5QndiSFZuYVc1T1lXMWxLVHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNBZ2FXNGdjR3gxWjJsdUtTQjdYRzRnSUNBZ0lDQWdJSEJzZFdkcGJsdHdjbTl3WFNBOUlHNTFiR3c3SUM4dlkyeGxZVzRnZFhBZ2MyTnlhWEIwSUhSdklIQnlaWEFnWm05eUlHZGhjbUpoWjJVZ1kyOXNiR1ZqZEdsdmJpNWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FnSUNvZ1EyRjFjMlZ6SUc5dVpTQnZjaUJ0YjNKbElHRmpkR2wyWlNCd2JIVm5hVzV6SUhSdklISmxMV2x1YVhScFlXeHBlbVVzSUhKbGMyVjBkR2x1WnlCbGRtVnVkQ0JzYVhOMFpXNWxjbk1zSUhKbFkyRnNZM1ZzWVhScGJtY2djRzl6YVhScGIyNXpMQ0JsZEdNdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhCc2RXZHBibk1nTFNCdmNIUnBiMjVoYkNCemRISnBibWNnYjJZZ1lXNGdhVzVrYVhacFpIVmhiQ0J3YkhWbmFXNGdhMlY1TENCaGRIUmhhVzVsWkNCaWVTQmpZV3hzYVc1bklHQWtLR1ZzWlcxbGJuUXBMbVJoZEdFb0ozQnNkV2RwYms1aGJXVW5LV0FzSUc5eUlITjBjbWx1WnlCdlppQmhJSEJzZFdkcGJpQmpiR0Z6Y3lCcExtVXVJR0FuWkhKdmNHUnZkMjRuWUZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUVsbUlHNXZJR0Z5WjNWdFpXNTBJR2x6SUhCaGMzTmxaQ3dnY21WbWJHOTNJR0ZzYkNCamRYSnlaVzUwYkhrZ1lXTjBhWFpsSUhCc2RXZHBibk11WEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZKYm1sME9pQm1kVzVqZEdsdmJpQW9jR3gxWjJsdWN5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdselNsRWdQU0J3YkhWbmFXNXpJR2x1YzNSaGJtTmxiMllnSkR0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR2xtSUNocGMwcFJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NHeDFaMmx1Y3k1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VaR0YwWVNnbmVtWlFiSFZuYVc0bktTNWZhVzVwZENncE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUIwZVhCbElEMGdkSGx3Wlc5bUlIQnNkV2RwYm5Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpJRDBnZEdocGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ptNXpJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKMjlpYW1WamRDYzZJR1oxYm1OMGFXOXVJQ2h3YkdkektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNaM011Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvY0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQWdQU0JvZVhCb1pXNWhkR1VvY0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25XMlJoZEdFdEp5QXJJSEFnS3lBblhTY3BMbVp2ZFc1a1lYUnBiMjRvSjE5cGJtbDBKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZHpkSEpwYm1jbk9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJzZFdkcGJuTWdQU0JvZVhCb1pXNWhkR1VvY0d4MVoybHVjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSjF0a1lYUmhMU2NnS3lCd2JIVm5hVzV6SUNzZ0oxMG5LUzVtYjNWdVpHRjBhVzl1S0NkZmFXNXBkQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZDFibVJsWm1sdVpXUW5PaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTmJKMjlpYW1WamRDZGRLRTlpYW1WamRDNXJaWGx6S0Y5MGFHbHpMbDl3YkhWbmFXNXpLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQm1ibk5iZEhsd1pWMG9jR3gxWjJsdWN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dWeWNpazdYRzRnSUNBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR3gxWjJsdWN6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2djbVYwZFhKdWN5QmhJSEpoYm1SdmJTQmlZWE5sTFRNMklIVnBaQ0IzYVhSb0lHNWhiV1Z6Y0dGamFXNW5YRzRnSUNBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHeGxibWQwYUNBdElHNTFiV0psY2lCdlppQnlZVzVrYjIwZ1ltRnpaUzB6TmlCa2FXZHBkSE1nWkdWemFYSmxaQzRnU1c1amNtVmhjMlVnWm05eUlHMXZjbVVnY21GdVpHOXRJSE4wY21sdVozTXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1Z6Y0dGalpTQXRJRzVoYldVZ2IyWWdjR3gxWjJsdUlIUnZJR0psSUdsdVkyOXljRzl5WVhSbFpDQnBiaUIxYVdRc0lHOXdkR2x2Ym1Gc0xseHVJQ0FnSUNBcUlFQmtaV1poZFd4MElIdFRkSEpwYm1kOUlDY25JQzBnYVdZZ2JtOGdjR3gxWjJsdUlHNWhiV1VnYVhNZ2NISnZkbWxrWldRc0lHNXZkR2hwYm1jZ2FYTWdZWEJ3Wlc1a1pXUWdkRzhnZEdobElIVnBaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3VTNSeWFXNW5mU0F0SUhWdWFYRjFaU0JwWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJRWRsZEZsdlJHbG5hWFJ6T2lCbWRXNWpkR2x2YmlBb2JHVnVaM1JvTENCdVlXMWxjM0JoWTJVcElIdGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlHeGxibWQwYUNCOGZDQTJPMXh1SUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1Y205MWJtUW9UV0YwYUM1d2IzY29NellzSUd4bGJtZDBhQ0FySURFcElDMGdUV0YwYUM1eVlXNWtiMjBvS1NBcUlFMWhkR2d1Y0c5M0tETTJMQ0JzWlc1bmRHZ3BLUzUwYjFOMGNtbHVaeWd6TmlrdWMyeHBZMlVvTVNrZ0t5QW9ibUZ0WlhOd1lXTmxJRDhnSnkwbklDc2dibUZ0WlhOd1lXTmxJRG9nSnljcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXBkR2xoYkdsNlpTQndiSFZuYVc1eklHOXVJR0Z1ZVNCbGJHVnRaVzUwY3lCM2FYUm9hVzRnWUdWc1pXMWdJQ2hoYm1RZ1lHVnNaVzFnSUdsMGMyVnNaaWtnZEdoaGRDQmhjbVZ1SjNRZ1lXeHlaV0ZrZVNCcGJtbDBhV0ZzYVhwbFpDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pXeGxiU0F0SUdwUmRXVnllU0J2WW1wbFkzUWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ1pXeGxiV1Z1ZENCMGJ5QmphR1ZqYXlCcGJuTnBaR1V1SUVGc2MyOGdZMmhsWTJ0eklIUm9aU0JsYkdWdFpXNTBJR2wwYzJWc1ppd2dkVzVzWlhOeklHbDBKM01nZEdobElHQmtiMk4xYldWdWRHQWdiMkpxWldOMExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZkVGeWNtRjVmU0J3YkhWbmFXNXpJQzBnUVNCc2FYTjBJRzltSUhCc2RXZHBibk1nZEc4Z2FXNXBkR2xoYkdsNlpTNGdUR1ZoZG1VZ2RHaHBjeUJ2ZFhRZ2RHOGdhVzVwZEdsaGJHbDZaU0JsZG1WeWVYUm9hVzVuTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsWm14dmR6b2dablZ1WTNScGIyNGdLR1ZzWlcwc0lIQnNkV2RwYm5NcElIdGNibHh1SUNBZ0lDQWdMeThnU1dZZ2NHeDFaMmx1Y3lCcGN5QjFibVJsWm1sdVpXUXNJR3AxYzNRZ1ozSmhZaUJsZG1WeWVYUm9hVzVuWEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhCc2RXZHBibk1nUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUhCc2RXZHBibk1nUFNCUFltcGxZM1F1YTJWNWN5aDBhR2x6TGw5d2JIVm5hVzV6S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklFbG1JSEJzZFdkcGJuTWdhWE1nWVNCemRISnBibWNzSUdOdmJuWmxjblFnYVhRZ2RHOGdZVzRnWVhKeVlYa2dkMmwwYUNCdmJtVWdhWFJsYlZ4dUlDQWdJQ0FnWld4elpTQnBaaUFvZEhsd1pXOW1JSEJzZFdkcGJuTWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjR3gxWjJsdWN5QTlJRnR3YkhWbmFXNXpYVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNBdkx5QkpkR1Z5WVhSbElIUm9jbTkxWjJnZ1pXRmphQ0J3YkhWbmFXNWNiaUFnSUNBZ0lDUXVaV0ZqYUNod2JIVm5hVzV6TENCbWRXNWpkR2x2YmlBb2FTd2dibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJIWlhRZ2RHaGxJR04xY25KbGJuUWdjR3gxWjJsdVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3YkhWbmFXNGdQU0JmZEdocGN5NWZjR3gxWjJsdWMxdHVZVzFsWFR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJNYjJOaGJHbDZaU0IwYUdVZ2MyVmhjbU5vSUhSdklHRnNiQ0JsYkdWdFpXNTBjeUJwYm5OcFpHVWdaV3hsYlN3Z1lYTWdkMlZzYkNCaGN5QmxiR1Z0SUdsMGMyVnNaaXdnZFc1c1pYTnpJR1ZzWlcwZ1BUMDlJR1J2WTNWdFpXNTBYRzRnSUNBZ0lDQWdJSFpoY2lBa1pXeGxiU0E5SUNRb1pXeGxiU2t1Wm1sdVpDZ25XMlJoZEdFdEp5QXJJRzVoYldVZ0t5QW5YU2NwTG1Ga1pFSmhZMnNvSjF0a1lYUmhMU2NnS3lCdVlXMWxJQ3NnSjEwbktUdGNibHh1SUNBZ0lDQWdJQ0F2THlCR2IzSWdaV0ZqYUNCd2JIVm5hVzRnWm05MWJtUXNJR2x1YVhScFlXeHBlbVVnYVhSY2JpQWdJQ0FnSUNBZ0pHVnNaVzB1WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJQ1JsYkNBOUlDUW9kR2hwY3lrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJFYjI0bmRDQmtiM1ZpYkdVdFpHbHdJRzl1SUhCc2RXZHBibk5jYmlBZ0lDQWdJQ0FnSUNCcFppQW9KR1ZzTG1SaGRHRW9KM3BtVUd4MVoybHVKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloY0lsUnlhV1ZrSUhSdklHbHVhWFJwWVd4cGVtVWdYQ0lnS3lCdVlXMWxJQ3NnWENJZ2IyNGdZVzRnWld4bGJXVnVkQ0IwYUdGMElHRnNjbVZoWkhrZ2FHRnpJR0VnUm05MWJtUmhkR2x2YmlCd2JIVm5hVzR1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNna1pXd3VZWFIwY2lnblpHRjBZUzF2Y0hScGIyNXpKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGFHbHVaeUE5SUNSbGJDNWhkSFJ5S0Nka1lYUmhMVzl3ZEdsdmJuTW5LUzV6Y0d4cGRDZ25PeWNwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dVc0lHa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc5d2RDQTlJR1V1YzNCc2FYUW9Kem9uS1M1dFlYQW9ablZ1WTNScGIyNGdLR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWc0xuUnlhVzBvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjSFJiTUYwcElHOXdkSE5iYjNCMFd6QmRYU0E5SUhCaGNuTmxWbUZzZFdVb2IzQjBXekZkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSkdWc0xtUmhkR0VvSjNwbVVHeDFaMmx1Snl3Z2JtVjNJSEJzZFdkcGJpZ2tLSFJvYVhNcExDQnZjSFJ6S1NrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBSbTVPWVcxbE9pQm1kVzVqZEdsdmJrNWhiV1VzWEc0Z0lDQWdkSEpoYm5OcGRHbHZibVZ1WkRvZ1puVnVZM1JwYjI0Z0tDUmxiR1Z0S1NCN1hHNGdJQ0FnSUNCMllYSWdkSEpoYm5OcGRHbHZibk1nUFNCN1hHNGdJQ0FnSUNBZ0lDZDBjbUZ1YzJsMGFXOXVKem9nSjNSeVlXNXphWFJwYjI1bGJtUW5MRnh1SUNBZ0lDQWdJQ0FuVjJWaWEybDBWSEpoYm5OcGRHbHZiaWM2SUNkM1pXSnJhWFJVY21GdWMybDBhVzl1Ulc1a0p5eGNiaUFnSUNBZ0lDQWdKMDF2ZWxSeVlXNXphWFJwYjI0bk9pQW5kSEpoYm5OcGRHbHZibVZ1WkNjc1hHNGdJQ0FnSUNBZ0lDZFBWSEpoYm5OcGRHbHZiaWM2SUNkdmRISmhibk5wZEdsdmJtVnVaQ2RjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0IyWVhJZ1pXeGxiU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcExGeHVJQ0FnSUNBZ0lDQWdJR1Z1WkR0Y2JseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2RDQnBiaUIwY21GdWMybDBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1ZzWlcwdWMzUjViR1ZiZEYwZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaVzVrSUQwZ2RISmhibk5wZEdsdmJuTmJkRjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaGxibVFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWdVpEdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHVnVaQ0E5SUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNSbGJHVnRMblJ5YVdkblpYSklZVzVrYkdWeUtDZDBjbUZ1YzJsMGFXOXVaVzVrSnl3Z1d5UmxiR1Z0WFNrN1hHNGdJQ0FnSUNBZ0lIMHNJREVwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSjNSeVlXNXphWFJwYjI1bGJtUW5PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JHYjNWdVpHRjBhVzl1TG5WMGFXd2dQU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm5WdVkzUnBiMjRnWm05eUlHRndjR3g1YVc1bklHRWdaR1ZpYjNWdVkyVWdaV1ptWldOMElIUnZJR0VnWm5WdVkzUnBiMjRnWTJGc2JDNWNiaUFnSUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1kVzVqSUMwZ1JuVnVZM1JwYjI0Z2RHOGdZbVVnWTJGc2JHVmtJR0YwSUdWdVpDQnZaaUIwYVcxbGIzVjBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmtaV3hoZVNBdElGUnBiV1VnYVc0Z2JYTWdkRzhnWkdWc1lYa2dkR2hsSUdOaGJHd2diMllnWUdaMWJtTmdMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJR1oxYm1OMGFXOXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHliM1IwYkdVNklHWjFibU4wYVc5dUlDaG1kVzVqTENCa1pXeGhlU2tnZTF4dUlDQWdJQ0FnZG1GeUlIUnBiV1Z5SUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR052Ym5SbGVIUWdQU0IwYUdsekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKbmN5QTlJR0Z5WjNWdFpXNTBjenRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2x0WlhJZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0IwYVcxbGNpQTlJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVl5NWhjSEJzZVNoamIyNTBaWGgwTENCaGNtZHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1Z5SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNCOUxDQmtaV3hoZVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJQzh2SUZSUFJFODZJR052Ym5OcFpHVnlJRzV2ZENCdFlXdHBibWNnZEdocGN5QmhJR3BSZFdWeWVTQm1kVzVqZEdsdmJseHVJQ0F2THlCVVQwUlBPaUJ1WldWa0lIZGhlU0IwYnlCeVpXWnNiM2NnZG5NdUlISmxMV2x1YVhScFlXeHBlbVZjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0JHYjNWdVpHRjBhVzl1SUdwUmRXVnllU0J0WlhSb2IyUXVYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZkVGeWNtRjVmU0J0WlhSb2IyUWdMU0JCYmlCaFkzUnBiMjRnZEc4Z2NHVnlabTl5YlNCdmJpQjBhR1VnWTNWeWNtVnVkQ0JxVVhWbGNua2diMkpxWldOMExseHVJQ0FnS2k5Y2JpQWdkbUZ5SUdadmRXNWtZWFJwYjI0Z1BTQm1kVzVqZEdsdmJpQW9iV1YwYUc5a0tTQjdYRzRnSUNBZ2RtRnlJSFI1Y0dVZ1BTQjBlWEJsYjJZZ2JXVjBhRzlrTEZ4dUlDQWdJQ0FnSUNBa2JXVjBZU0E5SUNRb0oyMWxkR0V1Wm05MWJtUmhkR2x2YmkxdGNTY3BMRnh1SUNBZ0lDQWdJQ0FrYm05S1V5QTlJQ1FvSnk1dWJ5MXFjeWNwTzF4dVhHNGdJQ0FnYVdZZ0tDRWtiV1YwWVM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNRb0p6eHRaWFJoSUdOc1lYTnpQVndpWm05MWJtUmhkR2x2YmkxdGNWd2lQaWNwTG1Gd2NHVnVaRlJ2S0dSdlkzVnRaVzUwTG1obFlXUXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9KRzV2U2xNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBa2JtOUtVeTV5WlcxdmRtVkRiR0Z6Y3lnbmJtOHRhbk1uS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQzh2Ym1WbFpITWdkRzhnYVc1cGRHbGhiR2w2WlNCMGFHVWdSbTkxYm1SaGRHbHZiaUJ2WW1wbFkzUXNJRzl5SUdGdUlHbHVaR2wyYVdSMVlXd2djR3gxWjJsdUxseHVJQ0FnSUNBZ1JtOTFibVJoZEdsdmJpNU5aV1JwWVZGMVpYSjVMbDlwYm1sMEtDazdYRzRnSUNBZ0lDQkdiM1Z1WkdGMGFXOXVMbkpsWm14dmR5aDBhR2x6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBdkwyRnVJR2x1WkdsMmFXUjFZV3dnYldWMGFHOWtJSFJ2SUdsdWRtOXJaU0J2YmlCaElIQnNkV2RwYmlCdmNpQm5jbTkxY0NCdlppQndiSFZuYVc1elhHNGdJQ0FnSUNCMllYSWdZWEpuY3lBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNU2s3SUM4dlkyOXNiR1ZqZENCaGJHd2dkR2hsSUdGeVozVnRaVzUwY3l3Z2FXWWdibVZqWlhOellYSjVYRzRnSUNBZ0lDQjJZWElnY0d4MVowTnNZWE56SUQwZ2RHaHBjeTVrWVhSaEtDZDZabEJzZFdkcGJpY3BPeUF2TDJSbGRHVnliV2x1WlNCMGFHVWdZMnhoYzNNZ2IyWWdjR3gxWjJsdVhHNWNiaUFnSUNBZ0lHbG1JQ2h3YkhWblEyeGhjM01nSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ3YkhWblEyeGhjM05iYldWMGFHOWtYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQzh2YldGclpTQnpkWEpsSUdKdmRHZ2dkR2hsSUdOc1lYTnpJR0Z1WkNCdFpYUm9iMlFnWlhocGMzUmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeTlwWmlCMGFHVnlaU2R6SUc5dWJIa2diMjVsTENCallXeHNJR2wwSUdScGNtVmpkR3g1TGx4dUlDQWdJQ0FnSUNBZ0lIQnNkV2REYkdGemMxdHRaWFJvYjJSZExtRndjR3g1S0hCc2RXZERiR0Z6Y3l3Z1lYSm5jeWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUlDaHBMQ0JsYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5dmRHaGxjbmRwYzJVZ2JHOXZjQ0IwYUhKdmRXZG9JSFJvWlNCcVVYVmxjbmtnWTI5c2JHVmpkR2x2YmlCaGJtUWdhVzUyYjJ0bElIUm9aU0J0WlhSb2IyUWdiMjRnWldGamFGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4MVowTnNZWE56VzIxbGRHaHZaRjB1WVhCd2JIa29KQ2hsYkNrdVpHRjBZU2duZW1aUWJIVm5hVzRuS1N3Z1lYSm5jeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQzh2WlhKeWIzSWdabTl5SUc1dklHTnNZWE56SUc5eUlHNXZJRzFsZEdodlpGeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dVbVZtWlhKbGJtTmxSWEp5YjNJb1hDSlhaU2R5WlNCemIzSnllU3dnSjF3aUlDc2diV1YwYUc5a0lDc2dYQ0luSUdseklHNXZkQ0JoYmlCaGRtRnBiR0ZpYkdVZ2JXVjBhRzlrSUdadmNpQmNJaUFySUNod2JIVm5RMnhoYzNNZ1B5Qm1kVzVqZEdsdmJrNWhiV1VvY0d4MVowTnNZWE56S1NBNklDZDBhR2x6SUdWc1pXMWxiblFuS1NBcklDY3VKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDOHZaWEp5YjNJZ1ptOXlJR2x1ZG1Gc2FXUWdZWEpuZFcxbGJuUWdkSGx3WlZ4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblYyVmNYQ2R5WlNCemIzSnllU3dnSnlBcklIUjVjR1VnS3lBbklHbHpJRzV2ZENCaElIWmhiR2xrSUhCaGNtRnRaWFJsY2k0Z1dXOTFJRzExYzNRZ2RYTmxJR0VnYzNSeWFXNW5JSEpsY0hKbGMyVnVkR2x1WnlCMGFHVWdiV1YwYUc5a0lIbHZkU0IzYVhOb0lIUnZJR2x1ZG05clpTNG5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgwN1hHNWNiaUFnZDJsdVpHOTNMa1p2ZFc1a1lYUnBiMjRnUFNCR2IzVnVaR0YwYVc5dU8xeHVJQ0FrTG1adUxtWnZkVzVrWVhScGIyNGdQU0JtYjNWdVpHRjBhVzl1TzF4dVhHNGdJQzh2SUZCdmJIbG1hV3hzSUdadmNpQnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1ZjYmlBZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnBaaUFvSVVSaGRHVXVibTkzSUh4OElDRjNhVzVrYjNjdVJHRjBaUzV1YjNjcElIZHBibVJ2ZHk1RVlYUmxMbTV2ZHlBOUlFUmhkR1V1Ym05M0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlCRVlYUmxLQ2t1WjJWMFZHbHRaU2dwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IyWVhJZ2RtVnVaRzl5Y3lBOUlGc25kMlZpYTJsMEp5d2dKMjF2ZWlkZE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RtVnVaRzl5Y3k1c1pXNW5kR2dnSmlZZ0lYZHBibVJ2ZHk1eVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVTdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSFp3SUQwZ2RtVnVaRzl5YzF0cFhUdGNiaUFnSUNBZ0lIZHBibVJ2ZHk1eVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVWdQU0IzYVc1a2IzZGJkbkFnS3lBblVtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxKMTA3WEc0Z0lDQWdJQ0IzYVc1a2IzY3VZMkZ1WTJWc1FXNXBiV0YwYVc5dVJuSmhiV1VnUFNCM2FXNWtiM2RiZG5BZ0t5QW5RMkZ1WTJWc1FXNXBiV0YwYVc5dVJuSmhiV1VuWFNCOGZDQjNhVzVrYjNkYmRuQWdLeUFuUTJGdVkyVnNVbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSjEwN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNndmFWQW9ZV1I4YUc5dVpYeHZaQ2t1S2s5VElEWXZMblJsYzNRb2QybHVaRzkzTG01aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RcElIeDhJQ0YzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSUh4OElDRjNhVzVrYjNjdVkyRnVZMlZzUVc1cGJXRjBhVzl1Um5KaGJXVXBJSHRjYmlBZ0lDQWdJSFpoY2lCc1lYTjBWR2x0WlNBOUlEQTdYRzRnSUNBZ0lDQjNhVzVrYjNjdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxJRDBnWm5WdVkzUnBiMjRnS0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1YjNjZ1BTQkVZWFJsTG01dmR5Z3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JtVjRkRlJwYldVZ1BTQk5ZWFJvTG0xaGVDaHNZWE4wVkdsdFpTQXJJREUyTENCdWIzY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc29iR0Z6ZEZScGJXVWdQU0J1WlhoMFZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUgwc0lHNWxlSFJVYVcxbElDMGdibTkzS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCM2FXNWtiM2N1WTJGdVkyVnNRVzVwYldGMGFXOXVSbkpoYldVZ1BTQmpiR1ZoY2xScGJXVnZkWFE3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJ2YkhsbWFXeHNJR1p2Y2lCd1pYSm1iM0p0WVc1alpTNXViM2NzSUhKbGNYVnBjbVZrSUdKNUlISkJSbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHbG1JQ2doZDJsdVpHOTNMbkJsY21admNtMWhibU5sSUh4OElDRjNhVzVrYjNjdWNHVnlabTl5YldGdVkyVXVibTkzS1NCN1hHNGdJQ0FnSUNCM2FXNWtiM2N1Y0dWeVptOXliV0Z1WTJVZ1BTQjdYRzRnSUNBZ0lDQWdJSE4wWVhKME9pQkVZWFJsTG01dmR5Z3BMRnh1SUNBZ0lDQWdJQ0J1YjNjNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUkdGMFpTNXViM2NvS1NBdElIUm9hWE11YzNSaGNuUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNCOUtTZ3BPMXh1SUNCcFppQW9JVVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVpYVc1a0tTQjdYRzRnSUNBZ1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbExtSnBibVFnUFNCbWRXNWpkR2x2YmlBb2IxUm9hWE1wSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCamJHOXpaWE4wSUhSb2FXNW5JSEJ2YzNOcFlteGxJSFJ2SUhSb1pTQkZRMDFCVTJOeWFYQjBJRFZjYmlBZ0lDQWdJQ0FnTHk4Z2FXNTBaWEp1WVd3Z1NYTkRZV3hzWVdKc1pTQm1kVzVqZEdsdmJseHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RHZFc1amRHbHZiaTV3Y205MGIzUjVjR1V1WW1sdVpDQXRJSGRvWVhRZ2FYTWdkSEo1YVc1bklIUnZJR0psSUdKdmRXNWtJR2x6SUc1dmRDQmpZV3hzWVdKc1pTY3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ1lVRnlaM01nUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lERXBMRnh1SUNBZ0lDQWdJQ0FnSUdaVWIwSnBibVFnUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0FnSUdaT1QxQWdQU0JtZFc1amRHbHZiaUFvS1NCN2ZTeGNiaUFnSUNBZ0lDQWdJQ0JtUW05MWJtUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVZHOUNhVzVrTG1Gd2NHeDVLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQm1UazlRSUQ4Z2RHaHBjeUE2SUc5VWFHbHpMQ0JoUVhKbmN5NWpiMjVqWVhRb1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektTa3BPMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmRHOTBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRzVoZEdsMlpTQm1kVzVqZEdsdmJuTWdaRzl1SjNRZ2FHRjJaU0JoSUhCeWIzUnZkSGx3WlZ4dUlDQWdJQ0FnSUNCbVRrOVFMbkJ5YjNSdmRIbHdaU0E5SUhSb2FYTXVjSEp2ZEc5MGVYQmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaa0p2ZFc1a0xuQnliM1J2ZEhsd1pTQTlJRzVsZHlCbVRrOVFLQ2s3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJtUW05MWJtUTdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dUlDQXZMeUJRYjJ4NVptbHNiQ0IwYnlCblpYUWdkR2hsSUc1aGJXVWdiMllnWVNCbWRXNWpkR2x2YmlCcGJpQkpSVGxjYmlBZ1puVnVZM1JwYjI0Z1puVnVZM1JwYjI1T1lXMWxLR1p1S1NCN1hHNGdJQ0FnYVdZZ0tFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTNXVZVzFsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSFpoY2lCbWRXNWpUbUZ0WlZKbFoyVjRJRDBnTDJaMWJtTjBhVzl1WEZ4ektGdGVLRjE3TVN4OUtWeGNLQzg3WEc0Z0lDQWdJQ0IyWVhJZ2NtVnpkV3gwY3lBOUlHWjFibU5PWVcxbFVtVm5aWGd1WlhobFl5aG1iaTUwYjFOMGNtbHVaeWdwS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUnpJQ1ltSUhKbGMzVnNkSE11YkdWdVozUm9JRDRnTVNBL0lISmxjM1ZzZEhOYk1WMHVkSEpwYlNncElEb2dYQ0pjSWp0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dadUxuQnliM1J2ZEhsd1pTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbkJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y2k1dVlXMWxPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQm1kVzVqZEdsdmJpQndZWEp6WlZaaGJIVmxLSE4wY2lrZ2UxeHVJQ0FnSUdsbUlDZ25kSEoxWlNjZ1BUMDlJSE4wY2lrZ2NtVjBkWEp1SUhSeWRXVTdaV3h6WlNCcFppQW9KMlpoYkhObEp5QTlQVDBnYzNSeUtTQnlaWFIxY200Z1ptRnNjMlU3Wld4elpTQnBaaUFvSVdselRtRk9LSE4wY2lBcUlERXBLU0J5WlhSMWNtNGdjR0Z5YzJWR2JHOWhkQ2h6ZEhJcE8xeHVJQ0FnSUhKbGRIVnliaUJ6ZEhJN1hHNGdJSDFjYmlBZ0x5OGdRMjl1ZG1WeWRDQlFZWE5qWVd4RFlYTmxJSFJ2SUd0bFltRmlMV05oYzJWY2JpQWdMeThnVkdoaGJtc2dlVzkxT2lCb2RIUndPaTh2YzNSaFkydHZkbVZ5Wm14dmR5NWpiMjB2WVM4NE9UVTFOVGd3WEc0Z0lHWjFibU4wYVc5dUlHaDVjR2hsYm1GMFpTaHpkSElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1J5TG5KbGNHeGhZMlVvTHloYllTMTZYU2tvVzBFdFdsMHBMMmNzSUNja01TMGtNaWNwTG5SdlRHOTNaWEpEWVhObEtDazdYRzRnSUgxY2JuMG9hbEYxWlhKNUtUc2lMQ0l2S2lCcWMyaHBiblFnYVdkdWIzSmxPbk4wWVhKMElDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlGOWpjbVZoZEdWRGJHRnpjeUE5SUdaMWJtTjBhVzl1SUNncElIc2dablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aDBZWEpuWlhRc0lIQnliM0J6S1NCN0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djSEp2Y0hNdWJHVnVaM1JvT3lCcEt5c3BJSHNnZG1GeUlHUmxjMk55YVhCMGIzSWdQU0J3Y205d2MxdHBYVHNnWkdWelkzSnBjSFJ2Y2k1bGJuVnRaWEpoWW14bElEMGdaR1Z6WTNKcGNIUnZjaTVsYm5WdFpYSmhZbXhsSUh4OElHWmhiSE5sT3lCa1pYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlXSnNaU0E5SUhSeWRXVTdJR2xtSUNoY0luWmhiSFZsWENJZ2FXNGdaR1Z6WTNKcGNIUnZjaWtnWkdWelkzSnBjSFJ2Y2k1M2NtbDBZV0pzWlNBOUlIUnlkV1U3SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lHUmxjMk55YVhCMGIzSXVhMlY1TENCa1pYTmpjbWx3ZEc5eUtUc2dmU0I5SUhKbGRIVnliaUJtZFc1amRHbHZiaUFvUTI5dWMzUnlkV04wYjNJc0lIQnliM1J2VUhKdmNITXNJSE4wWVhScFkxQnliM0J6S1NCN0lHbG1JQ2h3Y205MGIxQnliM0J6S1NCa1pXWnBibVZRY205d1pYSjBhV1Z6S0VOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTd2djSEp2ZEc5UWNtOXdjeWs3SUdsbUlDaHpkR0YwYVdOUWNtOXdjeWtnWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhEYjI1emRISjFZM1J2Y2l3Z2MzUmhkR2xqVUhKdmNITXBPeUJ5WlhSMWNtNGdRMjl1YzNSeWRXTjBiM0k3SUgwN0lIMG9LVHRjYmx4dVpuVnVZM1JwYjI0Z1gyTnNZWE56UTJGc2JFTm9aV05yS0dsdWMzUmhibU5sTENCRGIyNXpkSEoxWTNSdmNpa2dleUJwWmlBb0lTaHBibk4wWVc1alpTQnBibk4wWVc1alpXOW1JRU52Ym5OMGNuVmpkRzl5S1NrZ2V5QjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJR05oYkd3Z1lTQmpiR0Z6Y3lCaGN5QmhJR1oxYm1OMGFXOXVYQ0lwT3lCOUlIMWNibHh1SVdaMWJtTjBhVzl1SUNna0tTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFOW1aa05oYm5aaGN5QnRiMlIxYkdVdVhHNGdJQ0FxSUVCdGIyUjFiR1VnWm05MWJtUmhkR2x2Ymk1dlptWmpZVzUyWVhOY2JpQWdJQ29nUUhKbGNYVnBjbVZ6SUdadmRXNWtZWFJwYjI0dWRYUnBiQzVyWlhsaWIyRnlaRnh1SUNBZ0tpQkFjbVZ4ZFdseVpYTWdabTkxYm1SaGRHbHZiaTUxZEdsc0xtMWxaR2xoVVhWbGNubGNiaUFnSUNvZ1FISmxjWFZwY21WeklHWnZkVzVrWVhScGIyNHVkWFJwYkM1MGNtbG5aMlZ5YzF4dUlDQWdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMbTF2ZEdsdmJseHVJQ0FnS2k5Y2JseHVJQ0IyWVhJZ1QyWm1RMkZ1ZG1GeklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOeVpXRjBaWE1nWVNCdVpYY2dhVzV6ZEdGdVkyVWdiMllnWVc0Z2IyWm1MV05oYm5aaGN5QjNjbUZ3Y0dWeUxseHVJQ0FnSUNBcUlFQmpiR0Z6YzF4dUlDQWdJQ0FxSUVCbWFYSmxjeUJQWm1aRFlXNTJZWE1qYVc1cGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbGJHVnRaVzUwSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCcGJtbDBhV0ZzYVhwbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ1QzWmxjbkpwWkdWeklIUnZJSFJvWlNCa1pXWmhkV3gwSUhCc2RXZHBiaUJ6WlhSMGFXNW5jeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQm1kVzVqZEdsdmJpQlBabVpEWVc1MllYTW9aV3hsYldWdWRDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdYMk5zWVhOelEyRnNiRU5vWldOcktIUm9hWE1zSUU5bVprTmhiblpoY3lrN1hHNWNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdKQzVsZUhSbGJtUW9lMzBzSUU5bVprTmhiblpoY3k1a1pXWmhkV3gwY3l3Z2RHaHBjeTRrWld4bGJXVnVkQzVrWVhSaEtDa3NJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdkR2hwY3k0a2JHRnpkRlJ5YVdkblpYSWdQU0FrS0NrN1hHNGdJQ0FnSUNCMGFHbHpMaVIwY21sbloyVnljeUE5SUNRb0tUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZmFXNXBkQ2dwTzF4dUlDQWdJQ0FnZEdocGN5NWZaWFpsYm5SektDazdYRzVjYmlBZ0lDQWdJRVp2ZFc1a1lYUnBiMjR1Y21WbmFYTjBaWEpRYkhWbmFXNG9kR2hwY3l3Z0owOW1aa05oYm5aaGN5Y3BPMXh1SUNBZ0lDQWdSbTkxYm1SaGRHbHZiaTVMWlhsaWIyRnlaQzV5WldkcGMzUmxjaWduVDJabVEyRnVkbUZ6Snl3Z2UxeHVJQ0FnSUNBZ0lDQW5SVk5EUVZCRkp6b2dKMk5zYjNObEoxeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElHOW1aaTFqWVc1MllYTWdkM0poY0hCbGNpQmllU0JoWkdScGJtY2dkR2hsSUdWNGFYUWdiM1psY214aGVTQW9hV1lnYm1WbFpHVmtLUzVjYmlBZ0lDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1WEc1Y2JpQWdJQ0JmWTNKbFlYUmxRMnhoYzNNb1QyWm1RMkZ1ZG1GekxDQmJlMXh1SUNBZ0lDQWdhMlY1T2lBblgybHVhWFFuTEZ4dUlDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJRjlwYm1sMEtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FXUWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtRjBkSElvSjJsa0p5azdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWhkSFJ5S0NkaGNtbGhMV2hwWkdSbGJpY3NJQ2QwY25WbEp5azdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWhaR1JEYkdGemN5Z25hWE10ZEhKaGJuTnBkR2x2YmkwbklDc2dkR2hwY3k1dmNIUnBiMjV6TG5SeVlXNXphWFJwYjI0cE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVacGJtUWdkSEpwWjJkbGNuTWdkR2hoZENCaFptWmxZM1FnZEdocGN5QmxiR1Z0Wlc1MElHRnVaQ0JoWkdRZ1lYSnBZUzFsZUhCaGJtUmxaQ0IwYnlCMGFHVnRYRzRnSUNBZ0lDQWdJSFJvYVhNdUpIUnlhV2RuWlhKeklEMGdKQ2hrYjJOMWJXVnVkQ2t1Wm1sdVpDZ25XMlJoZEdFdGIzQmxiajFjSWljZ0t5QnBaQ0FySUNkY0lsMHNJRnRrWVhSaExXTnNiM05sUFZ3aUp5QXJJR2xrSUNzZ0oxd2lYU3dnVzJSaGRHRXRkRzluWjJ4bFBWd2lKeUFySUdsa0lDc2dKMXdpWFNjcExtRjBkSElvSjJGeWFXRXRaWGh3WVc1a1pXUW5MQ0FuWm1Gc2MyVW5LUzVoZEhSeUtDZGhjbWxoTFdOdmJuUnliMnh6Snl3Z2FXUXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFRmtaQ0JoYmlCdmRtVnliR0Y1SUc5MlpYSWdkR2hsSUdOdmJuUmxiblFnYVdZZ2JtVmpaWE56WVhKNVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVkyOXVkR1Z1ZEU5MlpYSnNZWGtnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYjNabGNteGhlU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCdmRtVnliR0Y1VUc5emFYUnBiMjRnUFNBa0tIUm9hWE11SkdWc1pXMWxiblFwTG1OemN5aGNJbkJ2YzJsMGFXOXVYQ0lwSUQwOVBTQW5abWw0WldRbklEOGdKMmx6TFc5MlpYSnNZWGt0Wm1sNFpXUW5JRG9nSjJsekxXOTJaWEpzWVhrdFlXSnpiMngxZEdVbk8xeHVJQ0FnSUNBZ0lDQWdJRzkyWlhKc1lYa3VjMlYwUVhSMGNtbGlkWFJsS0NkamJHRnpjeWNzSUNkcWN5MXZabVl0WTJGdWRtRnpMVzkyWlhKc1lYa2dKeUFySUc5MlpYSnNZWGxRYjNOcGRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTRrYjNabGNteGhlU0E5SUNRb2IzWmxjbXhoZVNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0c5MlpYSnNZWGxRYjNOcGRHbHZiaUE5UFQwZ0oybHpMVzkyWlhKc1lYa3RabWw0WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDZGliMlI1SnlrdVlYQndaVzVrS0hSb2FYTXVKRzkyWlhKc1lYa3BPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5OcFlteHBibWR6S0NkYlpHRjBZUzF2Wm1ZdFkyRnVkbUZ6TFdOdmJuUmxiblJkSnlrdVlYQndaVzVrS0hSb2FYTXVKRzkyWlhKc1lYa3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1cGMxSmxkbVZoYkdWa0lEMGdkR2hwY3k1dmNIUnBiMjV6TG1selVtVjJaV0ZzWldRZ2ZId2dibVYzSUZKbFowVjRjQ2gwYUdsekxtOXdkR2x2Ym5NdWNtVjJaV0ZzUTJ4aGMzTXNJQ2RuSnlrdWRHVnpkQ2gwYUdsekxpUmxiR1Z0Wlc1MFd6QmRMbU5zWVhOelRtRnRaU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1cGMxSmxkbVZoYkdWa0lEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxuSmxkbVZoYkU5dUlEMGdkR2hwY3k1dmNIUnBiMjV6TG5KbGRtVmhiRTl1SUh4OElIUm9hWE11SkdWc1pXMWxiblJiTUYwdVkyeGhjM05PWVcxbExtMWhkR05vS0M4b2NtVjJaV0ZzTFdadmNpMXRaV1JwZFcxOGNtVjJaV0ZzTFdadmNpMXNZWEpuWlNrdlp5bGJNRjB1YzNCc2FYUW9KeTBuS1ZzeVhUdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXpaWFJOVVVOb1pXTnJaWElvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXViM0IwYVc5dWN5NTBjbUZ1YzJsMGFXOXVWR2x0WlNBOVBUMGdkSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1MGNtRnVjMmwwYVc5dVZHbHRaU0E5SUhCaGNuTmxSbXh2WVhRb2QybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvSkNnblcyUmhkR0V0YjJabUxXTmhiblpoYzEwbktWc3dYU2t1ZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1S1NBcUlERXdNREE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdLaUJCWkdSeklHVjJaVzUwSUdoaGJtUnNaWEp6SUhSdklIUm9aU0J2Wm1ZdFkyRnVkbUZ6SUhkeVlYQndaWElnWVc1a0lIUm9aU0JsZUdsMElHOTJaWEpzWVhrdVhHNGdJQ0FnSUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDQWdLaTljYmx4dUlDQWdJSDBzSUh0Y2JpQWdJQ0FnSUd0bGVUb2dKMTlsZG1WdWRITW5MRnh1SUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlGOWxkbVZ1ZEhNb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWIyWm1LQ2N1ZW1ZdWRISnBaMmRsY2lBdWVtWXViMlptWTJGdWRtRnpKeWt1YjI0b2UxeHVJQ0FnSUNBZ0lDQWdJQ2R2Y0dWdUxucG1MblJ5YVdkblpYSW5PaUIwYUdsekxtOXdaVzR1WW1sdVpDaDBhR2x6S1N4Y2JpQWdJQ0FnSUNBZ0lDQW5ZMnh2YzJVdWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdVkyeHZjMlV1WW1sdVpDaDBhR2x6S1N4Y2JpQWdJQ0FnSUNBZ0lDQW5kRzluWjJ4bExucG1MblJ5YVdkblpYSW5PaUIwYUdsekxuUnZaMmRzWlM1aWFXNWtLSFJvYVhNcExGeHVJQ0FnSUNBZ0lDQWdJQ2RyWlhsa2IzZHVMbnBtTG05bVptTmhiblpoY3ljNklIUm9hWE11WDJoaGJtUnNaVXRsZVdKdllYSmtMbUpwYm1Rb2RHaHBjeWxjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWpiRzl6WlU5dVEyeHBZMnNnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnSkhSaGNtZGxkQ0E5SUhSb2FYTXViM0IwYVc5dWN5NWpiMjUwWlc1MFQzWmxjbXhoZVNBL0lIUm9hWE11Skc5MlpYSnNZWGtnT2lBa0tDZGJaR0YwWVMxdlptWXRZMkZ1ZG1GekxXTnZiblJsYm5SZEp5azdYRzRnSUNBZ0lDQWdJQ0FnSkhSaGNtZGxkQzV2YmloN0lDZGpiR2xqYXk1NlppNXZabVpqWVc1MllYTW5PaUIwYUdsekxtTnNiM05sTG1KcGJtUW9kR2hwY3lrZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQkJjSEJzYVdWeklHVjJaVzUwSUd4cGMzUmxibVZ5SUdadmNpQmxiR1Z0Wlc1MGN5QjBhR0YwSUhkcGJHd2djbVYyWldGc0lHRjBJR05sY25SaGFXNGdZbkpsWVd0d2IybHVkSE11WEc0Z0lDQWdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ0FnSUNvdlhHNWNiaUFnSUNCOUxDQjdYRzRnSUNBZ0lDQnJaWGs2SUNkZmMyVjBUVkZEYUdWamEyVnlKeXhjYmlBZ0lDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQmZjMlYwVFZGRGFHVmphMlZ5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ0lDQWdJQ1FvZDJsdVpHOTNLUzV2YmlnblkyaGhibWRsWkM1NlppNXRaV1JwWVhGMVpYSjVKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoR2IzVnVaR0YwYVc5dUxrMWxaR2xoVVhWbGNua3VZWFJNWldGemRDaGZkR2hwY3k1dmNIUnBiMjV6TG5KbGRtVmhiRTl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjbVYyWldGc0tIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXlaWFpsWVd3b1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2t1YjI1bEtDZHNiMkZrTG5wbUxtOW1abU5oYm5aaGN5Y3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvUm05MWJtUmhkR2x2Ymk1TlpXUnBZVkYxWlhKNUxtRjBUR1ZoYzNRb1gzUm9hWE11YjNCMGFXOXVjeTV5WlhabFlXeFBiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuSmxkbVZoYkNoMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBcUlFaGhibVJzWlhNZ2RHaGxJSEpsZG1WaGJHbHVaeTlvYVdScGJtY2dkR2hsSUc5bVppMWpZVzUyWVhNZ1lYUWdZbkpsWVd0d2IybHVkSE1zSUc1dmRDQjBhR1VnYzJGdFpTQmhjeUJ2Y0dWdUxseHVJQ0FnSUNBZ0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQnBjMUpsZG1WaGJHVmtJQzBnZEhKMVpTQnBaaUJsYkdWdFpXNTBJSE5vYjNWc1pDQmlaU0J5WlhabFlXeGxaQzVjYmlBZ0lDQWdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdJQ0FnSUNvdlhHNWNiaUFnSUNCOUxDQjdYRzRnSUNBZ0lDQnJaWGs2SUNkeVpYWmxZV3duTEZ4dUlDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSEpsZG1WaGJDaHBjMUpsZG1WaGJHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQWtZMnh2YzJWeUlEMGdkR2hwY3k0a1pXeGxiV1Z1ZEM1bWFXNWtLQ2RiWkdGMFlTMWpiRzl6WlYwbktUdGNiaUFnSUNBZ0lDQWdhV1lnS0dselVtVjJaV0ZzWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnNiM05sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGMxSmxkbVZoYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG1GMGRISW9KMkZ5YVdFdGFHbGtaR1Z1Snl3Z0oyWmhiSE5sSnlrN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1dlptWW9KMjl3Wlc0dWVtWXVkSEpwWjJkbGNpQjBiMmRuYkdVdWVtWXVkSEpwWjJkbGNpY3BPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2tZMnh2YzJWeUxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSkdOc2IzTmxjaTVvYVdSbEtDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YVhOU1pYWmxZV3hsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpZ25ZWEpwWVMxb2FXUmtaVzRuTENBbmRISjFaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjI0b2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSjI5d1pXNHVlbVl1ZEhKcFoyZGxjaWM2SUhSb2FYTXViM0JsYmk1aWFXNWtLSFJvYVhNcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjNSdloyZHNaUzU2Wmk1MGNtbG5aMlZ5SnpvZ2RHaHBjeTUwYjJkbmJHVXVZbWx1WkNoMGFHbHpLVnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNna1kyeHZjMlZ5TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKR05zYjNObGNpNXphRzkzS0NrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDb2dVM1J2Y0hNZ2MyTnliMnhzYVc1bklHOW1JSFJvWlNCaWIyUjVJSGRvWlc0Z2IyWm1ZMkZ1ZG1GeklHbHpJRzl3Wlc0Z2IyNGdiVzlpYVd4bElGTmhabUZ5YVNCaGJtUWdiM1JvWlhJZ2RISnZkV0pzWlhOdmJXVWdZbkp2ZDNObGNuTXVYRzRnSUNBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQWdJQ292WEc1Y2JpQWdJQ0I5TENCN1hHNGdJQ0FnSUNCclpYazZJQ2RmYzNSdmNGTmpjbTlzYkdsdVp5Y3NYRzRnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1gzTjBiM0JUWTNKdmJHeHBibWNvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJVWVd0bGJpQmhibVFnWVdSaGNIUmxaQ0JtY205dElHaDBkSEE2THk5emRHRmphMjkyWlhKbWJHOTNMbU52YlM5eGRXVnpkR2x2Ym5Ndk1UWTRPRGswTkRjdmNISmxkbVZ1ZEMxbWRXeHNMWEJoWjJVdGMyTnliMnhzYVc1bkxXbHZjMXh1SUNBZ0lDQWdMeThnVDI1c2VTQnlaV0ZzYkhrZ2QyOXlhM01nWm05eUlIa3NJRzV2ZENCemRYSmxJR2h2ZHlCMGJ5QmxlSFJsYm1RZ2RHOGdlQ0J2Y2lCcFppQjNaU0J1WldWa0lIUnZMbHh1WEc0Z0lDQWdmU3dnZTF4dUlDQWdJQ0FnYTJWNU9pQW5YM0psWTI5eVpGTmpjbTlzYkdGaWJHVW5MRnh1SUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlGOXlaV052Y21SVFkzSnZiR3hoWW14bEtHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYkdWdElEMGdkR2hwY3pzZ0x5OGdZMkZzYkdWa0lHWnliMjBnWlhabGJuUWdhR0Z1Wkd4bGNpQmpiMjUwWlhoMElIZHBkR2dnZEdocGN5QmhjeUJsYkdWdFhHNWNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJR1ZzWlcxbGJuUWdhWE1nYzJOeWIyeHNZV0pzWlNBb1kyOXVkR1Z1ZENCdmRtVnlabXh2ZDNNcExDQjBhR1Z1TGk0dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYkdWdExuTmpjbTlzYkVobGFXZG9kQ0FoUFQwZ1pXeGxiUzVqYkdsbGJuUklaV2xuYUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCSlppQjNaU2R5WlNCaGRDQjBhR1VnZEc5d0xDQnpZM0p2Ykd3Z1pHOTNiaUJ2Ym1VZ2NHbDRaV3dnZEc4Z1lXeHNiM2NnYzJOeWIyeHNhVzVuSUhWd1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dWc1pXMHVjMk55YjJ4c1ZHOXdJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRMbk5qY205c2JGUnZjQ0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUM4dklFbG1JSGRsSjNKbElHRjBJSFJvWlNCaWIzUjBiMjBzSUhOamNtOXNiQ0IxY0NCdmJtVWdjR2w0Wld3Z2RHOGdZV3hzYjNjZ2MyTnliMnhzYVc1bklHUnZkMjVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aV3hsYlM1elkzSnZiR3hVYjNBZ1BUMDlJR1ZzWlcwdWMyTnliMnhzU0dWcFoyaDBJQzBnWld4bGJTNWpiR2xsYm5SSVpXbG5hSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcwdWMyTnliMnhzVkc5d0lEMGdaV3hsYlM1elkzSnZiR3hJWldsbmFIUWdMU0JsYkdWdExtTnNhV1Z1ZEVobGFXZG9kQ0F0SURFN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc1pXMHVZV3hzYjNkVmNDQTlJR1ZzWlcwdWMyTnliMnhzVkc5d0lENGdNRHRjYmlBZ0lDQWdJQ0FnWld4bGJTNWhiR3h2ZDBSdmQyNGdQU0JsYkdWdExuTmpjbTlzYkZSdmNDQThJR1ZzWlcwdWMyTnliMnhzU0dWcFoyaDBJQzBnWld4bGJTNWpiR2xsYm5SSVpXbG5hSFE3WEc0Z0lDQWdJQ0FnSUdWc1pXMHViR0Z6ZEZrZ1BTQmxkbVZ1ZEM1dmNtbG5hVzVoYkVWMlpXNTBMbkJoWjJWWk8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc0lIdGNiaUFnSUNBZ0lHdGxlVG9nSjE5emRHOXdVMk55YjJ4c1VISnZjR0ZuWVhScGIyNG5MRnh1SUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlGOXpkRzl3VTJOeWIyeHNVSEp2Y0dGbllYUnBiMjRvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnNaVzBnUFNCMGFHbHpPeUF2THlCallXeHNaV1FnWm5KdmJTQmxkbVZ1ZENCb1lXNWtiR1Z5SUdOdmJuUmxlSFFnZDJsMGFDQjBhR2x6SUdGeklHVnNaVzFjYmlBZ0lDQWdJQ0FnZG1GeUlIVndJRDBnWlhabGJuUXVjR0ZuWlZrZ1BDQmxiR1Z0TG14aGMzUlpPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHOTNiaUE5SUNGMWNEdGNiaUFnSUNBZ0lDQWdaV3hsYlM1c1lYTjBXU0E5SUdWMlpXNTBMbkJoWjJWWk8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMWNDQW1KaUJsYkdWdExtRnNiRzkzVlhBZ2ZId2daRzkzYmlBbUppQmxiR1Z0TG1Gc2JHOTNSRzkzYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuTjBiM0JRY205d1lXZGhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnS2lCUGNHVnVjeUIwYUdVZ2IyWm1MV05oYm5aaGN5QnRaVzUxTGx4dUlDQWdJQ0FnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pYWmxiblFnTFNCRmRtVnVkQ0J2WW1wbFkzUWdjR0Z6YzJWa0lHWnliMjBnYkdsemRHVnVaWEl1WEc0Z0lDQWdJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnZEhKcFoyZGxjaUF0SUdWc1pXMWxiblFnZEdoaGRDQjBjbWxuWjJWeVpXUWdkR2hsSUc5bVppMWpZVzUyWVhNZ2RHOGdiM0JsYmk1Y2JpQWdJQ0FnSUNBcUlFQm1hWEpsY3lCUFptWkRZVzUyWVhNamIzQmxibVZrWEc0Z0lDQWdJQ0FnS2k5Y2JseHVJQ0FnSUgwc0lIdGNiaUFnSUNBZ0lHdGxlVG9nSjI5d1pXNG5MRnh1SUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlHOXdaVzRvWlhabGJuUXNJSFJ5YVdkblpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11SkdWc1pXMWxiblF1YUdGelEyeGhjM01vSjJsekxXOXdaVzRuS1NCOGZDQjBhR2x6TG1selVtVjJaV0ZzWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kSEpwWjJkbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKR3hoYzNSVWNtbG5aMlZ5SUQwZ2RISnBaMmRsY2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVabTl5WTJWVWJ5QTlQVDBnSjNSdmNDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1YzJOeWIyeHNWRzhvTUN3Z01DazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtWnZjbU5sVkc4Z1BUMDlJQ2RpYjNSMGIyMG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG5OamNtOXNiRlJ2S0RBc0lHUnZZM1Z0Wlc1MExtSnZaSGt1YzJOeWIyeHNTR1ZwWjJoMEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUJHYVhKbGN5QjNhR1Z1SUhSb1pTQnZabVl0WTJGdWRtRnpJRzFsYm5VZ2IzQmxibk11WEc0Z0lDQWdJQ0FnSUNBcUlFQmxkbVZ1ZENCUFptWkRZVzUyWVhNamIzQmxibVZrWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k0a1pXeGxiV1Z1ZEM1aFpHUkRiR0Z6Y3lnbmFYTXRiM0JsYmljcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdUpIUnlhV2RuWlhKekxtRjBkSElvSjJGeWFXRXRaWGh3WVc1a1pXUW5MQ0FuZEhKMVpTY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtRjBkSElvSjJGeWFXRXRhR2xrWkdWdUp5d2dKMlpoYkhObEp5a3VkSEpwWjJkbGNpZ25iM0JsYm1Wa0xucG1MbTltWm1OaGJuWmhjeWNwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRWxtSUdCamIyNTBaVzUwVTJOeWIyeHNZQ0JwY3lCelpYUWdkRzhnWm1Gc2MyVXNJR0ZrWkNCamJHRnpjeUJoYm1RZ1pHbHpZV0pzWlNCelkzSnZiR3hwYm1jZ2IyNGdkRzkxWTJnZ1pHVjJhV05sY3k1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1amIyNTBaVzUwVTJOeWIyeHNJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDUW9KMkp2WkhrbktTNWhaR1JEYkdGemN5Z25hWE10YjJabUxXTmhiblpoY3kxdmNHVnVKeWt1YjI0b0ozUnZkV05vYlc5MlpTY3NJSFJvYVhNdVgzTjBiM0JUWTNKdmJHeHBibWNwTzF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjI0b0ozUnZkV05vYzNSaGNuUW5MQ0IwYUdsekxsOXlaV052Y21SVFkzSnZiR3hoWW14bEtUdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOXVLQ2QwYjNWamFHMXZkbVVuTENCMGFHbHpMbDl6ZEc5d1UyTnliMnhzVUhKdmNHRm5ZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVqYjI1MFpXNTBUM1psY214aGVTQTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKRzkyWlhKc1lYa3VZV1JrUTJ4aGMzTW9KMmx6TFhacGMybGliR1VuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZMnh2YzJWUGJrTnNhV05ySUQwOVBTQjBjblZsSUNZbUlIUm9hWE11YjNCMGFXOXVjeTVqYjI1MFpXNTBUM1psY214aGVTQTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKRzkyWlhKc1lYa3VZV1JrUTJ4aGMzTW9KMmx6TFdOc2IzTmhZbXhsSnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbUYxZEc5R2IyTjFjeUE5UFQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjI1bEtFWnZkVzVrWVhScGIyNHVkSEpoYm5OcGRHbHZibVZ1WkNoMGFHbHpMaVJsYkdWdFpXNTBLU3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNnbllTd2dZblYwZEc5dUp5a3VaWEVvTUNrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWRISmhjRVp2WTNWeklEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXphV0pzYVc1bmN5Z25XMlJoZEdFdGIyWm1MV05oYm5aaGN5MWpiMjUwWlc1MFhTY3BMbUYwZEhJb0ozUmhZbWx1WkdWNEp5d2dKeTB4SnlrN1hHNGdJQ0FnSUNBZ0lDQWdSbTkxYm1SaGRHbHZiaTVMWlhsaWIyRnlaQzUwY21Gd1JtOWpkWE1vZEdocGN5NGtaV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQkRiRzl6WlhNZ2RHaGxJRzltWmkxallXNTJZWE1nYldWdWRTNWNiaUFnSUNBZ0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0lDQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWTJJZ0xTQnZjSFJwYjI1aGJDQmpZaUIwYnlCbWFYSmxJR0ZtZEdWeUlHTnNiM04xY21VdVhHNGdJQ0FnSUNBZ0tpQkFabWx5WlhNZ1QyWm1RMkZ1ZG1GekkyTnNiM05sWkZ4dUlDQWdJQ0FnSUNvdlhHNWNiaUFnSUNCOUxDQjdYRzRnSUNBZ0lDQnJaWGs2SUNkamJHOXpaU2NzWEc0Z0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdZMnh2YzJVb1kySXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGlSbGJHVnRaVzUwTG1oaGMwTnNZWE56S0NkcGN5MXZjR1Z1SnlrZ2ZId2dkR2hwY3k1cGMxSmxkbVZoYkdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0lDQmZkR2hwY3k0a1pXeGxiV1Z1ZEM1eVpXMXZkbVZEYkdGemN5Z25hWE10YjNCbGJpY3BPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVZWFIwY2lnbllYSnBZUzFvYVdSa1pXNG5MQ0FuZEhKMVpTY3BYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQkdhWEpsY3lCM2FHVnVJSFJvWlNCdlptWXRZMkZ1ZG1GeklHMWxiblVnYjNCbGJuTXVYRzRnSUNBZ0lDQWdJQ0FxSUVCbGRtVnVkQ0JQWm1aRFlXNTJZWE1qWTJ4dmMyVmtYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNBdWRISnBaMmRsY2lnblkyeHZjMlZrTG5wbUxtOW1abU5oYm5aaGN5Y3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFbG1JR0JqYjI1MFpXNTBVMk55YjJ4c1lDQnBjeUJ6WlhRZ2RHOGdabUZzYzJVc0lISmxiVzkyWlNCamJHRnpjeUJoYm1RZ2NtVXRaVzVoWW14bElITmpjbTlzYkdsdVp5QnZiaUIwYjNWamFDQmtaWFpwWTJWekxseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtTnZiblJsYm5SVFkzSnZiR3dnUFQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdKQ2duWW05a2VTY3BMbkpsYlc5MlpVTnNZWE56S0NkcGN5MXZabVl0WTJGdWRtRnpMVzl3Wlc0bktTNXZabVlvSjNSdmRXTm9iVzkyWlNjc0lIUm9hWE11WDNOMGIzQlRZM0p2Ykd4cGJtY3BPMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXViMlptS0NkMGIzVmphSE4wWVhKMEp5d2dkR2hwY3k1ZmNtVmpiM0prVTJOeWIyeHNZV0pzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1dlptWW9KM1J2ZFdOb2JXOTJaU2NzSUhSb2FYTXVYM04wYjNCVFkzSnZiR3hRY205d1lXZGhkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbU52Ym5SbGJuUlBkbVZ5YkdGNUlEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NGtiM1psY214aGVTNXlaVzF2ZG1WRGJHRnpjeWduYVhNdGRtbHphV0pzWlNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVqYkc5elpVOXVRMnhwWTJzZ1BUMDlJSFJ5ZFdVZ0ppWWdkR2hwY3k1dmNIUnBiMjV6TG1OdmJuUmxiblJQZG1WeWJHRjVJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTRrYjNabGNteGhlUzV5WlcxdmRtVkRiR0Z6Y3lnbmFYTXRZMnh2YzJGaWJHVW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11SkhSeWFXZG5aWEp6TG1GMGRISW9KMkZ5YVdFdFpYaHdZVzVrWldRbkxDQW5abUZzYzJVbktUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMblJ5WVhCR2IyTjFjeUE5UFQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YzJsaWJHbHVaM01vSjF0a1lYUmhMVzltWmkxallXNTJZWE10WTI5dWRHVnVkRjBuS1M1eVpXMXZkbVZCZEhSeUtDZDBZV0pwYm1SbGVDY3BPMXh1SUNBZ0lDQWdJQ0FnSUVadmRXNWtZWFJwYjI0dVMyVjVZbTloY21RdWNtVnNaV0Z6WlVadlkzVnpLSFJvYVhNdUpHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNvZ1ZHOW5aMnhsY3lCMGFHVWdiMlptTFdOaGJuWmhjeUJ0Wlc1MUlHOXdaVzRnYjNJZ1kyeHZjMlZrTGx4dUlDQWdJQ0FnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pYWmxiblFnTFNCRmRtVnVkQ0J2WW1wbFkzUWdjR0Z6YzJWa0lHWnliMjBnYkdsemRHVnVaWEl1WEc0Z0lDQWdJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnZEhKcFoyZGxjaUF0SUdWc1pXMWxiblFnZEdoaGRDQjBjbWxuWjJWeVpXUWdkR2hsSUc5bVppMWpZVzUyWVhNZ2RHOGdiM0JsYmk1Y2JpQWdJQ0FnSUNBcUwxeHVYRzRnSUNBZ2ZTd2dlMXh1SUNBZ0lDQWdhMlY1T2lBbmRHOW5aMnhsSnl4Y2JpQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUIwYjJkbmJHVW9aWFpsYm5Rc0lIUnlhV2RuWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVKR1ZzWlcxbGJuUXVhR0Z6UTJ4aGMzTW9KMmx6TFc5d1pXNG5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTJ4dmMyVW9aWFpsYm5Rc0lIUnlhV2RuWlhJcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQmxiaWhsZG1WdWRDd2dkSEpwWjJkbGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQklZVzVrYkdWeklHdGxlV0p2WVhKa0lHbHVjSFYwSUhkb1pXNGdaR1YwWldOMFpXUXVJRmRvWlc0Z2RHaGxJR1Z6WTJGd1pTQnJaWGtnYVhNZ2NISmxjM05sWkN3Z2RHaGxJRzltWmkxallXNTJZWE1nYldWdWRTQmpiRzl6WlhNc0lHRnVaQ0JtYjJOMWN5QnBjeUJ5WlhOMGIzSmxaQ0IwYnlCMGFHVWdaV3hsYldWdWRDQjBhR0YwSUc5d1pXNWxaQ0IwYUdVZ2JXVnVkUzVjYmlBZ0lDQWdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnSUNBcUwxeHVYRzRnSUNBZ2ZTd2dlMXh1SUNBZ0lDQWdhMlY1T2lBblgyaGhibVJzWlV0bGVXSnZZWEprSnl4Y2JpQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJmYUdGdVpHeGxTMlY1WW05aGNtUW9aU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNeUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0lDQkdiM1Z1WkdGMGFXOXVMa3RsZVdKdllYSmtMbWhoYm1Sc1pVdGxlU2hsTENBblQyWm1RMkZ1ZG1Gekp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUdOc2IzTmxPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN6SXVZMnh2YzJVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpNaTRrYkdGemRGUnlhV2RuWlhJdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxaRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBcUlFUmxjM1J5YjNseklIUm9aU0J2Wm1aallXNTJZWE1nY0d4MVoybHVMbHh1SUNBZ0lDQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQWdJQ0FnS2k5Y2JseHVJQ0FnSUgwc0lIdGNiaUFnSUNBZ0lHdGxlVG9nSjJSbGMzUnliM2tuTEZ4dUlDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1JsYzNSeWIza29LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMnh2YzJVb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1dlptWW9KeTU2Wmk1MGNtbG5aMlZ5SUM1NlppNXZabVpqWVc1MllYTW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtiM1psY214aGVTNXZabVlvSnk1NlppNXZabVpqWVc1MllYTW5LVHRjYmx4dUlDQWdJQ0FnSUNCR2IzVnVaR0YwYVc5dUxuVnVjbVZuYVhOMFpYSlFiSFZuYVc0b2RHaHBjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVjBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRTltWmtOaGJuWmhjenRjYmlBZ2ZTZ3BPMXh1WEc0Z0lFOW1aa05oYm5aaGN5NWtaV1poZFd4MGN5QTlJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCYkd4dmR5QjBhR1VnZFhObGNpQjBieUJqYkdsamF5QnZkWFJ6YVdSbElHOW1JSFJvWlNCdFpXNTFJSFJ2SUdOc2IzTmxJR2wwTGx4dUlDQWdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMnh2YzJWUGJrTnNhV05yT2lCMGNuVmxMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdSa2N5QmhiaUJ2ZG1WeWJHRjVJRzl1SUhSdmNDQnZaaUJnVzJSaGRHRXRiMlptTFdOaGJuWmhjeTFqYjI1MFpXNTBYV0F1WEc0Z0lDQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElIUnlkV1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjUwWlc1MFQzWmxjbXhoZVRvZ2RISjFaU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWdVlXSnNaUzlrYVhOaFlteGxJSE5qY205c2JHbHVaeUJ2WmlCMGFHVWdiV0ZwYmlCamIyNTBaVzUwSUhkb1pXNGdZVzRnYjJabUlHTmhiblpoY3lCd1lXNWxiQ0JwY3lCdmNHVnVMbHh1SUNBZ0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNBZ0tpQkFkSGx3WlNCN1ltOXZiR1ZoYm4xY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVkR1Z1ZEZOamNtOXNiRG9nZEhKMVpTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ0YjNWdWRDQnZaaUIwYVcxbElHbHVJRzF6SUhSb1pTQnZjR1Z1SUdGdVpDQmpiRzl6WlNCMGNtRnVjMmwwYVc5dUlISmxjWFZwY21WekxpQkpaaUJ1YjI1bElITmxiR1ZqZEdWa0xDQndkV3hzY3lCbWNtOXRJR0p2WkhrZ2MzUjViR1V1WEc0Z0lDQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01GeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSeVlXNXphWFJwYjI1VWFXMWxPaUF3TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZIbHdaU0J2WmlCMGNtRnVjMmwwYVc5dUlHWnZjaUIwYUdVZ2IyWm1ZMkZ1ZG1GeklHMWxiblV1SUU5d2RHbHZibk1nWVhKbElDZHdkWE5vSnl3Z0oyUmxkR0ZqYUdWa0p5QnZjaUFuYzJ4cFpHVW5MbHh1SUNBZ0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUhCMWMyaGNiaUFnSUNBZ0tpOWNiaUFnSUNCMGNtRnVjMmwwYVc5dU9pQW5jSFZ6YUNjc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdiM0pqWlNCMGFHVWdjR0ZuWlNCMGJ5QnpZM0p2Ykd3Z2RHOGdkRzl3SUc5eUlHSnZkSFJ2YlNCdmJpQnZjR1Z1TGx4dUlDQWdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDQWdLaUJBZEhsd1pTQjdQM04wY21sdVozMWNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQnVkV3hzWEc0Z0lDQWdJQ292WEc0Z0lDQWdabTl5WTJWVWJ6b2diblZzYkN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnNiRzkzSUhSb1pTQnZabVpqWVc1MllYTWdkRzhnY21WdFlXbHVJRzl3Wlc0Z1ptOXlJR05sY25SaGFXNGdZbkpsWVd0d2IybHVkSE11WEc0Z0lDQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdhWE5TWlhabFlXeGxaRG9nWm1Gc2MyVXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJDY21WaGEzQnZhVzUwSUdGMElIZG9hV05vSUhSdklISmxkbVZoYkM0Z1NsTWdkMmxzYkNCMWMyVWdZU0JTWldkRmVIQWdkRzhnZEdGeVoyVjBJSE4wWVc1a1lYSmtJR05zWVhOelpYTXNJR2xtSUdOb1lXNW5hVzVuSUdOc1lYTnpibUZ0WlhNc0lIQmhjM01nZVc5MWNpQmpiR0Z6Y3lCM2FYUm9JSFJvWlNCZ2NtVjJaV0ZzUTJ4aGMzTmdJRzl3ZEdsdmJpNWNiaUFnSUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZXo5emRISnBibWQ5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnYm5Wc2JGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGRtVmhiRTl1T2lCdWRXeHNMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm05eVkyVWdabTlqZFhNZ2RHOGdkR2hsSUc5bVptTmhiblpoY3lCdmJpQnZjR1Z1TGlCSlppQjBjblZsTENCM2FXeHNJR1p2WTNWeklIUm9aU0J2Y0dWdWFXNW5JSFJ5YVdkblpYSWdiMjRnWTJ4dmMyVXVYRzRnSUNBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUhSeWRXVmNiaUFnSUNBZ0tpOWNiaUFnSUNCaGRYUnZSbTlqZFhNNklIUnlkV1VzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGJHRnpjeUIxYzJWa0lIUnZJR1p2Y21ObElHRnVJRzltWm1OaGJuWmhjeUIwYnlCeVpXMWhhVzRnYjNCbGJpNGdSbTkxYm1SaGRHbHZiaUJrWldaaGRXeDBjeUJtYjNJZ2RHaHBjeUJoY21VZ1lISmxkbVZoYkMxbWIzSXRiR0Z5WjJWZ0lDWWdZSEpsZG1WaGJDMW1iM0l0YldWa2FYVnRZQzVjYmlBZ0lDQWdLaUJBYjNCMGFXOXVYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCeVpYWmxZV3d0Wm05eUxWeHVJQ0FnSUNBcUlFQjBiMlJ2SUdsdGNISnZkbVVnZEdobElISmxaMlY0SUhSbGMzUnBibWNnWm05eUlIUm9hWE11WEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVYyWldGc1EyeGhjM002SUNkeVpYWmxZV3d0Wm05eUxTY3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVY21sbloyVnljeUJ2Y0hScGIyNWhiQ0JtYjJOMWN5QjBjbUZ3Y0dsdVp5QjNhR1Z1SUc5d1pXNXBibWNnWVc0Z2IyWm1ZMkZ1ZG1GekxpQlRaWFJ6SUhSaFltbHVaR1Y0SUc5bUlGdGtZWFJoTFc5bVppMWpZVzUyWVhNdFkyOXVkR1Z1ZEYwZ2RHOGdMVEVnWm05eUlHRmpZMlZ6YzJsaWFXeHBkSGtnY0hWeWNHOXpaWE11WEc0Z0lDQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdkSEpoY0VadlkzVnpPaUJtWVd4elpWeHVJQ0I5TzF4dVhHNGdJQzh2SUZkcGJtUnZkeUJsZUhCdmNuUnpYRzRnSUVadmRXNWtZWFJwYjI0dWNHeDFaMmx1S0U5bVprTmhiblpoY3l3Z0owOW1aa05oYm5aaGN5Y3BPMXh1ZlNocVVYVmxjbmtwT3lJc0lpOHFJR3B6YUdsdWRDQnBaMjV2Y21VNmMzUmhjblFnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNGhablZ1WTNScGIyNG9KQ2tnZTF4dVhHNHZLaXBjYmlBcUlFOXlZbWwwSUcxdlpIVnNaUzVjYmlBcUlFQnRiMlIxYkdVZ1ptOTFibVJoZEdsdmJpNXZjbUpwZEZ4dUlDb2dRSEpsY1hWcGNtVnpJR1p2ZFc1a1lYUnBiMjR1ZFhScGJDNXJaWGxpYjJGeVpGeHVJQ29nUUhKbGNYVnBjbVZ6SUdadmRXNWtZWFJwYjI0dWRYUnBiQzV0YjNScGIyNWNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxuVjBhV3d1ZEdsdFpYSkJibVJKYldGblpVeHZZV1JsY2x4dUlDb2dRSEpsY1hWcGNtVnpJR1p2ZFc1a1lYUnBiMjR1ZFhScGJDNTBiM1ZqYUZ4dUlDb3ZYRzVjYm1Oc1lYTnpJRTl5WW1sMElIdGNiaUFnTHlvcVhHNGdJQ29nUTNKbFlYUmxjeUJoSUc1bGR5QnBibk4wWVc1alpTQnZaaUJoYmlCdmNtSnBkQ0JqWVhKdmRYTmxiQzVjYmlBZ0tpQkFZMnhoYzNOY2JpQWdLaUJBY0dGeVlXMGdlMnBSZFdWeWVYMGdaV3hsYldWdWRDQXRJR3BSZFdWeWVTQnZZbXBsWTNRZ2RHOGdiV0ZyWlNCcGJuUnZJR0Z1SUU5eVltbDBJRU5oY205MWMyVnNMbHh1SUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ1QzWmxjbkpwWkdWeklIUnZJSFJvWlNCa1pXWmhkV3gwSUhCc2RXZHBiaUJ6WlhSMGFXNW5jeTVjYmlBZ0tpOWNiaUFnWTI5dWMzUnlkV04wYjNJb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lsN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDQTlJR1ZzWlcxbGJuUTdYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnSkM1bGVIUmxibVFvZTMwc0lFOXlZbWwwTG1SbFptRjFiSFJ6TENCMGFHbHpMaVJsYkdWdFpXNTBMbVJoZEdFb0tTd2diM0IwYVc5dWN5azdYRzVjYmlBZ0lDQjBhR2x6TGw5cGJtbDBLQ2s3WEc1Y2JpQWdJQ0JHYjNWdVpHRjBhVzl1TG5KbFoybHpkR1Z5VUd4MVoybHVLSFJvYVhNc0lDZFBjbUpwZENjcE8xeHVJQ0FnSUVadmRXNWtZWFJwYjI0dVMyVjVZbTloY21RdWNtVm5hWE4wWlhJb0owOXlZbWwwSnl3Z2UxeHVJQ0FnSUNBZ0oyeDBjaWM2SUh0Y2JpQWdJQ0FnSUNBZ0owRlNVazlYWDFKSlIwaFVKem9nSjI1bGVIUW5MRnh1SUNBZ0lDQWdJQ0FuUVZKU1QxZGZURVZHVkNjNklDZHdjbVYyYVc5MWN5ZGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQW5jblJzSnpvZ2UxeHVJQ0FnSUNBZ0lDQW5RVkpTVDFkZlRFVkdWQ2M2SUNkdVpYaDBKeXhjYmlBZ0lDQWdJQ0FnSjBGU1VrOVhYMUpKUjBoVUp6b2dKM0J5WlhacGIzVnpKMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nU1c1cGRHbGhiR2w2WlhNZ2RHaGxJSEJzZFdkcGJpQmllU0JqY21WaGRHbHVaeUJxVVhWbGNua2dZMjlzYkdWamRHbHZibk1zSUhObGRIUnBibWNnWVhSMGNtbGlkWFJsY3l3Z1lXNWtJSE4wWVhKMGFXNW5JSFJvWlNCaGJtbHRZWFJwYjI0dVhHNGdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDb2dRSEJ5YVhaaGRHVmNiaUFnS2k5Y2JpQWdYMmx1YVhRb0tTQjdYRzRnSUNBZ0x5OGdRRlJQUkU4NklHTnZibk5wWkdWeUlHUnBjMk4xYzNOcGIyNGdiMjRnVUZJZ0l6a3lOemdnWVdKdmRYUWdSRTlOSUhCdmJHeDFkR2x2YmlCaWVTQmphR0Z1WjJWVGJHbGtaVnh1SUNBZ0lIUm9hWE11WDNKbGMyVjBLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxpUjNjbUZ3Y0dWeUlEMGdkR2hwY3k0a1pXeGxiV1Z1ZEM1bWFXNWtLR0F1Skh0MGFHbHpMbTl3ZEdsdmJuTXVZMjl1ZEdGcGJtVnlRMnhoYzNOOVlDazdYRzRnSUNBZ2RHaHBjeTRrYzJ4cFpHVnpJRDBnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0dBdUpIdDBhR2x6TG05d2RHbHZibk11YzJ4cFpHVkRiR0Z6YzMxZ0tUdGNibHh1SUNBZ0lIWmhjaUFrYVcxaFoyVnpJRDBnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0NkcGJXY25LU3hjYmlBZ0lDQWdJQ0FnYVc1cGRFRmpkR2wyWlNBOUlIUm9hWE11SkhOc2FXUmxjeTVtYVd4MFpYSW9KeTVwY3kxaFkzUnBkbVVuS1N4Y2JpQWdJQ0FnSUNBZ2FXUWdQU0IwYUdsekxpUmxiR1Z0Wlc1MFd6QmRMbWxrSUh4OElFWnZkVzVrWVhScGIyNHVSMlYwV1c5RWFXZHBkSE1vTml3Z0oyOXlZbWwwSnlrN1hHNWNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb2UxeHVJQ0FnSUNBZ0oyUmhkR0V0Y21WemFYcGxKem9nYVdRc1hHNGdJQ0FnSUNBbmFXUW5PaUJwWkZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnYVdZZ0tDRnBibWwwUVdOMGFYWmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a2MyeHBaR1Z6TG1WeEtEQXBMbUZrWkVOc1lYTnpLQ2RwY3kxaFkzUnBkbVVuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lYUm9hWE11YjNCMGFXOXVjeTUxYzJWTlZVa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdUpITnNhV1JsY3k1aFpHUkRiR0Z6Y3lnbmJtOHRiVzkwYVc5dWRXa25LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSkdsdFlXZGxjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJRVp2ZFc1a1lYUnBiMjR1YjI1SmJXRm5aWE5NYjJGa1pXUW9KR2x0WVdkbGN5d2dkR2hwY3k1ZmNISmxjR0Z5WlVadmNrOXlZbWwwTG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXdjbVZ3WVhKbFJtOXlUM0ppYVhRb0tUc3ZMMmhsYUdWY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbUoxYkd4bGRITXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyeHZZV1JDZFd4c1pYUnpLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1ZlpYWmxiblJ6S0NrN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1GMWRHOVFiR0Y1SUNZbUlIUm9hWE11SkhOc2FXUmxjeTVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbWRsYjFONWJtTW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtRmpZMlZ6YzJsaWJHVXBJSHNnTHk4Z1lXeHNiM2NnZDNKaGNIQmxjaUIwYnlCaVpTQm1iMk4xYzJGaWJHVWdkRzhnWlc1aFlteGxJR0Z5Y205M0lHNWhkbWxuWVhScGIyNWNiaUFnSUNBZ0lIUm9hWE11SkhkeVlYQndaWEl1WVhSMGNpZ25kR0ZpYVc1a1pYZ25MQ0F3S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCRGNtVmhkR1Z6SUdFZ2FsRjFaWEo1SUdOdmJHeGxZM1JwYjI0Z2IyWWdZblZzYkdWMGN5d2dhV1lnZEdobGVTQmhjbVVnWW1WcGJtY2dkWE5sWkM1Y2JpQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FxTDF4dUlDQmZiRzloWkVKMWJHeGxkSE1vS1NCN1hHNGdJQ0FnZEdocGN5NGtZblZzYkdWMGN5QTlJSFJvYVhNdUpHVnNaVzFsYm5RdVptbHVaQ2hnTGlSN2RHaHBjeTV2Y0hScGIyNXpMbUp2ZUU5bVFuVnNiR1YwYzMxZ0tTNW1hVzVrS0NkaWRYUjBiMjRuS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGTmxkSE1nWVNCZ2RHbHRaWEpnSUc5aWFtVmpkQ0J2YmlCMGFHVWdiM0ppYVhRc0lHRnVaQ0J6ZEdGeWRITWdkR2hsSUdOdmRXNTBaWElnWm05eUlIUm9aU0J1WlhoMElITnNhV1JsTGx4dUlDQXFJRUJtZFc1amRHbHZibHh1SUNBcUwxeHVJQ0JuWlc5VGVXNWpLQ2tnZTF4dUlDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2RHaHBjeTUwYVcxbGNpQTlJRzVsZHlCR2IzVnVaR0YwYVc5dUxsUnBiV1Z5S0Z4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDeGNiaUFnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdaSFZ5WVhScGIyNDZJSFJvYVhNdWIzQjBhVzl1Y3k1MGFXMWxja1JsYkdGNUxGeHVJQ0FnSUNBZ0lDQnBibVpwYm1sMFpUb2dabUZzYzJWY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVkyaGhibWRsVTJ4cFpHVW9kSEoxWlNrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCMGFHbHpMblJwYldWeUxuTjBZWEowS0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlRaWFJ6SUhkeVlYQndaWElnWVc1a0lITnNhV1JsSUdobGFXZG9kSE1nWm05eUlIUm9aU0J2Y21KcGRDNWNiaUFnS2lCQVpuVnVZM1JwYjI1Y2JpQWdLaUJBY0hKcGRtRjBaVnh1SUNBcUwxeHVJQ0JmY0hKbGNHRnlaVVp2Y2s5eVltbDBLQ2tnZTF4dUlDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2RHaHBjeTVmYzJWMFYzSmhjSEJsY2tobGFXZG9kQ2dwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1EyRnNkV3hoZEdWeklIUm9aU0JvWldsbmFIUWdiMllnWldGamFDQnpiR2xrWlNCcGJpQjBhR1VnWTI5c2JHVmpkR2x2Yml3Z1lXNWtJSFZ6WlhNZ2RHaGxJSFJoYkd4bGMzUWdiMjVsSUdadmNpQjBhR1VnZDNKaGNIQmxjaUJvWldsbmFIUXVYRzRnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpZaUF0SUdFZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0Z2RHOGdabWx5WlNCM2FHVnVJR052YlhCc1pYUmxMbHh1SUNBcUwxeHVJQ0JmYzJWMFYzSmhjSEJsY2tobGFXZG9kQ2hqWWlrZ2V5OHZjbVYzY21sMFpTQjBhR2x6SUhSdklHQm1iM0pnSUd4dmIzQmNiaUFnSUNCMllYSWdiV0Y0SUQwZ01Dd2dkR1Z0Y0N3Z1kyOTFiblJsY2lBOUlEQXNJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhSb2FYTXVKSE5zYVdSbGN5NWxZV05vS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RHVnRjQ0E5SUhSb2FYTXVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrdWFHVnBaMmgwTzF4dUlDQWdJQ0FnSkNoMGFHbHpLUzVoZEhSeUtDZGtZWFJoTFhOc2FXUmxKeXdnWTI5MWJuUmxjaWs3WEc1Y2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k0a2MyeHBaR1Z6TG1acGJIUmxjaWduTG1sekxXRmpkR2wyWlNjcFd6QmRJQ0U5UFNCZmRHaHBjeTRrYzJ4cFpHVnpMbVZ4S0dOdmRXNTBaWElwV3pCZEtTQjdMeTlwWmlCdWIzUWdkR2hsSUdGamRHbDJaU0J6Ykdsa1pTd2djMlYwSUdOemN5QndiM05wZEdsdmJpQmhibVFnWkdsemNHeGhlU0J3Y205d1pYSjBlVnh1SUNBZ0lDQWdJQ0FrS0hSb2FYTXBMbU56Y3loN0ozQnZjMmwwYVc5dUp6b2dKM0psYkdGMGFYWmxKeXdnSjJScGMzQnNZWGtuT2lBbmJtOXVaU2Q5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUcxaGVDQTlJSFJsYlhBZ1BpQnRZWGdnUHlCMFpXMXdJRG9nYldGNE8xeHVJQ0FnSUNBZ1kyOTFiblJsY2lzck8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2FXWWdLR052ZFc1MFpYSWdQVDA5SUhSb2FYTXVKSE5zYVdSbGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lIUm9hWE11SkhkeVlYQndaWEl1WTNOektIc25hR1ZwWjJoMEp6b2diV0Y0ZlNrN0lDOHZiMjVzZVNCamFHRnVaMlVnZEdobElIZHlZWEJ3WlhJZ2FHVnBaMmgwSUhCeWIzQmxjblI1SUc5dVkyVXVYRzRnSUNBZ0lDQnBaaWhqWWlrZ2UyTmlLRzFoZUNrN2ZTQXZMMlpwY21VZ1kyRnNiR0poWTJzZ2QybDBhQ0J0WVhnZ2FHVnBaMmgwSUdScGJXVnVjMmx2Ymk1Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVFpYUnpJSFJvWlNCdFlYZ3RhR1ZwWjJoMElHOW1JR1ZoWTJnZ2MyeHBaR1V1WEc0Z0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNvZ1FIQnlhWFpoZEdWY2JpQWdLaTljYmlBZ1gzTmxkRk5zYVdSbFNHVnBaMmgwS0dobGFXZG9kQ2tnZTF4dUlDQWdJSFJvYVhNdUpITnNhV1JsY3k1bFlXTm9LR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSkNoMGFHbHpLUzVqYzNNb0oyMWhlQzFvWldsbmFIUW5MQ0JvWldsbmFIUXBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUVdSa2N5QmxkbVZ1ZENCc2FYTjBaVzVsY25NZ2RHOGdZbUZ6YVdOaGJHeDVJR1YyWlhKNWRHaHBibWNnZDJsMGFHbHVJSFJvWlNCbGJHVnRaVzUwTGx4dUlDQXFJRUJtZFc1amRHbHZibHh1SUNBcUlFQndjbWwyWVhSbFhHNGdJQ292WEc0Z0lGOWxkbVZ1ZEhNb0tTQjdYRzRnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnSUNBZ0x5OHFLazV2ZHlCMWMybHVaeUJqZFhOMGIyMGdaWFpsYm5RZ0xTQjBhR0Z1YTNNZ2RHODZLaXBjYmlBZ0lDQXZMeW9xSUNBZ0lDQWdXVzlvWVdrZ1FYSmhjbUYwSUc5bUlGUnZjbTl1ZEc4Z0lDQWdJQ0FxS2x4dUlDQWdJQzh2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdJQ0FnTHk5Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1aaWduTG5KbGMybDZaVzFsTG5wbUxuUnlhV2RuWlhJbktTNXZiaWg3WEc0Z0lDQWdJQ0FuY21WemFYcGxiV1V1ZW1ZdWRISnBaMmRsY2ljNklIUm9hWE11WDNCeVpYQmhjbVZHYjNKUGNtSnBkQzVpYVc1a0tIUm9hWE1wWEc0Z0lDQWdmU2xjYmlBZ0lDQnBaaUFvZEdocGN5NGtjMnhwWkdWekxteGxibWQwYUNBK0lERXBJSHRjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTV6ZDJsd1pTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxpUnpiR2xrWlhNdWIyWm1LQ2R6ZDJsd1pXeGxablF1ZW1ZdWIzSmlhWFFnYzNkcGNHVnlhV2RvZEM1NlppNXZjbUpwZENjcFhHNGdJQ0FnSUNBZ0lDNXZiaWduYzNkcGNHVnNaV1owTG5wbUxtOXlZbWwwSnl3Z1puVnVZM1JwYjI0b1pTbDdYRzRnSUNBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1Ob1lXNW5aVk5zYVdSbEtIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCOUtTNXZiaWduYzNkcGNHVnlhV2RvZEM1NlppNXZjbUpwZENjc0lHWjFibU4wYVc5dUtHVXBlMXh1SUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amFHRnVaMlZUYkdsa1pTaG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aGRYUnZVR3hoZVNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSemJHbGtaWE11YjI0b0oyTnNhV05yTG5wbUxtOXlZbWwwSnl3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVKR1ZzWlcxbGJuUXVaR0YwWVNnblkyeHBZMnRsWkU5dUp5d2dYM1JvYVhNdUpHVnNaVzFsYm5RdVpHRjBZU2duWTJ4cFkydGxaRTl1SnlrZ1B5Qm1ZV3h6WlNBNklIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5ScGJXVnlXMTkwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvSjJOc2FXTnJaV1JQYmljcElEOGdKM0JoZFhObEp5QTZJQ2R6ZEdGeWRDZGRLQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVjR0YxYzJWUGJraHZkbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1dmJpZ25iVzkxYzJWbGJuUmxjaTU2Wmk1dmNtSnBkQ2NzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVkR2x0WlhJdWNHRjFjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLUzV2YmlnbmJXOTFjMlZzWldGMlpTNTZaaTV2Y21KcGRDY3NJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGZmRHaHBjeTRrWld4bGJXVnVkQzVrWVhSaEtDZGpiR2xqYTJWa1QyNG5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NTBhVzFsY2k1emRHRnlkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVibUYyUW5WMGRHOXVjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdKR052Ym5SeWIyeHpJRDBnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0dBdUpIdDBhR2x6TG05d2RHbHZibk11Ym1WNGRFTnNZWE56ZlN3Z0xpUjdkR2hwY3k1dmNIUnBiMjV6TG5CeVpYWkRiR0Z6YzMxZ0tUdGNiaUFnSUNBZ0lDQWdKR052Ym5SeWIyeHpMbUYwZEhJb0ozUmhZbWx1WkdWNEp5d2dNQ2xjYmlBZ0lDQWdJQ0FnTHk5aGJITnZJRzVsWldRZ2RHOGdhR0Z1Wkd4bElHVnVkR1Z5TDNKbGRIVnliaUJoYm1RZ2MzQmhZMlZpWVhJZ2EyVjVJSEJ5WlhOelpYTmNiaUFnSUNBZ0lDQWdMbTl1S0NkamJHbGpheTU2Wmk1dmNtSnBkQ0IwYjNWamFHVnVaQzU2Wmk1dmNtSnBkQ2NzSUdaMWJtTjBhVzl1S0dVcGUxeHVYSFFnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amFHRnVaMlZUYkdsa1pTZ2tLSFJvYVhNcExtaGhjME5zWVhOektGOTBhR2x6TG05d2RHbHZibk11Ym1WNGRFTnNZWE56S1NrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbUoxYkd4bGRITXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtZblZzYkdWMGN5NXZiaWduWTJ4cFkyc3VlbVl1YjNKaWFYUWdkRzkxWTJobGJtUXVlbVl1YjNKaWFYUW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvTDJsekxXRmpkR2wyWlM5bkxuUmxjM1FvZEdocGN5NWpiR0Z6YzA1aGJXVXBLU0I3SUhKbGRIVnliaUJtWVd4elpUc2dmUzh2YVdZZ2RHaHBjeUJwY3lCaFkzUnBkbVVzSUd0cFkyc2diM1YwSUc5bUlHWjFibU4wYVc5dUxseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCcFpIZ2dQU0FrS0hSb2FYTXBMbVJoZEdFb0ozTnNhV1JsSnlrc1hHNGdJQ0FnSUNBZ0lDQWdiSFJ5SUQwZ2FXUjRJRDRnWDNSb2FYTXVKSE5zYVdSbGN5NW1hV3gwWlhJb0p5NXBjeTFoWTNScGRtVW5LUzVrWVhSaEtDZHpiR2xrWlNjcExGeHVJQ0FnSUNBZ0lDQWdJQ1J6Ykdsa1pTQTlJRjkwYUdsekxpUnpiR2xrWlhNdVpYRW9hV1I0S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTm9ZVzVuWlZOc2FXUmxLR3gwY2l3Z0pITnNhV1JsTENCcFpIZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aFkyTmxjM05wWW14bEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpIZHlZWEJ3WlhJdVlXUmtLSFJvYVhNdUpHSjFiR3hsZEhNcExtOXVLQ2RyWlhsa2IzZHVMbnBtTG05eVltbDBKeXdnWm5WdVkzUnBiMjRvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUdoaGJtUnNaU0JyWlhsaWIyRnlaQ0JsZG1WdWRDQjNhWFJvSUd0bGVXSnZZWEprSUhWMGFXeGNiaUFnSUNBZ0lDQWdJQ0JHYjNWdVpHRjBhVzl1TGt0bGVXSnZZWEprTG1oaGJtUnNaVXRsZVNobExDQW5UM0ppYVhRbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZMmhoYm1kbFUyeHBaR1VvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRtbHZkWE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGdVoyVlRiR2xrWlNobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsWkRvZ1puVnVZM1JwYjI0b0tTQjdJQzh2SUdsbUlHSjFiR3hsZENCcGN5Qm1iMk4xYzJWa0xDQnRZV3RsSUhOMWNtVWdabTlqZFhNZ2JXOTJaWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NRb1pTNTBZWEpuWlhRcExtbHpLRjkwYUdsekxpUmlkV3hzWlhSektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxpUmlkV3hzWlhSekxtWnBiSFJsY2lnbkxtbHpMV0ZqZEdsMlpTY3BMbVp2WTNWektDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxjMlYwY3lCUGNtSnBkQ0J6YnlCcGRDQmpZVzRnWW1VZ2NtVnBibWwwYVdGc2FYcGxaRnh1SUNBZ0tpOWNiaUFnWDNKbGMyVjBLQ2tnZTF4dUlDQWdJQzh2SUVSdmJpZDBJR1J2SUdGdWVYUm9hVzVuSUdsbUlIUm9aWEpsSUdGeVpTQnVieUJ6Ykdsa1pYTWdLR1pwY25OMElISjFiaWxjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdUpITnNhV1JsY3lBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxpUnpiR2xrWlhNdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdMeThnVW1WdGIzWmxJRzlzWkNCbGRtVnVkSE5jYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWIyWm1LQ2N1ZW1ZdWIzSmlhWFFuS1M1bWFXNWtLQ2NxSnlrdWIyWm1LQ2N1ZW1ZdWIzSmlhWFFuS1Z4dVhHNGdJQ0FnSUNBdkx5QlNaWE4wWVhKMElIUnBiV1Z5SUdsbUlHRjFkRzlRYkdGNUlHbHpJR1Z1WVdKc1pXUmNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVlYVjBiMUJzWVhrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxjaTV5WlhOMFlYSjBLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGSmxjMlYwSUdGc2JDQnpiR2xrWkdWelhHNGdJQ0FnSUNCMGFHbHpMaVJ6Ykdsa1pYTXVaV0ZqYUNobWRXNWpkR2x2YmlobGJDa2dlMXh1SUNBZ0lDQWdJQ0FrS0dWc0tTNXlaVzF2ZG1WRGJHRnpjeWduYVhNdFlXTjBhWFpsSUdsekxXRmpkR2wyWlNCcGN5MXBiaWNwWEc0Z0lDQWdJQ0FnSUNBZ0xuSmxiVzkyWlVGMGRISW9KMkZ5YVdFdGJHbDJaU2NwWEc0Z0lDQWdJQ0FnSUNBZ0xtaHBaR1VvS1R0Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQXZMeUJUYUc5M0lIUm9aU0JtYVhKemRDQnpiR2xrWlZ4dUlDQWdJQ0FnZEdocGN5NGtjMnhwWkdWekxtWnBjbk4wS0NrdVlXUmtRMnhoYzNNb0oybHpMV0ZqZEdsMlpTY3BMbk5vYjNjb0tUdGNibHh1SUNBZ0lDQWdMeThnVkhKcFoyZGxjbk1nZDJobGJpQjBhR1VnYzJ4cFpHVWdhR0Z6SUdacGJtbHphR1ZrSUdGdWFXMWhkR2x1WjF4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNTBjbWxuWjJWeUtDZHpiR2xrWldOb1lXNW5aUzU2Wmk1dmNtSnBkQ2NzSUZ0MGFHbHpMaVJ6Ykdsa1pYTXVabWx5YzNRb0tWMHBPMXh1WEc0Z0lDQWdJQ0F2THlCVFpXeGxZM1FnWm1seWMzUWdZblZzYkdWMElHbG1JR0oxYkd4bGRITWdZWEpsSUhCeVpYTmxiblJjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZblZzYkdWMGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWQ2RXeHNaWFJ6S0RBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlFTm9ZVzVuWlhNZ2RHaGxJR04xY25KbGJuUWdjMnhwWkdVZ2RHOGdZU0J1WlhjZ2IyNWxMbHh1SUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnYVhOTVZGSWdMU0JtYkdGbklHbG1JSFJvWlNCemJHbGtaU0J6YUc5MWJHUWdiVzkyWlNCc1pXWjBJSFJ2SUhKcFoyaDBMbHh1SUNBcUlFQndZWEpoYlNCN2FsRjFaWEo1ZlNCamFHOXpaVzVUYkdsa1pTQXRJSFJvWlNCcVVYVmxjbmtnWld4bGJXVnVkQ0J2WmlCMGFHVWdjMnhwWkdVZ2RHOGdjMmh2ZHlCdVpYaDBMQ0JwWmlCdmJtVWdhWE1nYzJWc1pXTjBaV1F1WEc0Z0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHbGtlQ0F0SUhSb1pTQnBibVJsZUNCdlppQjBhR1VnYm1WM0lITnNhV1JsSUdsdUlHbDBjeUJqYjJ4c1pXTjBhVzl1TENCcFppQnZibVVnWTJodmMyVnVMbHh1SUNBcUlFQm1hWEpsY3lCUGNtSnBkQ056Ykdsa1pXTm9ZVzVuWlZ4dUlDQXFMMXh1SUNCamFHRnVaMlZUYkdsa1pTaHBjMHhVVWl3Z1kyaHZjMlZ1VTJ4cFpHVXNJR2xrZUNrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k0a2MyeHBaR1Z6S1NCN2NtVjBkWEp1T3lCOUlDOHZJRVJ2YmlkMElHWnlaV0ZySUc5MWRDQnBaaUIzWlNkeVpTQnBiaUIwYUdVZ2JXbGtaR3hsSUc5bUlHTnNaV0Z1ZFhCY2JpQWdJQ0IyWVhJZ0pHTjFjbE5zYVdSbElEMGdkR2hwY3k0a2MyeHBaR1Z6TG1acGJIUmxjaWduTG1sekxXRmpkR2wyWlNjcExtVnhLREFwTzF4dVhHNGdJQ0FnYVdZZ0tDOXRkV2t2Wnk1MFpYTjBLQ1JqZFhKVGJHbGtaVnN3WFM1amJHRnpjMDVoYldVcEtTQjdJSEpsZEhWeWJpQm1ZV3h6WlRzZ2ZTQXZMMmxtSUhSb1pTQnpiR2xrWlNCcGN5QmpkWEp5Wlc1MGJIa2dZVzVwYldGMGFXNW5MQ0JyYVdOcklHOTFkQ0J2WmlCMGFHVWdablZ1WTNScGIyNWNibHh1SUNBZ0lIWmhjaUFrWm1seWMzUlRiR2xrWlNBOUlIUm9hWE11SkhOc2FXUmxjeTVtYVhKemRDZ3BMRnh1SUNBZ0lDUnNZWE4wVTJ4cFpHVWdQU0IwYUdsekxpUnpiR2xrWlhNdWJHRnpkQ2dwTEZ4dUlDQWdJR1JwY2tsdUlEMGdhWE5NVkZJZ1B5QW5VbWxuYUhRbklEb2dKMHhsWm5RbkxGeHVJQ0FnSUdScGNrOTFkQ0E5SUdselRGUlNJRDhnSjB4bFpuUW5JRG9nSjFKcFoyaDBKeXhjYmlBZ0lDQmZkR2hwY3lBOUlIUm9hWE1zWEc0Z0lDQWdKRzVsZDFOc2FXUmxPMXh1WEc0Z0lDQWdhV1lnS0NGamFHOXpaVzVUYkdsa1pTa2dleUF2TDIxdmMzUWdiMllnZEdobElIUnBiV1VzSUhSb2FYTWdkMmxzYkNCaVpTQmhkWFJ2SUhCc1lYbGxaQ0J2Y2lCamJHbGphMlZrSUdaeWIyMGdkR2hsSUc1aGRrSjFkSFJ2Ym5NdVhHNGdJQ0FnSUNBa2JtVjNVMnhwWkdVZ1BTQnBjMHhVVWlBL0lDOHZhV1lnZDNKaGNIQnBibWNnWlc1aFlteGxaQ3dnWTJobFkyc2dkRzhnYzJWbElHbG1JSFJvWlhKbElHbHpJR0VnWUc1bGVIUmdJRzl5SUdCd2NtVjJZQ0J6YVdKc2FXNW5MQ0JwWmlCdWIzUXNJSE5sYkdWamRDQjBhR1VnWm1seWMzUWdiM0lnYkdGemRDQnpiR2xrWlNCMGJ5Qm1hV3hzSUdsdUxpQnBaaUIzY21Gd2NHbHVaeUJ1YjNRZ1pXNWhZbXhsWkN3Z1lYUjBaVzF3ZENCMGJ5QnpaV3hsWTNRZ1lHNWxlSFJnSUc5eUlHQndjbVYyWUN3Z2FXWWdkR2hsY21VbmN5QnViM1JvYVc1bklIUm9aWEpsTENCMGFHVWdablZ1WTNScGIyNGdkMmxzYkNCcmFXTnJJRzkxZENCdmJpQnVaWGgwSUhOMFpYQXVJRU5TUVZwWklFNUZVMVJGUkNCVVJWSk9RVkpKUlZNaElTRWhJVnh1SUNBZ0lDQWdLSFJvYVhNdWIzQjBhVzl1Y3k1cGJtWnBibWwwWlZkeVlYQWdQeUFrWTNWeVUyeHBaR1V1Ym1WNGRDaGdMaVI3ZEdocGN5NXZjSFJwYjI1ekxuTnNhV1JsUTJ4aGMzTjlZQ2t1YkdWdVozUm9JRDhnSkdOMWNsTnNhV1JsTG01bGVIUW9ZQzRrZTNSb2FYTXViM0IwYVc5dWN5NXpiR2xrWlVOc1lYTnpmV0FwSURvZ0pHWnBjbk4wVTJ4cFpHVWdPaUFrWTNWeVUyeHBaR1V1Ym1WNGRDaGdMaVI3ZEdocGN5NXZjSFJwYjI1ekxuTnNhV1JsUTJ4aGMzTjlZQ2twTHk5d2FXTnJJRzVsZUhRZ2MyeHBaR1VnYVdZZ2JXOTJhVzVuSUd4bFpuUWdkRzhnY21sbmFIUmNiaUFnSUNBZ0lEcGNiaUFnSUNBZ0lDaDBhR2x6TG05d2RHbHZibk11YVc1bWFXNXBkR1ZYY21Gd0lEOGdKR04xY2xOc2FXUmxMbkJ5WlhZb1lDNGtlM1JvYVhNdWIzQjBhVzl1Y3k1emJHbGtaVU5zWVhOemZXQXBMbXhsYm1kMGFDQS9JQ1JqZFhKVGJHbGtaUzV3Y21WMktHQXVKSHQwYUdsekxtOXdkR2x2Ym5NdWMyeHBaR1ZEYkdGemMzMWdLU0E2SUNSc1lYTjBVMnhwWkdVZ09pQWtZM1Z5VTJ4cFpHVXVjSEpsZGloZ0xpUjdkR2hwY3k1dmNIUnBiMjV6TG5Oc2FXUmxRMnhoYzNOOVlDa3BPeTh2Y0dsamF5QndjbVYySUhOc2FXUmxJR2xtSUcxdmRtbHVaeUJ5YVdkb2RDQjBieUJzWldaMFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ1J1WlhkVGJHbGtaU0E5SUdOb2IzTmxibE5zYVdSbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2tibVYzVTJ4cFpHVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ29nVkhKcFoyZGxjbk1nWW1WbWIzSmxJSFJvWlNCdVpYaDBJSE5zYVdSbElITjBZWEowY3lCaGJtbHRZWFJwYm1jZ2FXNGdZVzVrSUc5dWJIa2dhV1lnWVNCdVpYaDBJSE5zYVdSbElHaGhjeUJpWldWdUlHWnZkVzVrTGx4dUlDQWdJQ0FnS2lCQVpYWmxiblFnVDNKaWFYUWpZbVZtYjNKbGMyeHBaR1ZqYUdGdVoyVmNiaUFnSUNBZ0lDb3ZYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjJKbFptOXlaWE5zYVdSbFkyaGhibWRsTG5wbUxtOXlZbWwwSnl3Z1d5UmpkWEpUYkdsa1pTd2dKRzVsZDFOc2FXUmxYU2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WW5Wc2JHVjBjeWtnZTF4dUlDQWdJQ0FnSUNCcFpIZ2dQU0JwWkhnZ2ZId2dkR2hwY3k0a2MyeHBaR1Z6TG1sdVpHVjRLQ1J1WlhkVGJHbGtaU2s3SUM4dlozSmhZaUJwYm1SbGVDQjBieUIxY0dSaGRHVWdZblZzYkdWMGMxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZDZFd4c1pYUnpLR2xrZUNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWRYTmxUVlZKSUNZbUlDRjBhR2x6TGlSbGJHVnRaVzUwTG1sektDYzZhR2xrWkdWdUp5a3BJSHRjYmlBZ0lDQWdJQ0FnUm05MWJtUmhkR2x2Ymk1TmIzUnBiMjR1WVc1cGJXRjBaVWx1S0Z4dUlDQWdJQ0FnSUNBZ0lDUnVaWGRUYkdsa1pTNWhaR1JEYkdGemN5Z25hWE10WVdOMGFYWmxKeWt1WTNOektIc25jRzl6YVhScGIyNG5PaUFuWVdKemIyeDFkR1VuTENBbmRHOXdKem9nTUgwcExGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1YzF0Z1lXNXBiVWx1Um5KdmJTUjdaR2x5U1c1OVlGMHNYRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1J1WlhkVGJHbGtaUzVqYzNNb2V5ZHdiM05wZEdsdmJpYzZJQ2R5Wld4aGRHbDJaU2NzSUNka2FYTndiR0Y1SnpvZ0oySnNiMk5ySjMwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1WVhSMGNpZ25ZWEpwWVMxc2FYWmxKeXdnSjNCdmJHbDBaU2NwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0JHYjNWdVpHRjBhVzl1TGsxdmRHbHZiaTVoYm1sdFlYUmxUM1YwS0Z4dUlDQWdJQ0FnSUNBZ0lDUmpkWEpUYkdsa1pTNXlaVzF2ZG1WRGJHRnpjeWduYVhNdFlXTjBhWFpsSnlrc1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6VzJCaGJtbHRUM1YwVkc4a2UyUnBjazkxZEgxZ1hTeGNiaUFnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKR04xY2xOc2FXUmxMbkpsYlc5MlpVRjBkSElvSjJGeWFXRXRiR2wyWlNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1gzUm9hWE11YjNCMGFXOXVjeTVoZFhSdlVHeGhlU0FtSmlBaFgzUm9hWE11ZEdsdFpYSXVhWE5RWVhWelpXUXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1MGFXMWxjaTV5WlhOMFlYSjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwyUnZJSE4wZFdabVAxeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSkdOMWNsTnNhV1JsTG5KbGJXOTJaVU5zWVhOektDZHBjeTFoWTNScGRtVWdhWE10YVc0bktTNXlaVzF2ZG1WQmRIUnlLQ2RoY21saExXeHBkbVVuS1M1b2FXUmxLQ2s3WEc0Z0lDQWdJQ0FnSUNSdVpYZFRiR2xrWlM1aFpHUkRiR0Z6Y3lnbmFYTXRZV04wYVhabElHbHpMV2x1SnlrdVlYUjBjaWduWVhKcFlTMXNhWFpsSnl3Z0ozQnZiR2wwWlNjcExuTm9iM2NvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aGRYUnZVR3hoZVNBbUppQWhkR2hwY3k1MGFXMWxjaTVwYzFCaGRYTmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11ZEdsdFpYSXVjbVZ6ZEdGeWRDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdLaUJVY21sbloyVnljeUIzYUdWdUlIUm9aU0J6Ykdsa1pTQm9ZWE1nWm1sdWFYTm9aV1FnWVc1cGJXRjBhVzVuSUdsdUxseHVJQ0FnSUNvZ1FHVjJaVzUwSUU5eVltbDBJM05zYVdSbFkyaGhibWRsWEc0Z0lDQWdLaTljYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWRISnBaMmRsY2lnbmMyeHBaR1ZqYUdGdVoyVXVlbVl1YjNKaWFYUW5MQ0JiSkc1bGQxTnNhV1JsWFNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1ZYQmtZWFJsY3lCMGFHVWdZV04wYVhabElITjBZWFJsSUc5bUlIUm9aU0JpZFd4c1pYUnpMQ0JwWmlCa2FYTndiR0Y1WldRdVhHNGdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDb2dRSEJ5YVhaaGRHVmNiaUFnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYVdSNElDMGdkR2hsSUdsdVpHVjRJRzltSUhSb1pTQmpkWEp5Wlc1MElITnNhV1JsTGx4dUlDQXFMMXh1SUNCZmRYQmtZWFJsUW5Wc2JHVjBjeWhwWkhncElIdGNiaUFnSUNCMllYSWdKRzlzWkVKMWJHeGxkQ0E5SUhSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNoZ0xpUjdkR2hwY3k1dmNIUnBiMjV6TG1KdmVFOW1RblZzYkdWMGMzMWdLVnh1SUNBZ0lDNW1hVzVrS0NjdWFYTXRZV04wYVhabEp5a3VjbVZ0YjNabFEyeGhjM01vSjJsekxXRmpkR2wyWlNjcExtSnNkWElvS1N4Y2JpQWdJQ0J6Y0dGdUlEMGdKRzlzWkVKMWJHeGxkQzVtYVc1a0tDZHpjR0Z1T214aGMzUW5LUzVrWlhSaFkyZ29LU3hjYmlBZ0lDQWtibVYzUW5Wc2JHVjBJRDBnZEdocGN5NGtZblZzYkdWMGN5NWxjU2hwWkhncExtRmtaRU5zWVhOektDZHBjeTFoWTNScGRtVW5LUzVoY0hCbGJtUW9jM0JoYmlrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQkVaWE4wY205NWN5QjBhR1VnWTJGeWIzVnpaV3dnWVc1a0lHaHBaR1Z6SUhSb1pTQmxiR1Z0Wlc1MExseHVJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQXFMMXh1SUNCa1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXViMlptS0NjdWVtWXViM0ppYVhRbktTNW1hVzVrS0NjcUp5a3ViMlptS0NjdWVtWXViM0ppYVhRbktTNWxibVFvS1M1b2FXUmxLQ2s3WEc0Z0lDQWdSbTkxYm1SaGRHbHZiaTUxYm5KbFoybHpkR1Z5VUd4MVoybHVLSFJvYVhNcE8xeHVJQ0I5WEc1OVhHNWNiazl5WW1sMExtUmxabUYxYkhSeklEMGdlMXh1SUNBdktpcGNiaUFnS2lCVVpXeHNjeUIwYUdVZ1NsTWdkRzhnYkc5dmF5Qm1iM0lnWVc1a0lHeHZZV1JDZFd4c1pYUnpMbHh1SUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNvZ1FHUmxabUYxYkhRZ2RISjFaVnh1SUNBcUwxeHVJQ0JpZFd4c1pYUnpPaUIwY25WbExGeHVJQ0F2S2lwY2JpQWdLaUJVWld4c2N5QjBhR1VnU2xNZ2RHOGdZWEJ3YkhrZ1pYWmxiblFnYkdsemRHVnVaWEp6SUhSdklHNWhkaUJpZFhSMGIyNXpYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNvdlhHNGdJRzVoZGtKMWRIUnZibk02SUhSeWRXVXNYRzRnSUM4cUtseHVJQ0FxSUcxdmRHbHZiaTExYVNCaGJtbHRZWFJwYjI0Z1kyeGhjM01nZEc4Z1lYQndiSGxjYmlBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYRzRnSUNvZ1FHUmxabUYxYkhRZ0ozTnNhV1JsTFdsdUxYSnBaMmgwSjF4dUlDQXFMMXh1SUNCaGJtbHRTVzVHY205dFVtbG5hSFE2SUNkemJHbGtaUzFwYmkxeWFXZG9kQ2NzWEc0Z0lDOHFLbHh1SUNBcUlHMXZkR2x2YmkxMWFTQmhibWx0WVhScGIyNGdZMnhoYzNNZ2RHOGdZWEJ3YkhsY2JpQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDb2dRR1JsWm1GMWJIUWdKM05zYVdSbExXOTFkQzF5YVdkb2RDZGNiaUFnS2k5Y2JpQWdZVzVwYlU5MWRGUnZVbWxuYUhRNklDZHpiR2xrWlMxdmRYUXRjbWxuYUhRbkxGeHVJQ0F2S2lwY2JpQWdLaUJ0YjNScGIyNHRkV2tnWVc1cGJXRjBhVzl1SUdOc1lYTnpJSFJ2SUdGd2NHeDVYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FxSUVCa1pXWmhkV3gwSUNkemJHbGtaUzFwYmkxc1pXWjBKMXh1SUNBcVhHNGdJQ292WEc0Z0lHRnVhVzFKYmtaeWIyMU1aV1owT2lBbmMyeHBaR1V0YVc0dGJHVm1kQ2NzWEc0Z0lDOHFLbHh1SUNBcUlHMXZkR2x2YmkxMWFTQmhibWx0WVhScGIyNGdZMnhoYzNNZ2RHOGdZWEJ3YkhsY2JpQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDb2dRR1JsWm1GMWJIUWdKM05zYVdSbExXOTFkQzFzWldaMEoxeHVJQ0FxTDF4dUlDQmhibWx0VDNWMFZHOU1aV1owT2lBbmMyeHBaR1V0YjNWMExXeGxablFuTEZ4dUlDQXZLaXBjYmlBZ0tpQkJiR3h2ZDNNZ1QzSmlhWFFnZEc4Z1lYVjBiMjFoZEdsallXeHNlU0JoYm1sdFlYUmxJRzl1SUhCaFoyVWdiRzloWkM1Y2JpQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQXFJRUJrWldaaGRXeDBJSFJ5ZFdWY2JpQWdLaTljYmlBZ1lYVjBiMUJzWVhrNklIUnlkV1VzWEc0Z0lDOHFLbHh1SUNBcUlFRnRiM1Z1ZENCdlppQjBhVzFsTENCcGJpQnRjeXdnWW1WMGQyVmxiaUJ6Ykdsa1pTQjBjbUZ1YzJsMGFXOXVjMXh1SUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNiaUFnS2lCQVpHVm1ZWFZzZENBMU1EQXdYRzRnSUNvdlhHNGdJSFJwYldWeVJHVnNZWGs2SURVd01EQXNYRzRnSUM4cUtseHVJQ0FxSUVGc2JHOTNjeUJQY21KcGRDQjBieUJwYm1acGJtbDBaV3g1SUd4dmIzQWdkR2h5YjNWbmFDQjBhR1VnYzJ4cFpHVnpYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNvdlhHNGdJR2x1Wm1sdWFYUmxWM0poY0RvZ2RISjFaU3hjYmlBZ0x5b3FYRzRnSUNvZ1FXeHNiM2R6SUhSb1pTQlBjbUpwZENCemJHbGtaWE1nZEc4Z1ltbHVaQ0IwYnlCemQybHdaU0JsZG1WdWRITWdabTl5SUcxdlltbHNaU3dnY21WeGRXbHlaWE1nWVc0Z1lXUmthWFJwYjI1aGJDQjFkR2xzSUd4cFluSmhjbmxjYmlBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh1SUNBcUlFQmtaV1poZFd4MElIUnlkV1ZjYmlBZ0tpOWNiaUFnYzNkcGNHVTZJSFJ5ZFdVc1hHNGdJQzhxS2x4dUlDQXFJRUZzYkc5M2N5QjBhR1VnZEdsdGFXNW5JR1oxYm1OMGFXOXVJSFJ2SUhCaGRYTmxJR0Z1YVcxaGRHbHZiaUJ2YmlCb2IzWmxjaTVjYmlBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh1SUNBcUlFQmtaV1poZFd4MElIUnlkV1ZjYmlBZ0tpOWNiaUFnY0dGMWMyVlBia2h2ZG1WeU9pQjBjblZsTEZ4dUlDQXZLaXBjYmlBZ0tpQkJiR3h2ZDNNZ1QzSmlhWFFnZEc4Z1ltbHVaQ0JyWlhsaWIyRnlaQ0JsZG1WdWRITWdkRzhnZEdobElITnNhV1JsY2l3Z2RHOGdZVzVwYldGMFpTQm1jbUZ0WlhNZ2QybDBhQ0JoY25KdmR5QnJaWGx6WEc0Z0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDb3ZYRzRnSUdGalkyVnpjMmxpYkdVNklIUnlkV1VzWEc0Z0lDOHFLbHh1SUNBcUlFTnNZWE56SUdGd2NHeHBaV1FnZEc4Z2RHaGxJR052Ym5SaGFXNWxjaUJ2WmlCUGNtSnBkRnh1SUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnS2lCQVpHVm1ZWFZzZENBbmIzSmlhWFF0WTI5dWRHRnBibVZ5SjF4dUlDQXFMMXh1SUNCamIyNTBZV2x1WlhKRGJHRnpjem9nSjI5eVltbDBMV052Ym5SaGFXNWxjaWNzWEc0Z0lDOHFLbHh1SUNBcUlFTnNZWE56SUdGd2NHeHBaV1FnZEc4Z2FXNWthWFpwWkhWaGJDQnpiR2xrWlhNdVhHNGdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQXFJRUJrWldaaGRXeDBJQ2R2Y21KcGRDMXpiR2xrWlNkY2JpQWdLaTljYmlBZ2MyeHBaR1ZEYkdGemN6b2dKMjl5WW1sMExYTnNhV1JsSnl4Y2JpQWdMeW9xWEc0Z0lDb2dRMnhoYzNNZ1lYQndiR2xsWkNCMGJ5QjBhR1VnWW5Wc2JHVjBJR052Ym5SaGFXNWxjaTRnV1c5MUozSmxJSGRsYkdOdmJXVXVYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FxSUVCa1pXWmhkV3gwSUNkdmNtSnBkQzFpZFd4c1pYUnpKMXh1SUNBcUwxeHVJQ0JpYjNoUFprSjFiR3hsZEhNNklDZHZjbUpwZEMxaWRXeHNaWFJ6Snl4Y2JpQWdMeW9xWEc0Z0lDb2dRMnhoYzNNZ1lYQndiR2xsWkNCMGJ5QjBhR1VnWUc1bGVIUmdJRzVoZG1sbllYUnBiMjRnWW5WMGRHOXVMbHh1SUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnS2lCQVpHVm1ZWFZzZENBbmIzSmlhWFF0Ym1WNGRDZGNiaUFnS2k5Y2JpQWdibVY0ZEVOc1lYTnpPaUFuYjNKaWFYUXRibVY0ZENjc1hHNGdJQzhxS2x4dUlDQXFJRU5zWVhOeklHRndjR3hwWldRZ2RHOGdkR2hsSUdCd2NtVjJhVzkxYzJBZ2JtRjJhV2RoZEdsdmJpQmlkWFIwYjI0dVhHNGdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQXFJRUJrWldaaGRXeDBJQ2R2Y21KcGRDMXdjbVYyYVc5MWN5ZGNiaUFnS2k5Y2JpQWdjSEpsZGtOc1lYTnpPaUFuYjNKaWFYUXRjSEpsZG1sdmRYTW5MRnh1SUNBdktpcGNiaUFnS2lCQ2IyOXNaV0Z1SUhSdklHWnNZV2NnZEdobElHcHpJSFJ2SUhWelpTQnRiM1JwYjI0Z2RXa2dZMnhoYzNObGN5QnZjaUJ1YjNRdUlFUmxabUYxYkhRZ2RHOGdkSEoxWlNCbWIzSWdZbUZqYTNkaGNtUnpJR052YlhCaGRHRmlhV3hwZEhrdVhHNGdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN1ltOXZiR1ZoYm4xY2JpQWdLaUJBWkdWbVlYVnNkQ0IwY25WbFhHNGdJQ292WEc0Z0lIVnpaVTFWU1RvZ2RISjFaVnh1ZlR0Y2JseHVMeThnVjJsdVpHOTNJR1Y0Y0c5eWRITmNia1p2ZFc1a1lYUnBiMjR1Y0d4MVoybHVLRTl5WW1sMExDQW5UM0ppYVhRbktUdGNibHh1ZlNocVVYVmxjbmtwTzF4dUlpd2lMeW9nYW5Ob2FXNTBJR2xuYm05eVpUcHpkR0Z5ZENBcUwxeHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ3BjYmlBcUlGUm9hWE1nZFhScGJDQjNZWE1nWTNKbFlYUmxaQ0JpZVNCTllYSnBkWE1nVDJ4aVpYSjBlaUFxWEc0Z0tpQlFiR1ZoYzJVZ2RHaGhibXNnVFdGeWFYVnpJRzl1SUVkcGRFaDFZaUF2YjNkc1ltVnlkSG9nS2x4dUlDb2diM0lnZEdobElIZGxZaUJvZEhSd09pOHZkM2QzTG0xaGNtbDFjMjlzWW1WeWRIb3VaR1V2SUNwY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiaUZtZFc1amRHbHZiaUFvSkNrZ2UxeHVYRzRnSUhaaGNpQnJaWGxEYjJSbGN5QTlJSHRjYmlBZ0lDQTVPaUFuVkVGQ0p5eGNiaUFnSUNBeE16b2dKMFZPVkVWU0p5eGNiaUFnSUNBeU56b2dKMFZUUTBGUVJTY3NYRzRnSUNBZ016STZJQ2RUVUVGRFJTY3NYRzRnSUNBZ016YzZJQ2RCVWxKUFYxOU1SVVpVSnl4Y2JpQWdJQ0F6T0RvZ0owRlNVazlYWDFWUUp5eGNiaUFnSUNBek9Ub2dKMEZTVWs5WFgxSkpSMGhVSnl4Y2JpQWdJQ0EwTURvZ0owRlNVazlYWDBSUFYwNG5YRzRnSUgwN1hHNWNiaUFnZG1GeUlHTnZiVzFoYm1SeklEMGdlMzA3WEc1Y2JpQWdkbUZ5SUV0bGVXSnZZWEprSUQwZ2UxeHVJQ0FnSUd0bGVYTTZJR2RsZEV0bGVVTnZaR1Z6S0d0bGVVTnZaR1Z6S1N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQmhjbk5sY3lCMGFHVWdLR3RsZVdKdllYSmtLU0JsZG1WdWRDQmhibVFnY21WMGRYSnVjeUJoSUZOMGNtbHVaeUIwYUdGMElISmxjSEpsYzJWdWRITWdhWFJ6SUd0bGVWeHVJQ0FnSUNBcUlFTmhiaUJpWlNCMWMyVmtJR3hwYTJVZ1JtOTFibVJoZEdsdmJpNXdZWEp6WlV0bGVTaGxkbVZ1ZENrZ1BUMDlJRVp2ZFc1a1lYUnBiMjR1YTJWNWN5NVRVRUZEUlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UlhabGJuUjlJR1YyWlc1MElDMGdkR2hsSUdWMlpXNTBJR2RsYm1WeVlYUmxaQ0JpZVNCMGFHVWdaWFpsYm5RZ2FHRnVaR3hsY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnVTNSeWFXNW5JR3RsZVNBdElGTjBjbWx1WnlCMGFHRjBJSEpsY0hKbGMyVnVkSE1nZEdobElHdGxlU0J3Y21WemMyVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NHRnljMlZMWlhrNklHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJR3RsZVNBOUlHdGxlVU52WkdWelcyVjJaVzUwTG5kb2FXTm9JSHg4SUdWMlpXNTBMbXRsZVVOdlpHVmRJSHg4SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1pYWmxiblF1ZDJocFkyZ3BMblJ2VlhCd1pYSkRZWE5sS0NrN1hHNWNiaUFnSUNBZ0lDOHZJRkpsYlc5MlpTQjFiaTF3Y21sdWRHRmliR1VnWTJoaGNtRmpkR1Z5Y3l3Z1pTNW5MaUJtYjNJZ1lHWnliMjFEYUdGeVEyOWtaV0FnWTJGc2JITWdabTl5SUVOVVVrd2diMjVzZVNCbGRtVnVkSE5jYmlBZ0lDQWdJR3RsZVNBOUlHdGxlUzV5WlhCc1lXTmxLQzljWEZjckx5d2dKeWNwTzF4dVhHNGdJQ0FnSUNCcFppQW9aWFpsYm5RdWMyaHBablJMWlhrcElHdGxlU0E5SUNkVFNFbEdWRjhuSUNzZ2EyVjVPMXh1SUNBZ0lDQWdhV1lnS0dWMlpXNTBMbU4wY214TFpYa3BJR3RsZVNBOUlDZERWRkpNWHljZ0t5QnJaWGs3WEc0Z0lDQWdJQ0JwWmlBb1pYWmxiblF1WVd4MFMyVjVLU0JyWlhrZ1BTQW5RVXhVWHljZ0t5QnJaWGs3WEc1Y2JpQWdJQ0FnSUM4dklGSmxiVzkyWlNCMGNtRnBiR2x1WnlCMWJtUmxjbk5qYjNKbExDQnBiaUJqWVhObElHOXViSGtnYlc5a2FXWnBaWEp6SUhkbGNtVWdkWE5sWkNBb1pTNW5MaUJ2Ym14NUlHQkRWRkpNWDBGTVZHQXBYRzRnSUNBZ0lDQnJaWGtnUFNCclpYa3VjbVZ3YkdGalpTZ3ZYeVF2TENBbkp5azdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnJaWGs3WEc0Z0lDQWdmU3hjYmx4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsY3lCMGFHVWdaMmwyWlc0Z0tHdGxlV0p2WVhKa0tTQmxkbVZ1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UlhabGJuUjlJR1YyWlc1MElDMGdkR2hsSUdWMlpXNTBJR2RsYm1WeVlYUmxaQ0JpZVNCMGFHVWdaWFpsYm5RZ2FHRnVaR3hsY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JqYjIxd2IyNWxiblFnTFNCR2IzVnVaR0YwYVc5dUlHTnZiWEJ2Ym1WdWRDZHpJRzVoYldVc0lHVXVaeTRnVTJ4cFpHVnlJRzl5SUZKbGRtVmhiRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGMzMGdablZ1WTNScGIyNXpJQzBnWTI5c2JHVmpkR2x2YmlCdlppQm1kVzVqZEdsdmJuTWdkR2hoZENCaGNtVWdkRzhnWW1VZ1pYaGxZM1YwWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVkxaWGs2SUdaMWJtTjBhVzl1SUNobGRtVnVkQ3dnWTI5dGNHOXVaVzUwTENCbWRXNWpkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIWmhjaUJqYjIxdFlXNWtUR2x6ZENBOUlHTnZiVzFoYm1SelcyTnZiWEJ2Ym1WdWRGMHNYRzRnSUNBZ0lDQWdJQ0FnYTJWNVEyOWtaU0E5SUhSb2FYTXVjR0Z5YzJWTFpYa29aWFpsYm5RcExGeHVJQ0FnSUNBZ0lDQWdJR050WkhNc1hHNGdJQ0FnSUNBZ0lDQWdZMjl0YldGdVpDeGNiaUFnSUNBZ0lDQWdJQ0JtYmp0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0ZqYjIxdFlXNWtUR2x6ZENrZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ25RMjl0Y0c5dVpXNTBJRzV2ZENCa1pXWnBibVZrSVNjcE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR052YlcxaGJtUk1hWE4wTG14MGNpQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdMeThnZEdocGN5QmpiMjF3YjI1bGJuUWdaRzlsY3lCdWIzUWdaR2xtWm1WeVpXNTBhV0YwWlNCaVpYUjNaV1Z1SUd4MGNpQmhibVFnY25Sc1hHNGdJQ0FnSUNBZ0lHTnRaSE1nUFNCamIyMXRZVzVrVEdsemREc2dMeThnZFhObElIQnNZV2x1SUd4cGMzUmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHZJRzFsY21kbElHeDBjaUJoYm1RZ2NuUnNPaUJwWmlCa2IyTjFiV1Z1ZENCcGN5QnlkR3dzSUhKMGJDQnZkbVZ5ZDNKcGRHVnpJR3gwY2lCaGJtUWdkbWxqWlNCMlpYSnpZVnh1SUNBZ0lDQWdJQ0JwWmlBb1JtOTFibVJoZEdsdmJpNXlkR3dvS1NrZ1kyMWtjeUE5SUNRdVpYaDBaVzVrS0h0OUxDQmpiMjF0WVc1a1RHbHpkQzVzZEhJc0lHTnZiVzFoYm1STWFYTjBMbkowYkNrN1pXeHpaU0JqYldSeklEMGdKQzVsZUhSbGJtUW9lMzBzSUdOdmJXMWhibVJNYVhOMExuSjBiQ3dnWTI5dGJXRnVaRXhwYzNRdWJIUnlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052YlcxaGJtUWdQU0JqYldSelcydGxlVU52WkdWZE8xeHVYRzRnSUNBZ0lDQm1iaUE5SUdaMWJtTjBhVzl1YzF0amIyMXRZVzVrWFR0Y2JpQWdJQ0FnSUdsbUlDaG1iaUFtSmlCMGVYQmxiMllnWm00Z1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaWGhsWTNWMFpTQm1kVzVqZEdsdmJpQWdhV1lnWlhocGMzUnpYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYUjFjbTVXWVd4MVpTQTlJR1p1TG1Gd2NHeDVLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaG1kVzVqZEdsdmJuTXVhR0Z1Wkd4bFpDQjhmQ0IwZVhCbGIyWWdablZ1WTNScGIyNXpMbWhoYm1Sc1pXUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCbGVHVmpkWFJsSUdaMWJtTjBhVzl1SUhkb1pXNGdaWFpsYm5RZ2QyRnpJR2hoYm1Sc1pXUmNiaUFnSUNBZ0lDQWdJQ0JtZFc1amRHbHZibk11YUdGdVpHeGxaQ2h5WlhSMWNtNVdZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2htZFc1amRHbHZibk11ZFc1b1lXNWtiR1ZrSUh4OElIUjVjR1Z2WmlCbWRXNWpkR2x2Ym5NdWRXNW9ZVzVrYkdWa0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnWlhobFkzVjBaU0JtZFc1amRHbHZiaUIzYUdWdUlHVjJaVzUwSUhkaGN5QnViM1FnYUdGdVpHeGxaRnh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1Y3k1MWJtaGhibVJzWldRb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVacGJtUnpJR0ZzYkNCbWIyTjFjMkZpYkdVZ1pXeGxiV1Z1ZEhNZ2QybDBhR2x1SUhSb1pTQm5hWFpsYmlCZ0pHVnNaVzFsYm5SZ1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0cVVYVmxjbmw5SUNSbGJHVnRaVzUwSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCelpXRnlZMmdnZDJsMGFHbHVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdhbEYxWlhKNWZTQWtabTlqZFhOaFlteGxJQzBnWVd4c0lHWnZZM1Z6WVdKc1pTQmxiR1Z0Wlc1MGN5QjNhWFJvYVc0Z1lDUmxiR1Z0Wlc1MFlGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdacGJtUkdiMk4xYzJGaWJHVTZJR1oxYm1OMGFXOXVJQ2drWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRWtaV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnSkdWc1pXMWxiblF1Wm1sdVpDZ25ZVnRvY21WbVhTd2dZWEpsWVZ0b2NtVm1YU3dnYVc1d2RYUTZibTkwS0Z0a2FYTmhZbXhsWkYwcExDQnpaV3hsWTNRNmJtOTBLRnRrYVhOaFlteGxaRjBwTENCMFpYaDBZWEpsWVRwdWIzUW9XMlJwYzJGaWJHVmtYU2tzSUdKMWRIUnZianB1YjNRb1cyUnBjMkZpYkdWa1hTa3NJR2xtY21GdFpTd2diMkpxWldOMExDQmxiV0psWkN3Z0tsdDBZV0pwYm1SbGVGMHNJQ3BiWTI5dWRHVnVkR1ZrYVhSaFlteGxYU2NwTG1acGJIUmxjaWhtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doSkNoMGFHbHpLUzVwY3lnbk9uWnBjMmxpYkdVbktTQjhmQ0FrS0hSb2FYTXBMbUYwZEhJb0ozUmhZbWx1WkdWNEp5a2dQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOUlDOHZiMjVzZVNCb1lYWmxJSFpwYzJsaWJHVWdaV3hsYldWdWRITWdZVzVrSUhSb2IzTmxJSFJvWVhRZ2FHRjJaU0JoSUhSaFltbHVaR1Y0SUdkeVpXRjBaWElnYjNJZ1pYRjFZV3dnTUZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHNYRzVjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nZEdobElHTnZiWEJ2Ym1WdWRDQnVZVzFsSUc1aGJXVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kyOXRjRzl1Wlc1MElDMGdSbTkxYm1SaGRHbHZiaUJqYjIxd2IyNWxiblFzSUdVdVp5NGdVMnhwWkdWeUlHOXlJRkpsZG1WaGJGeHVJQ0FnSUNBcUlFQnlaWFIxY200Z1UzUnlhVzVuSUdOdmJYQnZibVZ1ZEU1aGJXVmNiaUFnSUNBZ0tpOWNibHh1SUNBZ0lISmxaMmx6ZEdWeU9pQm1kVzVqZEdsdmJpQW9ZMjl0Y0c5dVpXNTBUbUZ0WlN3Z1kyMWtjeWtnZTF4dUlDQWdJQ0FnWTI5dGJXRnVaSE5iWTI5dGNHOXVaVzUwVG1GdFpWMGdQU0JqYldSek8xeHVJQ0FnSUgwc1hHNWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJ5WVhCeklIUm9aU0JtYjJOMWN5QnBiaUIwYUdVZ1oybDJaVzRnWld4bGJXVnVkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRxVVhWbGNubDlJQ1JsYkdWdFpXNTBJQ0JxVVhWbGNua2diMkpxWldOMElIUnZJSFJ5WVhBZ2RHaGxJR1p2ZFdOeklHbHVkRzh1WEc0Z0lDQWdJQ292WEc0Z0lDQWdkSEpoY0VadlkzVnpPaUJtZFc1amRHbHZiaUFvSkdWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUhaaGNpQWtabTlqZFhOaFlteGxJRDBnUm05MWJtUmhkR2x2Ymk1TFpYbGliMkZ5WkM1bWFXNWtSbTlqZFhOaFlteGxLQ1JsYkdWdFpXNTBLU3hjYmlBZ0lDQWdJQ0FnSUNBa1ptbHljM1JHYjJOMWMyRmliR1VnUFNBa1ptOWpkWE5oWW14bExtVnhLREFwTEZ4dUlDQWdJQ0FnSUNBZ0lDUnNZWE4wUm05amRYTmhZbXhsSUQwZ0pHWnZZM1Z6WVdKc1pTNWxjU2d0TVNrN1hHNWNiaUFnSUNBZ0lDUmxiR1Z0Wlc1MExtOXVLQ2RyWlhsa2IzZHVMbnBtTG5SeVlYQm1iMk4xY3ljc0lHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWlhabGJuUXVkR0Z5WjJWMElEMDlQU0FrYkdGemRFWnZZM1Z6WVdKc1pWc3dYU0FtSmlCR2IzVnVaR0YwYVc5dUxrdGxlV0p2WVhKa0xuQmhjbk5sUzJWNUtHVjJaVzUwS1NBOVBUMGdKMVJCUWljcElIdGNiaUFnSUNBZ0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ1JtYVhKemRFWnZZM1Z6WVdKc1pTNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1YyWlc1MExuUmhjbWRsZENBOVBUMGdKR1pwY25OMFJtOWpkWE5oWW14bFd6QmRJQ1ltSUVadmRXNWtZWFJwYjI0dVMyVjVZbTloY21RdWNHRnljMlZMWlhrb1pYWmxiblFwSUQwOVBTQW5VMGhKUmxSZlZFRkNKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0pHeGhjM1JHYjJOMWMyRmliR1V1Wm05amRYTW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxiR1ZoYzJWeklIUm9aU0IwY21Gd2NHVmtJR1p2WTNWeklHWnliMjBnZEdobElHZHBkbVZ1SUdWc1pXMWxiblF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3YWxGMVpYSjVmU0FrWld4bGJXVnVkQ0FnYWxGMVpYSjVJRzlpYW1WamRDQjBieUJ5Wld4bFlYTmxJSFJvWlNCbWIyTjFjeUJtYjNJdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21Wc1pXRnpaVVp2WTNWek9pQm1kVzVqZEdsdmJpQW9KR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ1JsYkdWdFpXNTBMbTltWmlnbmEyVjVaRzkzYmk1NlppNTBjbUZ3Wm05amRYTW5LVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnTHlwY2JpQWdJQ29nUTI5dWMzUmhiblJ6SUdadmNpQmxZWE5wWlhJZ1kyOXRjR0Z5YVc1bkxseHVJQ0FnS2lCRFlXNGdZbVVnZFhObFpDQnNhV3RsSUVadmRXNWtZWFJwYjI0dWNHRnljMlZMWlhrb1pYWmxiblFwSUQwOVBTQkdiM1Z1WkdGMGFXOXVMbXRsZVhNdVUxQkJRMFZjYmlBZ0lDb3ZYRzRnSUdaMWJtTjBhVzl1SUdkbGRFdGxlVU52WkdWektHdGpjeWtnZTF4dUlDQWdJSFpoY2lCcklEMGdlMzA3WEc0Z0lDQWdabTl5SUNoMllYSWdhMk1nYVc0Z2EyTnpLU0I3WEc0Z0lDQWdJQ0JyVzJ0amMxdHJZMTFkSUQwZ2EyTnpXMnRqWFR0Y2JpQWdJQ0I5Y21WMGRYSnVJR3M3WEc0Z0lIMWNibHh1SUNCR2IzVnVaR0YwYVc5dUxrdGxlV0p2WVhKa0lEMGdTMlY1WW05aGNtUTdYRzU5S0dwUmRXVnllU2s3SWl3aUx5b2dhbk5vYVc1MElHbG5ibTl5WlRwemRHRnlkQ0FxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpRm1kVzVqZEdsdmJpQW9KQ2tnZTF4dVhHNGdJQzh2SUVSbFptRjFiSFFnYzJWMElHOW1JRzFsWkdsaElIRjFaWEpwWlhOY2JpQWdkbUZ5SUdSbFptRjFiSFJSZFdWeWFXVnpJRDBnZTF4dUlDQWdJQ2RrWldaaGRXeDBKem9nSjI5dWJIa2djMk55WldWdUp5eGNiaUFnSUNCc1lXNWtjMk5oY0dVNklDZHZibXg1SUhOamNtVmxiaUJoYm1RZ0tHOXlhV1Z1ZEdGMGFXOXVPaUJzWVc1a2MyTmhjR1VwSnl4Y2JpQWdJQ0J3YjNKMGNtRnBkRG9nSjI5dWJIa2djMk55WldWdUlHRnVaQ0FvYjNKcFpXNTBZWFJwYjI0NklIQnZjblJ5WVdsMEtTY3NYRzRnSUNBZ2NtVjBhVzVoT2lBbmIyNXNlU0J6WTNKbFpXNGdZVzVrSUNndGQyVmlhMmwwTFcxcGJpMWtaWFpwWTJVdGNHbDRaV3d0Y21GMGFXODZJRElwTENjZ0t5QW5iMjVzZVNCelkzSmxaVzRnWVc1a0lDaHRhVzR0TFcxdmVpMWtaWFpwWTJVdGNHbDRaV3d0Y21GMGFXODZJRElwTENjZ0t5QW5iMjVzZVNCelkzSmxaVzRnWVc1a0lDZ3RieTF0YVc0dFpHVjJhV05sTFhCcGVHVnNMWEpoZEdsdk9pQXlMekVwTENjZ0t5QW5iMjVzZVNCelkzSmxaVzRnWVc1a0lDaHRhVzR0WkdWMmFXTmxMWEJwZUdWc0xYSmhkR2x2T2lBeUtTd25JQ3NnSjI5dWJIa2djMk55WldWdUlHRnVaQ0FvYldsdUxYSmxjMjlzZFhScGIyNDZJREU1TW1Sd2FTa3NKeUFySUNkdmJteDVJSE5qY21WbGJpQmhibVFnS0cxcGJpMXlaWE52YkhWMGFXOXVPaUF5WkhCd2VDa25YRzRnSUgwN1hHNWNiaUFnZG1GeUlFMWxaR2xoVVhWbGNua2dQU0I3WEc0Z0lDQWdjWFZsY21sbGN6b2dXMTBzWEc1Y2JpQWdJQ0JqZFhKeVpXNTBPaUFuSnl4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCdFpXUnBZU0J4ZFdWeWVTQm9aV3h3WlhJc0lHSjVJR1Y0ZEhKaFkzUnBibWNnZEdobElHSnlaV0ZyY0c5cGJuUWdiR2x6ZENCbWNtOXRJSFJvWlNCRFUxTWdZVzVrSUdGamRHbDJZWFJwYm1jZ2RHaGxJR0p5WldGcmNHOXBiblFnZDJGMFkyaGxjaTVjYmlBZ0lDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXBibWwwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdaWGgwY21GamRHVmtVM1I1YkdWeklEMGdKQ2duTG1admRXNWtZWFJwYjI0dGJYRW5LUzVqYzNNb0oyWnZiblF0Wm1GdGFXeDVKeWs3WEc0Z0lDQWdJQ0IyWVhJZ2JtRnRaV1JSZFdWeWFXVnpPMXh1WEc0Z0lDQWdJQ0J1WVcxbFpGRjFaWEpwWlhNZ1BTQndZWEp6WlZOMGVXeGxWRzlQWW1wbFkzUW9aWGgwY21GamRHVmtVM1I1YkdWektUdGNibHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHNWhiV1ZrVVhWbGNtbGxjeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ibUZ0WldSUmRXVnlhV1Z6TG1oaGMwOTNibEJ5YjNCbGNuUjVLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxuRjFaWEpwWlhNdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lCclpYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nSjI5dWJIa2djMk55WldWdUlHRnVaQ0FvYldsdUxYZHBaSFJvT2lBbklDc2dibUZ0WldSUmRXVnlhV1Z6VzJ0bGVWMGdLeUFuS1NkY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMbU4xY25KbGJuUWdQU0IwYUdsekxsOW5aWFJEZFhKeVpXNTBVMmw2WlNncE8xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5M1lYUmphR1Z5S0NrN1hHNGdJQ0FnZlN4Y2JseHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMmhsWTJ0eklHbG1JSFJvWlNCelkzSmxaVzRnYVhNZ1lYUWdiR1ZoYzNRZ1lYTWdkMmxrWlNCaGN5QmhJR0p5WldGcmNHOXBiblF1WEc0Z0lDQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSE5wZW1VZ0xTQk9ZVzFsSUc5bUlIUm9aU0JpY21WaGEzQnZhVzUwSUhSdklHTm9aV05yTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlNCZ2RISjFaV0FnYVdZZ2RHaGxJR0p5WldGcmNHOXBiblFnYldGMFkyaGxjeXdnWUdaaGJITmxZQ0JwWmlCcGRDZHpJSE50WVd4c1pYSXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1lYUk1aV0Z6ZERvZ1puVnVZM1JwYjI0Z0tITnBlbVVwSUh0Y2JpQWdJQ0FnSUhaaGNpQnhkV1Z5ZVNBOUlIUm9hWE11WjJWMEtITnBlbVVwTzF4dVhHNGdJQ0FnSUNCcFppQW9jWFZsY25rcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIZHBibVJ2ZHk1dFlYUmphRTFsWkdsaEtIRjFaWEo1S1M1dFlYUmphR1Z6TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJobFkydHpJR2xtSUhSb1pTQnpZM0psWlc0Z2JXRjBZMmhsY3lCMGJ5QmhJR0p5WldGcmNHOXBiblF1WEc0Z0lDQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSE5wZW1VZ0xTQk9ZVzFsSUc5bUlIUm9aU0JpY21WaGEzQnZhVzUwSUhSdklHTm9aV05yTENCbGFYUm9aWElnSjNOdFlXeHNJRzl1YkhrbklHOXlJQ2R6YldGc2JDY3VJRTl0YVhSMGFXNW5JQ2R2Ym14NUp5Qm1ZV3hzY3lCaVlXTnJJSFJ2SUhWemFXNW5JR0YwVEdWaGMzUW9LU0J0WlhSb2IyUXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJR0IwY25WbFlDQnBaaUIwYUdVZ1luSmxZV3R3YjJsdWRDQnRZWFJqYUdWekxDQmdabUZzYzJWZ0lHbG1JR2wwSUdSdlpYTWdibTkwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR2x6T2lCbWRXNWpkR2x2YmlBb2MybDZaU2tnZTF4dUlDQWdJQ0FnYzJsNlpTQTlJSE5wZW1VdWRISnBiU2dwTG5Od2JHbDBLQ2NnSnlrN1hHNGdJQ0FnSUNCcFppQW9jMmw2WlM1c1pXNW5kR2dnUGlBeElDWW1JSE5wZW1WYk1WMGdQVDA5SUNkdmJteDVKeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9jMmw2WlZzd1hTQTlQVDBnZEdocGN5NWZaMlYwUTNWeWNtVnVkRk5wZW1Vb0tTa2djbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGRFeGxZWE4wS0hOcGVtVmJNRjBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgwc1hHNWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJRzFsWkdsaElIRjFaWEo1SUc5bUlHRWdZbkpsWVd0d2IybHVkQzVjYmlBZ0lDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdjMmw2WlNBdElFNWhiV1VnYjJZZ2RHaGxJR0p5WldGcmNHOXBiblFnZEc4Z1oyVjBMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRUZEhKcGJtZDhiblZzYkgwZ0xTQlVhR1VnYldWa2FXRWdjWFZsY25rZ2IyWWdkR2hsSUdKeVpXRnJjRzlwYm5Rc0lHOXlJR0J1ZFd4c1lDQnBaaUIwYUdVZ1luSmxZV3R3YjJsdWRDQmtiMlZ6YmlkMElHVjRhWE4wTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0Z0tITnBlbVVwSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ2FXNGdkR2hwY3k1eGRXVnlhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuRjFaWEpwWlhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvYVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2NYVmxjbmtnUFNCMGFHbHpMbkYxWlhKcFpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSE5wZW1VZ1BUMDlJSEYxWlhKNUxtNWhiV1VwSUhKbGRIVnliaUJ4ZFdWeWVTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlMRnh1WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJSFJvWlNCamRYSnlaVzUwSUdKeVpXRnJjRzlwYm5RZ2JtRnRaU0JpZVNCMFpYTjBhVzVuSUdWMlpYSjVJR0p5WldGcmNHOXBiblFnWVc1a0lISmxkSFZ5Ym1sdVp5QjBhR1VnYkdGemRDQnZibVVnZEc4Z2JXRjBZMmdnS0hSb1pTQmlhV2RuWlhOMElHOXVaU2t1WEc0Z0lDQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3VTNSeWFXNW5mU0JPWVcxbElHOW1JSFJvWlNCamRYSnlaVzUwSUdKeVpXRnJjRzlwYm5RdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJkbGRFTjFjbkpsYm5SVGFYcGxPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCMllYSWdiV0YwWTJobFpEdGNibHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxuRjFaWEpwWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIRjFaWEo1SUQwZ2RHaHBjeTV4ZFdWeWFXVnpXMmxkTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gzYVc1a2IzY3ViV0YwWTJoTlpXUnBZU2h4ZFdWeWVTNTJZV3gxWlNrdWJXRjBZMmhsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzFoZEdOb1pXUWdQU0J4ZFdWeWVUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUcxaGRHTm9aV1FnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRZWFJqYUdWa0xtNWhiV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0YwWTJobFpEdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWTNScGRtRjBaWE1nZEdobElHSnlaV0ZyY0c5cGJuUWdkMkYwWTJobGNpd2dkMmhwWTJnZ1ptbHlaWE1nWVc0Z1pYWmxiblFnYjI0Z2RHaGxJSGRwYm1SdmR5QjNhR1Z1WlhabGNpQjBhR1VnWW5KbFlXdHdiMmx1ZENCamFHRnVaMlZ6TGx4dUlDQWdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdYM2RoZEdOb1pYSTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUNRb2QybHVaRzkzS1M1dmJpZ25jbVZ6YVhwbExucG1MbTFsWkdsaGNYVmxjbmtuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZFRhWHBsSUQwZ1gzUm9hWE11WDJkbGRFTjFjbkpsYm5SVGFYcGxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFUybDZaU0E5SUY5MGFHbHpMbU4xY25KbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHNWxkMU5wZW1VZ0lUMDlJR04xY25KbGJuUlRhWHBsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnUTJoaGJtZGxJSFJvWlNCamRYSnlaVzUwSUcxbFpHbGhJSEYxWlhKNVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzVnljbVZ1ZENBOUlHNWxkMU5wZW1VN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCQ2NtOWhaR05oYzNRZ2RHaGxJRzFsWkdsaElIRjFaWEo1SUdOb1lXNW5aU0J2YmlCMGFHVWdkMmx1Wkc5M1hHNGdJQ0FnSUNBZ0lDQWdKQ2gzYVc1a2IzY3BMblJ5YVdkblpYSW9KMk5vWVc1blpXUXVlbVl1YldWa2FXRnhkV1Z5ZVNjc0lGdHVaWGRUYVhwbExDQmpkWEp5Wlc1MFUybDZaVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdSbTkxYm1SaGRHbHZiaTVOWldScFlWRjFaWEo1SUQwZ1RXVmthV0ZSZFdWeWVUdGNibHh1SUNBdkx5QnRZWFJqYUUxbFpHbGhLQ2tnY0c5c2VXWnBiR3dnTFNCVVpYTjBJR0VnUTFOVElHMWxaR2xoSUhSNWNHVXZjWFZsY25rZ2FXNGdTbE11WEc0Z0lDOHZJRUYxZEdodmNuTWdKaUJqYjNCNWNtbG5hSFFnS0dNcElESXdNVEk2SUZOamIzUjBJRXBsYUd3c0lGQmhkV3dnU1hKcGMyZ3NJRTVwWTJodmJHRnpJRnBoYTJGekxDQkVZWFpwWkNCTGJtbG5hSFF1SUVSMVlXd2dUVWxVTDBKVFJDQnNhV05sYm5ObFhHNGdJSGRwYm1SdmR5NXRZWFJqYUUxbFpHbGhJSHg4SUNoM2FXNWtiM2N1YldGMFkyaE5aV1JwWVNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpQWdJQ0F2THlCR2IzSWdZbkp2ZDNObGNuTWdkR2hoZENCemRYQndiM0owSUcxaGRHTm9UV1ZrYVhWdElHRndhU0J6ZFdOb0lHRnpJRWxGSURrZ1lXNWtJSGRsWW10cGRGeHVYRzRnSUNBZ2RtRnlJSE4wZVd4bFRXVmthV0VnUFNCM2FXNWtiM2N1YzNSNWJHVk5aV1JwWVNCOGZDQjNhVzVrYjNjdWJXVmthV0U3WEc1Y2JpQWdJQ0F2THlCR2IzSWdkR2h2YzJVZ2RHaGhkQ0JrYjI0bmRDQnpkWEJ3YjNKMElHMWhkR05vVFdWa2FYVnRYRzRnSUNBZ2FXWWdLQ0Z6ZEhsc1pVMWxaR2xoS1NCN1hHNGdJQ0FnSUNCMllYSWdjM1I1YkdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkemRIbHNaU2NwTEZ4dUlDQWdJQ0FnSUNBZ0lITmpjbWx3ZENBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ2R6WTNKcGNIUW5LVnN3WFN4Y2JpQWdJQ0FnSUNBZ0lDQnBibVp2SUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnYzNSNWJHVXVkSGx3WlNBOUlDZDBaWGgwTDJOemN5YzdYRzRnSUNBZ0lDQnpkSGxzWlM1cFpDQTlJQ2R0WVhSamFHMWxaR2xoYW5NdGRHVnpkQ2M3WEc1Y2JpQWdJQ0FnSUhOamNtbHdkQ0FtSmlCelkzSnBjSFF1Y0dGeVpXNTBUbTlrWlNBbUppQnpZM0pwY0hRdWNHRnlaVzUwVG05a1pTNXBibk5sY25SQ1pXWnZjbVVvYzNSNWJHVXNJSE5qY21sd2RDazdYRzVjYmlBZ0lDQWdJQzh2SUNkemRIbHNaUzVqZFhKeVpXNTBVM1I1YkdVbklHbHpJSFZ6WldRZ1lua2dTVVVnUEQwZ09DQmhibVFnSjNkcGJtUnZkeTVuWlhSRGIyMXdkWFJsWkZOMGVXeGxKeUJtYjNJZ1lXeHNJRzkwYUdWeUlHSnliM2R6WlhKelhHNGdJQ0FnSUNCcGJtWnZJRDBnSjJkbGRFTnZiWEIxZEdWa1UzUjViR1VuSUdsdUlIZHBibVJ2ZHlBbUppQjNhVzVrYjNjdVoyVjBRMjl0Y0hWMFpXUlRkSGxzWlNoemRIbHNaU3dnYm5Wc2JDa2dmSHdnYzNSNWJHVXVZM1Z5Y21WdWRGTjBlV3hsTzF4dVhHNGdJQ0FnSUNCemRIbHNaVTFsWkdsaElEMGdlMXh1SUNBZ0lDQWdJQ0J0WVhSamFFMWxaR2wxYlRvZ1puVnVZM1JwYjI0Z0tHMWxaR2xoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhSbGVIUWdQU0FuUUcxbFpHbGhJQ2NnS3lCdFpXUnBZU0FySUNkN0lDTnRZWFJqYUcxbFpHbGhhbk10ZEdWemRDQjdJSGRwWkhSb09pQXhjSGc3SUgwZ2ZTYzdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QW5jM1I1YkdVdWMzUjViR1ZUYUdWbGRDY2dhWE1nZFhObFpDQmllU0JKUlNBOFBTQTRJR0Z1WkNBbmMzUjViR1V1ZEdWNGRFTnZiblJsYm5RbklHWnZjaUJoYkd3Z2IzUm9aWElnWW5KdmQzTmxjbk5jYmlBZ0lDQWdJQ0FnSUNCcFppQW9jM1I1YkdVdWMzUjViR1ZUYUdWbGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1V1YzNSNWJHVlRhR1ZsZEM1amMzTlVaWGgwSUQwZ2RHVjRkRHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdVdWRHVjRkRU52Ym5SbGJuUWdQU0IwWlhoME8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRlJsYzNRZ2FXWWdiV1ZrYVdFZ2NYVmxjbmtnYVhNZ2RISjFaU0J2Y2lCbVlXeHpaVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJwYm1adkxuZHBaSFJvSUQwOVBTQW5NWEI0Snp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0cxbFpHbGhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0J0WVhSamFHVnpPaUJ6ZEhsc1pVMWxaR2xoTG0xaGRHTm9UV1ZrYVhWdEtHMWxaR2xoSUh4OElDZGhiR3duS1N4Y2JpQWdJQ0FnSUNBZ2JXVmthV0U2SUcxbFpHbGhJSHg4SUNkaGJHd25YRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMDdYRzRnSUgwb0tTazdYRzVjYmlBZ0x5OGdWR2hoYm1zZ2VXOTFPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YzJsdVpISmxjMjl5YUhWekwzRjFaWEo1TFhOMGNtbHVaMXh1SUNCbWRXNWpkR2x2YmlCd1lYSnpaVk4wZVd4bFZHOVBZbXBsWTNRb2MzUnlLU0I3WEc0Z0lDQWdkbUZ5SUhOMGVXeGxUMkpxWldOMElEMGdlMzA3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhOMGNpQWhQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6ZEhsc1pVOWlhbVZqZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEhJZ1BTQnpkSEl1ZEhKcGJTZ3BMbk5zYVdObEtERXNJQzB4S1RzZ0x5OGdZbkp2ZDNObGNuTWdjbVV0Y1hWdmRHVWdjM1J5YVc1bklITjBlV3hsSUhaaGJIVmxjMXh1WEc0Z0lDQWdhV1lnS0NGemRISXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnpkSGxzWlU5aWFtVmpkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkSGxzWlU5aWFtVmpkQ0E5SUhOMGNpNXpjR3hwZENnbkppY3BMbkpsWkhWalpTaG1kVzVqZEdsdmJpQW9jbVYwTENCd1lYSmhiU2tnZTF4dUlDQWdJQ0FnZG1GeUlIQmhjblJ6SUQwZ2NHRnlZVzB1Y21Wd2JHRmpaU2d2WEZ3ckwyY3NJQ2NnSnlrdWMzQnNhWFFvSnowbktUdGNiaUFnSUNBZ0lIWmhjaUJyWlhrZ1BTQndZWEowYzFzd1hUdGNiaUFnSUNBZ0lIWmhjaUIyWVd3Z1BTQndZWEowYzFzeFhUdGNiaUFnSUNBZ0lHdGxlU0E5SUdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoclpYa3BPMXh1WEc0Z0lDQWdJQ0F2THlCdGFYTnphVzVuSUdBOVlDQnphRzkxYkdRZ1ltVWdZRzUxYkd4Z09seHVJQ0FnSUNBZ0x5OGdhSFIwY0RvdkwzY3pMbTl5Wnk5VVVpOHlNREV5TDFkRUxYVnliQzB5TURFeU1EVXlOQzhqWTI5c2JHVmpkQzExY213dGNHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBZ2RtRnNJRDBnZG1Gc0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCdWRXeHNJRG9nWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0haaGJDazdYRzVjYmlBZ0lDQWdJR2xtSUNnaGNtVjBMbWhoYzA5M2JsQnliM0JsY25SNUtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBXMnRsZVYwZ1BTQjJZV3c3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29jbVYwVzJ0bGVWMHBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRGdHJaWGxkTG5CMWMyZ29kbUZzS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGRGdHJaWGxkSUQwZ1czSmxkRnRyWlhsZExDQjJZV3hkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSEpsZER0Y2JpQWdJQ0I5TENCN2ZTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2MzUjViR1ZQWW1wbFkzUTdYRzRnSUgxY2JseHVJQ0JHYjNWdVpHRjBhVzl1TGsxbFpHbGhVWFZsY25rZ1BTQk5aV1JwWVZGMVpYSjVPMXh1ZlNocVVYVmxjbmtwT3lJc0lpOHFJR3B6YUdsdWRDQnBaMjV2Y21VNmMzUmhjblFnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNGhablZ1WTNScGIyNGdLQ1FwSUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVFc5MGFXOXVJRzF2WkhWc1pTNWNiaUFnSUNvZ1FHMXZaSFZzWlNCbWIzVnVaR0YwYVc5dUxtMXZkR2x2Ymx4dUlDQWdLaTljYmx4dUlDQjJZWElnYVc1cGRFTnNZWE56WlhNZ1BTQmJKMjExYVMxbGJuUmxjaWNzSUNkdGRXa3RiR1ZoZG1VblhUdGNiaUFnZG1GeUlHRmpkR2wyWlVOc1lYTnpaWE1nUFNCYkoyMTFhUzFsYm5SbGNpMWhZM1JwZG1VbkxDQW5iWFZwTFd4bFlYWmxMV0ZqZEdsMlpTZGRPMXh1WEc0Z0lIWmhjaUJOYjNScGIyNGdQU0I3WEc0Z0lDQWdZVzVwYldGMFpVbHVPaUJtZFc1amRHbHZiaUFvWld4bGJXVnVkQ3dnWVc1cGJXRjBhVzl1TENCallpa2dlMXh1SUNBZ0lDQWdZVzVwYldGMFpTaDBjblZsTENCbGJHVnRaVzUwTENCaGJtbHRZWFJwYjI0c0lHTmlLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZVzVwYldGMFpVOTFkRG9nWm5WdVkzUnBiMjRnS0dWc1pXMWxiblFzSUdGdWFXMWhkR2x2Yml3Z1kySXBJSHRjYmlBZ0lDQWdJR0Z1YVcxaGRHVW9abUZzYzJVc0lHVnNaVzFsYm5Rc0lHRnVhVzFoZEdsdmJpd2dZMklwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCTmIzWmxLR1IxY21GMGFXOXVMQ0JsYkdWdExDQm1iaWtnZTF4dUlDQWdJSFpoY2lCaGJtbHRMRnh1SUNBZ0lDQWdJQ0J3Y205bkxGeHVJQ0FnSUNBZ0lDQnpkR0Z5ZENBOUlHNTFiR3c3WEc0Z0lDQWdMeThnWTI5dWMyOXNaUzVzYjJjb0oyTmhiR3hsWkNjcE8xeHVYRzRnSUNBZ2FXWWdLR1IxY21GMGFXOXVJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQm1iaTVoY0hCc2VTaGxiR1Z0S1R0Y2JpQWdJQ0FnSUdWc1pXMHVkSEpwWjJkbGNpZ25abWx1YVhOb1pXUXVlbVl1WVc1cGJXRjBaU2NzSUZ0bGJHVnRYU2t1ZEhKcFoyZGxja2hoYm1Sc1pYSW9KMlpwYm1semFHVmtMbnBtTG1GdWFXMWhkR1VuTENCYlpXeGxiVjBwTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHWjFibU4wYVc5dUlHMXZkbVVvZEhNcElIdGNiaUFnSUNBZ0lHbG1JQ2doYzNSaGNuUXBJSE4wWVhKMElEMGdkSE03WEc0Z0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5aHpkR0Z5ZEN3Z2RITXBPMXh1SUNBZ0lDQWdjSEp2WnlBOUlIUnpJQzBnYzNSaGNuUTdYRzRnSUNBZ0lDQm1iaTVoY0hCc2VTaGxiR1Z0S1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSEJ5YjJjZ1BDQmtkWEpoZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0JoYm1sdElEMGdkMmx1Wkc5M0xuSmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2h0YjNabExDQmxiR1Z0S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTVqWVc1alpXeEJibWx0WVhScGIyNUdjbUZ0WlNoaGJtbHRLVHRjYmlBZ0lDQWdJQ0FnWld4bGJTNTBjbWxuWjJWeUtDZG1hVzVwYzJobFpDNTZaaTVoYm1sdFlYUmxKeXdnVzJWc1pXMWRLUzUwY21sbloyVnlTR0Z1Wkd4bGNpZ25abWx1YVhOb1pXUXVlbVl1WVc1cGJXRjBaU2NzSUZ0bGJHVnRYU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHRnVhVzBnUFNCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtHMXZkbVVwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRnVhVzFoZEdWeklHRnVJR1ZzWlcxbGJuUWdhVzRnYjNJZ2IzVjBJSFZ6YVc1bklHRWdRMU5USUhSeVlXNXphWFJwYjI0Z1kyeGhjM011WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUdselNXNGdMU0JFWldacGJtVnpJR2xtSUhSb1pTQmhibWx0WVhScGIyNGdhWE1nYVc0Z2IzSWdiM1YwTGx4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdaV3hsYldWdWRDQXRJR3BSZFdWeWVTQnZjaUJJVkUxTUlHOWlhbVZqZENCMGJ5QmhibWx0WVhSbExseHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWVc1cGJXRjBhVzl1SUMwZ1ExTlRJR05zWVhOeklIUnZJSFZ6WlM1Y2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWTJJZ0xTQkRZV3hzWW1GamF5QjBieUJ5ZFc0Z2QyaGxiaUJoYm1sdFlYUnBiMjRnYVhNZ1ptbHVhWE5vWldRdVhHNGdJQ0FxTDF4dUlDQm1kVzVqZEdsdmJpQmhibWx0WVhSbEtHbHpTVzRzSUdWc1pXMWxiblFzSUdGdWFXMWhkR2x2Yml3Z1kySXBJSHRjYmlBZ0lDQmxiR1Z0Wlc1MElEMGdKQ2hsYkdWdFpXNTBLUzVsY1Nnd0tUdGNibHh1SUNBZ0lHbG1JQ2doWld4bGJXVnVkQzVzWlc1bmRHZ3BJSEpsZEhWeWJqdGNibHh1SUNBZ0lIWmhjaUJwYm1sMFEyeGhjM01nUFNCcGMwbHVJRDhnYVc1cGRFTnNZWE56WlhOYk1GMGdPaUJwYm1sMFEyeGhjM05sYzFzeFhUdGNiaUFnSUNCMllYSWdZV04wYVhabFEyeGhjM01nUFNCcGMwbHVJRDhnWVdOMGFYWmxRMnhoYzNObGMxc3dYU0E2SUdGamRHbDJaVU5zWVhOelpYTmJNVjA3WEc1Y2JpQWdJQ0F2THlCVFpYUWdkWEFnZEdobElHRnVhVzFoZEdsdmJseHVJQ0FnSUhKbGMyVjBLQ2s3WEc1Y2JpQWdJQ0JsYkdWdFpXNTBMbUZrWkVOc1lYTnpLR0Z1YVcxaGRHbHZiaWt1WTNOektDZDBjbUZ1YzJsMGFXOXVKeXdnSjI1dmJtVW5LVHRjYmx4dUlDQWdJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQmxiR1Z0Wlc1MExtRmtaRU5zWVhOektHbHVhWFJEYkdGemN5azdYRzRnSUNBZ0lDQnBaaUFvYVhOSmJpa2daV3hsYldWdWRDNXphRzkzS0NrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkx5QlRkR0Z5ZENCMGFHVWdZVzVwYldGMGFXOXVYRzRnSUNBZ2NtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUdWc1pXMWxiblJiTUYwdWIyWm1jMlYwVjJsa2RHZzdYRzRnSUNBZ0lDQmxiR1Z0Wlc1MExtTnpjeWduZEhKaGJuTnBkR2x2Ymljc0lDY25LUzVoWkdSRGJHRnpjeWhoWTNScGRtVkRiR0Z6Y3lrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkx5QkRiR1ZoYmlCMWNDQjBhR1VnWVc1cGJXRjBhVzl1SUhkb1pXNGdhWFFnWm1sdWFYTm9aWE5jYmlBZ0lDQmxiR1Z0Wlc1MExtOXVaU2hHYjNWdVpHRjBhVzl1TG5SeVlXNXphWFJwYjI1bGJtUW9aV3hsYldWdWRDa3NJR1pwYm1semFDazdYRzVjYmlBZ0lDQXZMeUJJYVdSbGN5QjBhR1VnWld4bGJXVnVkQ0FvWm05eUlHOTFkQ0JoYm1sdFlYUnBiMjV6S1N3Z2NtVnpaWFJ6SUhSb1pTQmxiR1Z0Wlc1MExDQmhibVFnY25WdWN5QmhJR05oYkd4aVlXTnJYRzRnSUNBZ1puVnVZM1JwYjI0Z1ptbHVhWE5vS0NrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZwYzBsdUtTQmxiR1Z0Wlc1MExtaHBaR1VvS1R0Y2JpQWdJQ0FnSUhKbGMyVjBLQ2s3WEc0Z0lDQWdJQ0JwWmlBb1kySXBJR05pTG1Gd2NHeDVLR1ZzWlcxbGJuUXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkpsYzJWMGN5QjBjbUZ1YzJsMGFXOXVjeUJoYm1RZ2NtVnRiM1psY3lCdGIzUnBiMjR0YzNCbFkybG1hV01nWTJ4aGMzTmxjMXh1SUNBZ0lHWjFibU4wYVc5dUlISmxjMlYwS0NrZ2UxeHVJQ0FnSUNBZ1pXeGxiV1Z1ZEZzd1hTNXpkSGxzWlM1MGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0Z1BTQXdPMXh1SUNBZ0lDQWdaV3hsYldWdWRDNXlaVzF2ZG1WRGJHRnpjeWhwYm1sMFEyeGhjM01nS3lBbklDY2dLeUJoWTNScGRtVkRiR0Z6Y3lBcklDY2dKeUFySUdGdWFXMWhkR2x2YmlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1JtOTFibVJoZEdsdmJpNU5iM1psSUQwZ1RXOTJaVHRjYmlBZ1JtOTFibVJoZEdsdmJpNU5iM1JwYjI0Z1BTQk5iM1JwYjI0N1hHNTlLR3BSZFdWeWVTazdJaXdpTHlvZ2FuTm9hVzUwSUdsbmJtOXlaVHB6ZEdGeWRDQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYmlGbWRXNWpkR2x2Ymlna0tTQjdYRzVjYm1aMWJtTjBhVzl1SUZScGJXVnlLR1ZzWlcwc0lHOXdkR2x2Ym5Nc0lHTmlLU0I3WEc0Z0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNc1hHNGdJQ0FnSUNCa2RYSmhkR2x2YmlBOUlHOXdkR2x2Ym5NdVpIVnlZWFJwYjI0c0x5OXZjSFJwYjI1eklHbHpJR0Z1SUc5aWFtVmpkQ0JtYjNJZ1pXRnphV3g1SUdGa1pHbHVaeUJtWldGMGRYSmxjeUJzWVhSbGNpNWNiaUFnSUNBZ0lHNWhiV1ZUY0dGalpTQTlJRTlpYW1WamRDNXJaWGx6S0dWc1pXMHVaR0YwWVNncEtWc3dYU0I4ZkNBbmRHbHRaWEluTEZ4dUlDQWdJQ0FnY21WdFlXbHVJRDBnTFRFc1hHNGdJQ0FnSUNCemRHRnlkQ3hjYmlBZ0lDQWdJSFJwYldWeU8xeHVYRzRnSUhSb2FYTXVhWE5RWVhWelpXUWdQU0JtWVd4elpUdGNibHh1SUNCMGFHbHpMbkpsYzNSaGNuUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlcxaGFXNGdQU0F0TVR0Y2JpQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2RHbHRaWElwTzF4dUlDQWdJSFJvYVhNdWMzUmhjblFvS1R0Y2JpQWdmVnh1WEc0Z0lIUm9hWE11YzNSaGNuUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IwYUdsekxtbHpVR0YxYzJWa0lEMGdabUZzYzJVN1hHNGdJQ0FnTHk4Z2FXWW9JV1ZzWlcwdVpHRjBZU2duY0dGMWMyVmtKeWtwZXlCeVpYUjFjbTRnWm1Gc2MyVTdJSDB2TDIxaGVXSmxJR2x0Y0d4bGJXVnVkQ0IwYUdseklITmhibWwwZVNCamFHVmpheUJwWmlCMWMyVmtJR1p2Y2lCdmRHaGxjaUIwYUdsdVozTXVYRzRnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLSFJwYldWeUtUdGNiaUFnSUNCeVpXMWhhVzRnUFNCeVpXMWhhVzRnUEQwZ01DQS9JR1IxY21GMGFXOXVJRG9nY21WdFlXbHVPMXh1SUNBZ0lHVnNaVzB1WkdGMFlTZ25jR0YxYzJWa0p5d2dabUZzYzJVcE8xeHVJQ0FnSUhOMFlYSjBJRDBnUkdGMFpTNXViM2NvS1R0Y2JpQWdJQ0IwYVcxbGNpQTlJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUdsbUtHOXdkR2x2Ym5NdWFXNW1hVzVwZEdVcGUxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1eVpYTjBZWEowS0NrN0x5OXlaWEoxYmlCMGFHVWdkR2x0WlhJdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9ZMklnSmlZZ2RIbHdaVzltSUdOaUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN0lHTmlLQ2s3SUgxY2JpQWdJQ0I5TENCeVpXMWhhVzRwTzF4dUlDQWdJR1ZzWlcwdWRISnBaMmRsY2loZ2RHbHRaWEp6ZEdGeWRDNTZaaTRrZTI1aGJXVlRjR0ZqWlgxZ0tUdGNiaUFnZlZ4dVhHNGdJSFJvYVhNdWNHRjFjMlVnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMGFHbHpMbWx6VUdGMWMyVmtJRDBnZEhKMVpUdGNiaUFnSUNBdkwybG1LR1ZzWlcwdVpHRjBZU2duY0dGMWMyVmtKeWtwZXlCeVpYUjFjbTRnWm1Gc2MyVTdJSDB2TDIxaGVXSmxJR2x0Y0d4bGJXVnVkQ0IwYUdseklITmhibWwwZVNCamFHVmpheUJwWmlCMWMyVmtJR1p2Y2lCdmRHaGxjaUIwYUdsdVozTXVYRzRnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLSFJwYldWeUtUdGNiaUFnSUNCbGJHVnRMbVJoZEdFb0ozQmhkWE5sWkNjc0lIUnlkV1VwTzF4dUlDQWdJSFpoY2lCbGJtUWdQU0JFWVhSbExtNXZkeWdwTzF4dUlDQWdJSEpsYldGcGJpQTlJSEpsYldGcGJpQXRJQ2hsYm1RZ0xTQnpkR0Z5ZENrN1hHNGdJQ0FnWld4bGJTNTBjbWxuWjJWeUtHQjBhVzFsY25CaGRYTmxaQzU2Wmk0a2UyNWhiV1ZUY0dGalpYMWdLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZKMWJuTWdZU0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIzYUdWdUlHbHRZV2RsY3lCaGNtVWdablZzYkhrZ2JHOWhaR1ZrTGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHbHRZV2RsY3lBdElFbHRZV2RsS0hNcElIUnZJR05vWldOcklHbG1JR3h2WVdSbFpDNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzMGdZMkZzYkdKaFkyc2dMU0JHZFc1amRHbHZiaUIwYnlCbGVHVmpkWFJsSUhkb1pXNGdhVzFoWjJVZ2FYTWdablZzYkhrZ2JHOWhaR1ZrTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ2YmtsdFlXZGxjMHh2WVdSbFpDaHBiV0ZuWlhNc0lHTmhiR3hpWVdOcktYdGNiaUFnZG1GeUlITmxiR1lnUFNCMGFHbHpMRnh1SUNBZ0lDQWdkVzVzYjJGa1pXUWdQU0JwYldGblpYTXViR1Z1WjNSb08xeHVYRzRnSUdsbUlDaDFibXh2WVdSbFpDQTlQVDBnTUNrZ2UxeHVJQ0FnSUdOaGJHeGlZV05yS0NrN1hHNGdJSDFjYmx4dUlDQnBiV0ZuWlhNdVpXRmphQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0F2THlCRGFHVmpheUJwWmlCcGJXRm5aU0JwY3lCc2IyRmtaV1JjYmlBZ0lDQnBaaUFvZEdocGN5NWpiMjF3YkdWMFpTQjhmQ0FvZEdocGN5NXlaV0ZrZVZOMFlYUmxJRDA5UFNBMEtTQjhmQ0FvZEdocGN5NXlaV0ZrZVZOMFlYUmxJRDA5UFNBblkyOXRjR3hsZEdVbktTa2dlMXh1SUNBZ0lDQWdjMmx1WjJ4bFNXMWhaMlZNYjJGa1pXUW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdSbTl5WTJVZ2JHOWhaQ0IwYUdVZ2FXMWhaMlZjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklHWnBlQ0JtYjNJZ1NVVXVJRk5sWlNCb2RIUndjem92TDJOemN5MTBjbWxqYTNNdVkyOXRMM051YVhCd1pYUnpMMnB4ZFdWeWVTOW1hWGhwYm1jdGJHOWhaQzFwYmkxcFpTMW1iM0l0WTJGamFHVmtMV2x0WVdkbGN5OWNiaUFnSUNBZ0lIWmhjaUJ6Y21NZ1BTQWtLSFJvYVhNcExtRjBkSElvSjNOeVl5Y3BPMXh1SUNBZ0lDQWdKQ2gwYUdsektTNWhkSFJ5S0NkemNtTW5MQ0J6Y21NZ0t5QW9jM0pqTG1sdVpHVjRUMllvSno4bktTQStQU0F3SUQ4Z0p5WW5JRG9nSno4bktTQXJJQ2h1WlhjZ1JHRjBaU2dwTG1kbGRGUnBiV1VvS1NrcE8xeHVJQ0FnSUNBZ0pDaDBhR2x6S1M1dmJtVW9KMnh2WVdRbkxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzJsdVoyeGxTVzFoWjJWTWIyRmtaV1FvS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1Y2JpQWdablZ1WTNScGIyNGdjMmx1WjJ4bFNXMWhaMlZNYjJGa1pXUW9LU0I3WEc0Z0lDQWdkVzVzYjJGa1pXUXRMVHRjYmlBZ0lDQnBaaUFvZFc1c2IyRmtaV1FnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmtadmRXNWtZWFJwYjI0dVZHbHRaWElnUFNCVWFXMWxjanRjYmtadmRXNWtZWFJwYjI0dWIyNUpiV0ZuWlhOTWIyRmtaV1FnUFNCdmJrbHRZV2RsYzB4dllXUmxaRHRjYmx4dWZTaHFVWFZsY25rcE8xeHVJaXdpTHlvZ2FuTm9hVzUwSUdsbmJtOXlaVHB6ZEdGeWRDQXFMMXh1WEc0dkx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0dkx5b3FWMjl5YXlCcGJuTndhWEpsWkNCaWVTQnRkV3gwYVhCc1pTQnFjWFZsY25rZ2MzZHBjR1VnY0d4MVoybHVjeW9xWEc0dkx5b3FSRzl1WlNCaWVTQlpiMmhoYVNCQmNtRnlZWFFnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0dkx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0b1puVnVZM1JwYjI0b0pDa2dlMXh1WEc0Z0lDUXVjM0J2ZEZOM2FYQmxJRDBnZTF4dUlDQWdJSFpsY25OcGIyNDZJQ2N4TGpBdU1DY3NYRzRnSUNBZ1pXNWhZbXhsWkRvZ0oyOXVkRzkxWTJoemRHRnlkQ2NnYVc0Z1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTEZ4dUlDQWdJSEJ5WlhabGJuUkVaV1poZFd4ME9pQm1ZV3h6WlN4Y2JpQWdJQ0J0YjNabFZHaHlaWE5vYjJ4a09pQTNOU3hjYmlBZ0lDQjBhVzFsVkdoeVpYTm9iMnhrT2lBeU1EQmNiaUFnZlR0Y2JseHVJQ0IyWVhJZ0lDQnpkR0Z5ZEZCdmMxZ3NYRzRnSUNBZ0lDQWdJSE4wWVhKMFVHOXpXU3hjYmlBZ0lDQWdJQ0FnYzNSaGNuUlVhVzFsTEZ4dUlDQWdJQ0FnSUNCbGJHRndjMlZrVkdsdFpTeGNiaUFnSUNBZ0lDQWdhWE5OYjNacGJtY2dQU0JtWVd4elpUdGNibHh1SUNCbWRXNWpkR2x2YmlCdmJsUnZkV05vUlc1a0tDa2dlMXh1SUNBZ0lDOHZJQ0JoYkdWeWRDaDBhR2x6S1R0Y2JpQWdJQ0IwYUdsekxuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb2JXOTJaU2NzSUc5dVZHOTFZMmhOYjNabEtUdGNiaUFnSUNCMGFHbHpMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9aVzVrSnl3Z2IyNVViM1ZqYUVWdVpDazdYRzRnSUNBZ2FYTk5iM1pwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHOXVWRzkxWTJoTmIzWmxLR1VwSUh0Y2JpQWdJQ0JwWmlBb0pDNXpjRzkwVTNkcGNHVXVjSEpsZG1WdWRFUmxabUYxYkhRcElIc2daUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPeUI5WEc0Z0lDQWdhV1lvYVhOTmIzWnBibWNwSUh0Y2JpQWdJQ0FnSUhaaGNpQjRJRDBnWlM1MGIzVmphR1Z6V3pCZExuQmhaMlZZTzF4dUlDQWdJQ0FnZG1GeUlIa2dQU0JsTG5SdmRXTm9aWE5iTUYwdWNHRm5aVms3WEc0Z0lDQWdJQ0IyWVhJZ1pIZ2dQU0J6ZEdGeWRGQnZjMWdnTFNCNE8xeHVJQ0FnSUNBZ2RtRnlJR1I1SUQwZ2MzUmhjblJRYjNOWklDMGdlVHRjYmlBZ0lDQWdJSFpoY2lCa2FYSTdYRzRnSUNBZ0lDQmxiR0Z3YzJWa1ZHbHRaU0E5SUc1bGR5QkVZWFJsS0NrdVoyVjBWR2x0WlNncElDMGdjM1JoY25SVWFXMWxPMXh1SUNBZ0lDQWdhV1lvVFdGMGFDNWhZbk1vWkhncElENDlJQ1F1YzNCdmRGTjNhWEJsTG0xdmRtVlVhSEpsYzJodmJHUWdKaVlnWld4aGNITmxaRlJwYldVZ1BEMGdKQzV6Y0c5MFUzZHBjR1V1ZEdsdFpWUm9jbVZ6YUc5c1pDa2dlMXh1SUNBZ0lDQWdJQ0JrYVhJZ1BTQmtlQ0ErSURBZ1B5QW5iR1ZtZENjZ09pQW5jbWxuYUhRbk8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5OGdaV3h6WlNCcFppaE5ZWFJvTG1GaWN5aGtlU2tnUGowZ0pDNXpjRzkwVTNkcGNHVXViVzkyWlZSb2NtVnphRzlzWkNBbUppQmxiR0Z3YzJWa1ZHbHRaU0E4UFNBa0xuTndiM1JUZDJsd1pTNTBhVzFsVkdoeVpYTm9iMnhrS1NCN1hHNGdJQ0FnSUNBdkx5QWdJR1JwY2lBOUlHUjVJRDRnTUNBL0lDZGtiM2R1SnlBNklDZDFjQ2M3WEc0Z0lDQWdJQ0F2THlCOVhHNGdJQ0FnSUNCcFppaGthWElwSUh0Y2JpQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQnZibFJ2ZFdOb1JXNWtMbU5oYkd3b2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUNRb2RHaHBjeWt1ZEhKcFoyZGxjaWduYzNkcGNHVW5MQ0JrYVhJcExuUnlhV2RuWlhJb1lITjNhWEJsSkh0a2FYSjlZQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYjI1VWIzVmphRk4wWVhKMEtHVXBJSHRjYmlBZ0lDQnBaaUFvWlM1MGIzVmphR1Z6TG14bGJtZDBhQ0E5UFNBeEtTQjdYRzRnSUNBZ0lDQnpkR0Z5ZEZCdmMxZ2dQU0JsTG5SdmRXTm9aWE5iTUYwdWNHRm5aVmc3WEc0Z0lDQWdJQ0J6ZEdGeWRGQnZjMWtnUFNCbExuUnZkV05vWlhOYk1GMHVjR0ZuWlZrN1hHNGdJQ0FnSUNCcGMwMXZkbWx1WnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0J6ZEdGeWRGUnBiV1VnUFNCdVpYY2dSR0YwWlNncExtZGxkRlJwYldVb0tUdGNiaUFnSUNBZ0lIUm9hWE11WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaHRiM1psSnl3Z2IyNVViM1ZqYUUxdmRtVXNJR1poYkhObEtUdGNiaUFnSUNBZ0lIUm9hWE11WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaGxibVFuTENCdmJsUnZkV05vUlc1a0xDQm1ZV3h6WlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2FXNXBkQ2dwSUh0Y2JpQWdJQ0IwYUdsekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ0ppWWdkR2hwY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphSE4wWVhKMEp5d2diMjVVYjNWamFGTjBZWEowTENCbVlXeHpaU2s3WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCMFpXRnlaRzkzYmlncElIdGNiaUFnSUNCMGFHbHpMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9jM1JoY25RbkxDQnZibFJ2ZFdOb1UzUmhjblFwTzF4dUlDQjlYRzVjYmlBZ0pDNWxkbVZ1ZEM1emNHVmphV0ZzTG5OM2FYQmxJRDBnZXlCelpYUjFjRG9nYVc1cGRDQjlPMXh1WEc0Z0lDUXVaV0ZqYUNoYkoyeGxablFuTENBbmRYQW5MQ0FuWkc5M2JpY3NJQ2R5YVdkb2RDZGRMQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSkM1bGRtVnVkQzV6Y0dWamFXRnNXMkJ6ZDJsd1pTUjdkR2hwYzMxZ1hTQTlJSHNnYzJWMGRYQTZJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FrS0hSb2FYTXBMbTl1S0NkemQybHdaU2NzSUNRdWJtOXZjQ2s3WEc0Z0lDQWdmU0I5TzF4dUlDQjlLVHRjYm4wcEtHcFJkV1Z5ZVNrN1hHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29nVFdWMGFHOWtJR1p2Y2lCaFpHUnBibWNnY0hOMVpXUnZJR1J5WVdjZ1pYWmxiblJ6SUhSdklHVnNaVzFsYm5SeklDcGNiaUFxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzRoWm5WdVkzUnBiMjRvSkNsN1hHNGdJQ1F1Wm00dVlXUmtWRzkxWTJnZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lIUm9hWE11WldGamFDaG1kVzVqZEdsdmJpaHBMR1ZzS1h0Y2JpQWdJQ0FnSUNRb1pXd3BMbUpwYm1Rb0ozUnZkV05vYzNSaGNuUWdkRzkxWTJodGIzWmxJSFJ2ZFdOb1pXNWtJSFJ2ZFdOb1kyRnVZMlZzSnl4bWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQXZMM2RsSUhCaGMzTWdkR2hsSUc5eWFXZHBibUZzSUdWMlpXNTBJRzlpYW1WamRDQmlaV05oZFhObElIUm9aU0JxVVhWbGNua2daWFpsYm5SY2JpQWdJQ0FnSUNBZ0x5OXZZbXBsWTNRZ2FYTWdibTl5YldGc2FYcGxaQ0IwYnlCM00yTWdjM0JsWTNNZ1lXNWtJR1J2WlhNZ2JtOTBJSEJ5YjNacFpHVWdkR2hsSUZSdmRXTm9UR2x6ZEZ4dUlDQWdJQ0FnSUNCb1lXNWtiR1ZVYjNWamFDaGxkbVZ1ZENrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lIWmhjaUJvWVc1a2JHVlViM1ZqYUNBOUlHWjFibU4wYVc5dUtHVjJaVzUwS1h0Y2JpQWdJQ0FnSUhaaGNpQjBiM1ZqYUdWeklEMGdaWFpsYm5RdVkyaGhibWRsWkZSdmRXTm9aWE1zWEc0Z0lDQWdJQ0FnSUNBZ1ptbHljM1FnUFNCMGIzVmphR1Z6V3pCZExGeHVJQ0FnSUNBZ0lDQWdJR1YyWlc1MFZIbHdaWE1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjNWamFITjBZWEowT2lBbmJXOTFjMlZrYjNkdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdmRXTm9iVzkyWlRvZ0oyMXZkWE5sYlc5MlpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIzVmphR1Z1WkRvZ0oyMXZkWE5sZFhBblhHNGdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxJRDBnWlhabGJuUlVlWEJsYzF0bGRtVnVkQzUwZVhCbFhTeGNiaUFnSUNBZ0lDQWdJQ0J6YVcxMWJHRjBaV1JGZG1WdWRGeHVJQ0FnSUNBZ0lDQTdYRzVjYmlBZ0lDQWdJR2xtS0NkTmIzVnpaVVYyWlc1MEp5QnBiaUIzYVc1a2IzY2dKaVlnZEhsd1pXOW1JSGRwYm1SdmR5NU5iM1Z6WlVWMlpXNTBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJSE5wYlhWc1lYUmxaRVYyWlc1MElEMGdibVYzSUhkcGJtUnZkeTVOYjNWelpVVjJaVzUwS0hSNWNHVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBblluVmlZbXhsY3ljNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0oyTmhibU5sYkdGaWJHVW5PaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ2R6WTNKbFpXNVlKem9nWm1seWMzUXVjMk55WldWdVdDeGNiaUFnSUNBZ0lDQWdJQ0FuYzJOeVpXVnVXU2M2SUdacGNuTjBMbk5qY21WbGJsa3NYRzRnSUNBZ0lDQWdJQ0FnSjJOc2FXVnVkRmduT2lCbWFYSnpkQzVqYkdsbGJuUllMRnh1SUNBZ0lDQWdJQ0FnSUNkamJHbGxiblJaSnpvZ1ptbHljM1F1WTJ4cFpXNTBXVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhOcGJYVnNZWFJsWkVWMlpXNTBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSWFpsYm5Rb0owMXZkWE5sUlhabGJuUW5LVHRjYmlBZ0lDQWdJQ0FnYzJsdGRXeGhkR1ZrUlhabGJuUXVhVzVwZEUxdmRYTmxSWFpsYm5Rb2RIbHdaU3dnZEhKMVpTd2dkSEoxWlN3Z2QybHVaRzkzTENBeExDQm1hWEp6ZEM1elkzSmxaVzVZTENCbWFYSnpkQzV6WTNKbFpXNVpMQ0JtYVhKemRDNWpiR2xsYm5SWUxDQm1hWEp6ZEM1amJHbGxiblJaTENCbVlXeHpaU3dnWm1Gc2MyVXNJR1poYkhObExDQm1ZV3h6WlN3Z01DOHFiR1ZtZENvdkxDQnVkV3hzS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdacGNuTjBMblJoY21kbGRDNWthWE53WVhSamFFVjJaVzUwS0hOcGJYVnNZWFJsWkVWMlpXNTBLVHRjYmlBZ0lDQjlPMXh1SUNCOU8xeHVmU2hxVVhWbGNua3BPMXh1WEc1Y2JpOHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVMeThxS2taeWIyMGdkR2hsSUdwUmRXVnllU0JOYjJKcGJHVWdUR2xpY21GeWVTb3FYRzR2THlvcWJtVmxaQ0IwYnlCeVpXTnlaV0YwWlNCbWRXNWpkR2x2Ym1Gc2FYUjVLaXBjYmk4dktpcGhibVFnZEhKNUlIUnZJR2x0Y0hKdmRtVWdhV1lnY0c5emMybGliR1VxS2x4dUx5OHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNiaThxSUZKbGJXOTJhVzVuSUhSb1pTQnFVWFZsY25rZ1puVnVZM1JwYjI0Z0tpb3FLbHh1S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2JpaG1kVzVqZEdsdmJpZ2dKQ3dnZDJsdVpHOTNMQ0IxYm1SbFptbHVaV1FnS1NCN1hHNWNibHgwZG1GeUlDUmtiMk4xYldWdWRDQTlJQ1FvSUdSdlkzVnRaVzUwSUNrc1hHNWNkRngwTHk4Z2MzVndjRzl5ZEZSdmRXTm9JRDBnSkM1dGIySnBiR1V1YzNWd2NHOXlkQzUwYjNWamFDeGNibHgwWEhSMGIzVmphRk4wWVhKMFJYWmxiblFnUFNBbmRHOTFZMmh6ZEdGeWRDY3ZMM04xY0hCdmNuUlViM1ZqYUNBL0lGd2lkRzkxWTJoemRHRnlkRndpSURvZ1hDSnRiM1Z6WldSdmQyNWNJaXhjYmx4MFhIUjBiM1ZqYUZOMGIzQkZkbVZ1ZENBOUlDZDBiM1ZqYUdWdVpDY3ZMM04xY0hCdmNuUlViM1ZqYUNBL0lGd2lkRzkxWTJobGJtUmNJaUE2SUZ3aWJXOTFjMlYxY0Z3aUxGeHVYSFJjZEhSdmRXTm9UVzkyWlVWMlpXNTBJRDBnSjNSdmRXTm9iVzkyWlNjdkwzTjFjSEJ2Y25SVWIzVmphQ0EvSUZ3aWRHOTFZMmh0YjNabFhDSWdPaUJjSW0xdmRYTmxiVzkyWlZ3aU8xeHVYRzVjZEM4dklITmxkSFZ3SUc1bGR5QmxkbVZ1ZENCemFHOXlkR04xZEhOY2JseDBKQzVsWVdOb0tDQW9JRndpZEc5MVkyaHpkR0Z5ZENCMGIzVmphRzF2ZG1VZ2RHOTFZMmhsYm1RZ1hDSWdLMXh1WEhSY2RGd2ljM2RwY0dVZ2MzZHBjR1ZzWldaMElITjNhWEJsY21sbmFIUmNJaUFwTG5Od2JHbDBLQ0JjSWlCY0lpQXBMQ0JtZFc1amRHbHZiaWdnYVN3Z2JtRnRaU0FwSUh0Y2JseHVYSFJjZENRdVptNWJJRzVoYldVZ1hTQTlJR1oxYm1OMGFXOXVLQ0JtYmlBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbWJpQS9JSFJvYVhNdVltbHVaQ2dnYm1GdFpTd2dabTRnS1NBNklIUm9hWE11ZEhKcFoyZGxjaWdnYm1GdFpTQXBPMXh1WEhSY2RIMDdYRzVjYmx4MFhIUXZMeUJxVVhWbGNua2dQQ0F4TGpoY2JseDBYSFJwWmlBb0lDUXVZWFIwY2tadUlDa2dlMXh1WEhSY2RGeDBKQzVoZEhSeVJtNWJJRzVoYldVZ1hTQTlJSFJ5ZFdVN1hHNWNkRngwZlZ4dVhIUjlLVHRjYmx4dVhIUm1kVzVqZEdsdmJpQjBjbWxuWjJWeVEzVnpkRzl0UlhabGJuUW9JRzlpYWl3Z1pYWmxiblJVZVhCbExDQmxkbVZ1ZEN3Z1luVmlZbXhsSUNrZ2UxeHVYSFJjZEhaaGNpQnZjbWxuYVc1aGJGUjVjR1VnUFNCbGRtVnVkQzUwZVhCbE8xeHVYSFJjZEdWMlpXNTBMblI1Y0dVZ1BTQmxkbVZ1ZEZSNWNHVTdYRzVjZEZ4MGFXWWdLQ0JpZFdKaWJHVWdLU0I3WEc1Y2RGeDBYSFFrTG1WMlpXNTBMblJ5YVdkblpYSW9JR1YyWlc1MExDQjFibVJsWm1sdVpXUXNJRzlpYWlBcE8xeHVYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFFrTG1WMlpXNTBMbVJwYzNCaGRHTm9MbU5oYkd3b0lHOWlhaXdnWlhabGJuUWdLVHRjYmx4MFhIUjlYRzVjZEZ4MFpYWmxiblF1ZEhsd1pTQTlJRzl5YVdkcGJtRnNWSGx3WlR0Y2JseDBmVnh1WEc1Y2RDOHZJR0ZzYzI4Z2FHRnVaR3hsY3lCMFlYQm9iMnhrWEc1Y2JseDBMeThnUVd4emJ5Qm9ZVzVrYkdWeklITjNhWEJsYkdWbWRDd2djM2RwY0dWeWFXZG9kRnh1WEhRa0xtVjJaVzUwTG5Od1pXTnBZV3d1YzNkcGNHVWdQU0I3WEc1Y2JseDBYSFF2THlCTmIzSmxJSFJvWVc0Z2RHaHBjeUJvYjNKcGVtOXVkR0ZzSUdScGMzQnNZV05sYldWdWRDd2dZVzVrSUhkbElIZHBiR3dnYzNWd2NISmxjM01nYzJOeWIyeHNhVzVuTGx4dVhIUmNkSE5qY205c2JGTjFjSEpsYzNOcGIyNVVhSEpsYzJodmJHUTZJRE13TEZ4dVhHNWNkRngwTHk4Z1RXOXlaU0IwYVcxbElIUm9ZVzRnZEdocGN5d2dZVzVrSUdsMElHbHpiaWQwSUdFZ2MzZHBjR1V1WEc1Y2RGeDBaSFZ5WVhScGIyNVVhSEpsYzJodmJHUTZJREV3TURBc1hHNWNibHgwWEhRdkx5QlRkMmx3WlNCb2IzSnBlbTl1ZEdGc0lHUnBjM0JzWVdObGJXVnVkQ0J0ZFhOMElHSmxJRzF2Y21VZ2RHaGhiaUIwYUdsekxseHVYSFJjZEdodmNtbDZiMjUwWVd4RWFYTjBZVzVqWlZSb2NtVnphRzlzWkRvZ2QybHVaRzkzTG1SbGRtbGpaVkJwZUdWc1VtRjBhVzhnUGowZ01pQS9JREUxSURvZ016QXNYRzVjYmx4MFhIUXZMeUJUZDJsd1pTQjJaWEowYVdOaGJDQmthWE53YkdGalpXMWxiblFnYlhWemRDQmlaU0JzWlhOeklIUm9ZVzRnZEdocGN5NWNibHgwWEhSMlpYSjBhV05oYkVScGMzUmhibU5sVkdoeVpYTm9iMnhrT2lCM2FXNWtiM2N1WkdWMmFXTmxVR2w0Wld4U1lYUnBieUErUFNBeUlEOGdNVFVnT2lBek1DeGNibHh1WEhSY2RHZGxkRXh2WTJGMGFXOXVPaUJtZFc1amRHbHZiaUFvSUdWMlpXNTBJQ2tnZTF4dVhIUmNkRngwZG1GeUlIZHBibEJoWjJWWUlEMGdkMmx1Wkc5M0xuQmhaMlZZVDJabWMyVjBMRnh1WEhSY2RGeDBYSFIzYVc1UVlXZGxXU0E5SUhkcGJtUnZkeTV3WVdkbFdVOW1abk5sZEN4Y2JseDBYSFJjZEZ4MGVDQTlJR1YyWlc1MExtTnNhV1Z1ZEZnc1hHNWNkRngwWEhSY2RIa2dQU0JsZG1WdWRDNWpiR2xsYm5SWk8xeHVYRzVjZEZ4MFhIUnBaaUFvSUdWMlpXNTBMbkJoWjJWWklEMDlQU0F3SUNZbUlFMWhkR2d1Wm14dmIzSW9JSGtnS1NBK0lFMWhkR2d1Wm14dmIzSW9JR1YyWlc1MExuQmhaMlZaSUNrZ2ZIeGNibHgwWEhSY2RGeDBaWFpsYm5RdWNHRm5aVmdnUFQwOUlEQWdKaVlnVFdGMGFDNW1iRzl2Y2lnZ2VDQXBJRDRnVFdGMGFDNW1iRzl2Y2lnZ1pYWmxiblF1Y0dGblpWZ2dLU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJwVDFNMElHTnNhV1Z1ZEZndlkyeHBaVzUwV1NCb1lYWmxJSFJvWlNCMllXeDFaU0IwYUdGMElITm9iM1ZzWkNCb1lYWmxJR0psWlc1Y2JseDBYSFJjZEZ4MEx5OGdhVzRnY0dGblpWZ3ZjR0ZuWlZrdUlGZG9hV3hsSUhCaFoyVllMM0JoWjJVdklHaGhkbVVnZEdobElIWmhiSFZsSURCY2JseDBYSFJjZEZ4MGVDQTlJSGdnTFNCM2FXNVFZV2RsV0R0Y2JseDBYSFJjZEZ4MGVTQTlJSGtnTFNCM2FXNVFZV2RsV1R0Y2JseDBYSFJjZEgwZ1pXeHpaU0JwWmlBb0lIa2dQQ0FvSUdWMlpXNTBMbkJoWjJWWklDMGdkMmx1VUdGblpWa3BJSHg4SUhnZ1BDQW9JR1YyWlc1MExuQmhaMlZZSUMwZ2QybHVVR0ZuWlZnZ0tTQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QlRiMjFsSUVGdVpISnZhV1FnWW5KdmQzTmxjbk1nYUdGMlpTQjBiM1JoYkd4NUlHSnZaM1Z6SUhaaGJIVmxjeUJtYjNJZ1kyeHBaVzUwV0M5WlhHNWNkRngwWEhSY2RDOHZJSGRvWlc0Z2MyTnliMnhzYVc1bkwzcHZiMjFwYm1jZ1lTQndZV2RsTGlCRVpYUmxZM1JoWW14bElITnBibU5sSUdOc2FXVnVkRmd2WTJ4cFpXNTBXVnh1WEhSY2RGeDBYSFF2THlCemFHOTFiR1FnYm1WMlpYSWdZbVVnYzIxaGJHeGxjaUIwYUdGdUlIQmhaMlZZTDNCaFoyVlpJRzFwYm5WeklIQmhaMlVnYzJOeWIyeHNYRzVjZEZ4MFhIUmNkSGdnUFNCbGRtVnVkQzV3WVdkbFdDQXRJSGRwYmxCaFoyVllPMXh1WEhSY2RGeDBYSFI1SUQwZ1pYWmxiblF1Y0dGblpWa2dMU0IzYVc1UVlXZGxXVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJSHRjYmx4MFhIUmNkRngwZURvZ2VDeGNibHgwWEhSY2RGeDBlVG9nZVZ4dVhIUmNkRngwZlR0Y2JseDBYSFI5TEZ4dVhHNWNkRngwYzNSaGNuUTZJR1oxYm1OMGFXOXVLQ0JsZG1WdWRDQXBJSHRjYmx4MFhIUmNkSFpoY2lCa1lYUmhJRDBnWlhabGJuUXViM0pwWjJsdVlXeEZkbVZ1ZEM1MGIzVmphR1Z6SUQ5Y2JseDBYSFJjZEZ4MFhIUmxkbVZ1ZEM1dmNtbG5hVzVoYkVWMlpXNTBMblJ2ZFdOb1pYTmJJREFnWFNBNklHVjJaVzUwTEZ4dVhIUmNkRngwWEhSc2IyTmhkR2x2YmlBOUlDUXVaWFpsYm5RdWMzQmxZMmxoYkM1emQybHdaUzVuWlhSTWIyTmhkR2x2YmlnZ1pHRjBZU0FwTzF4dVhIUmNkRngwY21WMGRYSnVJSHRjYmx4MFhIUmNkRngwWEhSY2RIUnBiV1U2SUNnZ2JtVjNJRVJoZEdVb0tTQXBMbWRsZEZScGJXVW9LU3hjYmx4MFhIUmNkRngwWEhSY2RHTnZiM0prY3pvZ1d5QnNiMk5oZEdsdmJpNTRMQ0JzYjJOaGRHbHZiaTU1SUYwc1hHNWNkRngwWEhSY2RGeDBYSFJ2Y21sbmFXNDZJQ1FvSUdWMlpXNTBMblJoY21kbGRDQXBYRzVjZEZ4MFhIUmNkRngwZlR0Y2JseDBYSFI5TEZ4dVhHNWNkRngwYzNSdmNEb2dablZ1WTNScGIyNG9JR1YyWlc1MElDa2dlMXh1WEhSY2RGeDBkbUZ5SUdSaGRHRWdQU0JsZG1WdWRDNXZjbWxuYVc1aGJFVjJaVzUwTG5SdmRXTm9aWE1nUDF4dVhIUmNkRngwWEhSY2RHVjJaVzUwTG05eWFXZHBibUZzUlhabGJuUXVkRzkxWTJobGMxc2dNQ0JkSURvZ1pYWmxiblFzWEc1Y2RGeDBYSFJjZEd4dlkyRjBhVzl1SUQwZ0pDNWxkbVZ1ZEM1emNHVmphV0ZzTG5OM2FYQmxMbWRsZEV4dlkyRjBhVzl1S0NCa1lYUmhJQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHbHRaVG9nS0NCdVpYY2dSR0YwWlNncElDa3VaMlYwVkdsdFpTZ3BMRnh1WEhSY2RGeDBYSFJjZEZ4MFkyOXZjbVJ6T2lCYklHeHZZMkYwYVc5dUxuZ3NJR3h2WTJGMGFXOXVMbmtnWFZ4dVhIUmNkRngwWEhSY2RIMDdYRzVjZEZ4MGZTeGNibHh1WEhSY2RHaGhibVJzWlZOM2FYQmxPaUJtZFc1amRHbHZiaWdnYzNSaGNuUXNJSE4wYjNBc0lIUm9hWE5QWW1wbFkzUXNJRzl5YVdkVVlYSm5aWFFnS1NCN1hHNWNkRngwWEhScFppQW9JSE4wYjNBdWRHbHRaU0F0SUhOMFlYSjBMblJwYldVZ1BDQWtMbVYyWlc1MExuTndaV05wWVd3dWMzZHBjR1V1WkhWeVlYUnBiMjVVYUhKbGMyaHZiR1FnSmlaY2JseDBYSFJjZEZ4MFRXRjBhQzVoWW5Nb0lITjBZWEowTG1OdmIzSmtjMXNnTUNCZElDMGdjM1J2Y0M1amIyOXlaSE5iSURBZ1hTQXBJRDRnSkM1bGRtVnVkQzV6Y0dWamFXRnNMbk4zYVhCbExtaHZjbWw2YjI1MFlXeEVhWE4wWVc1alpWUm9jbVZ6YUc5c1pDQW1KbHh1WEhSY2RGeDBYSFJOWVhSb0xtRmljeWdnYzNSaGNuUXVZMjl2Y21Seld5QXhJRjBnTFNCemRHOXdMbU52YjNKa2Mxc2dNU0JkSUNrZ1BDQWtMbVYyWlc1MExuTndaV05wWVd3dWMzZHBjR1V1ZG1WeWRHbGpZV3hFYVhOMFlXNWpaVlJvY21WemFHOXNaQ0FwSUh0Y2JseDBYSFJjZEZ4MGRtRnlJR1JwY21WamRHbHZiaUE5SUhOMFlYSjBMbU52YjNKa2Mxc3dYU0ErSUhOMGIzQXVZMjl2Y21Seld5QXdJRjBnUHlCY0luTjNhWEJsYkdWbWRGd2lJRG9nWENKemQybHdaWEpwWjJoMFhDSTdYRzVjYmx4MFhIUmNkRngwZEhKcFoyZGxja04xYzNSdmJVVjJaVzUwS0NCMGFHbHpUMkpxWldOMExDQmNJbk4zYVhCbFhDSXNJQ1F1UlhabGJuUW9JRndpYzNkcGNHVmNJaXdnZXlCMFlYSm5aWFE2SUc5eWFXZFVZWEpuWlhRc0lITjNhWEJsYzNSaGNuUTZJSE4wWVhKMExDQnpkMmx3WlhOMGIzQTZJSE4wYjNBZ2ZTa3NJSFJ5ZFdVZ0tUdGNibHgwWEhSY2RGeDBkSEpwWjJkbGNrTjFjM1J2YlVWMlpXNTBLQ0IwYUdselQySnFaV04wTENCa2FYSmxZM1JwYjI0c0pDNUZkbVZ1ZENnZ1pHbHlaV04wYVc5dUxDQjdJSFJoY21kbGREb2diM0pwWjFSaGNtZGxkQ3dnYzNkcGNHVnpkR0Z5ZERvZ2MzUmhjblFzSUhOM2FYQmxjM1J2Y0RvZ2MzUnZjQ0I5SUNrc0lIUnlkV1VnS1R0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhSeWRXVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JseDBYSFI5TEZ4dVhHNWNkRngwTHk4Z1ZHaHBjeUJ6WlhKMlpYTWdZWE1nWVNCbWJHRm5JSFJ2SUdWdWMzVnlaU0IwYUdGMElHRjBJRzF2YzNRZ2IyNWxJSE4zYVhCbElHVjJaVzUwSUdWMlpXNTBJR2x6WEc1Y2RGeDBMeThnYVc0Z2QyOXlheUJoZENCaGJua2daMmwyWlc0Z2RHbHRaVnh1WEhSY2RHVjJaVzUwU1c1UWNtOW5jbVZ6Y3pvZ1ptRnNjMlVzWEc1Y2JseDBYSFJ6WlhSMWNEb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFIyWVhJZ1pYWmxiblJ6TEZ4dVhIUmNkRngwWEhSMGFHbHpUMkpxWldOMElEMGdkR2hwY3l4Y2JseDBYSFJjZEZ4MEpIUm9hWE1nUFNBa0tDQjBhR2x6VDJKcVpXTjBJQ2tzWEc1Y2RGeDBYSFJjZEdOdmJuUmxlSFFnUFNCN2ZUdGNibHh1WEhSY2RGeDBMeThnVW1WMGNtbGxkbVVnZEdobElHVjJaVzUwY3lCa1lYUmhJR1p2Y2lCMGFHbHpJR1ZzWlcxbGJuUWdZVzVrSUdGa1pDQjBhR1VnYzNkcGNHVWdZMjl1ZEdWNGRGeHVYSFJjZEZ4MFpYWmxiblJ6SUQwZ0pDNWtZWFJoS0NCMGFHbHpMQ0JjSW0xdlltbHNaUzFsZG1WdWRITmNJaUFwTzF4dVhIUmNkRngwYVdZZ0tDQWhaWFpsYm5SeklDa2dlMXh1WEhSY2RGeDBYSFJsZG1WdWRITWdQU0I3SUd4bGJtZDBhRG9nTUNCOU8xeHVYSFJjZEZ4MFhIUWtMbVJoZEdFb0lIUm9hWE1zSUZ3aWJXOWlhV3hsTFdWMlpXNTBjMXdpTENCbGRtVnVkSE1nS1R0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdWMlpXNTBjeTVzWlc1bmRHZ3JLenRjYmx4MFhIUmNkR1YyWlc1MGN5NXpkMmx3WlNBOUlHTnZiblJsZUhRN1hHNWNibHgwWEhSY2RHTnZiblJsZUhRdWMzUmhjblFnUFNCbWRXNWpkR2x2YmlnZ1pYWmxiblFnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnUW1GcGJDQnBaaUIzWlNkeVpTQmhiSEpsWVdSNUlIZHZjbXRwYm1jZ2IyNGdZU0J6ZDJsd1pTQmxkbVZ1ZEZ4dVhIUmNkRngwWEhScFppQW9JQ1F1WlhabGJuUXVjM0JsWTJsaGJDNXpkMmx3WlM1bGRtVnVkRWx1VUhKdlozSmxjM01nS1NCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkQ1F1WlhabGJuUXVjM0JsWTJsaGJDNXpkMmx3WlM1bGRtVnVkRWx1VUhKdlozSmxjM01nUFNCMGNuVmxPMXh1WEc1Y2RGeDBYSFJjZEhaaGNpQnpkRzl3TEZ4dVhIUmNkRngwWEhSY2RITjBZWEowSUQwZ0pDNWxkbVZ1ZEM1emNHVmphV0ZzTG5OM2FYQmxMbk4wWVhKMEtDQmxkbVZ1ZENBcExGeHVYSFJjZEZ4MFhIUmNkRzl5YVdkVVlYSm5aWFFnUFNCbGRtVnVkQzUwWVhKblpYUXNYRzVjZEZ4MFhIUmNkRngwWlcxcGRIUmxaQ0E5SUdaaGJITmxPMXh1WEc1Y2RGeDBYSFJjZEdOdmJuUmxlSFF1Ylc5MlpTQTlJR1oxYm1OMGFXOXVLQ0JsZG1WdWRDQXBJSHRjYmx4MFhIUmNkRngwWEhScFppQW9JQ0Z6ZEdGeWRDQjhmQ0JsZG1WdWRDNXBjMFJsWm1GMWJIUlFjbVYyWlc1MFpXUW9LU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUnpkRzl3SUQwZ0pDNWxkbVZ1ZEM1emNHVmphV0ZzTG5OM2FYQmxMbk4wYjNBb0lHVjJaVzUwSUNrN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NBaFpXMXBkSFJsWkNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEdWdGFYUjBaV1FnUFNBa0xtVjJaVzUwTG5Od1pXTnBZV3d1YzNkcGNHVXVhR0Z1Wkd4bFUzZHBjR1VvSUhOMFlYSjBMQ0J6ZEc5d0xDQjBhR2x6VDJKcVpXTjBMQ0J2Y21sblZHRnlaMlYwSUNrN1hHNWNkRngwWEhSY2RGeDBYSFJwWmlBb0lHVnRhWFIwWldRZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnVW1WelpYUWdkR2hsSUdOdmJuUmxlSFFnZEc4Z2JXRnJaU0IzWVhrZ1ptOXlJSFJvWlNCdVpYaDBJSE4zYVhCbElHVjJaVzUwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQ1F1WlhabGJuUXVjM0JsWTJsaGJDNXpkMmx3WlM1bGRtVnVkRWx1VUhKdlozSmxjM01nUFNCbVlXeHpaVHRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MEx5OGdjSEpsZG1WdWRDQnpZM0p2Ykd4cGJtZGNibHgwWEhSY2RGeDBYSFJwWmlBb0lFMWhkR2d1WVdKektDQnpkR0Z5ZEM1amIyOXlaSE5iSURBZ1hTQXRJSE4wYjNBdVkyOXZjbVJ6V3lBd0lGMGdLU0ErSUNRdVpYWmxiblF1YzNCbFkybGhiQzV6ZDJsd1pTNXpZM0p2Ykd4VGRYQnlaWE56YVc5dVZHaHlaWE5vYjJ4a0lDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFpYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMDdYRzVjYmx4MFhIUmNkRngwWTI5dWRHVjRkQzV6ZEc5d0lEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiV2wwZEdWa0lEMGdkSEoxWlR0Y2JseHVYSFJjZEZ4MFhIUmNkRngwTHk4Z1VtVnpaWFFnZEdobElHTnZiblJsZUhRZ2RHOGdiV0ZyWlNCM1lYa2dabTl5SUhSb1pTQnVaWGgwSUhOM2FYQmxJR1YyWlc1MFhHNWNkRngwWEhSY2RGeDBYSFFrTG1WMlpXNTBMbk53WldOcFlXd3VjM2RwY0dVdVpYWmxiblJKYmxCeWIyZHlaWE56SUQwZ1ptRnNjMlU3WEc1Y2RGeDBYSFJjZEZ4MFhIUWtaRzlqZFcxbGJuUXViMlptS0NCMGIzVmphRTF2ZG1WRmRtVnVkQ3dnWTI5dWRHVjRkQzV0YjNabElDazdYRzVjZEZ4MFhIUmNkRngwWEhSamIyNTBaWGgwTG0xdmRtVWdQU0J1ZFd4c08xeHVYSFJjZEZ4MFhIUjlPMXh1WEc1Y2RGeDBYSFJjZENSa2IyTjFiV1Z1ZEM1dmJpZ2dkRzkxWTJoTmIzWmxSWFpsYm5Rc0lHTnZiblJsZUhRdWJXOTJaU0FwWEc1Y2RGeDBYSFJjZEZ4MExtOXVaU2dnZEc5MVkyaFRkRzl3UlhabGJuUXNJR052Ym5SbGVIUXVjM1J2Y0NBcE8xeHVYSFJjZEZ4MGZUdGNibHgwWEhSY2RDUjBhR2x6TG05dUtDQjBiM1ZqYUZOMFlYSjBSWFpsYm5Rc0lHTnZiblJsZUhRdWMzUmhjblFnS1R0Y2JseDBYSFI5TEZ4dVhHNWNkRngwZEdWaGNtUnZkMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGRtRnlJR1YyWlc1MGN5d2dZMjl1ZEdWNGREdGNibHh1WEhSY2RGeDBaWFpsYm5SeklEMGdKQzVrWVhSaEtDQjBhR2x6TENCY0ltMXZZbWxzWlMxbGRtVnVkSE5jSWlBcE8xeHVYSFJjZEZ4MGFXWWdLQ0JsZG1WdWRITWdLU0I3WEc1Y2RGeDBYSFJjZEdOdmJuUmxlSFFnUFNCbGRtVnVkSE11YzNkcGNHVTdYRzVjZEZ4MFhIUmNkR1JsYkdWMFpTQmxkbVZ1ZEhNdWMzZHBjR1U3WEc1Y2RGeDBYSFJjZEdWMlpXNTBjeTVzWlc1bmRHZ3RMVHRjYmx4MFhIUmNkRngwYVdZZ0tDQmxkbVZ1ZEhNdWJHVnVaM1JvSUQwOVBTQXdJQ2tnZTF4dVhIUmNkRngwWEhSY2RDUXVjbVZ0YjNabFJHRjBZU2dnZEdocGN5d2dYQ0p0YjJKcGJHVXRaWFpsYm5SelhDSWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhScFppQW9JR052Ym5SbGVIUWdLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dZMjl1ZEdWNGRDNXpkR0Z5ZENBcElIdGNibHgwWEhSY2RGeDBYSFFrS0NCMGFHbHpJQ2t1YjJabUtDQjBiM1ZqYUZOMFlYSjBSWFpsYm5Rc0lHTnZiblJsZUhRdWMzUmhjblFnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUnBaaUFvSUdOdmJuUmxlSFF1Ylc5MlpTQXBJSHRjYmx4MFhIUmNkRngwWEhRa1pHOWpkVzFsYm5RdWIyWm1LQ0IwYjNWamFFMXZkbVZGZG1WdWRDd2dZMjl1ZEdWNGRDNXRiM1psSUNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBhV1lnS0NCamIyNTBaWGgwTG5OMGIzQWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MEpHUnZZM1Z0Wlc1MExtOW1aaWdnZEc5MVkyaFRkRzl3UlhabGJuUXNJR052Ym5SbGVIUXVjM1J2Y0NBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5TzF4dVhIUWtMbVZoWTJnb2UxeHVYSFJjZEhOM2FYQmxiR1ZtZERvZ1hDSnpkMmx3WlM1c1pXWjBYQ0lzWEc1Y2RGeDBjM2RwY0dWeWFXZG9kRG9nWENKemQybHdaUzV5YVdkb2RGd2lYRzVjZEgwc0lHWjFibU4wYVc5dUtDQmxkbVZ1ZEN3Z2MyOTFjbU5sUlhabGJuUWdLU0I3WEc1Y2JseDBYSFFrTG1WMlpXNTBMbk53WldOcFlXeGJJR1YyWlc1MElGMGdQU0I3WEc1Y2RGeDBYSFJ6WlhSMWNEb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZENRb0lIUm9hWE1nS1M1aWFXNWtLQ0J6YjNWeVkyVkZkbVZ1ZEN3Z0pDNXViMjl3SUNrN1hHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MGRHVmhjbVJ2ZDI0NklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFFrS0NCMGFHbHpJQ2t1ZFc1aWFXNWtLQ0J6YjNWeVkyVkZkbVZ1ZENBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwN1hHNWNkSDBwTzF4dWZTa29JR3BSZFdWeWVTd2dkR2hwY3lBcE8xeHVLaTljYmlJc0lpOHFJR3B6YUdsdWRDQnBaMjV2Y21VNmMzUmhjblFnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNGhablZ1WTNScGIyNGdLQ1FwSUh0Y2JseHVJQ0IyWVhJZ1RYVjBZWFJwYjI1UFluTmxjblpsY2lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnY0hKbFptbDRaWE1nUFNCYkoxZGxZa3RwZENjc0lDZE5iM29uTENBblR5Y3NJQ2ROY3ljc0lDY25YVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEJ5WldacGVHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCcFppQW9jSEpsWm1sNFpYTmJhVjBnS3lBblRYVjBZWFJwYjI1UFluTmxjblpsY2ljZ2FXNGdkMmx1Wkc5M0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjNhVzVrYjNkYmNISmxabWw0WlhOYmFWMGdLeUFuVFhWMFlYUnBiMjVQWW5ObGNuWmxjaWRkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMG9LVHRjYmx4dUlDQjJZWElnZEhKcFoyZGxjbk1nUFNCbWRXNWpkR2x2YmlBb1pXd3NJSFI1Y0dVcElIdGNiaUFnSUNCbGJDNWtZWFJoS0hSNWNHVXBMbk53YkdsMEtDY2dKeWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYVdRcElIdGNiaUFnSUNBZ0lDUW9KeU1uSUNzZ2FXUXBXM1I1Y0dVZ1BUMDlJQ2RqYkc5elpTY2dQeUFuZEhKcFoyZGxjaWNnT2lBbmRISnBaMmRsY2toaGJtUnNaWEluWFNoMGVYQmxJQ3NnSnk1NlppNTBjbWxuWjJWeUp5d2dXMlZzWFNrN1hHNGdJQ0FnZlNrN1hHNGdJSDA3WEc0Z0lDOHZJRVZzWlcxbGJuUnpJSGRwZEdnZ1cyUmhkR0V0YjNCbGJsMGdkMmxzYkNCeVpYWmxZV3dnWVNCd2JIVm5hVzRnZEdoaGRDQnpkWEJ3YjNKMGN5QnBkQ0IzYUdWdUlHTnNhV05yWldRdVhHNGdJQ1FvWkc5amRXMWxiblFwTG05dUtDZGpiR2xqYXk1NlppNTBjbWxuWjJWeUp5d2dKMXRrWVhSaExXOXdaVzVkSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUnlhV2RuWlhKektDUW9kR2hwY3lrc0lDZHZjR1Z1SnlrN1hHNGdJSDBwTzF4dVhHNGdJQzh2SUVWc1pXMWxiblJ6SUhkcGRHZ2dXMlJoZEdFdFkyeHZjMlZkSUhkcGJHd2dZMnh2YzJVZ1lTQndiSFZuYVc0Z2RHaGhkQ0J6ZFhCd2IzSjBjeUJwZENCM2FHVnVJR05zYVdOclpXUXVYRzRnSUM4dklFbG1JSFZ6WldRZ2QybDBhRzkxZENCaElIWmhiSFZsSUc5dUlGdGtZWFJoTFdOc2IzTmxYU3dnZEdobElHVjJaVzUwSUhkcGJHd2dZblZpWW14bExDQmhiR3h2ZDJsdVp5QnBkQ0IwYnlCamJHOXpaU0JoSUhCaGNtVnVkQ0JqYjIxd2IyNWxiblF1WEc0Z0lDUW9aRzlqZFcxbGJuUXBMbTl1S0NkamJHbGpheTU2Wmk1MGNtbG5aMlZ5Snl3Z0oxdGtZWFJoTFdOc2IzTmxYU2NzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMllYSWdhV1FnUFNBa0tIUm9hWE1wTG1SaGRHRW9KMk5zYjNObEp5azdYRzRnSUNBZ2FXWWdLR2xrS1NCN1hHNGdJQ0FnSUNCMGNtbG5aMlZ5Y3lna0tIUm9hWE1wTENBblkyeHZjMlVuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdKQ2gwYUdsektTNTBjbWxuWjJWeUtDZGpiRzl6WlM1NlppNTBjbWxuWjJWeUp5azdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JseHVJQ0F2THlCRmJHVnRaVzUwY3lCM2FYUm9JRnRrWVhSaExYUnZaMmRzWlYwZ2QybHNiQ0IwYjJkbmJHVWdZU0J3YkhWbmFXNGdkR2hoZENCemRYQndiM0owY3lCcGRDQjNhR1Z1SUdOc2FXTnJaV1F1WEc0Z0lDUW9aRzlqZFcxbGJuUXBMbTl1S0NkamJHbGpheTU2Wmk1MGNtbG5aMlZ5Snl3Z0oxdGtZWFJoTFhSdloyZHNaVjBuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJR2xrSUQwZ0pDaDBhR2x6S1M1a1lYUmhLQ2QwYjJkbmJHVW5LVHRjYmlBZ0lDQnBaaUFvYVdRcElIdGNiaUFnSUNBZ0lIUnlhV2RuWlhKektDUW9kR2hwY3lrc0lDZDBiMmRuYkdVbktUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSkNoMGFHbHpLUzUwY21sbloyVnlLQ2QwYjJkbmJHVXVlbVl1ZEhKcFoyZGxjaWNwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzVjYmlBZ0x5OGdSV3hsYldWdWRITWdkMmwwYUNCYlpHRjBZUzFqYkc5ellXSnNaVjBnZDJsc2JDQnlaWE53YjI1a0lIUnZJR05zYjNObExucG1MblJ5YVdkblpYSWdaWFpsYm5SekxseHVJQ0FrS0dSdlkzVnRaVzUwS1M1dmJpZ25ZMnh2YzJVdWVtWXVkSEpwWjJkbGNpY3NJQ2RiWkdGMFlTMWpiRzl6WVdKc1pWMG5MQ0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVJQ0FnSUdVdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnZG1GeUlHRnVhVzFoZEdsdmJpQTlJQ1FvZEdocGN5a3VaR0YwWVNnblkyeHZjMkZpYkdVbktUdGNibHh1SUNBZ0lHbG1JQ2hoYm1sdFlYUnBiMjRnSVQwOUlDY25LU0I3WEc0Z0lDQWdJQ0JHYjNWdVpHRjBhVzl1TGsxdmRHbHZiaTVoYm1sdFlYUmxUM1YwS0NRb2RHaHBjeWtzSUdGdWFXMWhkR2x2Yml3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FrS0hSb2FYTXBMblJ5YVdkblpYSW9KMk5zYjNObFpDNTZaaWNwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ1FvZEdocGN5a3VabUZrWlU5MWRDZ3BMblJ5YVdkblpYSW9KMk5zYjNObFpDNTZaaWNwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzVjYmlBZ0pDaGtiMk4xYldWdWRDa3ViMjRvSjJadlkzVnpMbnBtTG5SeWFXZG5aWElnWW14MWNpNTZaaTUwY21sbloyVnlKeXdnSjF0a1lYUmhMWFJ2WjJkc1pTMW1iMk4xYzEwbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUdsa0lEMGdKQ2gwYUdsektTNWtZWFJoS0NkMGIyZG5iR1V0Wm05amRYTW5LVHRjYmlBZ0lDQWtLQ2NqSnlBcklHbGtLUzUwY21sbloyVnlTR0Z1Wkd4bGNpZ25kRzluWjJ4bExucG1MblJ5YVdkblpYSW5MQ0JiSkNoMGFHbHpLVjBwTzF4dUlDQjlLVHRjYmx4dUlDQXZLaXBjYmlBZ0tpQkdhWEpsY3lCdmJtTmxJR0ZtZEdWeUlHRnNiQ0J2ZEdobGNpQnpZM0pwY0hSeklHaGhkbVVnYkc5aFpHVmtYRzRnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0tpOWNiaUFnSkNoM2FXNWtiM2NwTG05dUtDZHNiMkZrSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHTm9aV05yVEdsemRHVnVaWEp6S0NrN1hHNGdJSDBwTzF4dVhHNGdJR1oxYm1OMGFXOXVJR05vWldOclRHbHpkR1Z1WlhKektDa2dlMXh1SUNBZ0lHVjJaVzUwYzB4cGMzUmxibVZ5S0NrN1hHNGdJQ0FnY21WemFYcGxUR2x6ZEdWdVpYSW9LVHRjYmlBZ0lDQnpZM0p2Ykd4TWFYTjBaVzVsY2lncE8xeHVJQ0FnSUcxMWRHRjBaVXhwYzNSbGJtVnlLQ2s3WEc0Z0lDQWdZMnh2YzJWdFpVeHBjM1JsYm1WeUtDazdYRzRnSUgxY2JseHVJQ0F2THlvcUtpb3FLaW9xSUc5dWJIa2dabWx5WlhNZ2RHaHBjeUJtZFc1amRHbHZiaUJ2Ym1ObElHOXVJR3h2WVdRc0lHbG1JSFJvWlhKbEozTWdjMjl0WlhSb2FXNW5JSFJ2SUhkaGRHTm9JQ29xS2lvcUtpb3FYRzRnSUdaMWJtTjBhVzl1SUdOc2IzTmxiV1ZNYVhOMFpXNWxjaWh3YkhWbmFXNU9ZVzFsS1NCN1hHNGdJQ0FnZG1GeUlIbGxkR2xDYjNobGN5QTlJQ1FvSjF0a1lYUmhMWGxsZEdrdFltOTRYU2NwTEZ4dUlDQWdJQ0FnSUNCd2JIVm5UbUZ0WlhNZ1BTQmJKMlJ5YjNCa2IzZHVKeXdnSjNSdmIyeDBhWEFuTENBbmNtVjJaV0ZzSjEwN1hHNWNiaUFnSUNCcFppQW9jR3gxWjJsdVRtRnRaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd2JIVm5hVzVPWVcxbElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCd2JIVm5UbUZ0WlhNdWNIVnphQ2h3YkhWbmFXNU9ZVzFsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUhCc2RXZHBiazVoYldVZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUhSNWNHVnZaaUJ3YkhWbmFXNU9ZVzFsV3pCZElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCd2JIVm5UbUZ0WlhNdVkyOXVZMkYwS0hCc2RXZHBiazVoYldVcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduVUd4MVoybHVJRzVoYldWeklHMTFjM1FnWW1VZ2MzUnlhVzVuY3ljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2VXVjBhVUp2ZUdWekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2RtRnlJR3hwYzNSbGJtVnljeUE5SUhCc2RXZE9ZVzFsY3k1dFlYQW9ablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZGpiRzl6WlcxbExucG1MaWNnS3lCdVlXMWxPMXh1SUNBZ0lDQWdmU2t1YW05cGJpZ25JQ2NwTzF4dVhHNGdJQ0FnSUNBa0tIZHBibVJ2ZHlrdWIyWm1LR3hwYzNSbGJtVnljeWt1YjI0b2JHbHpkR1Z1WlhKekxDQm1kVzVqZEdsdmJpQW9aU3dnY0d4MVoybHVTV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJzZFdkcGJpQTlJR1V1Ym1GdFpYTndZV05sTG5Od2JHbDBLQ2N1SnlsYk1GMDdYRzRnSUNBZ0lDQWdJSFpoY2lCd2JIVm5hVzV6SUQwZ0pDZ25XMlJoZEdFdEp5QXJJSEJzZFdkcGJpQXJJQ2RkSnlrdWJtOTBLQ2RiWkdGMFlTMTVaWFJwTFdKdmVEMWNJaWNnS3lCd2JIVm5hVzVKWkNBcklDZGNJbDBuS1R0Y2JseHVJQ0FnSUNBZ0lDQndiSFZuYVc1ekxtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUNRb2RHaHBjeWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1MGNtbG5aMlZ5U0dGdVpHeGxjaWduWTJ4dmMyVXVlbVl1ZEhKcFoyZGxjaWNzSUZ0ZmRHaHBjMTBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEpsYzJsNlpVeHBjM1JsYm1WeUtHUmxZbTkxYm1ObEtTQjdYRzRnSUNBZ2RtRnlJSFJwYldWeUlEMGdkbTlwWkNBd0xGeHVJQ0FnSUNBZ0lDQWtibTlrWlhNZ1BTQWtLQ2RiWkdGMFlTMXlaWE5wZW1WZEp5azdYRzRnSUNBZ2FXWWdLQ1J1YjJSbGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDUW9kMmx1Wkc5M0tTNXZabVlvSjNKbGMybDZaUzU2Wmk1MGNtbG5aMlZ5SnlrdWIyNG9KM0psYzJsNlpTNTZaaTUwY21sbloyVnlKeXdnWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hScGJXVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLSFJwYldWeUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhScGJXVnlJRDBnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlBb0tTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JVTExZEdGMGFXOXVUMkp6WlhKMlpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZabUZzYkdKaFkyc2dabTl5SUVsRklEbGNiaUFnSUNBZ0lDQWdJQ0FnSUNSdWIyUmxjeTVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNTBjbWxuWjJWeVNHRnVaR3hsY2lnbmNtVnphWHBsYldVdWVtWXVkSEpwWjJkbGNpY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDOHZkSEpwWjJkbGNpQmhiR3dnYkdsemRHVnVhVzVuSUdWc1pXMWxiblJ6SUdGdVpDQnphV2R1WVd3Z1lTQnlaWE5wZW1VZ1pYWmxiblJjYmlBZ0lDQWdJQ0FnSUNBa2JtOWtaWE11WVhSMGNpZ25aR0YwWVMxbGRtVnVkSE1uTENCY0luSmxjMmw2WlZ3aUtUdGNiaUFnSUNBZ0lDQWdmU3dnWkdWaWIzVnVZMlVnZkh3Z01UQXBPeUF2TDJSbFptRjFiSFFnZEdsdFpTQjBieUJsYldsMElISmxjMmw2WlNCbGRtVnVkRnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYzJOeWIyeHNUR2x6ZEdWdVpYSW9aR1ZpYjNWdVkyVXBJSHRjYmlBZ0lDQjJZWElnZEdsdFpYSWdQU0IyYjJsa0lEQXNYRzRnSUNBZ0lDQWdJQ1J1YjJSbGN5QTlJQ1FvSjF0a1lYUmhMWE5qY205c2JGMG5LVHRjYmlBZ0lDQnBaaUFvSkc1dlpHVnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdKQ2gzYVc1a2IzY3BMbTltWmlnbmMyTnliMnhzTG5wbUxuUnlhV2RuWlhJbktTNXZiaWduYzJOeWIyeHNMbnBtTG5SeWFXZG5aWEluTENCbWRXNWpkR2x2YmlBb1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHbHRaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdsdFpYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHbHRaWElnUFNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUlDZ3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doVFhWMFlYUnBiMjVQWW5ObGNuWmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeTltWVd4c1ltRmpheUJtYjNJZ1NVVWdPVnh1SUNBZ0lDQWdJQ0FnSUNBZ0pHNXZaR1Z6TG1WaFkyZ29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXBMblJ5YVdkblpYSklZVzVrYkdWeUtDZHpZM0p2Ykd4dFpTNTZaaTUwY21sbloyVnlKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdMeTkwY21sbloyVnlJR0ZzYkNCc2FYTjBaVzVwYm1jZ1pXeGxiV1Z1ZEhNZ1lXNWtJSE5wWjI1aGJDQmhJSE5qY205c2JDQmxkbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDUnViMlJsY3k1aGRIUnlLQ2RrWVhSaExXVjJaVzUwY3ljc0lGd2ljMk55YjJ4c1hDSXBPMXh1SUNBZ0lDQWdJQ0I5TENCa1pXSnZkVzVqWlNCOGZDQXhNQ2s3SUM4dlpHVm1ZWFZzZENCMGFXMWxJSFJ2SUdWdGFYUWdjMk55YjJ4c0lHVjJaVzUwWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCdGRYUmhkR1ZNYVhOMFpXNWxjaWhrWldKdmRXNWpaU2tnZTF4dUlDQWdJSFpoY2lBa2JtOWtaWE1nUFNBa0tDZGJaR0YwWVMxdGRYUmhkR1ZkSnlrN1hHNGdJQ0FnYVdZZ0tDUnViMlJsY3k1c1pXNW5kR2dnSmlZZ1RYVjBZWFJwYjI1UFluTmxjblpsY2lrZ2UxeHVJQ0FnSUNBZ0x5OTBjbWxuWjJWeUlHRnNiQ0JzYVhOMFpXNXBibWNnWld4bGJXVnVkSE1nWVc1a0lITnBaMjVoYkNCaElHMTFkR0YwWlNCbGRtVnVkRnh1SUNBZ0lDQWdMeTl1YnlCSlJTQTVJRzl5SURFd1hHNGdJQ0FnSUNBa2JtOWtaWE11WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNRb2RHaHBjeWt1ZEhKcFoyZGxja2hoYm1Sc1pYSW9KMjExZEdGMFpXMWxMbnBtTG5SeWFXZG5aWEluS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHVjJaVzUwYzB4cGMzUmxibVZ5S0NrZ2UxeHVJQ0FnSUdsbUlDZ2hUWFYwWVhScGIyNVBZbk5sY25abGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYm05a1pYTWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2RiWkdGMFlTMXlaWE5wZW1WZExDQmJaR0YwWVMxelkzSnZiR3hkTENCYlpHRjBZUzF0ZFhSaGRHVmRKeWs3WEc1Y2JpQWdJQ0F2TDJWc1pXMWxiblFnWTJGc2JHSmhZMnRjYmlBZ0lDQjJZWElnYkdsemRHVnVhVzVuUld4bGJXVnVkSE5OZFhSaGRHbHZiaUE5SUdaMWJtTjBhVzl1SUNodGRYUmhkR2x2YmxKbFkyOXlaSE5NYVhOMEtTQjdYRzRnSUNBZ0lDQjJZWElnSkhSaGNtZGxkQ0E5SUNRb2JYVjBZWFJwYjI1U1pXTnZjbVJ6VEdsemRGc3dYUzUwWVhKblpYUXBPMXh1WEc0Z0lDQWdJQ0F2TDNSeWFXZG5aWElnZEdobElHVjJaVzUwSUdoaGJtUnNaWElnWm05eUlIUm9aU0JsYkdWdFpXNTBJR1JsY0dWdVpHbHVaeUJ2YmlCMGVYQmxYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tHMTFkR0YwYVc5dVVtVmpiM0prYzB4cGMzUmJNRjB1ZEhsd1pTa2dlMXh1WEc0Z0lDQWdJQ0FnSUdOaGMyVWdYQ0poZEhSeWFXSjFkR1Z6WENJNlhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NSMFlYSm5aWFF1WVhSMGNpaGNJbVJoZEdFdFpYWmxiblJ6WENJcElEMDlQU0JjSW5OamNtOXNiRndpSUNZbUlHMTFkR0YwYVc5dVVtVmpiM0prYzB4cGMzUmJNRjB1WVhSMGNtbGlkWFJsVG1GdFpTQTlQVDBnWENKa1lYUmhMV1YyWlc1MGMxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtkR0Z5WjJWMExuUnlhV2RuWlhKSVlXNWtiR1Z5S0NkelkzSnZiR3h0WlM1NlppNTBjbWxuWjJWeUp5d2dXeVIwWVhKblpYUXNJSGRwYm1SdmR5NXdZV2RsV1U5bVpuTmxkRjBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0pIUmhjbWRsZEM1aGRIUnlLRndpWkdGMFlTMWxkbVZ1ZEhOY0lpa2dQVDA5SUZ3aWNtVnphWHBsWENJZ0ppWWdiWFYwWVhScGIyNVNaV052Y21SelRHbHpkRnN3WFM1aGRIUnlhV0oxZEdWT1lXMWxJRDA5UFNCY0ltUmhkR0V0WlhabGJuUnpYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1IwWVhKblpYUXVkSEpwWjJkbGNraGhibVJzWlhJb0ozSmxjMmw2WlcxbExucG1MblJ5YVdkblpYSW5MQ0JiSkhSaGNtZGxkRjBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JYVjBZWFJwYjI1U1pXTnZjbVJ6VEdsemRGc3dYUzVoZEhSeWFXSjFkR1ZPWVcxbElEMDlQU0JjSW5OMGVXeGxYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1IwWVhKblpYUXVZMnh2YzJWemRDaGNJbHRrWVhSaExXMTFkR0YwWlYxY0lpa3VZWFIwY2loY0ltUmhkR0V0WlhabGJuUnpYQ0lzSUZ3aWJYVjBZWFJsWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSkhSaGNtZGxkQzVqYkc5elpYTjBLRndpVzJSaGRHRXRiWFYwWVhSbFhWd2lLUzUwY21sbloyVnlTR0Z1Wkd4bGNpZ25iWFYwWVhSbGJXVXVlbVl1ZEhKcFoyZGxjaWNzSUZza2RHRnlaMlYwTG1Oc2IzTmxjM1FvWENKYlpHRjBZUzF0ZFhSaGRHVmRYQ0lwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0FnSUdOaGMyVWdYQ0pqYUdsc1pFeHBjM1JjSWpwY2JpQWdJQ0FnSUNBZ0lDQWtkR0Z5WjJWMExtTnNiM05sYzNRb1hDSmJaR0YwWVMxdGRYUmhkR1ZkWENJcExtRjBkSElvWENKa1lYUmhMV1YyWlc1MGMxd2lMQ0JjSW0xMWRHRjBaVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWtkR0Z5WjJWMExtTnNiM05sYzNRb1hDSmJaR0YwWVMxdGRYUmhkR1ZkWENJcExuUnlhV2RuWlhKSVlXNWtiR1Z5S0NkdGRYUmhkR1Z0WlM1NlppNTBjbWxuWjJWeUp5d2dXeVIwWVhKblpYUXVZMnh2YzJWemRDaGNJbHRrWVhSaExXMTFkR0YwWlYxY0lpbGRLVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnTHk5dWIzUm9hVzVuWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2xtSUNodWIyUmxjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQzh2Wm05eUlHVmhZMmdnWld4bGJXVnVkQ0IwYUdGMElHNWxaV1J6SUhSdklHeHBjM1JsYmlCbWIzSWdjbVZ6YVhwcGJtY3NJSE5qY205c2JHbHVaeXdnYjNJZ2JYVjBZWFJwYjI0Z1lXUmtJR0VnYzJsdVoyeGxJRzlpYzJWeWRtVnlYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThQU0J1YjJSbGN5NXNaVzVuZEdnZ0xTQXhPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblJQWW5ObGNuWmxjaUE5SUc1bGR5Qk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUtHeHBjM1JsYm1sdVowVnNaVzFsYm5SelRYVjBZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MFQySnpaWEoyWlhJdWIySnpaWEoyWlNodWIyUmxjMXRwWFN3Z2V5QmhkSFJ5YVdKMWRHVnpPaUIwY25WbExDQmphR2xzWkV4cGMzUTZJSFJ5ZFdVc0lHTm9ZWEpoWTNSbGNrUmhkR0U2SUdaaGJITmxMQ0J6ZFdKMGNtVmxPaUIwY25WbExDQmhkSFJ5YVdKMWRHVkdhV3gwWlhJNklGdGNJbVJoZEdFdFpYWmxiblJ6WENJc0lGd2ljM1I1YkdWY0lsMGdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk4Z0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNWNiaUFnTHk4Z1cxQklYVnh1SUNBdkx5QkdiM1Z1WkdGMGFXOXVMa05vWldOclYyRjBZMmhsY25NZ1BTQmphR1ZqYTFkaGRHTm9aWEp6TzF4dUlDQkdiM1Z1WkdGMGFXOXVMa2xJWldGeVdXOTFJRDBnWTJobFkydE1hWE4wWlc1bGNuTTdYRzRnSUM4dklFWnZkVzVrWVhScGIyNHVTVk5sWlZsdmRTQTlJSE5qY205c2JFeHBjM1JsYm1WeU8xeHVJQ0F2THlCR2IzVnVaR0YwYVc5dUxrbEdaV1ZzV1c5MUlEMGdZMnh2YzJWdFpVeHBjM1JsYm1WeU8xeHVmU2hxVVhWbGNua3BPMXh1WEc0dkx5Qm1kVzVqZEdsdmJpQmtiMjFOZFhSaGRHbHZiazlpYzJWeWRtVnlLR1JsWW05MWJtTmxLU0I3WEc0dkx5QWdJQzh2SUNFaElTQlVhR2x6SUdseklHTnZiV2x1WnlCemIyOXVJR0Z1WkNCdVpXVmtjeUJ0YjNKbElIZHZjbXM3SUc1dmRDQmhZM1JwZG1VZ0lDRWhJU0F2TDF4dUx5OGdJQ0IyWVhJZ2RHbHRaWElzWEc0dkx5QWdJRzV2WkdWeklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XMlJoZEdFdGJYVjBZWFJsWFNjcE8xeHVMeThnSUNBdkwxeHVMeThnSUNCcFppQW9ibTlrWlhNdWJHVnVaM1JvS1NCN1hHNHZMeUFnSUNBZ0x5OGdkbUZ5SUUxMWRHRjBhVzl1VDJKelpYSjJaWElnUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1THk4Z0lDQWdJQzh2SUNBZ2RtRnlJSEJ5WldacGVHVnpJRDBnV3lkWFpXSkxhWFFuTENBblRXOTZKeXdnSjA4bkxDQW5UWE1uTENBbkoxMDdYRzR2THlBZ0lDQWdMeThnSUNCbWIzSWdLSFpoY2lCcFBUQTdJR2tnUENCd2NtVm1hWGhsY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1THk4Z0lDQWdJQzh2SUNBZ0lDQnBaaUFvY0hKbFptbDRaWE5iYVYwZ0t5QW5UWFYwWVhScGIyNVBZbk5sY25abGNpY2dhVzRnZDJsdVpHOTNLU0I3WEc0dkx5QWdJQ0FnTHk4Z0lDQWdJQ0FnY21WMGRYSnVJSGRwYm1SdmQxdHdjbVZtYVhobGMxdHBYU0FySUNkTmRYUmhkR2x2Yms5aWMyVnlkbVZ5SjEwN1hHNHZMeUFnSUNBZ0x5OGdJQ0FnSUgxY2JpOHZJQ0FnSUNBdkx5QWdJSDFjYmk4dklDQWdJQ0F2THlBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmk4dklDQWdJQ0F2THlCOUtDa3BPMXh1THk5Y2JpOHZYRzR2THlBZ0lDQWdMeTltYjNJZ2RHaGxJR0p2Wkhrc0lIZGxJRzVsWldRZ2RHOGdiR2x6ZEdWdUlHWnZjaUJoYkd3Z1kyaGhibWRsY3lCbFptWmxZM1JwYm1jZ2RHaGxJSE4wZVd4bElHRnVaQ0JqYkdGemN5QmhkSFJ5YVdKMWRHVnpYRzR2THlBZ0lDQWdkbUZ5SUdKdlpIbFBZbk5sY25abGNpQTlJRzVsZHlCTmRYUmhkR2x2Yms5aWMyVnlkbVZ5S0dKdlpIbE5kWFJoZEdsdmJpazdYRzR2THlBZ0lDQWdZbTlrZVU5aWMyVnlkbVZ5TG05aWMyVnlkbVVvWkc5amRXMWxiblF1WW05a2VTd2dleUJoZEhSeWFXSjFkR1Z6T2lCMGNuVmxMQ0JqYUdsc1pFeHBjM1E2SUhSeWRXVXNJR05vWVhKaFkzUmxja1JoZEdFNklHWmhiSE5sTENCemRXSjBjbVZsT25SeWRXVXNJR0YwZEhKcFluVjBaVVpwYkhSbGNqcGJYQ0p6ZEhsc1pWd2lMQ0JjSW1Oc1lYTnpYQ0pkZlNrN1hHNHZMMXh1THk5Y2JpOHZJQ0FnSUNBdkwySnZaSGtnWTJGc2JHSmhZMnRjYmk4dklDQWdJQ0JtZFc1amRHbHZiaUJpYjJSNVRYVjBZWFJwYjI0b2JYVjBZWFJsS1NCN1hHNHZMeUFnSUNBZ0lDQXZMM1J5YVdkblpYSWdZV3hzSUd4cGMzUmxibWx1WnlCbGJHVnRaVzUwY3lCaGJtUWdjMmxuYm1Gc0lHRWdiWFYwWVhScGIyNGdaWFpsYm5SY2JpOHZJQ0FnSUNBZ0lHbG1JQ2gwYVcxbGNpa2dleUJqYkdWaGNsUnBiV1Z2ZFhRb2RHbHRaWElwT3lCOVhHNHZMMXh1THk4Z0lDQWdJQ0FnZEdsdFpYSWdQU0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NrZ2UxeHVMeThnSUNBZ0lDQWdJQ0JpYjJSNVQySnpaWEoyWlhJdVpHbHpZMjl1Ym1WamRDZ3BPMXh1THk4Z0lDQWdJQ0FnSUNBa0tDZGJaR0YwWVMxdGRYUmhkR1ZkSnlrdVlYUjBjaWduWkdGMFlTMWxkbVZ1ZEhNbkxGd2liWFYwWVhSbFhDSXBPMXh1THk4Z0lDQWdJQ0FnZlN3Z1pHVmliM1Z1WTJVZ2ZId2dNVFV3S1R0Y2JpOHZJQ0FnSUNCOVhHNHZMeUFnSUgxY2JpOHZJSDBpTENJb1puVnVZM1JwYjI0b0tTQjdJQ1FvWkc5amRXMWxiblFwTG1admRXNWtZWFJwYjI0b0tUc2dmU2dwS1R0Y2JpSXNJanNvWm5WdVkzUnBiMjRvY205dmRDd2dabUZqZEc5eWVTa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVV1WVcxa0tTQjdYRzRnSUNBZ1pHVm1hVzVsS0ZzbmFuRjFaWEo1SjEwc0lHWmhZM1J2Y25rcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJsZUhCdmNuUnpJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm1GamRHOXllU2h5WlhGMWFYSmxLQ2RxY1hWbGNua25LU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY205dmRDNU5iM1JwYjI1VlNTQTlJR1poWTNSdmNua29jbTl2ZEM1cVVYVmxjbmtwTzF4dUlDQjlYRzU5S0hSb2FYTXNJR1oxYm1OMGFXOXVLQ1FwSUh0Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dUx5OGdVRzlzZVdacGJHd2dabTl5SUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpWeHVLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQnBaaUFvSVVSaGRHVXVibTkzS1Z4dUlDQWdJRVJoZEdVdWJtOTNJRDBnWm5WdVkzUnBiMjRvS1NCN0lISmxkSFZ5YmlCdVpYY2dSR0YwWlNncExtZGxkRlJwYldVb0tUc2dmVHRjYmx4dUlDQjJZWElnZG1WdVpHOXljeUE5SUZzbmQyVmlhMmwwSnl3Z0oyMXZlaWRkTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFpsYm1SdmNuTXViR1Z1WjNSb0lDWW1JQ0YzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsT3lBcksya3BJSHRjYmlBZ0lDQWdJSFpoY2lCMmNDQTlJSFpsYm1SdmNuTmJhVjA3WEc0Z0lDQWdJQ0IzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSUQwZ2QybHVaRzkzVzNad0t5ZFNaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VuWFR0Y2JpQWdJQ0FnSUhkcGJtUnZkeTVqWVc1alpXeEJibWx0WVhScGIyNUdjbUZ0WlNBOUlDaDNhVzVrYjNkYmRuQXJKME5oYm1ObGJFRnVhVzFoZEdsdmJrWnlZVzFsSjExY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh4OElIZHBibVJ2ZDF0MmNDc25RMkZ1WTJWc1VtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxKMTBwTzF4dUlDQjlYRzRnSUdsbUlDZ3ZhVkFvWVdSOGFHOXVaWHh2WkNrdUtrOVRJRFl2TG5SbGMzUW9kMmx1Wkc5M0xtNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXBYRzRnSUNBZ2ZId2dJWGRwYm1SdmR5NXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VnZkh3Z0lYZHBibVJ2ZHk1allXNWpaV3hCYm1sdFlYUnBiMjVHY21GdFpTa2dlMXh1SUNBZ0lIWmhjaUJzWVhOMFZHbHRaU0E5SURBN1hHNGdJQ0FnZDJsdVpHOTNMbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNBOUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdWIzY2dQU0JFWVhSbExtNXZkeWdwTzF4dUlDQWdJQ0FnSUNCMllYSWdibVY0ZEZScGJXVWdQU0JOWVhSb0xtMWhlQ2hzWVhOMFZHbHRaU0FySURFMkxDQnViM2NwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncElIc2dZMkZzYkdKaFkyc29iR0Z6ZEZScGJXVWdQU0J1WlhoMFZHbHRaU2s3SUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJVYVcxbElDMGdibTkzS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSGRwYm1SdmR5NWpZVzVqWld4QmJtbHRZWFJwYjI1R2NtRnRaU0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnZlZ4dWZTa29LVHRjYmx4dWRtRnlJR2x1YVhSRGJHRnpjMlZ6SUNBZ1BTQmJKMjExYVMxbGJuUmxjaWNzSUNkdGRXa3RiR1ZoZG1VblhUdGNiblpoY2lCaFkzUnBkbVZEYkdGemMyVnpJRDBnV3lkdGRXa3RaVzUwWlhJdFlXTjBhWFpsSnl3Z0oyMTFhUzFzWldGMlpTMWhZM1JwZG1VblhUdGNibHh1THk4Z1JtbHVaQ0IwYUdVZ2NtbG5hSFFnWENKMGNtRnVjMmwwYVc5dVpXNWtYQ0lnWlhabGJuUWdabTl5SUhSb2FYTWdZbkp2ZDNObGNseHVkbUZ5SUdWdVpFVjJaVzUwSUQwZ0tHWjFibU4wYVc5dUtDa2dlMXh1SUNCMllYSWdkSEpoYm5OcGRHbHZibk1nUFNCN1hHNGdJQ0FnSjNSeVlXNXphWFJwYjI0bk9pQW5kSEpoYm5OcGRHbHZibVZ1WkNjc1hHNGdJQ0FnSjFkbFltdHBkRlJ5WVc1emFYUnBiMjRuT2lBbmQyVmlhMmwwVkhKaGJuTnBkR2x2YmtWdVpDY3NYRzRnSUNBZ0owMXZlbFJ5WVc1emFYUnBiMjRuT2lBbmRISmhibk5wZEdsdmJtVnVaQ2NzWEc0Z0lDQWdKMDlVY21GdWMybDBhVzl1SnpvZ0oyOTBjbUZ1YzJsMGFXOXVaVzVrSjF4dUlDQjlYRzRnSUhaaGNpQmxiR1Z0SUQwZ2QybHVaRzkzTG1SdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVYRzRnSUdadmNpQW9kbUZ5SUhRZ2FXNGdkSEpoYm5OcGRHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWc1pXMHVjM1I1YkdWYmRGMGdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RISmhibk5wZEdsdmJuTmJkRjA3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzUxYkd3N1hHNTlLU2dwTzF4dVhHNW1kVzVqZEdsdmJpQmhibWx0WVhSbEtHbHpTVzRzSUdWc1pXMWxiblFzSUdGdWFXMWhkR2x2Yml3Z1kySXBJSHRjYmlBZ1pXeGxiV1Z1ZENBOUlDUW9aV3hsYldWdWRDa3VaWEVvTUNrN1hHNWNiaUFnYVdZZ0tDRmxiR1Z0Wlc1MExteGxibWQwYUNrZ2NtVjBkWEp1TzF4dVhHNGdJR2xtSUNobGJtUkZkbVZ1ZENBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUdselNXNGdQeUJsYkdWdFpXNTBMbk5vYjNjb0tTQTZJR1ZzWlcxbGJuUXVhR2xrWlNncE8xeHVJQ0FnSUdOaUtDazdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ2RtRnlJR2x1YVhSRGJHRnpjeUE5SUdselNXNGdQeUJwYm1sMFEyeGhjM05sYzFzd1hTQTZJR2x1YVhSRGJHRnpjMlZ6V3pGZE8xeHVJQ0IyWVhJZ1lXTjBhWFpsUTJ4aGMzTWdQU0JwYzBsdUlEOGdZV04wYVhabFEyeGhjM05sYzFzd1hTQTZJR0ZqZEdsMlpVTnNZWE56WlhOYk1WMDdYRzVjYmlBZ0x5OGdVMlYwSUhWd0lIUm9aU0JoYm1sdFlYUnBiMjVjYmlBZ2NtVnpaWFFvS1R0Y2JpQWdaV3hsYldWdWRDNWhaR1JEYkdGemN5aGhibWx0WVhScGIyNHBPMXh1SUNCbGJHVnRaVzUwTG1OemN5Z25kSEpoYm5OcGRHbHZiaWNzSUNkdWIyNWxKeWs3WEc0Z0lISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0JsYkdWdFpXNTBMbUZrWkVOc1lYTnpLR2x1YVhSRGJHRnpjeWs3WEc0Z0lDQWdhV1lnS0dselNXNHBJR1ZzWlcxbGJuUXVjMmh2ZHlncE8xeHVJQ0I5S1R0Y2JseHVJQ0F2THlCVGRHRnlkQ0IwYUdVZ1lXNXBiV0YwYVc5dVhHNGdJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNobWRXNWpkR2x2YmlncElIdGNiaUFnSUNCbGJHVnRaVzUwV3pCZExtOW1abk5sZEZkcFpIUm9PMXh1SUNBZ0lHVnNaVzFsYm5RdVkzTnpLQ2QwY21GdWMybDBhVzl1Snl3Z0p5Y3BPMXh1SUNBZ0lHVnNaVzFsYm5RdVlXUmtRMnhoYzNNb1lXTjBhWFpsUTJ4aGMzTXBPMXh1SUNCOUtUdGNibHh1SUNBdkx5QkRiR1ZoYmlCMWNDQjBhR1VnWVc1cGJXRjBhVzl1SUhkb1pXNGdhWFFnWm1sdWFYTm9aWE5jYmlBZ1pXeGxiV1Z1ZEM1dmJtVW9KM1J5WVc1emFYUnBiMjVsYm1RbkxDQm1hVzVwYzJncE8xeHVYRzRnSUM4dklFaHBaR1Z6SUhSb1pTQmxiR1Z0Wlc1MElDaG1iM0lnYjNWMElHRnVhVzFoZEdsdmJuTXBMQ0J5WlhObGRITWdkR2hsSUdWc1pXMWxiblFzSUdGdVpDQnlkVzV6SUdFZ1kyRnNiR0poWTJ0Y2JpQWdablZ1WTNScGIyNGdabWx1YVhOb0tDa2dlMXh1SUNBZ0lHbG1JQ2doYVhOSmJpa2daV3hsYldWdWRDNW9hV1JsS0NrN1hHNGdJQ0FnY21WelpYUW9LVHRjYmlBZ0lDQnBaaUFvWTJJcElHTmlMbUZ3Y0d4NUtHVnNaVzFsYm5RcE8xeHVJQ0I5WEc1Y2JpQWdMeThnVW1WelpYUnpJSFJ5WVc1emFYUnBiMjV6SUdGdVpDQnlaVzF2ZG1WeklHMXZkR2x2YmkxemNHVmphV1pwWXlCamJHRnpjMlZ6WEc0Z0lHWjFibU4wYVc5dUlISmxjMlYwS0NrZ2UxeHVJQ0FnSUdWc1pXMWxiblJiTUYwdWMzUjViR1V1ZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1SUQwZ01EdGNiaUFnSUNCbGJHVnRaVzUwTG5KbGJXOTJaVU5zWVhOektHbHVhWFJEYkdGemN5QXJJQ2NnSnlBcklHRmpkR2wyWlVOc1lYTnpJQ3NnSnlBbklDc2dZVzVwYldGMGFXOXVLVHRjYmlBZ2ZWeHVmVnh1WEc1MllYSWdUVzkwYVc5dVZVa2dQU0I3WEc0Z0lHRnVhVzFoZEdWSmJqb2dablZ1WTNScGIyNG9aV3hsYldWdWRDd2dZVzVwYldGMGFXOXVMQ0JqWWlrZ2UxeHVJQ0FnSUdGdWFXMWhkR1VvZEhKMVpTd2daV3hsYldWdWRDd2dZVzVwYldGMGFXOXVMQ0JqWWlrN1hHNGdJSDBzWEc1Y2JpQWdZVzVwYldGMFpVOTFkRG9nWm5WdVkzUnBiMjRvWld4bGJXVnVkQ3dnWVc1cGJXRjBhVzl1TENCallpa2dlMXh1SUNBZ0lHRnVhVzFoZEdVb1ptRnNjMlVzSUdWc1pXMWxiblFzSUdGdWFXMWhkR2x2Yml3Z1kySXBPMXh1SUNCOVhHNTlYRzVjYm5KbGRIVnliaUJOYjNScGIyNVZTVHRjYm4wcEtUdGNiaUpkZlE9PVxuIl19
